
test_kit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004830  08004830  00014830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004848  08004848  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004848  08004848  00014848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004850  08004850  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004850  08004850  00014850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004854  08004854  00014854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000128  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000138  20000138  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011670  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021d6  00000000  00000000  000316b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  00033888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000da8  00000000  00000000  00034708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ac2  00000000  00000000  000354b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010577  00000000  00000000  00055f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8cde  00000000  00000000  000664e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012f1c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cd0  00000000  00000000  0012f21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004818 	.word	0x08004818

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004818 	.word	0x08004818

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <button_scan>:
#include "button.h"

unsigned char button_count[8] = {0, 0, 0, 0, 0, 0, 0, 0};
unsigned char spi_button = 0x00;

void button_scan(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2108      	movs	r1, #8
 80004ca:	482a      	ldr	r0, [pc, #168]	; (8000574 <button_scan+0xb4>)
 80004cc:	f001 f9c0 	bl	8001850 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2108      	movs	r1, #8
 80004d4:	4827      	ldr	r0, [pc, #156]	; (8000574 <button_scan+0xb4>)
 80004d6:	f001 f9bb 	bl	8001850 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, &spi_button, 1, 1);
 80004da:	2301      	movs	r3, #1
 80004dc:	2201      	movs	r2, #1
 80004de:	4926      	ldr	r1, [pc, #152]	; (8000578 <button_scan+0xb8>)
 80004e0:	4826      	ldr	r0, [pc, #152]	; (800057c <button_scan+0xbc>)
 80004e2:	f002 f822 	bl	800252a <HAL_SPI_Receive>
	  unsigned char mask = 0x80;
 80004e6:	2380      	movs	r3, #128	; 0x80
 80004e8:	71fb      	strb	r3, [r7, #7]
	  for(int i = 0; i < 8; i++){
 80004ea:	2300      	movs	r3, #0
 80004ec:	603b      	str	r3, [r7, #0]
 80004ee:	e038      	b.n	8000562 <button_scan+0xa2>
		  if(mask > 0x0f){
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	2b0f      	cmp	r3, #15
 80004f4:	d917      	bls.n	8000526 <button_scan+0x66>
			  if(spi_button & mask) button_count[3-i] = 0;
 80004f6:	4b20      	ldr	r3, [pc, #128]	; (8000578 <button_scan+0xb8>)
 80004f8:	781a      	ldrb	r2, [r3, #0]
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	4013      	ands	r3, r2
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	2b00      	cmp	r3, #0
 8000502:	d006      	beq.n	8000512 <button_scan+0x52>
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	f1c3 0303 	rsb	r3, r3, #3
 800050a:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <button_scan+0xc0>)
 800050c:	2100      	movs	r1, #0
 800050e:	54d1      	strb	r1, [r2, r3]
 8000510:	e021      	b.n	8000556 <button_scan+0x96>
			  else button_count[3-i]++;
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	f1c3 0303 	rsb	r3, r3, #3
 8000518:	4a19      	ldr	r2, [pc, #100]	; (8000580 <button_scan+0xc0>)
 800051a:	5cd2      	ldrb	r2, [r2, r3]
 800051c:	3201      	adds	r2, #1
 800051e:	b2d1      	uxtb	r1, r2
 8000520:	4a17      	ldr	r2, [pc, #92]	; (8000580 <button_scan+0xc0>)
 8000522:	54d1      	strb	r1, [r2, r3]
 8000524:	e017      	b.n	8000556 <button_scan+0x96>
		  } else {
			  if(spi_button & mask) button_count[i] = 0;
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <button_scan+0xb8>)
 8000528:	781a      	ldrb	r2, [r3, #0]
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	4013      	ands	r3, r2
 800052e:	b2db      	uxtb	r3, r3
 8000530:	2b00      	cmp	r3, #0
 8000532:	d005      	beq.n	8000540 <button_scan+0x80>
 8000534:	4a12      	ldr	r2, [pc, #72]	; (8000580 <button_scan+0xc0>)
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	4413      	add	r3, r2
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
 800053e:	e00a      	b.n	8000556 <button_scan+0x96>
			  else button_count[i]++;
 8000540:	4a0f      	ldr	r2, [pc, #60]	; (8000580 <button_scan+0xc0>)
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	4413      	add	r3, r2
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	3301      	adds	r3, #1
 800054a:	b2d9      	uxtb	r1, r3
 800054c:	4a0c      	ldr	r2, [pc, #48]	; (8000580 <button_scan+0xc0>)
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	4413      	add	r3, r2
 8000552:	460a      	mov	r2, r1
 8000554:	701a      	strb	r2, [r3, #0]
		  }
		  mask = mask >> 1;
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	085b      	lsrs	r3, r3, #1
 800055a:	71fb      	strb	r3, [r7, #7]
	  for(int i = 0; i < 8; i++){
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	3301      	adds	r3, #1
 8000560:	603b      	str	r3, [r7, #0]
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	2b07      	cmp	r3, #7
 8000566:	ddc3      	ble.n	80004f0 <button_scan+0x30>
	  }
}
 8000568:	bf00      	nop
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40020c00 	.word	0x40020c00
 8000578:	20000034 	.word	0x20000034
 800057c:	20000094 	.word	0x20000094
 8000580:	2000002c 	.word	0x2000002c

08000584 <led7Scan>:

unsigned char led7[4] = {0x00, 0xf1, 0x0e, 0x6a};

unsigned char led7_index = 0;

void led7Scan(){
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8000588:	2200      	movs	r2, #0
 800058a:	2140      	movs	r1, #64	; 0x40
 800058c:	4848      	ldr	r0, [pc, #288]	; (80006b0 <led7Scan+0x12c>)
 800058e:	f001 f95f 	bl	8001850 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, led7 + led7_index, 1, 1);
 8000592:	4b48      	ldr	r3, [pc, #288]	; (80006b4 <led7Scan+0x130>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	461a      	mov	r2, r3
 8000598:	4b47      	ldr	r3, [pc, #284]	; (80006b8 <led7Scan+0x134>)
 800059a:	18d1      	adds	r1, r2, r3
 800059c:	2301      	movs	r3, #1
 800059e:	2201      	movs	r2, #1
 80005a0:	4846      	ldr	r0, [pc, #280]	; (80006bc <led7Scan+0x138>)
 80005a2:	f001 fe86 	bl	80022b2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2140      	movs	r1, #64	; 0x40
 80005aa:	4841      	ldr	r0, [pc, #260]	; (80006b0 <led7Scan+0x12c>)
 80005ac:	f001 f950 	bl	8001850 <HAL_GPIO_WritePin>
	switch(led7_index){
 80005b0:	4b40      	ldr	r3, [pc, #256]	; (80006b4 <led7Scan+0x130>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	d86b      	bhi.n	8000690 <led7Scan+0x10c>
 80005b8:	a201      	add	r2, pc, #4	; (adr r2, 80005c0 <led7Scan+0x3c>)
 80005ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005be:	bf00      	nop
 80005c0:	080005d1 	.word	0x080005d1
 80005c4:	08000601 	.word	0x08000601
 80005c8:	08000631 	.word	0x08000631
 80005cc:	08000661 	.word	0x08000661
	case 0:
		  HAL_GPIO_WritePin(LD_LED1_GPIO_Port, LD_LED1_Pin, 0);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d6:	483a      	ldr	r0, [pc, #232]	; (80006c0 <led7Scan+0x13c>)
 80005d8:	f001 f93a 	bl	8001850 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e2:	4838      	ldr	r0, [pc, #224]	; (80006c4 <led7Scan+0x140>)
 80005e4:	f001 f934 	bl	8001850 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED3_GPIO_Port, LD_LED3_Pin, 1);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2104      	movs	r1, #4
 80005ec:	4834      	ldr	r0, [pc, #208]	; (80006c0 <led7Scan+0x13c>)
 80005ee:	f001 f92f 	bl	8001850 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED4_GPIO_Port, LD_LED4_Pin, 1);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f8:	4831      	ldr	r0, [pc, #196]	; (80006c0 <led7Scan+0x13c>)
 80005fa:	f001 f929 	bl	8001850 <HAL_GPIO_WritePin>
		  break;
 80005fe:	e047      	b.n	8000690 <led7Scan+0x10c>
	case 1:
		  HAL_GPIO_WritePin(LD_LED1_GPIO_Port, LD_LED1_Pin, 1);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000606:	482e      	ldr	r0, [pc, #184]	; (80006c0 <led7Scan+0x13c>)
 8000608:	f001 f922 	bl	8001850 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000612:	482c      	ldr	r0, [pc, #176]	; (80006c4 <led7Scan+0x140>)
 8000614:	f001 f91c 	bl	8001850 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED3_GPIO_Port, LD_LED3_Pin, 1);
 8000618:	2201      	movs	r2, #1
 800061a:	2104      	movs	r1, #4
 800061c:	4828      	ldr	r0, [pc, #160]	; (80006c0 <led7Scan+0x13c>)
 800061e:	f001 f917 	bl	8001850 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED4_GPIO_Port, LD_LED4_Pin, 1);
 8000622:	2201      	movs	r2, #1
 8000624:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000628:	4825      	ldr	r0, [pc, #148]	; (80006c0 <led7Scan+0x13c>)
 800062a:	f001 f911 	bl	8001850 <HAL_GPIO_WritePin>
		  break;
 800062e:	e02f      	b.n	8000690 <led7Scan+0x10c>
	case 2:
		  HAL_GPIO_WritePin(LD_LED1_GPIO_Port, LD_LED1_Pin, 1);
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000636:	4822      	ldr	r0, [pc, #136]	; (80006c0 <led7Scan+0x13c>)
 8000638:	f001 f90a 	bl	8001850 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, 1);
 800063c:	2201      	movs	r2, #1
 800063e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000642:	4820      	ldr	r0, [pc, #128]	; (80006c4 <led7Scan+0x140>)
 8000644:	f001 f904 	bl	8001850 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED3_GPIO_Port, LD_LED3_Pin, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	2104      	movs	r1, #4
 800064c:	481c      	ldr	r0, [pc, #112]	; (80006c0 <led7Scan+0x13c>)
 800064e:	f001 f8ff 	bl	8001850 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED4_GPIO_Port, LD_LED4_Pin, 1);
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000658:	4819      	ldr	r0, [pc, #100]	; (80006c0 <led7Scan+0x13c>)
 800065a:	f001 f8f9 	bl	8001850 <HAL_GPIO_WritePin>
		  break;
 800065e:	e017      	b.n	8000690 <led7Scan+0x10c>
	case 3:
		  HAL_GPIO_WritePin(LD_LED1_GPIO_Port, LD_LED1_Pin, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000666:	4816      	ldr	r0, [pc, #88]	; (80006c0 <led7Scan+0x13c>)
 8000668:	f001 f8f2 	bl	8001850 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, 1);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000672:	4814      	ldr	r0, [pc, #80]	; (80006c4 <led7Scan+0x140>)
 8000674:	f001 f8ec 	bl	8001850 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED3_GPIO_Port, LD_LED3_Pin, 1);
 8000678:	2201      	movs	r2, #1
 800067a:	2104      	movs	r1, #4
 800067c:	4810      	ldr	r0, [pc, #64]	; (80006c0 <led7Scan+0x13c>)
 800067e:	f001 f8e7 	bl	8001850 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED4_GPIO_Port, LD_LED4_Pin, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <led7Scan+0x13c>)
 800068a:	f001 f8e1 	bl	8001850 <HAL_GPIO_WritePin>
		  break;
 800068e:	bf00      	nop
	}

	led7_index = (led7_index + 1)%4;
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <led7Scan+0x130>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	425a      	negs	r2, r3
 8000698:	f003 0303 	and.w	r3, r3, #3
 800069c:	f002 0203 	and.w	r2, r2, #3
 80006a0:	bf58      	it	pl
 80006a2:	4253      	negpl	r3, r2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <led7Scan+0x130>)
 80006a8:	701a      	strb	r2, [r3, #0]
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40021800 	.word	0x40021800
 80006b4:	20000035 	.word	0x20000035
 80006b8:	20000000 	.word	0x20000000
 80006bc:	20000094 	.word	0x20000094
 80006c0:	40020400 	.word	0x40020400
 80006c4:	40021400 	.word	0x40021400

080006c8 <led7Set1Digit>:

void led7Set1Digit(int num, int position){
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
	if(num > 9 || num < 0) return;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b09      	cmp	r3, #9
 80006d6:	dc43      	bgt.n	8000760 <led7Set1Digit+0x98>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	db40      	blt.n	8000760 <led7Set1Digit+0x98>
	unsigned char digit = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	73fb      	strb	r3, [r7, #15]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2b09      	cmp	r3, #9
 80006e6:	d835      	bhi.n	8000754 <led7Set1Digit+0x8c>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <led7Set1Digit+0x28>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000719 	.word	0x08000719
 80006f4:	0800071f 	.word	0x0800071f
 80006f8:	08000725 	.word	0x08000725
 80006fc:	0800072b 	.word	0x0800072b
 8000700:	08000731 	.word	0x08000731
 8000704:	08000737 	.word	0x08000737
 8000708:	0800073d 	.word	0x0800073d
 800070c:	08000743 	.word	0x08000743
 8000710:	08000749 	.word	0x08000749
 8000714:	0800074f 	.word	0x0800074f
	switch(num){
	case 0:
		digit = 0x03;
 8000718:	2303      	movs	r3, #3
 800071a:	73fb      	strb	r3, [r7, #15]
		break;
 800071c:	e01a      	b.n	8000754 <led7Set1Digit+0x8c>
	case 1:
		digit = 0x9e;
 800071e:	239e      	movs	r3, #158	; 0x9e
 8000720:	73fb      	strb	r3, [r7, #15]
		break;
 8000722:	e017      	b.n	8000754 <led7Set1Digit+0x8c>
	case 2:
		digit = 0x25;
 8000724:	2325      	movs	r3, #37	; 0x25
 8000726:	73fb      	strb	r3, [r7, #15]
		break;
 8000728:	e014      	b.n	8000754 <led7Set1Digit+0x8c>
	case 3:
		digit = 0x0d;
 800072a:	230d      	movs	r3, #13
 800072c:	73fb      	strb	r3, [r7, #15]
		break;
 800072e:	e011      	b.n	8000754 <led7Set1Digit+0x8c>
	case 4:
		digit = 0x99;
 8000730:	2399      	movs	r3, #153	; 0x99
 8000732:	73fb      	strb	r3, [r7, #15]
		break;
 8000734:	e00e      	b.n	8000754 <led7Set1Digit+0x8c>
	case 5:
		digit = 0x49;
 8000736:	2349      	movs	r3, #73	; 0x49
 8000738:	73fb      	strb	r3, [r7, #15]
		break;
 800073a:	e00b      	b.n	8000754 <led7Set1Digit+0x8c>
	case 6:
		digit = 0x41;
 800073c:	2341      	movs	r3, #65	; 0x41
 800073e:	73fb      	strb	r3, [r7, #15]
		break;
 8000740:	e008      	b.n	8000754 <led7Set1Digit+0x8c>
	case 7:
		digit = 0x1f;
 8000742:	231f      	movs	r3, #31
 8000744:	73fb      	strb	r3, [r7, #15]
		break;
 8000746:	e005      	b.n	8000754 <led7Set1Digit+0x8c>
	case 8:
		digit = 0x01;
 8000748:	2301      	movs	r3, #1
 800074a:	73fb      	strb	r3, [r7, #15]
		break;
 800074c:	e002      	b.n	8000754 <led7Set1Digit+0x8c>
	case 9:
		digit = 0x09;
 800074e:	2309      	movs	r3, #9
 8000750:	73fb      	strb	r3, [r7, #15]
		break;
 8000752:	bf00      	nop
	}
	led7[position - 1] = digit;
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	3b01      	subs	r3, #1
 8000758:	4904      	ldr	r1, [pc, #16]	; (800076c <led7Set1Digit+0xa4>)
 800075a:	7bfa      	ldrb	r2, [r7, #15]
 800075c:	54ca      	strb	r2, [r1, r3]
 800075e:	e000      	b.n	8000762 <led7Set1Digit+0x9a>
	if(num > 9 || num < 0) return;
 8000760:	bf00      	nop
}
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	20000000 	.word	0x20000000

08000770 <led7Test>:

void led7Test(){
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
	led7[0] = (led7[0] + 1)%10;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <led7Test+0x30>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	1c5a      	adds	r2, r3, #1
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <led7Test+0x34>)
 800077c:	fb83 1302 	smull	r1, r3, r3, r2
 8000780:	1099      	asrs	r1, r3, #2
 8000782:	17d3      	asrs	r3, r2, #31
 8000784:	1ac9      	subs	r1, r1, r3
 8000786:	460b      	mov	r3, r1
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	440b      	add	r3, r1
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	1ad1      	subs	r1, r2, r3
 8000790:	b2ca      	uxtb	r2, r1
 8000792:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <led7Test+0x30>)
 8000794:	701a      	strb	r2, [r3, #0]
//	led7[1] = (led7[1] + 2)%10;
//	led7[2] = (led7[2] + 3)%10;
//	led7[3] = (led7[3] + 4)%10;
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	20000000 	.word	0x20000000
 80007a4:	66666667 	.word	0x66666667

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ac:	f000 fc9e 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b0:	f000 f88a 	bl	80008c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f000 f990 	bl	8000ad8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007b8:	f000 f918 	bl	80009ec <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80007bc:	f000 f962 	bl	8000a84 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80007c0:	f000 f8de 	bl	8000980 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007c4:	4835      	ldr	r0, [pc, #212]	; (800089c <main+0xf4>)
 80007c6:	f002 fc01 	bl	8002fcc <HAL_TIM_Base_Start_IT>
  HAL_SPI_Init(&hspi1);
 80007ca:	4835      	ldr	r0, [pc, #212]	; (80008a0 <main+0xf8>)
 80007cc:	f001 fce8 	bl	80021a0 <HAL_SPI_Init>
  HAL_UART_Receive_IT(&huart1, &temp, 1);
 80007d0:	2201      	movs	r2, #1
 80007d2:	4934      	ldr	r1, [pc, #208]	; (80008a4 <main+0xfc>)
 80007d4:	4834      	ldr	r0, [pc, #208]	; (80008a8 <main+0x100>)
 80007d6:	f003 f90a 	bl	80039ee <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80007da:	2201      	movs	r2, #1
 80007dc:	2108      	movs	r1, #8
 80007de:	4833      	ldr	r0, [pc, #204]	; (80008ac <main+0x104>)
 80007e0:	f001 f836 	bl	8001850 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD_LED1_GPIO_Port, LD_LED1_Pin, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ea:	4831      	ldr	r0, [pc, #196]	; (80008b0 <main+0x108>)
 80007ec:	f001 f830 	bl	8001850 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f6:	482f      	ldr	r0, [pc, #188]	; (80008b4 <main+0x10c>)
 80007f8:	f001 f82a 	bl	8001850 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD_LED3_GPIO_Port, LD_LED3_Pin, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2104      	movs	r1, #4
 8000800:	482b      	ldr	r0, [pc, #172]	; (80008b0 <main+0x108>)
 8000802:	f001 f825 	bl	8001850 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD_LED4_GPIO_Port, LD_LED4_Pin, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800080c:	4828      	ldr	r0, [pc, #160]	; (80008b0 <main+0x108>)
 800080e:	f001 f81f 	bl	8001850 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000812:	2201      	movs	r2, #1
 8000814:	2140      	movs	r1, #64	; 0x40
 8000816:	4828      	ldr	r0, [pc, #160]	; (80008b8 <main+0x110>)
 8000818:	f001 f81a 	bl	8001850 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 800081c:	2201      	movs	r2, #1
 800081e:	2110      	movs	r1, #16
 8000820:	4826      	ldr	r0, [pc, #152]	; (80008bc <main+0x114>)
 8000822:	f001 f815 	bl	8001850 <HAL_GPIO_WritePin>
  led7Set1Digit(9, 1);
 8000826:	2101      	movs	r1, #1
 8000828:	2009      	movs	r0, #9
 800082a:	f7ff ff4d 	bl	80006c8 <led7Set1Digit>
  led7Set1Digit(2, 2);
 800082e:	2102      	movs	r1, #2
 8000830:	2002      	movs	r0, #2
 8000832:	f7ff ff49 	bl	80006c8 <led7Set1Digit>
  led7Set1Digit(3, 3);
 8000836:	2103      	movs	r1, #3
 8000838:	2003      	movs	r0, #3
 800083a:	f7ff ff45 	bl	80006c8 <led7Set1Digit>
  led7Set1Digit(4, 4);
 800083e:	2104      	movs	r1, #4
 8000840:	2004      	movs	r0, #4
 8000842:	f7ff ff41 	bl	80006c8 <led7Set1Digit>
  setTimer1(1000);
 8000846:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800084a:	f000 fba3 	bl	8000f94 <setTimer1>
  setTimer2(50);
 800084e:	2032      	movs	r0, #50	; 0x32
 8000850:	f000 fbb6 	bl	8000fc0 <setTimer2>
  setTimer3(2);
 8000854:	2002      	movs	r0, #2
 8000856:	f000 fbc7 	bl	8000fe8 <setTimer3>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(flag_timer1 == 1){
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <main+0x118>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d111      	bne.n	8000886 <main+0xde>
		  setTimer1(1000);
 8000862:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000866:	f000 fb95 	bl	8000f94 <setTimer1>
//		  HAL_UART_Transmit(&huart1, &led7, 1, 1);
		  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800086a:	2110      	movs	r1, #16
 800086c:	4813      	ldr	r0, [pc, #76]	; (80008bc <main+0x114>)
 800086e:	f001 f808 	bl	8001882 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin);
 8000872:	2120      	movs	r1, #32
 8000874:	4811      	ldr	r0, [pc, #68]	; (80008bc <main+0x114>)
 8000876:	f001 f804 	bl	8001882 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin);
 800087a:	2140      	movs	r1, #64	; 0x40
 800087c:	480f      	ldr	r0, [pc, #60]	; (80008bc <main+0x114>)
 800087e:	f001 f800 	bl	8001882 <HAL_GPIO_TogglePin>
		  led7Test();
 8000882:	f7ff ff75 	bl	8000770 <led7Test>
	  }

	  if(flag_timer2){
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <main+0x11c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d0e5      	beq.n	800085a <main+0xb2>
		  button_scan();
 800088e:	f7ff fe17 	bl	80004c0 <button_scan>
		  setTimer2(50);
 8000892:	2032      	movs	r0, #50	; 0x32
 8000894:	f000 fb94 	bl	8000fc0 <setTimer2>
	  if(flag_timer1 == 1){
 8000898:	e7df      	b.n	800085a <main+0xb2>
 800089a:	bf00      	nop
 800089c:	200000ec 	.word	0x200000ec
 80008a0:	20000094 	.word	0x20000094
 80008a4:	20000036 	.word	0x20000036
 80008a8:	20000050 	.word	0x20000050
 80008ac:	40020c00 	.word	0x40020c00
 80008b0:	40020400 	.word	0x40020400
 80008b4:	40021400 	.word	0x40021400
 80008b8:	40021800 	.word	0x40021800
 80008bc:	40021000 	.word	0x40021000
 80008c0:	20000038 	.word	0x20000038
 80008c4:	2000003c 	.word	0x2000003c

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b094      	sub	sp, #80	; 0x50
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0320 	add.w	r3, r7, #32
 80008d2:	2230      	movs	r2, #48	; 0x30
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f003 ff96 	bl	8004808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <SystemClock_Config+0xb0>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	4a20      	ldr	r2, [pc, #128]	; (8000978 <SystemClock_Config+0xb0>)
 80008f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fa:	6413      	str	r3, [r2, #64]	; 0x40
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <SystemClock_Config+0xb0>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <SystemClock_Config+0xb4>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a1a      	ldr	r2, [pc, #104]	; (800097c <SystemClock_Config+0xb4>)
 8000912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <SystemClock_Config+0xb4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000928:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800092e:	2300      	movs	r3, #0
 8000930:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000932:	f107 0320 	add.w	r3, r7, #32
 8000936:	4618      	mov	r0, r3
 8000938:	f000 ffbe 	bl	80018b8 <HAL_RCC_OscConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000942:	f000 f9d9 	bl	8000cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000946:	230f      	movs	r3, #15
 8000948:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800094a:	2301      	movs	r3, #1
 800094c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f001 fa21 	bl	8001da8 <HAL_RCC_ClockConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800096c:	f000 f9c4 	bl	8000cf8 <Error_Handler>
  }
}
 8000970:	bf00      	nop
 8000972:	3750      	adds	r7, #80	; 0x50
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800
 800097c:	40007000 	.word	0x40007000

08000980 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_SPI1_Init+0x64>)
 8000986:	4a18      	ldr	r2, [pc, #96]	; (80009e8 <MX_SPI1_Init+0x68>)
 8000988:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_SPI1_Init+0x64>)
 800098c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000990:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_SPI1_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_SPI1_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_SPI1_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_SPI1_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_SPI1_Init+0x64>)
 80009ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_SPI1_Init+0x64>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <MX_SPI1_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_SPI1_Init+0x64>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <MX_SPI1_Init+0x64>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_SPI1_Init+0x64>)
 80009cc:	220a      	movs	r2, #10
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_SPI1_Init+0x64>)
 80009d2:	f001 fbe5 	bl	80021a0 <HAL_SPI_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009dc:	f000 f98c 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000094 	.word	0x20000094
 80009e8:	40013000 	.word	0x40013000

080009ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a00:	463b      	mov	r3, r7
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <MX_TIM2_Init+0x94>)
 8000a0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <MX_TIM2_Init+0x94>)
 8000a12:	f240 321f 	movw	r2, #799	; 0x31f
 8000a16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MX_TIM2_Init+0x94>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_TIM2_Init+0x94>)
 8000a20:	2209      	movs	r2, #9
 8000a22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_TIM2_Init+0x94>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_TIM2_Init+0x94>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a30:	4813      	ldr	r0, [pc, #76]	; (8000a80 <MX_TIM2_Init+0x94>)
 8000a32:	f002 fa7b 	bl	8002f2c <HAL_TIM_Base_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a3c:	f000 f95c 	bl	8000cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480c      	ldr	r0, [pc, #48]	; (8000a80 <MX_TIM2_Init+0x94>)
 8000a4e:	f002 fc35 	bl	80032bc <HAL_TIM_ConfigClockSource>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a58:	f000 f94e 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_TIM2_Init+0x94>)
 8000a6a:	f002 fe51 	bl	8003710 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a74:	f000 f940 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200000ec 	.word	0x200000ec

08000a84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <MX_USART1_UART_Init+0x50>)
 8000a8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000abc:	f002 feb8 	bl	8003830 <HAL_UART_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ac6:	f000 f917 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000050 	.word	0x20000050
 8000ad4:	40011000 	.word	0x40011000

08000ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08c      	sub	sp, #48	; 0x30
 8000adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
 8000af2:	4b63      	ldr	r3, [pc, #396]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a62      	ldr	r2, [pc, #392]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000af8:	f043 0310 	orr.w	r3, r3, #16
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b60      	ldr	r3, [pc, #384]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0310 	and.w	r3, r3, #16
 8000b06:	61bb      	str	r3, [r7, #24]
 8000b08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	4b5c      	ldr	r3, [pc, #368]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a5b      	ldr	r2, [pc, #364]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b59      	ldr	r3, [pc, #356]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b55      	ldr	r3, [pc, #340]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a54      	ldr	r2, [pc, #336]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b52      	ldr	r3, [pc, #328]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b4e      	ldr	r3, [pc, #312]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a4d      	ldr	r2, [pc, #308]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000b4c:	f043 0320 	orr.w	r3, r3, #32
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b4b      	ldr	r3, [pc, #300]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0320 	and.w	r3, r3, #32
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	4b47      	ldr	r3, [pc, #284]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a46      	ldr	r2, [pc, #280]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b44      	ldr	r3, [pc, #272]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b40      	ldr	r3, [pc, #256]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a3f      	ldr	r2, [pc, #252]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b3d      	ldr	r3, [pc, #244]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	4b39      	ldr	r3, [pc, #228]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a38      	ldr	r2, [pc, #224]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000ba0:	f043 0308 	orr.w	r3, r3, #8
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b36      	ldr	r3, [pc, #216]	; (8000c80 <MX_GPIO_Init+0x1a8>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0308 	and.w	r3, r3, #8
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2170      	movs	r1, #112	; 0x70
 8000bb6:	4833      	ldr	r0, [pc, #204]	; (8000c84 <MX_GPIO_Init+0x1ac>)
 8000bb8:	f000 fe4a 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_LED3_Pin|LD_LED1_Pin|LD_LED4_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f640 4104 	movw	r1, #3076	; 0xc04
 8000bc2:	4831      	ldr	r0, [pc, #196]	; (8000c88 <MX_GPIO_Init+0x1b0>)
 8000bc4:	f000 fe44 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bce:	482f      	ldr	r0, [pc, #188]	; (8000c8c <MX_GPIO_Init+0x1b4>)
 8000bd0:	f000 fe3e 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2140      	movs	r1, #64	; 0x40
 8000bd8:	482d      	ldr	r0, [pc, #180]	; (8000c90 <MX_GPIO_Init+0x1b8>)
 8000bda:	f000 fe39 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BTN_LOAD_Pin|LD_COLON_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2148      	movs	r1, #72	; 0x48
 8000be2:	482c      	ldr	r0, [pc, #176]	; (8000c94 <MX_GPIO_Init+0x1bc>)
 8000be4:	f000 fe34 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin OUTPUT_Y0_Pin OUTPUT_Y1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000be8:	2370      	movs	r3, #112	; 0x70
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4821      	ldr	r0, [pc, #132]	; (8000c84 <MX_GPIO_Init+0x1ac>)
 8000c00:	f000 fc8a 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_LED3_Pin LD_LED1_Pin LD_LED4_Pin */
  GPIO_InitStruct.Pin = LD_LED3_Pin|LD_LED1_Pin|LD_LED4_Pin;
 8000c04:	f640 4304 	movw	r3, #3076	; 0xc04
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	481a      	ldr	r0, [pc, #104]	; (8000c88 <MX_GPIO_Init+0x1b0>)
 8000c1e:	f000 fc7b 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_LED2_Pin */
  GPIO_InitStruct.Pin = LD_LED2_Pin;
 8000c22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LED2_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4814      	ldr	r0, [pc, #80]	; (8000c8c <MX_GPIO_Init+0x1b4>)
 8000c3c:	f000 fc6c 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_LATCH_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000c40:	2340      	movs	r3, #64	; 0x40
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	480e      	ldr	r0, [pc, #56]	; (8000c90 <MX_GPIO_Init+0x1b8>)
 8000c58:	f000 fc5e 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_LOAD_Pin LD_COLON_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin|LD_COLON_Pin;
 8000c5c:	2348      	movs	r3, #72	; 0x48
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	4619      	mov	r1, r3
 8000c72:	4808      	ldr	r0, [pc, #32]	; (8000c94 <MX_GPIO_Init+0x1bc>)
 8000c74:	f000 fc50 	bl	8001518 <HAL_GPIO_Init>

}
 8000c78:	bf00      	nop
 8000c7a:	3730      	adds	r7, #48	; 0x30
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40020400 	.word	0x40020400
 8000c8c:	40021400 	.word	0x40021400
 8000c90:	40021800 	.word	0x40021800
 8000c94:	40020c00 	.word	0x40020c00

08000c98 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca8:	d103      	bne.n	8000cb2 <HAL_TIM_PeriodElapsedCallback+0x1a>
		timerRun();
 8000caa:	f000 f9b1 	bl	8001010 <timerRun>
		led7Scan();
 8000cae:	f7ff fc69 	bl	8000584 <led7Scan>
	}
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a08      	ldr	r2, [pc, #32]	; (8000cec <HAL_UART_RxCpltCallback+0x30>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d10a      	bne.n	8000ce4 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart1, &temp, 1, 50) ;
 8000cce:	2332      	movs	r3, #50	; 0x32
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	4907      	ldr	r1, [pc, #28]	; (8000cf0 <HAL_UART_RxCpltCallback+0x34>)
 8000cd4:	4807      	ldr	r0, [pc, #28]	; (8000cf4 <HAL_UART_RxCpltCallback+0x38>)
 8000cd6:	f002 fdf8 	bl	80038ca <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &temp, 1);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4904      	ldr	r1, [pc, #16]	; (8000cf0 <HAL_UART_RxCpltCallback+0x34>)
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <HAL_UART_RxCpltCallback+0x38>)
 8000ce0:	f002 fe85 	bl	80039ee <HAL_UART_Receive_IT>
	}
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40011000 	.word	0x40011000
 8000cf0:	20000036 	.word	0x20000036
 8000cf4:	20000050 	.word	0x20000050

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <Error_Handler+0x8>
	...

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800

08000d54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a1d      	ldr	r2, [pc, #116]	; (8000de8 <HAL_SPI_MspInit+0x94>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d133      	bne.n	8000dde <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <HAL_SPI_MspInit+0x98>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	4a1b      	ldr	r2, [pc, #108]	; (8000dec <HAL_SPI_MspInit+0x98>)
 8000d80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d84:	6453      	str	r3, [r2, #68]	; 0x44
 8000d86:	4b19      	ldr	r3, [pc, #100]	; (8000dec <HAL_SPI_MspInit+0x98>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_SPI_MspInit+0x98>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a14      	ldr	r2, [pc, #80]	; (8000dec <HAL_SPI_MspInit+0x98>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_SPI_MspInit+0x98>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000dae:	2338      	movs	r3, #56	; 0x38
 8000db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4809      	ldr	r0, [pc, #36]	; (8000df0 <HAL_SPI_MspInit+0x9c>)
 8000dca:	f000 fba5 	bl	8001518 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2023      	movs	r0, #35	; 0x23
 8000dd4:	f000 fad7 	bl	8001386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000dd8:	2023      	movs	r0, #35	; 0x23
 8000dda:	f000 faf0 	bl	80013be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	; 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40013000 	.word	0x40013000
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020400 	.word	0x40020400

08000df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e04:	d115      	bne.n	8000e32 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_TIM_Base_MspInit+0x48>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <HAL_TIM_Base_MspInit+0x48>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_TIM_Base_MspInit+0x48>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	201c      	movs	r0, #28
 8000e28:	f000 faad 	bl	8001386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e2c:	201c      	movs	r0, #28
 8000e2e:	f000 fac6 	bl	80013be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800

08000e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a1d      	ldr	r2, [pc, #116]	; (8000ed4 <HAL_UART_MspInit+0x94>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d134      	bne.n	8000ecc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <HAL_UART_MspInit+0x98>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	4a1b      	ldr	r2, [pc, #108]	; (8000ed8 <HAL_UART_MspInit+0x98>)
 8000e6c:	f043 0310 	orr.w	r3, r3, #16
 8000e70:	6453      	str	r3, [r2, #68]	; 0x44
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_UART_MspInit+0x98>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	f003 0310 	and.w	r3, r3, #16
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_UART_MspInit+0x98>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <HAL_UART_MspInit+0x98>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_UART_MspInit+0x98>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eac:	2307      	movs	r3, #7
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4809      	ldr	r0, [pc, #36]	; (8000edc <HAL_UART_MspInit+0x9c>)
 8000eb8:	f000 fb2e 	bl	8001518 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2025      	movs	r0, #37	; 0x25
 8000ec2:	f000 fa60 	bl	8001386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ec6:	2025      	movs	r0, #37	; 0x25
 8000ec8:	f000 fa79 	bl	80013be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ecc:	bf00      	nop
 8000ece:	3728      	adds	r7, #40	; 0x28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40011000 	.word	0x40011000
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020000 	.word	0x40020000

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler+0x4>

08000eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <MemManage_Handler+0x4>

08000ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <UsageFault_Handler+0x4>

08000efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2c:	f000 f930 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <TIM2_IRQHandler+0x10>)
 8000f3a:	f002 f8b7 	bl	80030ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200000ec 	.word	0x200000ec

08000f48 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <SPI1_IRQHandler+0x10>)
 8000f4e:	f001 fd9f 	bl	8002a90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000094 	.word	0x20000094

08000f5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <USART1_IRQHandler+0x10>)
 8000f62:	f002 fd75 	bl	8003a50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000050 	.word	0x20000050

08000f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <SystemInit+0x20>)
 8000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <SystemInit+0x20>)
 8000f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <setTimer1>:
#include "timer.h"

int flag_timer1 = 0, flag_timer2 = 0, flag_timer3 = 0;
int timer1_counter = 0, timer2_counter = 0, timer3_counter = 0;

void setTimer1(int duration){
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	timer1_counter = 1000;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <setTimer1+0x24>)
 8000f9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fa2:	601a      	str	r2, [r3, #0]
	flag_timer1 = 0;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <setTimer1+0x28>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000044 	.word	0x20000044
 8000fbc:	20000038 	.word	0x20000038

08000fc0 <setTimer2>:

void setTimer2(int duration){
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8000fc8:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <setTimer2+0x20>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
	flag_timer2 = 0;
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <setTimer2+0x24>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	20000048 	.word	0x20000048
 8000fe4:	2000003c 	.word	0x2000003c

08000fe8 <setTimer3>:

void setTimer3(int duration){
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 8000ff0:	4a05      	ldr	r2, [pc, #20]	; (8001008 <setTimer3+0x20>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
	flag_timer3 = 0;
 8000ff6:	4b05      	ldr	r3, [pc, #20]	; (800100c <setTimer3+0x24>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	2000004c 	.word	0x2000004c
 800100c:	20000040 	.word	0x20000040

08001010 <timerRun>:


void timerRun(){
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <timerRun+0x70>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	dd0b      	ble.n	8001034 <timerRun+0x24>
		timer1_counter--;
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <timerRun+0x70>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3b01      	subs	r3, #1
 8001022:	4a17      	ldr	r2, [pc, #92]	; (8001080 <timerRun+0x70>)
 8001024:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) flag_timer1 = 1;
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <timerRun+0x70>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <timerRun+0x24>
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <timerRun+0x74>)
 8001030:	2201      	movs	r2, #1
 8001032:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0){
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <timerRun+0x78>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	dd0b      	ble.n	8001054 <timerRun+0x44>
		timer2_counter--;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <timerRun+0x78>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3b01      	subs	r3, #1
 8001042:	4a11      	ldr	r2, [pc, #68]	; (8001088 <timerRun+0x78>)
 8001044:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) flag_timer2 = 1;
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <timerRun+0x78>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d102      	bne.n	8001054 <timerRun+0x44>
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <timerRun+0x7c>)
 8001050:	2201      	movs	r2, #1
 8001052:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter > 0){
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <timerRun+0x80>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	dd0b      	ble.n	8001074 <timerRun+0x64>
		timer3_counter--;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <timerRun+0x80>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3b01      	subs	r3, #1
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <timerRun+0x80>)
 8001064:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) flag_timer3 = 1;
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <timerRun+0x80>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d102      	bne.n	8001074 <timerRun+0x64>
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <timerRun+0x84>)
 8001070:	2201      	movs	r2, #1
 8001072:	601a      	str	r2, [r3, #0]
	}
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000044 	.word	0x20000044
 8001084:	20000038 	.word	0x20000038
 8001088:	20000048 	.word	0x20000048
 800108c:	2000003c 	.word	0x2000003c
 8001090:	2000004c 	.word	0x2000004c
 8001094:	20000040 	.word	0x20000040

08001098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800109e:	490e      	ldr	r1, [pc, #56]	; (80010d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010a0:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a4:	e002      	b.n	80010ac <LoopCopyDataInit>

080010a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010aa:	3304      	adds	r3, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b0:	d3f9      	bcc.n	80010a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b2:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010b4:	4c0b      	ldr	r4, [pc, #44]	; (80010e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b8:	e001      	b.n	80010be <LoopFillZerobss>

080010ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010bc:	3204      	adds	r2, #4

080010be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c0:	d3fb      	bcc.n	80010ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010c2:	f7ff ff55 	bl	8000f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010c6:	f003 fb7b 	bl	80047c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ca:	f7ff fb6d 	bl	80007a8 <main>
  bx  lr    
 80010ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010dc:	08004858 	.word	0x08004858
  ldr r2, =_sbss
 80010e0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010e4:	20000138 	.word	0x20000138

080010e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC_IRQHandler>
	...

080010ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f0:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0d      	ldr	r2, [pc, #52]	; (800112c <HAL_Init+0x40>)
 80010f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0a      	ldr	r2, [pc, #40]	; (800112c <HAL_Init+0x40>)
 8001102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001106:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a07      	ldr	r2, [pc, #28]	; (800112c <HAL_Init+0x40>)
 800110e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001112:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001114:	2003      	movs	r0, #3
 8001116:	f000 f92b 	bl	8001370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111a:	200f      	movs	r0, #15
 800111c:	f000 f808 	bl	8001130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001120:	f7ff fdf0 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023c00 	.word	0x40023c00

08001130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x54>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_InitTick+0x58>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001146:	fbb3 f3f1 	udiv	r3, r3, r1
 800114a:	fbb2 f3f3 	udiv	r3, r2, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f943 	bl	80013da <HAL_SYSTICK_Config>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e00e      	b.n	800117c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b0f      	cmp	r3, #15
 8001162:	d80a      	bhi.n	800117a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001164:	2200      	movs	r2, #0
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f000 f90b 	bl	8001386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001170:	4a06      	ldr	r2, [pc, #24]	; (800118c <HAL_InitTick+0x5c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	e000      	b.n	800117c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000004 	.word	0x20000004
 8001188:	2000000c 	.word	0x2000000c
 800118c:	20000008 	.word	0x20000008

08001190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x20>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x24>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <HAL_IncTick+0x24>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	2000000c 	.word	0x2000000c
 80011b4:	20000134 	.word	0x20000134

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000134 	.word	0x20000134

080011d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001202:	4a04      	ldr	r2, [pc, #16]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60d3      	str	r3, [r2, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <__NVIC_GetPriorityGrouping+0x18>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0307 	and.w	r3, r3, #7
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	2b00      	cmp	r3, #0
 8001244:	db0b      	blt.n	800125e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f003 021f 	and.w	r2, r3, #31
 800124c:	4907      	ldr	r1, [pc, #28]	; (800126c <__NVIC_EnableIRQ+0x38>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	2001      	movs	r0, #1
 8001256:	fa00 f202 	lsl.w	r2, r0, r2
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000e100 	.word	0xe000e100

08001270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	2b00      	cmp	r3, #0
 8001282:	db0a      	blt.n	800129a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	b2da      	uxtb	r2, r3
 8001288:	490c      	ldr	r1, [pc, #48]	; (80012bc <__NVIC_SetPriority+0x4c>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	0112      	lsls	r2, r2, #4
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	440b      	add	r3, r1
 8001294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001298:	e00a      	b.n	80012b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4908      	ldr	r1, [pc, #32]	; (80012c0 <__NVIC_SetPriority+0x50>)
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	3b04      	subs	r3, #4
 80012a8:	0112      	lsls	r2, r2, #4
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	440b      	add	r3, r1
 80012ae:	761a      	strb	r2, [r3, #24]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000e100 	.word	0xe000e100
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f1c3 0307 	rsb	r3, r3, #7
 80012de:	2b04      	cmp	r3, #4
 80012e0:	bf28      	it	cs
 80012e2:	2304      	movcs	r3, #4
 80012e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3304      	adds	r3, #4
 80012ea:	2b06      	cmp	r3, #6
 80012ec:	d902      	bls.n	80012f4 <NVIC_EncodePriority+0x30>
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3b03      	subs	r3, #3
 80012f2:	e000      	b.n	80012f6 <NVIC_EncodePriority+0x32>
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43da      	mvns	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	401a      	ands	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800130c:	f04f 31ff 	mov.w	r1, #4294967295
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa01 f303 	lsl.w	r3, r1, r3
 8001316:	43d9      	mvns	r1, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	4313      	orrs	r3, r2
         );
}
 800131e:	4618      	mov	r0, r3
 8001320:	3724      	adds	r7, #36	; 0x24
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800133c:	d301      	bcc.n	8001342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133e:	2301      	movs	r3, #1
 8001340:	e00f      	b.n	8001362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <SysTick_Config+0x40>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134a:	210f      	movs	r1, #15
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f7ff ff8e 	bl	8001270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <SysTick_Config+0x40>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135a:	4b04      	ldr	r3, [pc, #16]	; (800136c <SysTick_Config+0x40>)
 800135c:	2207      	movs	r2, #7
 800135e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	e000e010 	.word	0xe000e010

08001370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ff29 	bl	80011d0 <__NVIC_SetPriorityGrouping>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001398:	f7ff ff3e 	bl	8001218 <__NVIC_GetPriorityGrouping>
 800139c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	68b9      	ldr	r1, [r7, #8]
 80013a2:	6978      	ldr	r0, [r7, #20]
 80013a4:	f7ff ff8e 	bl	80012c4 <NVIC_EncodePriority>
 80013a8:	4602      	mov	r2, r0
 80013aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff5d 	bl	8001270 <__NVIC_SetPriority>
}
 80013b6:	bf00      	nop
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff31 	bl	8001234 <__NVIC_EnableIRQ>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffa2 	bl	800132c <SysTick_Config>
 80013e8:	4603      	mov	r3, r0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001400:	f7ff feda 	bl	80011b8 <HAL_GetTick>
 8001404:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d008      	beq.n	8001424 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e052      	b.n	80014ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0216 	bic.w	r2, r2, #22
 8001432:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	695a      	ldr	r2, [r3, #20]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001442:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	2b00      	cmp	r3, #0
 800144a:	d103      	bne.n	8001454 <HAL_DMA_Abort+0x62>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001450:	2b00      	cmp	r3, #0
 8001452:	d007      	beq.n	8001464 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 0208 	bic.w	r2, r2, #8
 8001462:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0201 	bic.w	r2, r2, #1
 8001472:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001474:	e013      	b.n	800149e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001476:	f7ff fe9f 	bl	80011b8 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b05      	cmp	r3, #5
 8001482:	d90c      	bls.n	800149e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2220      	movs	r2, #32
 8001488:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2203      	movs	r2, #3
 800148e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e015      	b.n	80014ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1e4      	bne.n	8001476 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b0:	223f      	movs	r2, #63	; 0x3f
 80014b2:	409a      	lsls	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d004      	beq.n	80014f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2280      	movs	r2, #128	; 0x80
 80014ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e00c      	b.n	800150a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2205      	movs	r2, #5
 80014f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0201 	bic.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	; 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
 8001532:	e16b      	b.n	800180c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001534:	2201      	movs	r2, #1
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	429a      	cmp	r2, r3
 800154e:	f040 815a 	bne.w	8001806 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	2b01      	cmp	r3, #1
 800155c:	d005      	beq.n	800156a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001566:	2b02      	cmp	r3, #2
 8001568:	d130      	bne.n	80015cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	2203      	movs	r2, #3
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015a0:	2201      	movs	r2, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	f003 0201 	and.w	r2, r3, #1
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d017      	beq.n	8001608 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	2203      	movs	r2, #3
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d123      	bne.n	800165c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	08da      	lsrs	r2, r3, #3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3208      	adds	r2, #8
 800161c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	220f      	movs	r2, #15
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	691a      	ldr	r2, [r3, #16]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	08da      	lsrs	r2, r3, #3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3208      	adds	r2, #8
 8001656:	69b9      	ldr	r1, [r7, #24]
 8001658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0203 	and.w	r2, r3, #3
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 80b4 	beq.w	8001806 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b60      	ldr	r3, [pc, #384]	; (8001824 <HAL_GPIO_Init+0x30c>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	4a5f      	ldr	r2, [pc, #380]	; (8001824 <HAL_GPIO_Init+0x30c>)
 80016a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ac:	6453      	str	r3, [r2, #68]	; 0x44
 80016ae:	4b5d      	ldr	r3, [pc, #372]	; (8001824 <HAL_GPIO_Init+0x30c>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ba:	4a5b      	ldr	r2, [pc, #364]	; (8001828 <HAL_GPIO_Init+0x310>)
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	3302      	adds	r3, #2
 80016c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	220f      	movs	r2, #15
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a52      	ldr	r2, [pc, #328]	; (800182c <HAL_GPIO_Init+0x314>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d02b      	beq.n	800173e <HAL_GPIO_Init+0x226>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a51      	ldr	r2, [pc, #324]	; (8001830 <HAL_GPIO_Init+0x318>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d025      	beq.n	800173a <HAL_GPIO_Init+0x222>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a50      	ldr	r2, [pc, #320]	; (8001834 <HAL_GPIO_Init+0x31c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d01f      	beq.n	8001736 <HAL_GPIO_Init+0x21e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4f      	ldr	r2, [pc, #316]	; (8001838 <HAL_GPIO_Init+0x320>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d019      	beq.n	8001732 <HAL_GPIO_Init+0x21a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4e      	ldr	r2, [pc, #312]	; (800183c <HAL_GPIO_Init+0x324>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d013      	beq.n	800172e <HAL_GPIO_Init+0x216>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4d      	ldr	r2, [pc, #308]	; (8001840 <HAL_GPIO_Init+0x328>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d00d      	beq.n	800172a <HAL_GPIO_Init+0x212>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4c      	ldr	r2, [pc, #304]	; (8001844 <HAL_GPIO_Init+0x32c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d007      	beq.n	8001726 <HAL_GPIO_Init+0x20e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4b      	ldr	r2, [pc, #300]	; (8001848 <HAL_GPIO_Init+0x330>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d101      	bne.n	8001722 <HAL_GPIO_Init+0x20a>
 800171e:	2307      	movs	r3, #7
 8001720:	e00e      	b.n	8001740 <HAL_GPIO_Init+0x228>
 8001722:	2308      	movs	r3, #8
 8001724:	e00c      	b.n	8001740 <HAL_GPIO_Init+0x228>
 8001726:	2306      	movs	r3, #6
 8001728:	e00a      	b.n	8001740 <HAL_GPIO_Init+0x228>
 800172a:	2305      	movs	r3, #5
 800172c:	e008      	b.n	8001740 <HAL_GPIO_Init+0x228>
 800172e:	2304      	movs	r3, #4
 8001730:	e006      	b.n	8001740 <HAL_GPIO_Init+0x228>
 8001732:	2303      	movs	r3, #3
 8001734:	e004      	b.n	8001740 <HAL_GPIO_Init+0x228>
 8001736:	2302      	movs	r3, #2
 8001738:	e002      	b.n	8001740 <HAL_GPIO_Init+0x228>
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <HAL_GPIO_Init+0x228>
 800173e:	2300      	movs	r3, #0
 8001740:	69fa      	ldr	r2, [r7, #28]
 8001742:	f002 0203 	and.w	r2, r2, #3
 8001746:	0092      	lsls	r2, r2, #2
 8001748:	4093      	lsls	r3, r2
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001750:	4935      	ldr	r1, [pc, #212]	; (8001828 <HAL_GPIO_Init+0x310>)
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	089b      	lsrs	r3, r3, #2
 8001756:	3302      	adds	r3, #2
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800175e:	4b3b      	ldr	r3, [pc, #236]	; (800184c <HAL_GPIO_Init+0x334>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001782:	4a32      	ldr	r2, [pc, #200]	; (800184c <HAL_GPIO_Init+0x334>)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001788:	4b30      	ldr	r3, [pc, #192]	; (800184c <HAL_GPIO_Init+0x334>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ac:	4a27      	ldr	r2, [pc, #156]	; (800184c <HAL_GPIO_Init+0x334>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017b2:	4b26      	ldr	r3, [pc, #152]	; (800184c <HAL_GPIO_Init+0x334>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017d6:	4a1d      	ldr	r2, [pc, #116]	; (800184c <HAL_GPIO_Init+0x334>)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <HAL_GPIO_Init+0x334>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001800:	4a12      	ldr	r2, [pc, #72]	; (800184c <HAL_GPIO_Init+0x334>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3301      	adds	r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	2b0f      	cmp	r3, #15
 8001810:	f67f ae90 	bls.w	8001534 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3724      	adds	r7, #36	; 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	40013800 	.word	0x40013800
 800182c:	40020000 	.word	0x40020000
 8001830:	40020400 	.word	0x40020400
 8001834:	40020800 	.word	0x40020800
 8001838:	40020c00 	.word	0x40020c00
 800183c:	40021000 	.word	0x40021000
 8001840:	40021400 	.word	0x40021400
 8001844:	40021800 	.word	0x40021800
 8001848:	40021c00 	.word	0x40021c00
 800184c:	40013c00 	.word	0x40013c00

08001850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
 800185c:	4613      	mov	r3, r2
 800185e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001860:	787b      	ldrb	r3, [r7, #1]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800186c:	e003      	b.n	8001876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800186e:	887b      	ldrh	r3, [r7, #2]
 8001870:	041a      	lsls	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	619a      	str	r2, [r3, #24]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001882:	b480      	push	{r7}
 8001884:	b085      	sub	sp, #20
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	460b      	mov	r3, r1
 800188c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001894:	887a      	ldrh	r2, [r7, #2]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4013      	ands	r3, r2
 800189a:	041a      	lsls	r2, r3, #16
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	43d9      	mvns	r1, r3
 80018a0:	887b      	ldrh	r3, [r7, #2]
 80018a2:	400b      	ands	r3, r1
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	619a      	str	r2, [r3, #24]
}
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e264      	b.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d075      	beq.n	80019c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018d6:	4ba3      	ldr	r3, [pc, #652]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d00c      	beq.n	80018fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e2:	4ba0      	ldr	r3, [pc, #640]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d112      	bne.n	8001914 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ee:	4b9d      	ldr	r3, [pc, #628]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018fa:	d10b      	bne.n	8001914 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fc:	4b99      	ldr	r3, [pc, #612]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d05b      	beq.n	80019c0 <HAL_RCC_OscConfig+0x108>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d157      	bne.n	80019c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e23f      	b.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191c:	d106      	bne.n	800192c <HAL_RCC_OscConfig+0x74>
 800191e:	4b91      	ldr	r3, [pc, #580]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a90      	ldr	r2, [pc, #576]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 8001924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e01d      	b.n	8001968 <HAL_RCC_OscConfig+0xb0>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0x98>
 8001936:	4b8b      	ldr	r3, [pc, #556]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a8a      	ldr	r2, [pc, #552]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 800193c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b88      	ldr	r3, [pc, #544]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a87      	ldr	r2, [pc, #540]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 8001948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e00b      	b.n	8001968 <HAL_RCC_OscConfig+0xb0>
 8001950:	4b84      	ldr	r3, [pc, #528]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a83      	ldr	r2, [pc, #524]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 8001956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b81      	ldr	r3, [pc, #516]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a80      	ldr	r2, [pc, #512]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 8001962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d013      	beq.n	8001998 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff fc22 	bl	80011b8 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff fc1e 	bl	80011b8 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e204      	b.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	4b76      	ldr	r3, [pc, #472]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0xc0>
 8001996:	e014      	b.n	80019c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff fc0e 	bl	80011b8 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a0:	f7ff fc0a 	bl	80011b8 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e1f0      	b.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b2:	4b6c      	ldr	r3, [pc, #432]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0xe8>
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d063      	beq.n	8001a96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ce:	4b65      	ldr	r3, [pc, #404]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019da:	4b62      	ldr	r3, [pc, #392]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d11c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019e6:	4b5f      	ldr	r3, [pc, #380]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d116      	bne.n	8001a20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f2:	4b5c      	ldr	r3, [pc, #368]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d005      	beq.n	8001a0a <HAL_RCC_OscConfig+0x152>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d001      	beq.n	8001a0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e1c4      	b.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0a:	4b56      	ldr	r3, [pc, #344]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4952      	ldr	r1, [pc, #328]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1e:	e03a      	b.n	8001a96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d020      	beq.n	8001a6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a28:	4b4f      	ldr	r3, [pc, #316]	; (8001b68 <HAL_RCC_OscConfig+0x2b0>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fbc3 	bl	80011b8 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff fbbf 	bl	80011b8 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e1a5      	b.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a48:	4b46      	ldr	r3, [pc, #280]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a54:	4b43      	ldr	r3, [pc, #268]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4940      	ldr	r1, [pc, #256]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]
 8001a68:	e015      	b.n	8001a96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a6a:	4b3f      	ldr	r3, [pc, #252]	; (8001b68 <HAL_RCC_OscConfig+0x2b0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff fba2 	bl	80011b8 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a78:	f7ff fb9e 	bl	80011b8 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e184      	b.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8a:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d030      	beq.n	8001b04 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d016      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aaa:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <HAL_RCC_OscConfig+0x2b4>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab0:	f7ff fb82 	bl	80011b8 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab8:	f7ff fb7e 	bl	80011b8 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e164      	b.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aca:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 8001acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x200>
 8001ad6:	e015      	b.n	8001b04 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad8:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <HAL_RCC_OscConfig+0x2b4>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ade:	f7ff fb6b 	bl	80011b8 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae6:	f7ff fb67 	bl	80011b8 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e14d      	b.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af8:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 8001afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1f0      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 80a0 	beq.w	8001c52 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b16:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10f      	bne.n	8001b42 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	4a0e      	ldr	r2, [pc, #56]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 8001b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b30:	6413      	str	r3, [r2, #64]	; 0x40
 8001b32:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <HAL_RCC_OscConfig+0x2ac>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_RCC_OscConfig+0x2b8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d121      	bne.n	8001b92 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_RCC_OscConfig+0x2b8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <HAL_RCC_OscConfig+0x2b8>)
 8001b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b5a:	f7ff fb2d 	bl	80011b8 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	e011      	b.n	8001b86 <HAL_RCC_OscConfig+0x2ce>
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	42470000 	.word	0x42470000
 8001b6c:	42470e80 	.word	0x42470e80
 8001b70:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b74:	f7ff fb20 	bl	80011b8 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e106      	b.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b86:	4b85      	ldr	r3, [pc, #532]	; (8001d9c <HAL_RCC_OscConfig+0x4e4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d106      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x2f0>
 8001b9a:	4b81      	ldr	r3, [pc, #516]	; (8001da0 <HAL_RCC_OscConfig+0x4e8>)
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9e:	4a80      	ldr	r2, [pc, #512]	; (8001da0 <HAL_RCC_OscConfig+0x4e8>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba6:	e01c      	b.n	8001be2 <HAL_RCC_OscConfig+0x32a>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b05      	cmp	r3, #5
 8001bae:	d10c      	bne.n	8001bca <HAL_RCC_OscConfig+0x312>
 8001bb0:	4b7b      	ldr	r3, [pc, #492]	; (8001da0 <HAL_RCC_OscConfig+0x4e8>)
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb4:	4a7a      	ldr	r2, [pc, #488]	; (8001da0 <HAL_RCC_OscConfig+0x4e8>)
 8001bb6:	f043 0304 	orr.w	r3, r3, #4
 8001bba:	6713      	str	r3, [r2, #112]	; 0x70
 8001bbc:	4b78      	ldr	r3, [pc, #480]	; (8001da0 <HAL_RCC_OscConfig+0x4e8>)
 8001bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc0:	4a77      	ldr	r2, [pc, #476]	; (8001da0 <HAL_RCC_OscConfig+0x4e8>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc8:	e00b      	b.n	8001be2 <HAL_RCC_OscConfig+0x32a>
 8001bca:	4b75      	ldr	r3, [pc, #468]	; (8001da0 <HAL_RCC_OscConfig+0x4e8>)
 8001bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bce:	4a74      	ldr	r2, [pc, #464]	; (8001da0 <HAL_RCC_OscConfig+0x4e8>)
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd6:	4b72      	ldr	r3, [pc, #456]	; (8001da0 <HAL_RCC_OscConfig+0x4e8>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bda:	4a71      	ldr	r2, [pc, #452]	; (8001da0 <HAL_RCC_OscConfig+0x4e8>)
 8001bdc:	f023 0304 	bic.w	r3, r3, #4
 8001be0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d015      	beq.n	8001c16 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bea:	f7ff fae5 	bl	80011b8 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf0:	e00a      	b.n	8001c08 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf2:	f7ff fae1 	bl	80011b8 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e0c5      	b.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c08:	4b65      	ldr	r3, [pc, #404]	; (8001da0 <HAL_RCC_OscConfig+0x4e8>)
 8001c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0ee      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x33a>
 8001c14:	e014      	b.n	8001c40 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c16:	f7ff facf 	bl	80011b8 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c1c:	e00a      	b.n	8001c34 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c1e:	f7ff facb 	bl	80011b8 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e0af      	b.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c34:	4b5a      	ldr	r3, [pc, #360]	; (8001da0 <HAL_RCC_OscConfig+0x4e8>)
 8001c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1ee      	bne.n	8001c1e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d105      	bne.n	8001c52 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c46:	4b56      	ldr	r3, [pc, #344]	; (8001da0 <HAL_RCC_OscConfig+0x4e8>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	4a55      	ldr	r2, [pc, #340]	; (8001da0 <HAL_RCC_OscConfig+0x4e8>)
 8001c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 809b 	beq.w	8001d92 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c5c:	4b50      	ldr	r3, [pc, #320]	; (8001da0 <HAL_RCC_OscConfig+0x4e8>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 030c 	and.w	r3, r3, #12
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d05c      	beq.n	8001d22 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d141      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c70:	4b4c      	ldr	r3, [pc, #304]	; (8001da4 <HAL_RCC_OscConfig+0x4ec>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7ff fa9f 	bl	80011b8 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7ff fa9b 	bl	80011b8 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e081      	b.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c90:	4b43      	ldr	r3, [pc, #268]	; (8001da0 <HAL_RCC_OscConfig+0x4e8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f0      	bne.n	8001c7e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69da      	ldr	r2, [r3, #28]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	019b      	lsls	r3, r3, #6
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	085b      	lsrs	r3, r3, #1
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	041b      	lsls	r3, r3, #16
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbe:	061b      	lsls	r3, r3, #24
 8001cc0:	4937      	ldr	r1, [pc, #220]	; (8001da0 <HAL_RCC_OscConfig+0x4e8>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc6:	4b37      	ldr	r3, [pc, #220]	; (8001da4 <HAL_RCC_OscConfig+0x4ec>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fa74 	bl	80011b8 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd4:	f7ff fa70 	bl	80011b8 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e056      	b.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce6:	4b2e      	ldr	r3, [pc, #184]	; (8001da0 <HAL_RCC_OscConfig+0x4e8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x41c>
 8001cf2:	e04e      	b.n	8001d92 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf4:	4b2b      	ldr	r3, [pc, #172]	; (8001da4 <HAL_RCC_OscConfig+0x4ec>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfa:	f7ff fa5d 	bl	80011b8 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d02:	f7ff fa59 	bl	80011b8 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e03f      	b.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d14:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <HAL_RCC_OscConfig+0x4e8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f0      	bne.n	8001d02 <HAL_RCC_OscConfig+0x44a>
 8001d20:	e037      	b.n	8001d92 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e032      	b.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d2e:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <HAL_RCC_OscConfig+0x4e8>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d028      	beq.n	8001d8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d121      	bne.n	8001d8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d11a      	bne.n	8001d8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d5e:	4013      	ands	r3, r2
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d64:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d111      	bne.n	8001d8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d74:	085b      	lsrs	r3, r3, #1
 8001d76:	3b01      	subs	r3, #1
 8001d78:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40007000 	.word	0x40007000
 8001da0:	40023800 	.word	0x40023800
 8001da4:	42470060 	.word	0x42470060

08001da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0cc      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b68      	ldr	r3, [pc, #416]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d90c      	bls.n	8001de4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	4b65      	ldr	r3, [pc, #404]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	4b63      	ldr	r3, [pc, #396]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0b8      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d020      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dfc:	4b59      	ldr	r3, [pc, #356]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	4a58      	ldr	r2, [pc, #352]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e14:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4a52      	ldr	r2, [pc, #328]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e20:	4b50      	ldr	r3, [pc, #320]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	494d      	ldr	r1, [pc, #308]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d044      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e46:	4b47      	ldr	r3, [pc, #284]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d119      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e07f      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d003      	beq.n	8001e66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d107      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e66:	4b3f      	ldr	r3, [pc, #252]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e06f      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e76:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e067      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e86:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f023 0203 	bic.w	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	4934      	ldr	r1, [pc, #208]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e98:	f7ff f98e 	bl	80011b8 <HAL_GetTick>
 8001e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea0:	f7ff f98a 	bl	80011b8 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e04f      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 020c 	and.w	r2, r3, #12
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d1eb      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d20c      	bcs.n	8001ef0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e032      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	4916      	ldr	r1, [pc, #88]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d009      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	490e      	ldr	r1, [pc, #56]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f2e:	f000 f821 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001f32:	4602      	mov	r2, r0
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	490a      	ldr	r1, [pc, #40]	; (8001f68 <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	5ccb      	ldrb	r3, [r1, r3]
 8001f42:	fa22 f303 	lsr.w	r3, r2, r3
 8001f46:	4a09      	ldr	r2, [pc, #36]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff f8ee 	bl	8001130 <HAL_InitTick>

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023c00 	.word	0x40023c00
 8001f64:	40023800 	.word	0x40023800
 8001f68:	08004830 	.word	0x08004830
 8001f6c:	20000004 	.word	0x20000004
 8001f70:	20000008 	.word	0x20000008

08001f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f78:	b084      	sub	sp, #16
 8001f7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	2300      	movs	r3, #0
 8001f86:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f8c:	4b67      	ldr	r3, [pc, #412]	; (800212c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d00d      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x40>
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	f200 80bd 	bhi.w	8002118 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d003      	beq.n	8001fae <HAL_RCC_GetSysClockFreq+0x3a>
 8001fa6:	e0b7      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fa8:	4b61      	ldr	r3, [pc, #388]	; (8002130 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001faa:	60bb      	str	r3, [r7, #8]
       break;
 8001fac:	e0b7      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fae:	4b61      	ldr	r3, [pc, #388]	; (8002134 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001fb0:	60bb      	str	r3, [r7, #8]
      break;
 8001fb2:	e0b4      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fb4:	4b5d      	ldr	r3, [pc, #372]	; (800212c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fbc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fbe:	4b5b      	ldr	r3, [pc, #364]	; (800212c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d04d      	beq.n	8002066 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fca:	4b58      	ldr	r3, [pc, #352]	; (800212c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	099b      	lsrs	r3, r3, #6
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fda:	f04f 0100 	mov.w	r1, #0
 8001fde:	ea02 0800 	and.w	r8, r2, r0
 8001fe2:	ea03 0901 	and.w	r9, r3, r1
 8001fe6:	4640      	mov	r0, r8
 8001fe8:	4649      	mov	r1, r9
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	014b      	lsls	r3, r1, #5
 8001ff4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ff8:	0142      	lsls	r2, r0, #5
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	ebb0 0008 	subs.w	r0, r0, r8
 8002002:	eb61 0109 	sbc.w	r1, r1, r9
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	018b      	lsls	r3, r1, #6
 8002010:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002014:	0182      	lsls	r2, r0, #6
 8002016:	1a12      	subs	r2, r2, r0
 8002018:	eb63 0301 	sbc.w	r3, r3, r1
 800201c:	f04f 0000 	mov.w	r0, #0
 8002020:	f04f 0100 	mov.w	r1, #0
 8002024:	00d9      	lsls	r1, r3, #3
 8002026:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800202a:	00d0      	lsls	r0, r2, #3
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	eb12 0208 	adds.w	r2, r2, r8
 8002034:	eb43 0309 	adc.w	r3, r3, r9
 8002038:	f04f 0000 	mov.w	r0, #0
 800203c:	f04f 0100 	mov.w	r1, #0
 8002040:	0259      	lsls	r1, r3, #9
 8002042:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002046:	0250      	lsls	r0, r2, #9
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	461a      	mov	r2, r3
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	f7fe f8b6 	bl	80001c8 <__aeabi_uldivmod>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4613      	mov	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	e04a      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002066:	4b31      	ldr	r3, [pc, #196]	; (800212c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	099b      	lsrs	r3, r3, #6
 800206c:	461a      	mov	r2, r3
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002076:	f04f 0100 	mov.w	r1, #0
 800207a:	ea02 0400 	and.w	r4, r2, r0
 800207e:	ea03 0501 	and.w	r5, r3, r1
 8002082:	4620      	mov	r0, r4
 8002084:	4629      	mov	r1, r5
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	014b      	lsls	r3, r1, #5
 8002090:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002094:	0142      	lsls	r2, r0, #5
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	1b00      	subs	r0, r0, r4
 800209c:	eb61 0105 	sbc.w	r1, r1, r5
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	f04f 0300 	mov.w	r3, #0
 80020a8:	018b      	lsls	r3, r1, #6
 80020aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020ae:	0182      	lsls	r2, r0, #6
 80020b0:	1a12      	subs	r2, r2, r0
 80020b2:	eb63 0301 	sbc.w	r3, r3, r1
 80020b6:	f04f 0000 	mov.w	r0, #0
 80020ba:	f04f 0100 	mov.w	r1, #0
 80020be:	00d9      	lsls	r1, r3, #3
 80020c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020c4:	00d0      	lsls	r0, r2, #3
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	1912      	adds	r2, r2, r4
 80020cc:	eb45 0303 	adc.w	r3, r5, r3
 80020d0:	f04f 0000 	mov.w	r0, #0
 80020d4:	f04f 0100 	mov.w	r1, #0
 80020d8:	0299      	lsls	r1, r3, #10
 80020da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020de:	0290      	lsls	r0, r2, #10
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	461a      	mov	r2, r3
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	f7fe f86a 	bl	80001c8 <__aeabi_uldivmod>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4613      	mov	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	0c1b      	lsrs	r3, r3, #16
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	3301      	adds	r3, #1
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	fbb2 f3f3 	udiv	r3, r2, r3
 8002114:	60bb      	str	r3, [r7, #8]
      break;
 8002116:	e002      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800211a:	60bb      	str	r3, [r7, #8]
      break;
 800211c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800211e:	68bb      	ldr	r3, [r7, #8]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800
 8002130:	00f42400 	.word	0x00f42400
 8002134:	007a1200 	.word	0x007a1200

08002138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <HAL_RCC_GetHCLKFreq+0x14>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	20000004 	.word	0x20000004

08002150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002154:	f7ff fff0 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 8002158:	4602      	mov	r2, r0
 800215a:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	0a9b      	lsrs	r3, r3, #10
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	4903      	ldr	r1, [pc, #12]	; (8002174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002166:	5ccb      	ldrb	r3, [r1, r3]
 8002168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800216c:	4618      	mov	r0, r3
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40023800 	.word	0x40023800
 8002174:	08004840 	.word	0x08004840

08002178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800217c:	f7ff ffdc 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 8002180:	4602      	mov	r2, r0
 8002182:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	0b5b      	lsrs	r3, r3, #13
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	4903      	ldr	r1, [pc, #12]	; (800219c <HAL_RCC_GetPCLK2Freq+0x24>)
 800218e:	5ccb      	ldrb	r3, [r1, r3]
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002194:	4618      	mov	r0, r3
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40023800 	.word	0x40023800
 800219c:	08004840 	.word	0x08004840

080021a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e07b      	b.n	80022aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d108      	bne.n	80021cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021c2:	d009      	beq.n	80021d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
 80021ca:	e005      	b.n	80021d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7fe fdae 	bl	8000d54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800220e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	431a      	orrs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225c:	ea42 0103 	orr.w	r1, r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002264:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	0c1b      	lsrs	r3, r3, #16
 8002276:	f003 0104 	and.w	r1, r3, #4
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	f003 0210 	and.w	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	69da      	ldr	r2, [r3, #28]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002298:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b088      	sub	sp, #32
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	603b      	str	r3, [r7, #0]
 80022be:	4613      	mov	r3, r2
 80022c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_SPI_Transmit+0x22>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e126      	b.n	8002522 <HAL_SPI_Transmit+0x270>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022dc:	f7fe ff6c 	bl	80011b8 <HAL_GetTick>
 80022e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d002      	beq.n	80022f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80022f2:	2302      	movs	r3, #2
 80022f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022f6:	e10b      	b.n	8002510 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_SPI_Transmit+0x52>
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d102      	bne.n	800230a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002308:	e102      	b.n	8002510 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2203      	movs	r2, #3
 800230e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	88fa      	ldrh	r2, [r7, #6]
 8002322:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	88fa      	ldrh	r2, [r7, #6]
 8002328:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002350:	d10f      	bne.n	8002372 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002360:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002370:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237c:	2b40      	cmp	r3, #64	; 0x40
 800237e:	d007      	beq.n	8002390 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800238e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002398:	d14b      	bne.n	8002432 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <HAL_SPI_Transmit+0xf6>
 80023a2:	8afb      	ldrh	r3, [r7, #22]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d13e      	bne.n	8002426 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	881a      	ldrh	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	1c9a      	adds	r2, r3, #2
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023cc:	e02b      	b.n	8002426 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d112      	bne.n	8002402 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	881a      	ldrh	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	1c9a      	adds	r2, r3, #2
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8002400:	e011      	b.n	8002426 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002402:	f7fe fed9 	bl	80011b8 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d803      	bhi.n	800241a <HAL_SPI_Transmit+0x168>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002418:	d102      	bne.n	8002420 <HAL_SPI_Transmit+0x16e>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d102      	bne.n	8002426 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002424:	e074      	b.n	8002510 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800242a:	b29b      	uxth	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1ce      	bne.n	80023ce <HAL_SPI_Transmit+0x11c>
 8002430:	e04c      	b.n	80024cc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <HAL_SPI_Transmit+0x18e>
 800243a:	8afb      	ldrh	r3, [r7, #22]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d140      	bne.n	80024c2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	330c      	adds	r3, #12
 800244a:	7812      	ldrb	r2, [r2, #0]
 800244c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002466:	e02c      	b.n	80024c2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b02      	cmp	r3, #2
 8002474:	d113      	bne.n	800249e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	330c      	adds	r3, #12
 8002480:	7812      	ldrb	r2, [r2, #0]
 8002482:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	86da      	strh	r2, [r3, #54]	; 0x36
 800249c:	e011      	b.n	80024c2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800249e:	f7fe fe8b 	bl	80011b8 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d803      	bhi.n	80024b6 <HAL_SPI_Transmit+0x204>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b4:	d102      	bne.n	80024bc <HAL_SPI_Transmit+0x20a>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d102      	bne.n	80024c2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80024c0:	e026      	b.n	8002510 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1cd      	bne.n	8002468 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	6839      	ldr	r1, [r7, #0]
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 fce9 	bl	8002ea8 <SPI_EndRxTxTransaction>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2220      	movs	r2, #32
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10a      	bne.n	8002500 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	77fb      	strb	r3, [r7, #31]
 800250c:	e000      	b.n	8002510 <HAL_SPI_Transmit+0x25e>
  }

error:
 800250e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002520:	7ffb      	ldrb	r3, [r7, #31]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3720      	adds	r7, #32
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b088      	sub	sp, #32
 800252e:	af02      	add	r7, sp, #8
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	4613      	mov	r3, r2
 8002538:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002546:	d112      	bne.n	800256e <HAL_SPI_Receive+0x44>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10e      	bne.n	800256e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2204      	movs	r2, #4
 8002554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002558:	88fa      	ldrh	r2, [r7, #6]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	4613      	mov	r3, r2
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	68b9      	ldr	r1, [r7, #8]
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f8f1 	bl	800274c <HAL_SPI_TransmitReceive>
 800256a:	4603      	mov	r3, r0
 800256c:	e0ea      	b.n	8002744 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_SPI_Receive+0x52>
 8002578:	2302      	movs	r3, #2
 800257a:	e0e3      	b.n	8002744 <HAL_SPI_Receive+0x21a>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002584:	f7fe fe18 	bl	80011b8 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d002      	beq.n	800259c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002596:	2302      	movs	r3, #2
 8002598:	75fb      	strb	r3, [r7, #23]
    goto error;
 800259a:	e0ca      	b.n	8002732 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_SPI_Receive+0x7e>
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025ac:	e0c1      	b.n	8002732 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2204      	movs	r2, #4
 80025b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	88fa      	ldrh	r2, [r7, #6]
 80025c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	88fa      	ldrh	r2, [r7, #6]
 80025cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025f4:	d10f      	bne.n	8002616 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002604:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002614:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002620:	2b40      	cmp	r3, #64	; 0x40
 8002622:	d007      	beq.n	8002634 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002632:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d162      	bne.n	8002702 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800263c:	e02e      	b.n	800269c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b01      	cmp	r3, #1
 800264a:	d115      	bne.n	8002678 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f103 020c 	add.w	r2, r3, #12
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002658:	7812      	ldrb	r2, [r2, #0]
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002676:	e011      	b.n	800269c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002678:	f7fe fd9e 	bl	80011b8 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d803      	bhi.n	8002690 <HAL_SPI_Receive+0x166>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268e:	d102      	bne.n	8002696 <HAL_SPI_Receive+0x16c>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d102      	bne.n	800269c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	75fb      	strb	r3, [r7, #23]
          goto error;
 800269a:	e04a      	b.n	8002732 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1cb      	bne.n	800263e <HAL_SPI_Receive+0x114>
 80026a6:	e031      	b.n	800270c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d113      	bne.n	80026de <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c0:	b292      	uxth	r2, r2
 80026c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c8:	1c9a      	adds	r2, r3, #2
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026dc:	e011      	b.n	8002702 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026de:	f7fe fd6b 	bl	80011b8 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d803      	bhi.n	80026f6 <HAL_SPI_Receive+0x1cc>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d102      	bne.n	80026fc <HAL_SPI_Receive+0x1d2>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d102      	bne.n	8002702 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002700:	e017      	b.n	8002732 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002706:	b29b      	uxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1cd      	bne.n	80026a8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	6839      	ldr	r1, [r7, #0]
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 fb63 	bl	8002ddc <SPI_EndRxTransaction>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2220      	movs	r2, #32
 8002720:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	75fb      	strb	r3, [r7, #23]
 800272e:	e000      	b.n	8002732 <HAL_SPI_Receive+0x208>
  }

error :
 8002730:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002742:	7dfb      	ldrb	r3, [r7, #23]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08c      	sub	sp, #48	; 0x30
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800275a:	2301      	movs	r3, #1
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_SPI_TransmitReceive+0x26>
 800276e:	2302      	movs	r3, #2
 8002770:	e18a      	b.n	8002a88 <HAL_SPI_TransmitReceive+0x33c>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800277a:	f7fe fd1d 	bl	80011b8 <HAL_GetTick>
 800277e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002790:	887b      	ldrh	r3, [r7, #2]
 8002792:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002794:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002798:	2b01      	cmp	r3, #1
 800279a:	d00f      	beq.n	80027bc <HAL_SPI_TransmitReceive+0x70>
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027a2:	d107      	bne.n	80027b4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d103      	bne.n	80027b4 <HAL_SPI_TransmitReceive+0x68>
 80027ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d003      	beq.n	80027bc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80027b4:	2302      	movs	r3, #2
 80027b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027ba:	e15b      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_SPI_TransmitReceive+0x82>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <HAL_SPI_TransmitReceive+0x82>
 80027c8:	887b      	ldrh	r3, [r7, #2]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d103      	bne.n	80027d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027d4:	e14e      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d003      	beq.n	80027ea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2205      	movs	r2, #5
 80027e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	887a      	ldrh	r2, [r7, #2]
 80027fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	887a      	ldrh	r2, [r7, #2]
 800280c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	887a      	ldrh	r2, [r7, #2]
 8002812:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282a:	2b40      	cmp	r3, #64	; 0x40
 800282c:	d007      	beq.n	800283e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800283c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002846:	d178      	bne.n	800293a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <HAL_SPI_TransmitReceive+0x10a>
 8002850:	8b7b      	ldrh	r3, [r7, #26]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d166      	bne.n	8002924 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	881a      	ldrh	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	1c9a      	adds	r2, r3, #2
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800287a:	e053      	b.n	8002924 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b02      	cmp	r3, #2
 8002888:	d11b      	bne.n	80028c2 <HAL_SPI_TransmitReceive+0x176>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800288e:	b29b      	uxth	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d016      	beq.n	80028c2 <HAL_SPI_TransmitReceive+0x176>
 8002894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002896:	2b01      	cmp	r3, #1
 8002898:	d113      	bne.n	80028c2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	881a      	ldrh	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	1c9a      	adds	r2, r3, #2
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d119      	bne.n	8002904 <HAL_SPI_TransmitReceive+0x1b8>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d014      	beq.n	8002904 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	b292      	uxth	r2, r2
 80028e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	1c9a      	adds	r2, r3, #2
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002900:	2301      	movs	r3, #1
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002904:	f7fe fc58 	bl	80011b8 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002910:	429a      	cmp	r2, r3
 8002912:	d807      	bhi.n	8002924 <HAL_SPI_TransmitReceive+0x1d8>
 8002914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291a:	d003      	beq.n	8002924 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002922:	e0a7      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1a6      	bne.n	800287c <HAL_SPI_TransmitReceive+0x130>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002932:	b29b      	uxth	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1a1      	bne.n	800287c <HAL_SPI_TransmitReceive+0x130>
 8002938:	e07c      	b.n	8002a34 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_SPI_TransmitReceive+0x1fc>
 8002942:	8b7b      	ldrh	r3, [r7, #26]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d16b      	bne.n	8002a20 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	330c      	adds	r3, #12
 8002952:	7812      	ldrb	r2, [r2, #0]
 8002954:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800296e:	e057      	b.n	8002a20 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b02      	cmp	r3, #2
 800297c:	d11c      	bne.n	80029b8 <HAL_SPI_TransmitReceive+0x26c>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002982:	b29b      	uxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d017      	beq.n	80029b8 <HAL_SPI_TransmitReceive+0x26c>
 8002988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298a:	2b01      	cmp	r3, #1
 800298c:	d114      	bne.n	80029b8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	330c      	adds	r3, #12
 8002998:	7812      	ldrb	r2, [r2, #0]
 800299a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d119      	bne.n	80029fa <HAL_SPI_TransmitReceive+0x2ae>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d014      	beq.n	80029fa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029f6:	2301      	movs	r3, #1
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029fa:	f7fe fbdd 	bl	80011b8 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d803      	bhi.n	8002a12 <HAL_SPI_TransmitReceive+0x2c6>
 8002a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d102      	bne.n	8002a18 <HAL_SPI_TransmitReceive+0x2cc>
 8002a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d103      	bne.n	8002a20 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a1e:	e029      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1a2      	bne.n	8002970 <HAL_SPI_TransmitReceive+0x224>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d19d      	bne.n	8002970 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 fa35 	bl	8002ea8 <SPI_EndRxTxTransaction>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d006      	beq.n	8002a52 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a50:	e010      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10b      	bne.n	8002a72 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	e000      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002a72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3730      	adds	r7, #48	; 0x30
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	099b      	lsrs	r3, r3, #6
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10f      	bne.n	8002ad4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	099b      	lsrs	r3, r3, #6
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d004      	beq.n	8002ad4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	4798      	blx	r3
    return;
 8002ad2:	e0d7      	b.n	8002c84 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	085b      	lsrs	r3, r3, #1
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_SPI_IRQHandler+0x66>
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	09db      	lsrs	r3, r3, #7
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d004      	beq.n	8002af6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	4798      	blx	r3
    return;
 8002af4:	e0c6      	b.n	8002c84 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	095b      	lsrs	r3, r3, #5
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10c      	bne.n	8002b1c <HAL_SPI_IRQHandler+0x8c>
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	099b      	lsrs	r3, r3, #6
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	0a1b      	lsrs	r3, r3, #8
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 80b4 	beq.w	8002c84 <HAL_SPI_IRQHandler+0x1f4>
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80ad 	beq.w	8002c84 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	099b      	lsrs	r3, r3, #6
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d023      	beq.n	8002b7e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d011      	beq.n	8002b66 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b46:	f043 0204 	orr.w	r2, r3, #4
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	e00b      	b.n	8002b7e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	693b      	ldr	r3, [r7, #16]
        return;
 8002b7c:	e082      	b.n	8002c84 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d014      	beq.n	8002bb4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8e:	f043 0201 	orr.w	r2, r3, #1
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	0a1b      	lsrs	r3, r3, #8
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00c      	beq.n	8002bda <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc4:	f043 0208 	orr.w	r2, r3, #8
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d04f      	beq.n	8002c82 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bf0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d104      	bne.n	8002c0e <HAL_SPI_IRQHandler+0x17e>
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d034      	beq.n	8002c78 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0203 	bic.w	r2, r2, #3
 8002c1c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d011      	beq.n	8002c4a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2a:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <HAL_SPI_IRQHandler+0x1fc>)
 8002c2c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe fc4d 	bl	80014d2 <HAL_DMA_Abort_IT>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d016      	beq.n	8002c80 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c56:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <HAL_SPI_IRQHandler+0x1fc>)
 8002c58:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fe fc37 	bl	80014d2 <HAL_DMA_Abort_IT>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002c76:	e003      	b.n	8002c80 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f809 	bl	8002c90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002c7e:	e000      	b.n	8002c82 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002c80:	bf00      	nop
    return;
 8002c82:	bf00      	nop
  }
}
 8002c84:	3720      	adds	r7, #32
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	08002ca5 	.word	0x08002ca5

08002c90 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f7ff ffe6 	bl	8002c90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002cc4:	bf00      	nop
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002cdc:	f7fe fa6c 	bl	80011b8 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	4413      	add	r3, r2
 8002cea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002cec:	f7fe fa64 	bl	80011b8 <HAL_GetTick>
 8002cf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002cf2:	4b39      	ldr	r3, [pc, #228]	; (8002dd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	015b      	lsls	r3, r3, #5
 8002cf8:	0d1b      	lsrs	r3, r3, #20
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	fb02 f303 	mul.w	r3, r2, r3
 8002d00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d02:	e054      	b.n	8002dae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0a:	d050      	beq.n	8002dae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d0c:	f7fe fa54 	bl	80011b8 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d902      	bls.n	8002d22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d13d      	bne.n	8002d9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d3a:	d111      	bne.n	8002d60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d44:	d004      	beq.n	8002d50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4e:	d107      	bne.n	8002d60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d68:	d10f      	bne.n	8002d8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e017      	b.n	8002dce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4013      	ands	r3, r2
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	bf0c      	ite	eq
 8002dbe:	2301      	moveq	r3, #1
 8002dc0:	2300      	movne	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d19b      	bne.n	8002d04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3720      	adds	r7, #32
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000004 	.word	0x20000004

08002ddc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002df0:	d111      	bne.n	8002e16 <SPI_EndRxTransaction+0x3a>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dfa:	d004      	beq.n	8002e06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e04:	d107      	bne.n	8002e16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e14:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e1e:	d12a      	bne.n	8002e76 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e28:	d012      	beq.n	8002e50 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2200      	movs	r2, #0
 8002e32:	2180      	movs	r1, #128	; 0x80
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f7ff ff49 	bl	8002ccc <SPI_WaitFlagStateUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d02d      	beq.n	8002e9c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e44:	f043 0220 	orr.w	r2, r3, #32
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e026      	b.n	8002e9e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2200      	movs	r2, #0
 8002e58:	2101      	movs	r1, #1
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f7ff ff36 	bl	8002ccc <SPI_WaitFlagStateUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d01a      	beq.n	8002e9c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6a:	f043 0220 	orr.w	r2, r3, #32
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e013      	b.n	8002e9e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2101      	movs	r1, #1
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f7ff ff23 	bl	8002ccc <SPI_WaitFlagStateUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d007      	beq.n	8002e9c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	f043 0220 	orr.w	r2, r3, #32
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e000      	b.n	8002e9e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <SPI_EndRxTxTransaction+0x7c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1b      	ldr	r2, [pc, #108]	; (8002f28 <SPI_EndRxTxTransaction+0x80>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	0d5b      	lsrs	r3, r3, #21
 8002ec0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ec4:	fb02 f303 	mul.w	r3, r2, r3
 8002ec8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ed2:	d112      	bne.n	8002efa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2200      	movs	r2, #0
 8002edc:	2180      	movs	r1, #128	; 0x80
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f7ff fef4 	bl	8002ccc <SPI_WaitFlagStateUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d016      	beq.n	8002f18 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	f043 0220 	orr.w	r2, r3, #32
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e00f      	b.n	8002f1a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f10:	2b80      	cmp	r3, #128	; 0x80
 8002f12:	d0f2      	beq.n	8002efa <SPI_EndRxTxTransaction+0x52>
 8002f14:	e000      	b.n	8002f18 <SPI_EndRxTxTransaction+0x70>
        break;
 8002f16:	bf00      	nop
  }

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000004 	.word	0x20000004
 8002f28:	165e9f81 	.word	0x165e9f81

08002f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e041      	b.n	8002fc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fd ff4e 	bl	8000df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3304      	adds	r3, #4
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	f000 fa96 	bl	800349c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d001      	beq.n	8002fe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e04e      	b.n	8003082 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a23      	ldr	r2, [pc, #140]	; (8003090 <HAL_TIM_Base_Start_IT+0xc4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d022      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x80>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300e:	d01d      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x80>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a1f      	ldr	r2, [pc, #124]	; (8003094 <HAL_TIM_Base_Start_IT+0xc8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d018      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x80>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a1e      	ldr	r2, [pc, #120]	; (8003098 <HAL_TIM_Base_Start_IT+0xcc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d013      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x80>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a1c      	ldr	r2, [pc, #112]	; (800309c <HAL_TIM_Base_Start_IT+0xd0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00e      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x80>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a1b      	ldr	r2, [pc, #108]	; (80030a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d009      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x80>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a19      	ldr	r2, [pc, #100]	; (80030a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d004      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x80>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a18      	ldr	r2, [pc, #96]	; (80030a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d111      	bne.n	8003070 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b06      	cmp	r3, #6
 800305c:	d010      	beq.n	8003080 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 0201 	orr.w	r2, r2, #1
 800306c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800306e:	e007      	b.n	8003080 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40010000 	.word	0x40010000
 8003094:	40000400 	.word	0x40000400
 8003098:	40000800 	.word	0x40000800
 800309c:	40000c00 	.word	0x40000c00
 80030a0:	40010400 	.word	0x40010400
 80030a4:	40014000 	.word	0x40014000
 80030a8:	40001800 	.word	0x40001800

080030ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d122      	bne.n	8003108 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d11b      	bne.n	8003108 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0202 	mvn.w	r2, #2
 80030d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f9b5 	bl	800345e <HAL_TIM_IC_CaptureCallback>
 80030f4:	e005      	b.n	8003102 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f9a7 	bl	800344a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f9b8 	bl	8003472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b04      	cmp	r3, #4
 8003114:	d122      	bne.n	800315c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b04      	cmp	r3, #4
 8003122:	d11b      	bne.n	800315c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f06f 0204 	mvn.w	r2, #4
 800312c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2202      	movs	r2, #2
 8003132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f98b 	bl	800345e <HAL_TIM_IC_CaptureCallback>
 8003148:	e005      	b.n	8003156 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f97d 	bl	800344a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f98e 	bl	8003472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b08      	cmp	r3, #8
 8003168:	d122      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b08      	cmp	r3, #8
 8003176:	d11b      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0208 	mvn.w	r2, #8
 8003180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2204      	movs	r2, #4
 8003186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f961 	bl	800345e <HAL_TIM_IC_CaptureCallback>
 800319c:	e005      	b.n	80031aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f953 	bl	800344a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f964 	bl	8003472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	2b10      	cmp	r3, #16
 80031bc:	d122      	bne.n	8003204 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d11b      	bne.n	8003204 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0210 	mvn.w	r2, #16
 80031d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2208      	movs	r2, #8
 80031da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f937 	bl	800345e <HAL_TIM_IC_CaptureCallback>
 80031f0:	e005      	b.n	80031fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f929 	bl	800344a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f93a 	bl	8003472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d10e      	bne.n	8003230 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b01      	cmp	r3, #1
 800321e:	d107      	bne.n	8003230 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0201 	mvn.w	r2, #1
 8003228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fd fd34 	bl	8000c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323a:	2b80      	cmp	r3, #128	; 0x80
 800323c:	d10e      	bne.n	800325c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003248:	2b80      	cmp	r3, #128	; 0x80
 800324a:	d107      	bne.n	800325c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fae0 	bl	800381c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003266:	2b40      	cmp	r3, #64	; 0x40
 8003268:	d10e      	bne.n	8003288 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003274:	2b40      	cmp	r3, #64	; 0x40
 8003276:	d107      	bne.n	8003288 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f8ff 	bl	8003486 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b20      	cmp	r3, #32
 8003294:	d10e      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0320 	and.w	r3, r3, #32
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d107      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0220 	mvn.w	r2, #32
 80032ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 faaa 	bl	8003808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_TIM_ConfigClockSource+0x1c>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e0b4      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x186>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003310:	d03e      	beq.n	8003390 <HAL_TIM_ConfigClockSource+0xd4>
 8003312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003316:	f200 8087 	bhi.w	8003428 <HAL_TIM_ConfigClockSource+0x16c>
 800331a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331e:	f000 8086 	beq.w	800342e <HAL_TIM_ConfigClockSource+0x172>
 8003322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003326:	d87f      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x16c>
 8003328:	2b70      	cmp	r3, #112	; 0x70
 800332a:	d01a      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0xa6>
 800332c:	2b70      	cmp	r3, #112	; 0x70
 800332e:	d87b      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x16c>
 8003330:	2b60      	cmp	r3, #96	; 0x60
 8003332:	d050      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x11a>
 8003334:	2b60      	cmp	r3, #96	; 0x60
 8003336:	d877      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x16c>
 8003338:	2b50      	cmp	r3, #80	; 0x50
 800333a:	d03c      	beq.n	80033b6 <HAL_TIM_ConfigClockSource+0xfa>
 800333c:	2b50      	cmp	r3, #80	; 0x50
 800333e:	d873      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x16c>
 8003340:	2b40      	cmp	r3, #64	; 0x40
 8003342:	d058      	beq.n	80033f6 <HAL_TIM_ConfigClockSource+0x13a>
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	d86f      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x16c>
 8003348:	2b30      	cmp	r3, #48	; 0x30
 800334a:	d064      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0x15a>
 800334c:	2b30      	cmp	r3, #48	; 0x30
 800334e:	d86b      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x16c>
 8003350:	2b20      	cmp	r3, #32
 8003352:	d060      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0x15a>
 8003354:	2b20      	cmp	r3, #32
 8003356:	d867      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x16c>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d05c      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0x15a>
 800335c:	2b10      	cmp	r3, #16
 800335e:	d05a      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0x15a>
 8003360:	e062      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	6899      	ldr	r1, [r3, #8]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f000 f9ad 	bl	80036d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003384:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	609a      	str	r2, [r3, #8]
      break;
 800338e:	e04f      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	6899      	ldr	r1, [r3, #8]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f000 f996 	bl	80036d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033b2:	609a      	str	r2, [r3, #8]
      break;
 80033b4:	e03c      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6859      	ldr	r1, [r3, #4]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	461a      	mov	r2, r3
 80033c4:	f000 f90a 	bl	80035dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2150      	movs	r1, #80	; 0x50
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f963 	bl	800369a <TIM_ITRx_SetConfig>
      break;
 80033d4:	e02c      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	6859      	ldr	r1, [r3, #4]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	461a      	mov	r2, r3
 80033e4:	f000 f929 	bl	800363a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2160      	movs	r1, #96	; 0x60
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 f953 	bl	800369a <TIM_ITRx_SetConfig>
      break;
 80033f4:	e01c      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6859      	ldr	r1, [r3, #4]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	461a      	mov	r2, r3
 8003404:	f000 f8ea 	bl	80035dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2140      	movs	r1, #64	; 0x40
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f943 	bl	800369a <TIM_ITRx_SetConfig>
      break;
 8003414:	e00c      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4619      	mov	r1, r3
 8003420:	4610      	mov	r0, r2
 8003422:	f000 f93a 	bl	800369a <TIM_ITRx_SetConfig>
      break;
 8003426:	e003      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	73fb      	strb	r3, [r7, #15]
      break;
 800342c:	e000      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800342e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003440:	7bfb      	ldrb	r3, [r7, #15]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
	...

0800349c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a40      	ldr	r2, [pc, #256]	; (80035b0 <TIM_Base_SetConfig+0x114>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d013      	beq.n	80034dc <TIM_Base_SetConfig+0x40>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ba:	d00f      	beq.n	80034dc <TIM_Base_SetConfig+0x40>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a3d      	ldr	r2, [pc, #244]	; (80035b4 <TIM_Base_SetConfig+0x118>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00b      	beq.n	80034dc <TIM_Base_SetConfig+0x40>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a3c      	ldr	r2, [pc, #240]	; (80035b8 <TIM_Base_SetConfig+0x11c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d007      	beq.n	80034dc <TIM_Base_SetConfig+0x40>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a3b      	ldr	r2, [pc, #236]	; (80035bc <TIM_Base_SetConfig+0x120>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d003      	beq.n	80034dc <TIM_Base_SetConfig+0x40>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a3a      	ldr	r2, [pc, #232]	; (80035c0 <TIM_Base_SetConfig+0x124>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d108      	bne.n	80034ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a2f      	ldr	r2, [pc, #188]	; (80035b0 <TIM_Base_SetConfig+0x114>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d02b      	beq.n	800354e <TIM_Base_SetConfig+0xb2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fc:	d027      	beq.n	800354e <TIM_Base_SetConfig+0xb2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a2c      	ldr	r2, [pc, #176]	; (80035b4 <TIM_Base_SetConfig+0x118>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d023      	beq.n	800354e <TIM_Base_SetConfig+0xb2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a2b      	ldr	r2, [pc, #172]	; (80035b8 <TIM_Base_SetConfig+0x11c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d01f      	beq.n	800354e <TIM_Base_SetConfig+0xb2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a2a      	ldr	r2, [pc, #168]	; (80035bc <TIM_Base_SetConfig+0x120>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01b      	beq.n	800354e <TIM_Base_SetConfig+0xb2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a29      	ldr	r2, [pc, #164]	; (80035c0 <TIM_Base_SetConfig+0x124>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d017      	beq.n	800354e <TIM_Base_SetConfig+0xb2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a28      	ldr	r2, [pc, #160]	; (80035c4 <TIM_Base_SetConfig+0x128>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <TIM_Base_SetConfig+0xb2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a27      	ldr	r2, [pc, #156]	; (80035c8 <TIM_Base_SetConfig+0x12c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00f      	beq.n	800354e <TIM_Base_SetConfig+0xb2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a26      	ldr	r2, [pc, #152]	; (80035cc <TIM_Base_SetConfig+0x130>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00b      	beq.n	800354e <TIM_Base_SetConfig+0xb2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a25      	ldr	r2, [pc, #148]	; (80035d0 <TIM_Base_SetConfig+0x134>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d007      	beq.n	800354e <TIM_Base_SetConfig+0xb2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a24      	ldr	r2, [pc, #144]	; (80035d4 <TIM_Base_SetConfig+0x138>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d003      	beq.n	800354e <TIM_Base_SetConfig+0xb2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a23      	ldr	r2, [pc, #140]	; (80035d8 <TIM_Base_SetConfig+0x13c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d108      	bne.n	8003560 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4313      	orrs	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a0a      	ldr	r2, [pc, #40]	; (80035b0 <TIM_Base_SetConfig+0x114>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d003      	beq.n	8003594 <TIM_Base_SetConfig+0xf8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a0c      	ldr	r2, [pc, #48]	; (80035c0 <TIM_Base_SetConfig+0x124>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d103      	bne.n	800359c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	615a      	str	r2, [r3, #20]
}
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40010000 	.word	0x40010000
 80035b4:	40000400 	.word	0x40000400
 80035b8:	40000800 	.word	0x40000800
 80035bc:	40000c00 	.word	0x40000c00
 80035c0:	40010400 	.word	0x40010400
 80035c4:	40014000 	.word	0x40014000
 80035c8:	40014400 	.word	0x40014400
 80035cc:	40014800 	.word	0x40014800
 80035d0:	40001800 	.word	0x40001800
 80035d4:	40001c00 	.word	0x40001c00
 80035d8:	40002000 	.word	0x40002000

080035dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	f023 0201 	bic.w	r2, r3, #1
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f023 030a 	bic.w	r3, r3, #10
 8003618:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	621a      	str	r2, [r3, #32]
}
 800362e:	bf00      	nop
 8003630:	371c      	adds	r7, #28
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800363a:	b480      	push	{r7}
 800363c:	b087      	sub	sp, #28
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	f023 0210 	bic.w	r2, r3, #16
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003664:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	031b      	lsls	r3, r3, #12
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003676:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	621a      	str	r2, [r3, #32]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800369a:	b480      	push	{r7}
 800369c:	b085      	sub	sp, #20
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f043 0307 	orr.w	r3, r3, #7
 80036bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	609a      	str	r2, [r3, #8]
}
 80036c4:	bf00      	nop
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	021a      	lsls	r2, r3, #8
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	609a      	str	r2, [r3, #8]
}
 8003704:	bf00      	nop
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003724:	2302      	movs	r3, #2
 8003726:	e05a      	b.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a21      	ldr	r2, [pc, #132]	; (80037ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d022      	beq.n	80037b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003774:	d01d      	beq.n	80037b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a1d      	ldr	r2, [pc, #116]	; (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d018      	beq.n	80037b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a1b      	ldr	r2, [pc, #108]	; (80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d013      	beq.n	80037b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a1a      	ldr	r2, [pc, #104]	; (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d00e      	beq.n	80037b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a18      	ldr	r2, [pc, #96]	; (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d009      	beq.n	80037b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a17      	ldr	r2, [pc, #92]	; (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d004      	beq.n	80037b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a15      	ldr	r2, [pc, #84]	; (8003804 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d10c      	bne.n	80037cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40010000 	.word	0x40010000
 80037f0:	40000400 	.word	0x40000400
 80037f4:	40000800 	.word	0x40000800
 80037f8:	40000c00 	.word	0x40000c00
 80037fc:	40010400 	.word	0x40010400
 8003800:	40014000 	.word	0x40014000
 8003804:	40001800 	.word	0x40001800

08003808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e03f      	b.n	80038c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fd faf2 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2224      	movs	r2, #36	; 0x24
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003872:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 fddb 	bl	8004430 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003888:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003898:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b08a      	sub	sp, #40	; 0x28
 80038ce:	af02      	add	r7, sp, #8
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	603b      	str	r3, [r7, #0]
 80038d6:	4613      	mov	r3, r2
 80038d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d17c      	bne.n	80039e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_UART_Transmit+0x2c>
 80038f0:	88fb      	ldrh	r3, [r7, #6]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e075      	b.n	80039e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003900:	2b01      	cmp	r3, #1
 8003902:	d101      	bne.n	8003908 <HAL_UART_Transmit+0x3e>
 8003904:	2302      	movs	r3, #2
 8003906:	e06e      	b.n	80039e6 <HAL_UART_Transmit+0x11c>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2221      	movs	r2, #33	; 0x21
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800391e:	f7fd fc4b 	bl	80011b8 <HAL_GetTick>
 8003922:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	88fa      	ldrh	r2, [r7, #6]
 8003928:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	88fa      	ldrh	r2, [r7, #6]
 800392e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003938:	d108      	bne.n	800394c <HAL_UART_Transmit+0x82>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d104      	bne.n	800394c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	e003      	b.n	8003954 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003950:	2300      	movs	r3, #0
 8003952:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800395c:	e02a      	b.n	80039b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2200      	movs	r2, #0
 8003966:	2180      	movs	r1, #128	; 0x80
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 fb1f 	bl	8003fac <UART_WaitOnFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e036      	b.n	80039e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10b      	bne.n	8003996 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800398c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	3302      	adds	r3, #2
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	e007      	b.n	80039a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	3301      	adds	r3, #1
 80039a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1cf      	bne.n	800395e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2200      	movs	r2, #0
 80039c6:	2140      	movs	r1, #64	; 0x40
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 faef 	bl	8003fac <UART_WaitOnFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e006      	b.n	80039e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	e000      	b.n	80039e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039e4:	2302      	movs	r3, #2
  }
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	4613      	mov	r3, r2
 80039fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	d11d      	bne.n	8003a44 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_UART_Receive_IT+0x26>
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e016      	b.n	8003a46 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <HAL_UART_Receive_IT+0x38>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e00f      	b.n	8003a46 <HAL_UART_Receive_IT+0x58>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	461a      	mov	r2, r3
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fb24 	bl	8004088 <UART_Start_Receive_IT>
 8003a40:	4603      	mov	r3, r0
 8003a42:	e000      	b.n	8003a46 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003a44:	2302      	movs	r3, #2
  }
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b0ba      	sub	sp, #232	; 0xe8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10f      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x66>
 8003aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fc03 	bl	80042ba <UART_Receive_IT>
      return;
 8003ab4:	e256      	b.n	8003f64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 80de 	beq.w	8003c7c <HAL_UART_IRQHandler+0x22c>
 8003ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d106      	bne.n	8003ada <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80d1 	beq.w	8003c7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00b      	beq.n	8003afe <HAL_UART_IRQHandler+0xae>
 8003ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f043 0201 	orr.w	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00b      	beq.n	8003b22 <HAL_UART_IRQHandler+0xd2>
 8003b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f043 0202 	orr.w	r2, r3, #2
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <HAL_UART_IRQHandler+0xf6>
 8003b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f043 0204 	orr.w	r2, r3, #4
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d011      	beq.n	8003b76 <HAL_UART_IRQHandler+0x126>
 8003b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d105      	bne.n	8003b6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f043 0208 	orr.w	r2, r3, #8
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 81ed 	beq.w	8003f5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_UART_IRQHandler+0x14e>
 8003b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fb8e 	bl	80042ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba8:	2b40      	cmp	r3, #64	; 0x40
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d103      	bne.n	8003bca <HAL_UART_IRQHandler+0x17a>
 8003bc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d04f      	beq.n	8003c6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fa96 	bl	80040fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bda:	2b40      	cmp	r3, #64	; 0x40
 8003bdc:	d141      	bne.n	8003c62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3314      	adds	r3, #20
 8003be4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3314      	adds	r3, #20
 8003c06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1d9      	bne.n	8003bde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d013      	beq.n	8003c5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	4a7d      	ldr	r2, [pc, #500]	; (8003e2c <HAL_UART_IRQHandler+0x3dc>)
 8003c38:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fd fc47 	bl	80014d2 <HAL_DMA_Abort_IT>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d016      	beq.n	8003c78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c54:	4610      	mov	r0, r2
 8003c56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c58:	e00e      	b.n	8003c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f990 	bl	8003f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c60:	e00a      	b.n	8003c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f98c 	bl	8003f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c68:	e006      	b.n	8003c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f988 	bl	8003f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c76:	e170      	b.n	8003f5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c78:	bf00      	nop
    return;
 8003c7a:	e16e      	b.n	8003f5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	f040 814a 	bne.w	8003f1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8a:	f003 0310 	and.w	r3, r3, #16
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 8143 	beq.w	8003f1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 813c 	beq.w	8003f1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc2:	2b40      	cmp	r3, #64	; 0x40
 8003cc4:	f040 80b4 	bne.w	8003e30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 8140 	beq.w	8003f5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	f080 8139 	bcs.w	8003f5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cf2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cfe:	f000 8088 	beq.w	8003e12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	330c      	adds	r3, #12
 8003d08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	330c      	adds	r3, #12
 8003d2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1d9      	bne.n	8003d02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3314      	adds	r3, #20
 8003d54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d58:	e853 3f00 	ldrex	r3, [r3]
 8003d5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d60:	f023 0301 	bic.w	r3, r3, #1
 8003d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3314      	adds	r3, #20
 8003d6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d7e:	e841 2300 	strex	r3, r2, [r1]
 8003d82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1e1      	bne.n	8003d4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3314      	adds	r3, #20
 8003d90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003da0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3314      	adds	r3, #20
 8003daa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003dae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003db0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003db4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e3      	bne.n	8003d8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de2:	f023 0310 	bic.w	r3, r3, #16
 8003de6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	330c      	adds	r3, #12
 8003df0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003df4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003df6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e3      	bne.n	8003dd0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fd faf0 	bl	80013f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f8b6 	bl	8003f94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e28:	e099      	b.n	8003f5e <HAL_UART_IRQHandler+0x50e>
 8003e2a:	bf00      	nop
 8003e2c:	080041c3 	.word	0x080041c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 808b 	beq.w	8003f62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 8086 	beq.w	8003f62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	330c      	adds	r3, #12
 8003e5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e60:	e853 3f00 	ldrex	r3, [r3]
 8003e64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	330c      	adds	r3, #12
 8003e76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e7a:	647a      	str	r2, [r7, #68]	; 0x44
 8003e7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e82:	e841 2300 	strex	r3, r2, [r1]
 8003e86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1e3      	bne.n	8003e56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3314      	adds	r3, #20
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	f023 0301 	bic.w	r3, r3, #1
 8003ea4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3314      	adds	r3, #20
 8003eae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003eb2:	633a      	str	r2, [r7, #48]	; 0x30
 8003eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e3      	bne.n	8003e8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	330c      	adds	r3, #12
 8003eda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	e853 3f00 	ldrex	r3, [r3]
 8003ee2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0310 	bic.w	r3, r3, #16
 8003eea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ef8:	61fa      	str	r2, [r7, #28]
 8003efa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efc:	69b9      	ldr	r1, [r7, #24]
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	e841 2300 	strex	r3, r2, [r1]
 8003f04:	617b      	str	r3, [r7, #20]
   return(result);
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1e3      	bne.n	8003ed4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f10:	4619      	mov	r1, r3
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f83e 	bl	8003f94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f18:	e023      	b.n	8003f62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <HAL_UART_IRQHandler+0x4ea>
 8003f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f959 	bl	80041ea <UART_Transmit_IT>
    return;
 8003f38:	e014      	b.n	8003f64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00e      	beq.n	8003f64 <HAL_UART_IRQHandler+0x514>
 8003f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d008      	beq.n	8003f64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f999 	bl	800428a <UART_EndTransmit_IT>
    return;
 8003f58:	e004      	b.n	8003f64 <HAL_UART_IRQHandler+0x514>
    return;
 8003f5a:	bf00      	nop
 8003f5c:	e002      	b.n	8003f64 <HAL_UART_IRQHandler+0x514>
      return;
 8003f5e:	bf00      	nop
 8003f60:	e000      	b.n	8003f64 <HAL_UART_IRQHandler+0x514>
      return;
 8003f62:	bf00      	nop
  }
}
 8003f64:	37e8      	adds	r7, #232	; 0xe8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop

08003f6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b090      	sub	sp, #64	; 0x40
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fbc:	e050      	b.n	8004060 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d04c      	beq.n	8004060 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d007      	beq.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x30>
 8003fcc:	f7fd f8f4 	bl	80011b8 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d241      	bcs.n	8004060 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	330c      	adds	r3, #12
 8003fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe6:	e853 3f00 	ldrex	r3, [r3]
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	330c      	adds	r3, #12
 8003ffa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ffc:	637a      	str	r2, [r7, #52]	; 0x34
 8003ffe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004000:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004002:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004004:	e841 2300 	strex	r3, r2, [r1]
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800400a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1e5      	bne.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3314      	adds	r3, #20
 8004016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	e853 3f00 	ldrex	r3, [r3]
 800401e:	613b      	str	r3, [r7, #16]
   return(result);
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f023 0301 	bic.w	r3, r3, #1
 8004026:	63bb      	str	r3, [r7, #56]	; 0x38
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3314      	adds	r3, #20
 800402e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004030:	623a      	str	r2, [r7, #32]
 8004032:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004034:	69f9      	ldr	r1, [r7, #28]
 8004036:	6a3a      	ldr	r2, [r7, #32]
 8004038:	e841 2300 	strex	r3, r2, [r1]
 800403c:	61bb      	str	r3, [r7, #24]
   return(result);
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e5      	bne.n	8004010 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e00f      	b.n	8004080 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4013      	ands	r3, r2
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	429a      	cmp	r2, r3
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	79fb      	ldrb	r3, [r7, #7]
 800407a:	429a      	cmp	r2, r3
 800407c:	d09f      	beq.n	8003fbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3740      	adds	r7, #64	; 0x40
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	4613      	mov	r3, r2
 8004094:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	88fa      	ldrh	r2, [r7, #6]
 80040a0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	88fa      	ldrh	r2, [r7, #6]
 80040a6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2222      	movs	r2, #34	; 0x22
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040cc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695a      	ldr	r2, [r3, #20]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f042 0201 	orr.w	r2, r2, #1
 80040dc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0220 	orr.w	r2, r2, #32
 80040ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b095      	sub	sp, #84	; 0x54
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	330c      	adds	r3, #12
 800410a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800411a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	330c      	adds	r3, #12
 8004122:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004124:	643a      	str	r2, [r7, #64]	; 0x40
 8004126:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004128:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800412a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800412c:	e841 2300 	strex	r3, r2, [r1]
 8004130:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1e5      	bne.n	8004104 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3314      	adds	r3, #20
 800413e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	61fb      	str	r3, [r7, #28]
   return(result);
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f023 0301 	bic.w	r3, r3, #1
 800414e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3314      	adds	r3, #20
 8004156:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004158:	62fa      	str	r2, [r7, #44]	; 0x2c
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800415e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e5      	bne.n	8004138 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	2b01      	cmp	r3, #1
 8004172:	d119      	bne.n	80041a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	60bb      	str	r3, [r7, #8]
   return(result);
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f023 0310 	bic.w	r3, r3, #16
 800418a:	647b      	str	r3, [r7, #68]	; 0x44
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	330c      	adds	r3, #12
 8004192:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004194:	61ba      	str	r2, [r7, #24]
 8004196:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	6979      	ldr	r1, [r7, #20]
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	613b      	str	r3, [r7, #16]
   return(result);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e5      	bne.n	8004174 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041b6:	bf00      	nop
 80041b8:	3754      	adds	r7, #84	; 0x54
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f7ff fecf 	bl	8003f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041e2:	bf00      	nop
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b085      	sub	sp, #20
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b21      	cmp	r3, #33	; 0x21
 80041fc:	d13e      	bne.n	800427c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004206:	d114      	bne.n	8004232 <UART_Transmit_IT+0x48>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d110      	bne.n	8004232 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004224:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	1c9a      	adds	r2, r3, #2
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	621a      	str	r2, [r3, #32]
 8004230:	e008      	b.n	8004244 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	1c59      	adds	r1, r3, #1
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6211      	str	r1, [r2, #32]
 800423c:	781a      	ldrb	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004248:	b29b      	uxth	r3, r3
 800424a:	3b01      	subs	r3, #1
 800424c:	b29b      	uxth	r3, r3
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	4619      	mov	r1, r3
 8004252:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10f      	bne.n	8004278 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004266:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004276:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	e000      	b.n	800427e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800427c:	2302      	movs	r3, #2
  }
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff fe5e 	bl	8003f6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b08c      	sub	sp, #48	; 0x30
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b22      	cmp	r3, #34	; 0x22
 80042cc:	f040 80ab 	bne.w	8004426 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d8:	d117      	bne.n	800430a <UART_Receive_IT+0x50>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d113      	bne.n	800430a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004302:	1c9a      	adds	r2, r3, #2
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	629a      	str	r2, [r3, #40]	; 0x28
 8004308:	e026      	b.n	8004358 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004310:	2300      	movs	r3, #0
 8004312:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431c:	d007      	beq.n	800432e <UART_Receive_IT+0x74>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10a      	bne.n	800433c <UART_Receive_IT+0x82>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004338:	701a      	strb	r2, [r3, #0]
 800433a:	e008      	b.n	800434e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004348:	b2da      	uxtb	r2, r3
 800434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800435c:	b29b      	uxth	r3, r3
 800435e:	3b01      	subs	r3, #1
 8004360:	b29b      	uxth	r3, r3
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	4619      	mov	r1, r3
 8004366:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004368:	2b00      	cmp	r3, #0
 800436a:	d15a      	bne.n	8004422 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0220 	bic.w	r2, r2, #32
 800437a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800438a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695a      	ldr	r2, [r3, #20]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0201 	bic.w	r2, r2, #1
 800439a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d135      	bne.n	8004418 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	330c      	adds	r3, #12
 80043b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	e853 3f00 	ldrex	r3, [r3]
 80043c0:	613b      	str	r3, [r7, #16]
   return(result);
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f023 0310 	bic.w	r3, r3, #16
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	330c      	adds	r3, #12
 80043d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d2:	623a      	str	r2, [r7, #32]
 80043d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d6:	69f9      	ldr	r1, [r7, #28]
 80043d8:	6a3a      	ldr	r2, [r7, #32]
 80043da:	e841 2300 	strex	r3, r2, [r1]
 80043de:	61bb      	str	r3, [r7, #24]
   return(result);
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1e5      	bne.n	80043b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0310 	and.w	r3, r3, #16
 80043f0:	2b10      	cmp	r3, #16
 80043f2:	d10a      	bne.n	800440a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800440e:	4619      	mov	r1, r3
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff fdbf 	bl	8003f94 <HAL_UARTEx_RxEventCallback>
 8004416:	e002      	b.n	800441e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7fc fc4f 	bl	8000cbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	e002      	b.n	8004428 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	e000      	b.n	8004428 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004426:	2302      	movs	r3, #2
  }
}
 8004428:	4618      	mov	r0, r3
 800442a:	3730      	adds	r7, #48	; 0x30
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004434:	b09f      	sub	sp, #124	; 0x7c
 8004436:	af00      	add	r7, sp, #0
 8004438:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800443a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004446:	68d9      	ldr	r1, [r3, #12]
 8004448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	ea40 0301 	orr.w	r3, r0, r1
 8004450:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	431a      	orrs	r2, r3
 800445c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	431a      	orrs	r2, r3
 8004462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	4313      	orrs	r3, r2
 8004468:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800446a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004474:	f021 010c 	bic.w	r1, r1, #12
 8004478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800447e:	430b      	orrs	r3, r1
 8004480:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800448c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800448e:	6999      	ldr	r1, [r3, #24]
 8004490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	ea40 0301 	orr.w	r3, r0, r1
 8004498:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800449a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4bc5      	ldr	r3, [pc, #788]	; (80047b4 <UART_SetConfig+0x384>)
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d004      	beq.n	80044ae <UART_SetConfig+0x7e>
 80044a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	4bc3      	ldr	r3, [pc, #780]	; (80047b8 <UART_SetConfig+0x388>)
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d103      	bne.n	80044b6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044ae:	f7fd fe63 	bl	8002178 <HAL_RCC_GetPCLK2Freq>
 80044b2:	6778      	str	r0, [r7, #116]	; 0x74
 80044b4:	e002      	b.n	80044bc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044b6:	f7fd fe4b 	bl	8002150 <HAL_RCC_GetPCLK1Freq>
 80044ba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c4:	f040 80b6 	bne.w	8004634 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ca:	461c      	mov	r4, r3
 80044cc:	f04f 0500 	mov.w	r5, #0
 80044d0:	4622      	mov	r2, r4
 80044d2:	462b      	mov	r3, r5
 80044d4:	1891      	adds	r1, r2, r2
 80044d6:	6439      	str	r1, [r7, #64]	; 0x40
 80044d8:	415b      	adcs	r3, r3
 80044da:	647b      	str	r3, [r7, #68]	; 0x44
 80044dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044e0:	1912      	adds	r2, r2, r4
 80044e2:	eb45 0303 	adc.w	r3, r5, r3
 80044e6:	f04f 0000 	mov.w	r0, #0
 80044ea:	f04f 0100 	mov.w	r1, #0
 80044ee:	00d9      	lsls	r1, r3, #3
 80044f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044f4:	00d0      	lsls	r0, r2, #3
 80044f6:	4602      	mov	r2, r0
 80044f8:	460b      	mov	r3, r1
 80044fa:	1911      	adds	r1, r2, r4
 80044fc:	6639      	str	r1, [r7, #96]	; 0x60
 80044fe:	416b      	adcs	r3, r5
 8004500:	667b      	str	r3, [r7, #100]	; 0x64
 8004502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	461a      	mov	r2, r3
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	1891      	adds	r1, r2, r2
 800450e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004510:	415b      	adcs	r3, r3
 8004512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004514:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004518:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800451c:	f7fb fe54 	bl	80001c8 <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4ba5      	ldr	r3, [pc, #660]	; (80047bc <UART_SetConfig+0x38c>)
 8004526:	fba3 2302 	umull	r2, r3, r3, r2
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	011e      	lsls	r6, r3, #4
 800452e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004530:	461c      	mov	r4, r3
 8004532:	f04f 0500 	mov.w	r5, #0
 8004536:	4622      	mov	r2, r4
 8004538:	462b      	mov	r3, r5
 800453a:	1891      	adds	r1, r2, r2
 800453c:	6339      	str	r1, [r7, #48]	; 0x30
 800453e:	415b      	adcs	r3, r3
 8004540:	637b      	str	r3, [r7, #52]	; 0x34
 8004542:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004546:	1912      	adds	r2, r2, r4
 8004548:	eb45 0303 	adc.w	r3, r5, r3
 800454c:	f04f 0000 	mov.w	r0, #0
 8004550:	f04f 0100 	mov.w	r1, #0
 8004554:	00d9      	lsls	r1, r3, #3
 8004556:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800455a:	00d0      	lsls	r0, r2, #3
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	1911      	adds	r1, r2, r4
 8004562:	65b9      	str	r1, [r7, #88]	; 0x58
 8004564:	416b      	adcs	r3, r5
 8004566:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	461a      	mov	r2, r3
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	1891      	adds	r1, r2, r2
 8004574:	62b9      	str	r1, [r7, #40]	; 0x28
 8004576:	415b      	adcs	r3, r3
 8004578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800457a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800457e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004582:	f7fb fe21 	bl	80001c8 <__aeabi_uldivmod>
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	4b8c      	ldr	r3, [pc, #560]	; (80047bc <UART_SetConfig+0x38c>)
 800458c:	fba3 1302 	umull	r1, r3, r3, r2
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	2164      	movs	r1, #100	; 0x64
 8004594:	fb01 f303 	mul.w	r3, r1, r3
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	3332      	adds	r3, #50	; 0x32
 800459e:	4a87      	ldr	r2, [pc, #540]	; (80047bc <UART_SetConfig+0x38c>)
 80045a0:	fba2 2303 	umull	r2, r3, r2, r3
 80045a4:	095b      	lsrs	r3, r3, #5
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045ac:	441e      	add	r6, r3
 80045ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b0:	4618      	mov	r0, r3
 80045b2:	f04f 0100 	mov.w	r1, #0
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	1894      	adds	r4, r2, r2
 80045bc:	623c      	str	r4, [r7, #32]
 80045be:	415b      	adcs	r3, r3
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
 80045c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045c6:	1812      	adds	r2, r2, r0
 80045c8:	eb41 0303 	adc.w	r3, r1, r3
 80045cc:	f04f 0400 	mov.w	r4, #0
 80045d0:	f04f 0500 	mov.w	r5, #0
 80045d4:	00dd      	lsls	r5, r3, #3
 80045d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045da:	00d4      	lsls	r4, r2, #3
 80045dc:	4622      	mov	r2, r4
 80045de:	462b      	mov	r3, r5
 80045e0:	1814      	adds	r4, r2, r0
 80045e2:	653c      	str	r4, [r7, #80]	; 0x50
 80045e4:	414b      	adcs	r3, r1
 80045e6:	657b      	str	r3, [r7, #84]	; 0x54
 80045e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	461a      	mov	r2, r3
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	1891      	adds	r1, r2, r2
 80045f4:	61b9      	str	r1, [r7, #24]
 80045f6:	415b      	adcs	r3, r3
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045fe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004602:	f7fb fde1 	bl	80001c8 <__aeabi_uldivmod>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	4b6c      	ldr	r3, [pc, #432]	; (80047bc <UART_SetConfig+0x38c>)
 800460c:	fba3 1302 	umull	r1, r3, r3, r2
 8004610:	095b      	lsrs	r3, r3, #5
 8004612:	2164      	movs	r1, #100	; 0x64
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	3332      	adds	r3, #50	; 0x32
 800461e:	4a67      	ldr	r2, [pc, #412]	; (80047bc <UART_SetConfig+0x38c>)
 8004620:	fba2 2303 	umull	r2, r3, r2, r3
 8004624:	095b      	lsrs	r3, r3, #5
 8004626:	f003 0207 	and.w	r2, r3, #7
 800462a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4432      	add	r2, r6
 8004630:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004632:	e0b9      	b.n	80047a8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004636:	461c      	mov	r4, r3
 8004638:	f04f 0500 	mov.w	r5, #0
 800463c:	4622      	mov	r2, r4
 800463e:	462b      	mov	r3, r5
 8004640:	1891      	adds	r1, r2, r2
 8004642:	6139      	str	r1, [r7, #16]
 8004644:	415b      	adcs	r3, r3
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800464c:	1912      	adds	r2, r2, r4
 800464e:	eb45 0303 	adc.w	r3, r5, r3
 8004652:	f04f 0000 	mov.w	r0, #0
 8004656:	f04f 0100 	mov.w	r1, #0
 800465a:	00d9      	lsls	r1, r3, #3
 800465c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004660:	00d0      	lsls	r0, r2, #3
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	eb12 0804 	adds.w	r8, r2, r4
 800466a:	eb43 0905 	adc.w	r9, r3, r5
 800466e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	4618      	mov	r0, r3
 8004674:	f04f 0100 	mov.w	r1, #0
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	008b      	lsls	r3, r1, #2
 8004682:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004686:	0082      	lsls	r2, r0, #2
 8004688:	4640      	mov	r0, r8
 800468a:	4649      	mov	r1, r9
 800468c:	f7fb fd9c 	bl	80001c8 <__aeabi_uldivmod>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4b49      	ldr	r3, [pc, #292]	; (80047bc <UART_SetConfig+0x38c>)
 8004696:	fba3 2302 	umull	r2, r3, r3, r2
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	011e      	lsls	r6, r3, #4
 800469e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046a0:	4618      	mov	r0, r3
 80046a2:	f04f 0100 	mov.w	r1, #0
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	1894      	adds	r4, r2, r2
 80046ac:	60bc      	str	r4, [r7, #8]
 80046ae:	415b      	adcs	r3, r3
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046b6:	1812      	adds	r2, r2, r0
 80046b8:	eb41 0303 	adc.w	r3, r1, r3
 80046bc:	f04f 0400 	mov.w	r4, #0
 80046c0:	f04f 0500 	mov.w	r5, #0
 80046c4:	00dd      	lsls	r5, r3, #3
 80046c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046ca:	00d4      	lsls	r4, r2, #3
 80046cc:	4622      	mov	r2, r4
 80046ce:	462b      	mov	r3, r5
 80046d0:	1814      	adds	r4, r2, r0
 80046d2:	64bc      	str	r4, [r7, #72]	; 0x48
 80046d4:	414b      	adcs	r3, r1
 80046d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	4618      	mov	r0, r3
 80046de:	f04f 0100 	mov.w	r1, #0
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	f04f 0300 	mov.w	r3, #0
 80046ea:	008b      	lsls	r3, r1, #2
 80046ec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046f0:	0082      	lsls	r2, r0, #2
 80046f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80046f6:	f7fb fd67 	bl	80001c8 <__aeabi_uldivmod>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4b2f      	ldr	r3, [pc, #188]	; (80047bc <UART_SetConfig+0x38c>)
 8004700:	fba3 1302 	umull	r1, r3, r3, r2
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	2164      	movs	r1, #100	; 0x64
 8004708:	fb01 f303 	mul.w	r3, r1, r3
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	3332      	adds	r3, #50	; 0x32
 8004712:	4a2a      	ldr	r2, [pc, #168]	; (80047bc <UART_SetConfig+0x38c>)
 8004714:	fba2 2303 	umull	r2, r3, r2, r3
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800471e:	441e      	add	r6, r3
 8004720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004722:	4618      	mov	r0, r3
 8004724:	f04f 0100 	mov.w	r1, #0
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	1894      	adds	r4, r2, r2
 800472e:	603c      	str	r4, [r7, #0]
 8004730:	415b      	adcs	r3, r3
 8004732:	607b      	str	r3, [r7, #4]
 8004734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004738:	1812      	adds	r2, r2, r0
 800473a:	eb41 0303 	adc.w	r3, r1, r3
 800473e:	f04f 0400 	mov.w	r4, #0
 8004742:	f04f 0500 	mov.w	r5, #0
 8004746:	00dd      	lsls	r5, r3, #3
 8004748:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800474c:	00d4      	lsls	r4, r2, #3
 800474e:	4622      	mov	r2, r4
 8004750:	462b      	mov	r3, r5
 8004752:	eb12 0a00 	adds.w	sl, r2, r0
 8004756:	eb43 0b01 	adc.w	fp, r3, r1
 800475a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	4618      	mov	r0, r3
 8004760:	f04f 0100 	mov.w	r1, #0
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	008b      	lsls	r3, r1, #2
 800476e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004772:	0082      	lsls	r2, r0, #2
 8004774:	4650      	mov	r0, sl
 8004776:	4659      	mov	r1, fp
 8004778:	f7fb fd26 	bl	80001c8 <__aeabi_uldivmod>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <UART_SetConfig+0x38c>)
 8004782:	fba3 1302 	umull	r1, r3, r3, r2
 8004786:	095b      	lsrs	r3, r3, #5
 8004788:	2164      	movs	r1, #100	; 0x64
 800478a:	fb01 f303 	mul.w	r3, r1, r3
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	3332      	adds	r3, #50	; 0x32
 8004794:	4a09      	ldr	r2, [pc, #36]	; (80047bc <UART_SetConfig+0x38c>)
 8004796:	fba2 2303 	umull	r2, r3, r2, r3
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	f003 020f 	and.w	r2, r3, #15
 80047a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4432      	add	r2, r6
 80047a6:	609a      	str	r2, [r3, #8]
}
 80047a8:	bf00      	nop
 80047aa:	377c      	adds	r7, #124	; 0x7c
 80047ac:	46bd      	mov	sp, r7
 80047ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b2:	bf00      	nop
 80047b4:	40011000 	.word	0x40011000
 80047b8:	40011400 	.word	0x40011400
 80047bc:	51eb851f 	.word	0x51eb851f

080047c0 <__libc_init_array>:
 80047c0:	b570      	push	{r4, r5, r6, lr}
 80047c2:	4d0d      	ldr	r5, [pc, #52]	; (80047f8 <__libc_init_array+0x38>)
 80047c4:	4c0d      	ldr	r4, [pc, #52]	; (80047fc <__libc_init_array+0x3c>)
 80047c6:	1b64      	subs	r4, r4, r5
 80047c8:	10a4      	asrs	r4, r4, #2
 80047ca:	2600      	movs	r6, #0
 80047cc:	42a6      	cmp	r6, r4
 80047ce:	d109      	bne.n	80047e4 <__libc_init_array+0x24>
 80047d0:	4d0b      	ldr	r5, [pc, #44]	; (8004800 <__libc_init_array+0x40>)
 80047d2:	4c0c      	ldr	r4, [pc, #48]	; (8004804 <__libc_init_array+0x44>)
 80047d4:	f000 f820 	bl	8004818 <_init>
 80047d8:	1b64      	subs	r4, r4, r5
 80047da:	10a4      	asrs	r4, r4, #2
 80047dc:	2600      	movs	r6, #0
 80047de:	42a6      	cmp	r6, r4
 80047e0:	d105      	bne.n	80047ee <__libc_init_array+0x2e>
 80047e2:	bd70      	pop	{r4, r5, r6, pc}
 80047e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e8:	4798      	blx	r3
 80047ea:	3601      	adds	r6, #1
 80047ec:	e7ee      	b.n	80047cc <__libc_init_array+0xc>
 80047ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80047f2:	4798      	blx	r3
 80047f4:	3601      	adds	r6, #1
 80047f6:	e7f2      	b.n	80047de <__libc_init_array+0x1e>
 80047f8:	08004850 	.word	0x08004850
 80047fc:	08004850 	.word	0x08004850
 8004800:	08004850 	.word	0x08004850
 8004804:	08004854 	.word	0x08004854

08004808 <memset>:
 8004808:	4402      	add	r2, r0
 800480a:	4603      	mov	r3, r0
 800480c:	4293      	cmp	r3, r2
 800480e:	d100      	bne.n	8004812 <memset+0xa>
 8004810:	4770      	bx	lr
 8004812:	f803 1b01 	strb.w	r1, [r3], #1
 8004816:	e7f9      	b.n	800480c <memset+0x4>

08004818 <_init>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	bf00      	nop
 800481c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481e:	bc08      	pop	{r3}
 8004820:	469e      	mov	lr, r3
 8004822:	4770      	bx	lr

08004824 <_fini>:
 8004824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004826:	bf00      	nop
 8004828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482a:	bc08      	pop	{r3}
 800482c:	469e      	mov	lr, r3
 800482e:	4770      	bx	lr
