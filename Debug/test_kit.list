
test_kit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c16c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800c300  0800c300  0001c300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c754  0800c754  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c754  0800c754  0001c754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c75c  0800c75c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c75c  0800c75c  0001c75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c760  0800c760  0001c760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          000003b4  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000598  20000598  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002126e  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000374e  00000000  00000000  00041482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  00044bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001338  00000000  00000000  00046048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002559d  00000000  00000000  00047380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a016  00000000  00000000  0006c91d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd74c  00000000  00000000  00086933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016407f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006700  00000000  00000000  001640d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c2e4 	.word	0x0800c2e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800c2e4 	.word	0x0800c2e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <ADC_Init>:

#include "adc.h"

uint32_t adcReceive[4];

void ADC_Init(){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	HAL_ADC_Init(&hadc1);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <ADC_Init+0x10>)
 8000f46:	f001 fdf5 	bl	8002b34 <HAL_ADC_Init>
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200002d8 	.word	0x200002d8

08000f54 <ADC_ReadSensor>:


void ADC_ReadSensor(){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, adcReceive, 4);
 8000f58:	2204      	movs	r2, #4
 8000f5a:	4903      	ldr	r1, [pc, #12]	; (8000f68 <ADC_ReadSensor+0x14>)
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <ADC_ReadSensor+0x18>)
 8000f5e:	f001 fe2d 	bl	8002bbc <HAL_ADC_Start_DMA>
//	HAL_ADC_Stop_DMA(&hadc1);
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000320 	.word	0x20000320
 8000f6c:	200002d8 	.word	0x200002d8

08000f70 <ADC_GetLight>:

uint32_t ADC_GetLight(){
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
	return adcReceive[0];
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <ADC_GetLight+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000320 	.word	0x20000320

08000f88 <ADC_GetVarResistor>:

uint32_t ADC_GetVarResistor(){
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
	return adcReceive[1];
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <ADC_GetVarResistor+0x14>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000320 	.word	0x20000320

08000fa0 <ADC_GetVoltage>:

float ADC_GetVoltage(){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	return ((float)adcReceive[2]*3.3*12)/(4095*1.565);
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <ADC_GetVoltage+0x70>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	ee07 3a90 	vmov	s15, r3
 8000fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fb0:	ee17 0a90 	vmov	r0, s15
 8000fb4:	f7ff fac8 	bl	8000548 <__aeabi_f2d>
 8000fb8:	a311      	add	r3, pc, #68	; (adr r3, 8001000 <ADC_GetVoltage+0x60>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff fb1b 	bl	80005f8 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <ADC_GetVoltage+0x74>)
 8000fd0:	f7ff fb12 	bl	80005f8 <__aeabi_dmul>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	a30a      	add	r3, pc, #40	; (adr r3, 8001008 <ADC_GetVoltage+0x68>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff fc33 	bl	800084c <__aeabi_ddiv>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff fddb 	bl	8000ba8 <__aeabi_d2f>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	ee07 3a90 	vmov	s15, r3
}
 8000ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	66666666 	.word	0x66666666
 8001004:	400a6666 	.word	0x400a6666
 8001008:	cccccccd 	.word	0xcccccccd
 800100c:	40b908ac 	.word	0x40b908ac
 8001010:	20000320 	.word	0x20000320
 8001014:	40280000 	.word	0x40280000

08001018 <ADC_GetCurrent>:

float ADC_GetCurrent(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	return (((float)adcReceive[3]*3.235)/(4095*0.647)-2.5)*5/2.5;
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <ADC_GetCurrent+0x98>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001028:	ee17 0a90 	vmov	r0, s15
 800102c:	f7ff fa8c 	bl	8000548 <__aeabi_f2d>
 8001030:	a31b      	add	r3, pc, #108	; (adr r3, 80010a0 <ADC_GetCurrent+0x88>)
 8001032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001036:	f7ff fadf 	bl	80005f8 <__aeabi_dmul>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4610      	mov	r0, r2
 8001040:	4619      	mov	r1, r3
 8001042:	a319      	add	r3, pc, #100	; (adr r3, 80010a8 <ADC_GetCurrent+0x90>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	f7ff fc00 	bl	800084c <__aeabi_ddiv>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <ADC_GetCurrent+0x9c>)
 800105a:	f7ff f915 	bl	8000288 <__aeabi_dsub>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4610      	mov	r0, r2
 8001064:	4619      	mov	r1, r3
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <ADC_GetCurrent+0xa0>)
 800106c:	f7ff fac4 	bl	80005f8 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <ADC_GetCurrent+0x9c>)
 800107e:	f7ff fbe5 	bl	800084c <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff fd8d 	bl	8000ba8 <__aeabi_d2f>
 800108e:	4603      	mov	r3, r0
 8001090:	ee07 3a90 	vmov	s15, r3
}
 8001094:	eeb0 0a67 	vmov.f32	s0, s15
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	f3af 8000 	nop.w
 80010a0:	ae147ae1 	.word	0xae147ae1
 80010a4:	4009e147 	.word	0x4009e147
 80010a8:	147ae148 	.word	0x147ae148
 80010ac:	40a4b2ee 	.word	0x40a4b2ee
 80010b0:	20000320 	.word	0x20000320
 80010b4:	40040000 	.word	0x40040000
 80010b8:	40140000 	.word	0x40140000

080010bc <test_adc>:

void test_adc(){
 80010bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010c0:	b09e      	sub	sp, #120	; 0x78
 80010c2:	af04      	add	r7, sp, #16
	ADC_ReadSensor();
 80010c4:	f7ff ff46 	bl	8000f54 <ADC_ReadSensor>
	char msg[100];
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf(msg, "Light: %ld, VarResistor: %ld, Voltage: %.2f, Current: %.4f\n", ADC_GetLight(), ADC_GetVarResistor(), ADC_GetVoltage(), ADC_GetCurrent()), 10);
 80010c8:	f7ff ff52 	bl	8000f70 <ADC_GetLight>
 80010cc:	4606      	mov	r6, r0
 80010ce:	f7ff ff5b 	bl	8000f88 <ADC_GetVarResistor>
 80010d2:	4680      	mov	r8, r0
 80010d4:	f7ff ff64 	bl	8000fa0 <ADC_GetVoltage>
 80010d8:	ee10 3a10 	vmov	r3, s0
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fa33 	bl	8000548 <__aeabi_f2d>
 80010e2:	4604      	mov	r4, r0
 80010e4:	460d      	mov	r5, r1
 80010e6:	f7ff ff97 	bl	8001018 <ADC_GetCurrent>
 80010ea:	ee10 3a10 	vmov	r3, s0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fa2a 	bl	8000548 <__aeabi_f2d>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	1d38      	adds	r0, r7, #4
 80010fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010fe:	e9cd 4500 	strd	r4, r5, [sp]
 8001102:	4643      	mov	r3, r8
 8001104:	4632      	mov	r2, r6
 8001106:	4907      	ldr	r1, [pc, #28]	; (8001124 <test_adc+0x68>)
 8001108:	f008 fec0 	bl	8009e8c <siprintf>
 800110c:	4603      	mov	r3, r0
 800110e:	b29a      	uxth	r2, r3
 8001110:	1d39      	adds	r1, r7, #4
 8001112:	230a      	movs	r3, #10
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <test_adc+0x6c>)
 8001116:	f007 faa2 	bl	800865e <HAL_UART_Transmit>

}
 800111a:	bf00      	nop
 800111c:	3768      	adds	r7, #104	; 0x68
 800111e:	46bd      	mov	sp, r7
 8001120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001124:	0800c300 	.word	0x0800c300
 8001128:	20000378 	.word	0x20000378

0800112c <button_init>:
#include <stdio.h>

unsigned char button_count[8] = {0, 0, 0, 0, 0, 0, 0, 0};
unsigned char spi_button = 0x00;

void button_init(){
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	HAL_SPI_Init(&hspi1);
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <button_init+0x18>)
 8001132:	f005 fadd 	bl	80066f0 <HAL_SPI_Init>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001136:	2201      	movs	r2, #1
 8001138:	2108      	movs	r1, #8
 800113a:	4803      	ldr	r0, [pc, #12]	; (8001148 <button_init+0x1c>)
 800113c:	f002 ffca 	bl	80040d4 <HAL_GPIO_WritePin>
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000041c 	.word	0x2000041c
 8001148:	40020c00 	.word	0x40020c00

0800114c <button_scan>:

void button_scan(){
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2108      	movs	r1, #8
 8001156:	482a      	ldr	r0, [pc, #168]	; (8001200 <button_scan+0xb4>)
 8001158:	f002 ffbc 	bl	80040d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800115c:	2201      	movs	r2, #1
 800115e:	2108      	movs	r1, #8
 8001160:	4827      	ldr	r0, [pc, #156]	; (8001200 <button_scan+0xb4>)
 8001162:	f002 ffb7 	bl	80040d4 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, &spi_button, 1, 1);
 8001166:	2301      	movs	r3, #1
 8001168:	2201      	movs	r2, #1
 800116a:	4926      	ldr	r1, [pc, #152]	; (8001204 <button_scan+0xb8>)
 800116c:	4826      	ldr	r0, [pc, #152]	; (8001208 <button_scan+0xbc>)
 800116e:	f005 fc84 	bl	8006a7a <HAL_SPI_Receive>
	  unsigned char mask = 0x80;
 8001172:	2380      	movs	r3, #128	; 0x80
 8001174:	71fb      	strb	r3, [r7, #7]
	  for(int i = 0; i < 8; i++){
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	e038      	b.n	80011ee <button_scan+0xa2>
		  if(mask > 0x0f){
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	2b0f      	cmp	r3, #15
 8001180:	d917      	bls.n	80011b2 <button_scan+0x66>
			  if(spi_button & mask) button_count[3-i] = 0;
 8001182:	4b20      	ldr	r3, [pc, #128]	; (8001204 <button_scan+0xb8>)
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	4013      	ands	r3, r2
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	d006      	beq.n	800119e <button_scan+0x52>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	f1c3 0303 	rsb	r3, r3, #3
 8001196:	4a1d      	ldr	r2, [pc, #116]	; (800120c <button_scan+0xc0>)
 8001198:	2100      	movs	r1, #0
 800119a:	54d1      	strb	r1, [r2, r3]
 800119c:	e021      	b.n	80011e2 <button_scan+0x96>
			  else button_count[3-i]++;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	f1c3 0303 	rsb	r3, r3, #3
 80011a4:	4a19      	ldr	r2, [pc, #100]	; (800120c <button_scan+0xc0>)
 80011a6:	5cd2      	ldrb	r2, [r2, r3]
 80011a8:	3201      	adds	r2, #1
 80011aa:	b2d1      	uxtb	r1, r2
 80011ac:	4a17      	ldr	r2, [pc, #92]	; (800120c <button_scan+0xc0>)
 80011ae:	54d1      	strb	r1, [r2, r3]
 80011b0:	e017      	b.n	80011e2 <button_scan+0x96>
		  } else {
			  if(spi_button & mask) button_count[i] = 0;
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <button_scan+0xb8>)
 80011b4:	781a      	ldrb	r2, [r3, #0]
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	4013      	ands	r3, r2
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d005      	beq.n	80011cc <button_scan+0x80>
 80011c0:	4a12      	ldr	r2, [pc, #72]	; (800120c <button_scan+0xc0>)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	4413      	add	r3, r2
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
 80011ca:	e00a      	b.n	80011e2 <button_scan+0x96>
			  else button_count[i]++;
 80011cc:	4a0f      	ldr	r2, [pc, #60]	; (800120c <button_scan+0xc0>)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	4413      	add	r3, r2
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	3301      	adds	r3, #1
 80011d6:	b2d9      	uxtb	r1, r3
 80011d8:	4a0c      	ldr	r2, [pc, #48]	; (800120c <button_scan+0xc0>)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	4413      	add	r3, r2
 80011de:	460a      	mov	r2, r1
 80011e0:	701a      	strb	r2, [r3, #0]
		  }
		  mask = mask >> 1;
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	085b      	lsrs	r3, r3, #1
 80011e6:	71fb      	strb	r3, [r7, #7]
	  for(int i = 0; i < 8; i++){
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	3301      	adds	r3, #1
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	2b07      	cmp	r3, #7
 80011f2:	ddc3      	ble.n	800117c <button_scan+0x30>
	  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40020c00 	.word	0x40020c00
 8001204:	20000208 	.word	0x20000208
 8001208:	2000041c 	.word	0x2000041c
 800120c:	20000200 	.word	0x20000200

08001210 <button_test>:

void button_test(){
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++){
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	e016      	b.n	800124a <button_test+0x3a>
		if(button_count[i] > 0){
 800121c:	4a0f      	ldr	r2, [pc, #60]	; (800125c <button_test+0x4c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00d      	beq.n	8001244 <button_test+0x34>
			HAL_UART_Transmit(&huart1, (void*)str, sprintf(str, "Button %d pressed.\n", i+1), 100);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3301      	adds	r3, #1
 800122c:	461a      	mov	r2, r3
 800122e:	490c      	ldr	r1, [pc, #48]	; (8001260 <button_test+0x50>)
 8001230:	480c      	ldr	r0, [pc, #48]	; (8001264 <button_test+0x54>)
 8001232:	f008 fe2b 	bl	8009e8c <siprintf>
 8001236:	4603      	mov	r3, r0
 8001238:	b29a      	uxth	r2, r3
 800123a:	2364      	movs	r3, #100	; 0x64
 800123c:	4909      	ldr	r1, [pc, #36]	; (8001264 <button_test+0x54>)
 800123e:	480a      	ldr	r0, [pc, #40]	; (8001268 <button_test+0x58>)
 8001240:	f007 fa0d 	bl	800865e <HAL_UART_Transmit>
	for(int i = 0; i < 8; i++){
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3301      	adds	r3, #1
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b07      	cmp	r3, #7
 800124e:	dde5      	ble.n	800121c <button_test+0xc>
		}
	}
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000200 	.word	0x20000200
 8001260:	0800c33c 	.word	0x0800c33c
 8001264:	20000500 	.word	0x20000500
 8001268:	20000378 	.word	0x20000378

0800126c <updateTime>:
} DS3231_typedef;

DS3231_typedef DS3231_TimeNow;
DS3231_typedef DS3231_TimeSet;

void updateTime(){
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, &start, 1, 10);
 8001270:	230a      	movs	r3, #10
 8001272:	2201      	movs	r2, #1
 8001274:	4906      	ldr	r1, [pc, #24]	; (8001290 <updateTime+0x24>)
 8001276:	4807      	ldr	r0, [pc, #28]	; (8001294 <updateTime+0x28>)
 8001278:	f007 f9f1 	bl	800865e <HAL_UART_Transmit>
	while(!flag_finish);
 800127c:	bf00      	nop
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <updateTime+0x2c>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0fb      	beq.n	800127e <updateTime+0x12>
	flag_finish = 0;
 8001286:	4b04      	ldr	r3, [pc, #16]	; (8001298 <updateTime+0x2c>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000000 	.word	0x20000000
 8001294:	200004bc 	.word	0x200004bc
 8001298:	2000020a 	.word	0x2000020a

0800129c <fsm_GetTime>:

void fsm_GetTime(){
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	switch (status) {
 80012a0:	4b45      	ldr	r3, [pc, #276]	; (80013b8 <fsm_GetTime+0x11c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	f200 8082 	bhi.w	80013ae <fsm_GetTime+0x112>
 80012aa:	a201      	add	r2, pc, #4	; (adr r2, 80012b0 <fsm_GetTime+0x14>)
 80012ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b0:	080012c1 	.word	0x080012c1
 80012b4:	080012d1 	.word	0x080012d1
 80012b8:	08001319 	.word	0x08001319
 80012bc:	08001361 	.word	0x08001361
		case WAIT_START:
			if(receive_buffer2 == '!') status = GET_HOUR;
 80012c0:	4b3e      	ldr	r3, [pc, #248]	; (80013bc <fsm_GetTime+0x120>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b21      	cmp	r3, #33	; 0x21
 80012c6:	d174      	bne.n	80013b2 <fsm_GetTime+0x116>
 80012c8:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <fsm_GetTime+0x11c>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
			break;
 80012ce:	e070      	b.n	80013b2 <fsm_GetTime+0x116>
		case GET_HOUR:
			if(receive_buffer2 == ':'){
 80012d0:	4b3a      	ldr	r3, [pc, #232]	; (80013bc <fsm_GetTime+0x120>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b3a      	cmp	r3, #58	; 0x3a
 80012d6:	d10f      	bne.n	80012f8 <fsm_GetTime+0x5c>
				tranBuffer[2] = DEC2BCD(value);
 80012d8:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <fsm_GetTime+0x124>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 fb69 	bl	80029b4 <DEC2BCD>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <fsm_GetTime+0x128>)
 80012e8:	709a      	strb	r2, [r3, #2]
				value = 0;
 80012ea:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <fsm_GetTime+0x124>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
				status = GET_MINUTE;
 80012f0:	4b31      	ldr	r3, [pc, #196]	; (80013b8 <fsm_GetTime+0x11c>)
 80012f2:	2202      	movs	r2, #2
 80012f4:	701a      	strb	r2, [r3, #0]
			} else {
				value = value*10 + receive_buffer2 - '0';
			}
			break;
 80012f6:	e05d      	b.n	80013b4 <fsm_GetTime+0x118>
				value = value*10 + receive_buffer2 - '0';
 80012f8:	4b31      	ldr	r3, [pc, #196]	; (80013c0 <fsm_GetTime+0x124>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	4413      	add	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <fsm_GetTime+0x120>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	b2db      	uxtb	r3, r3
 800130e:	3b30      	subs	r3, #48	; 0x30
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <fsm_GetTime+0x124>)
 8001314:	701a      	strb	r2, [r3, #0]
			break;
 8001316:	e04d      	b.n	80013b4 <fsm_GetTime+0x118>
		case GET_MINUTE:
			if(receive_buffer2 == ':'){
 8001318:	4b28      	ldr	r3, [pc, #160]	; (80013bc <fsm_GetTime+0x120>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b3a      	cmp	r3, #58	; 0x3a
 800131e:	d10f      	bne.n	8001340 <fsm_GetTime+0xa4>
				tranBuffer[1] = DEC2BCD(value);
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <fsm_GetTime+0x124>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f001 fb45 	bl	80029b4 <DEC2BCD>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <fsm_GetTime+0x128>)
 8001330:	705a      	strb	r2, [r3, #1]
				value = 0;
 8001332:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <fsm_GetTime+0x124>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
				status = GET_SECOND;
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <fsm_GetTime+0x11c>)
 800133a:	2203      	movs	r2, #3
 800133c:	701a      	strb	r2, [r3, #0]
			} else {
				value = value*10 + receive_buffer2 - '0';
			}
			break;
 800133e:	e039      	b.n	80013b4 <fsm_GetTime+0x118>
				value = value*10 + receive_buffer2 - '0';
 8001340:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <fsm_GetTime+0x124>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4413      	add	r3, r2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <fsm_GetTime+0x120>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	b2db      	uxtb	r3, r3
 8001356:	3b30      	subs	r3, #48	; 0x30
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <fsm_GetTime+0x124>)
 800135c:	701a      	strb	r2, [r3, #0]
			break;
 800135e:	e029      	b.n	80013b4 <fsm_GetTime+0x118>
		case GET_SECOND:
			if(receive_buffer2 == '#'){
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <fsm_GetTime+0x120>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b23      	cmp	r3, #35	; 0x23
 8001366:	d112      	bne.n	800138e <fsm_GetTime+0xf2>
				tranBuffer[0] = DEC2BCD(value);
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <fsm_GetTime+0x124>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f001 fb21 	bl	80029b4 <DEC2BCD>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <fsm_GetTime+0x128>)
 8001378:	701a      	strb	r2, [r3, #0]
				value = 0;
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <fsm_GetTime+0x124>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
				flag_finish = 1;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <fsm_GetTime+0x12c>)
 8001382:	2201      	movs	r2, #1
 8001384:	701a      	strb	r2, [r3, #0]
				status = WAIT_START;
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <fsm_GetTime+0x11c>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
			} else {
				value = value*10 + receive_buffer2 - '0';
			}
			break;
 800138c:	e012      	b.n	80013b4 <fsm_GetTime+0x118>
				value = value*10 + receive_buffer2 - '0';
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <fsm_GetTime+0x124>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	0092      	lsls	r2, r2, #2
 8001396:	4413      	add	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <fsm_GetTime+0x120>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4413      	add	r3, r2
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	3b30      	subs	r3, #48	; 0x30
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <fsm_GetTime+0x124>)
 80013aa:	701a      	strb	r2, [r3, #0]
			break;
 80013ac:	e002      	b.n	80013b4 <fsm_GetTime+0x118>
		default:
			break;
 80013ae:	bf00      	nop
 80013b0:	e000      	b.n	80013b4 <fsm_GetTime+0x118>
			break;
 80013b2:	bf00      	nop
	}
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000209 	.word	0x20000209
 80013bc:	20000231 	.word	0x20000231
 80013c0:	2000020b 	.word	0x2000020b
 80013c4:	20000564 	.word	0x20000564
 80013c8:	2000020a 	.word	0x2000020a

080013cc <ds3231_init>:



void ds3231_init(){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af02      	add	r7, sp, #8
	updateTime();
 80013d2:	f7ff ff4b 	bl	800126c <updateTime>
//	tranBuffer[0] = DEC2BCD(00);
//	tranBuffer[1] = DEC2BCD(9);
//	tranBuffer[2] = DEC2BCD(10);
	tranBuffer[3] = DEC2BCD(5);
 80013d6:	2005      	movs	r0, #5
 80013d8:	f001 faec 	bl	80029b4 <DEC2BCD>
 80013dc:	4603      	mov	r3, r0
 80013de:	461a      	mov	r2, r3
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <ds3231_init+0x5c>)
 80013e2:	70da      	strb	r2, [r3, #3]
	tranBuffer[4] = DEC2BCD(3);
 80013e4:	2003      	movs	r0, #3
 80013e6:	f001 fae5 	bl	80029b4 <DEC2BCD>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <ds3231_init+0x5c>)
 80013f0:	711a      	strb	r2, [r3, #4]
	tranBuffer[5] = DEC2BCD(8);
 80013f2:	2008      	movs	r0, #8
 80013f4:	f001 fade 	bl	80029b4 <DEC2BCD>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <ds3231_init+0x5c>)
 80013fe:	715a      	strb	r2, [r3, #5]
	tranBuffer[6] = DEC2BCD(23);
 8001400:	2017      	movs	r0, #23
 8001402:	f001 fad7 	bl	80029b4 <DEC2BCD>
 8001406:	4603      	mov	r3, r0
 8001408:	461a      	mov	r2, r3
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <ds3231_init+0x5c>)
 800140c:	719a      	strb	r2, [r3, #6]
	HAL_I2C_Mem_Write_IT(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, tranBuffer, 7);
 800140e:	2307      	movs	r3, #7
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <ds3231_init+0x5c>)
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2301      	movs	r3, #1
 8001418:	2200      	movs	r2, #0
 800141a:	21d0      	movs	r1, #208	; 0xd0
 800141c:	4803      	ldr	r0, [pc, #12]	; (800142c <ds3231_init+0x60>)
 800141e:	f002 ffd1 	bl	80043c4 <HAL_I2C_Mem_Write_IT>
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000564 	.word	0x20000564
 800142c:	2000023c 	.word	0x2000023c

08001430 <time_display>:

void time_display(){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	  led7Set1Digit(DS3231_TimeNow.hours/10, 1);
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <time_display+0x74>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4a1b      	ldr	r2, [pc, #108]	; (80014a8 <time_display+0x78>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	08db      	lsrs	r3, r3, #3
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2101      	movs	r1, #1
 8001444:	4618      	mov	r0, r3
 8001446:	f000 f95d 	bl	8001704 <led7Set1Digit>
	  led7Set1Digit(DS3231_TimeNow.hours%10, 2);
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <time_display+0x74>)
 800144c:	781a      	ldrb	r2, [r3, #0]
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <time_display+0x78>)
 8001450:	fba3 1302 	umull	r1, r3, r3, r2
 8001454:	08d9      	lsrs	r1, r3, #3
 8001456:	460b      	mov	r3, r1
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2102      	movs	r1, #2
 8001464:	4618      	mov	r0, r3
 8001466:	f000 f94d 	bl	8001704 <led7Set1Digit>
	  led7Set1Digit(DS3231_TimeNow.min/10, 3);
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <time_display+0x74>)
 800146c:	785b      	ldrb	r3, [r3, #1]
 800146e:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <time_display+0x78>)
 8001470:	fba2 2303 	umull	r2, r3, r2, r3
 8001474:	08db      	lsrs	r3, r3, #3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2103      	movs	r1, #3
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f942 	bl	8001704 <led7Set1Digit>
	  led7Set1Digit(DS3231_TimeNow.min%10, 4);
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <time_display+0x74>)
 8001482:	785a      	ldrb	r2, [r3, #1]
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <time_display+0x78>)
 8001486:	fba3 1302 	umull	r1, r3, r3, r2
 800148a:	08d9      	lsrs	r1, r3, #3
 800148c:	460b      	mov	r3, r1
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2104      	movs	r1, #4
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f932 	bl	8001704 <led7Set1Digit>
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2000057c 	.word	0x2000057c
 80014a8:	cccccccd 	.word	0xcccccccd

080014ac <read_time>:

void read_time(){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, revBuffer, 7);
 80014b2:	2307      	movs	r3, #7
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <read_time+0x20>)
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2301      	movs	r3, #1
 80014bc:	2200      	movs	r2, #0
 80014be:	21d0      	movs	r1, #208	; 0xd0
 80014c0:	4803      	ldr	r0, [pc, #12]	; (80014d0 <read_time+0x24>)
 80014c2:	f003 f831 	bl	8004528 <HAL_I2C_Mem_Read_IT>
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000574 	.word	0x20000574
 80014d0:	2000023c 	.word	0x2000023c

080014d4 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	UNUSED(hi2c);
	if (hi2c->Instance == I2C1) {
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a22      	ldr	r2, [pc, #136]	; (800156c <HAL_I2C_MemRxCpltCallback+0x98>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d13e      	bne.n	8001564 <HAL_I2C_MemRxCpltCallback+0x90>
		DS3231_TimeNow.sec = BCD2DEC(revBuffer[0]);
 80014e6:	4b22      	ldr	r3, [pc, #136]	; (8001570 <HAL_I2C_MemRxCpltCallback+0x9c>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f001 fa48 	bl	8002980 <BCD2DEC>
 80014f0:	4603      	mov	r3, r0
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <HAL_I2C_MemRxCpltCallback+0xa0>)
 80014f6:	709a      	strb	r2, [r3, #2]
		DS3231_TimeNow.min = BCD2DEC(revBuffer[1]);
 80014f8:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <HAL_I2C_MemRxCpltCallback+0x9c>)
 80014fa:	785b      	ldrb	r3, [r3, #1]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f001 fa3f 	bl	8002980 <BCD2DEC>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <HAL_I2C_MemRxCpltCallback+0xa0>)
 8001508:	705a      	strb	r2, [r3, #1]
		DS3231_TimeNow.hours = BCD2DEC(revBuffer[2]);
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_I2C_MemRxCpltCallback+0x9c>)
 800150c:	789b      	ldrb	r3, [r3, #2]
 800150e:	4618      	mov	r0, r3
 8001510:	f001 fa36 	bl	8002980 <BCD2DEC>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <HAL_I2C_MemRxCpltCallback+0xa0>)
 800151a:	701a      	strb	r2, [r3, #0]
		DS3231_TimeNow.day = BCD2DEC(revBuffer[3]);
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <HAL_I2C_MemRxCpltCallback+0x9c>)
 800151e:	78db      	ldrb	r3, [r3, #3]
 8001520:	4618      	mov	r0, r3
 8001522:	f001 fa2d 	bl	8002980 <BCD2DEC>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_I2C_MemRxCpltCallback+0xa0>)
 800152c:	711a      	strb	r2, [r3, #4]
		DS3231_TimeNow.date = BCD2DEC(revBuffer[4]);
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <HAL_I2C_MemRxCpltCallback+0x9c>)
 8001530:	791b      	ldrb	r3, [r3, #4]
 8001532:	4618      	mov	r0, r3
 8001534:	f001 fa24 	bl	8002980 <BCD2DEC>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <HAL_I2C_MemRxCpltCallback+0xa0>)
 800153e:	70da      	strb	r2, [r3, #3]
		DS3231_TimeNow.month = BCD2DEC(revBuffer[5]);
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_I2C_MemRxCpltCallback+0x9c>)
 8001542:	795b      	ldrb	r3, [r3, #5]
 8001544:	4618      	mov	r0, r3
 8001546:	f001 fa1b 	bl	8002980 <BCD2DEC>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <HAL_I2C_MemRxCpltCallback+0xa0>)
 8001550:	715a      	strb	r2, [r3, #5]
		DS3231_TimeNow.year = BCD2DEC(revBuffer[6]);
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <HAL_I2C_MemRxCpltCallback+0x9c>)
 8001554:	799b      	ldrb	r3, [r3, #6]
 8001556:	4618      	mov	r0, r3
 8001558:	f001 fa12 	bl	8002980 <BCD2DEC>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <HAL_I2C_MemRxCpltCallback+0xa0>)
 8001562:	719a      	strb	r2, [r3, #6]
	}
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40005400 	.word	0x40005400
 8001570:	20000574 	.word	0x20000574
 8001574:	2000057c 	.word	0x2000057c

08001578 <led7_init>:

unsigned char led7[4] = {0x00, 0xf1, 0x0e, 0x6a};

int led7_index = 0;

void led7_init(){
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LED1_GPIO_Port, LD_LED1_Pin, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001582:	480d      	ldr	r0, [pc, #52]	; (80015b8 <led7_init+0x40>)
 8001584:	f002 fda6 	bl	80040d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800158e:	480b      	ldr	r0, [pc, #44]	; (80015bc <led7_init+0x44>)
 8001590:	f002 fda0 	bl	80040d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD_LED3_GPIO_Port, LD_LED3_Pin, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	2104      	movs	r1, #4
 8001598:	4807      	ldr	r0, [pc, #28]	; (80015b8 <led7_init+0x40>)
 800159a:	f002 fd9b 	bl	80040d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD_LED4_GPIO_Port, LD_LED4_Pin, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <led7_init+0x40>)
 80015a6:	f002 fd95 	bl	80040d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015aa:	2201      	movs	r2, #1
 80015ac:	2140      	movs	r1, #64	; 0x40
 80015ae:	4804      	ldr	r0, [pc, #16]	; (80015c0 <led7_init+0x48>)
 80015b0:	f002 fd90 	bl	80040d4 <HAL_GPIO_WritePin>
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40020400 	.word	0x40020400
 80015bc:	40021400 	.word	0x40021400
 80015c0:	40021800 	.word	0x40021800

080015c4 <led7Scan>:

void led7Scan(){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2140      	movs	r1, #64	; 0x40
 80015cc:	4847      	ldr	r0, [pc, #284]	; (80016ec <led7Scan+0x128>)
 80015ce:	f002 fd81 	bl	80040d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, led7 + led7_index, 1, 1);
 80015d2:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <led7Scan+0x12c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b46      	ldr	r3, [pc, #280]	; (80016f4 <led7Scan+0x130>)
 80015da:	18d1      	adds	r1, r2, r3
 80015dc:	2301      	movs	r3, #1
 80015de:	2201      	movs	r2, #1
 80015e0:	4845      	ldr	r0, [pc, #276]	; (80016f8 <led7Scan+0x134>)
 80015e2:	f005 f90e 	bl	8006802 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015e6:	2201      	movs	r2, #1
 80015e8:	2140      	movs	r1, #64	; 0x40
 80015ea:	4840      	ldr	r0, [pc, #256]	; (80016ec <led7Scan+0x128>)
 80015ec:	f002 fd72 	bl	80040d4 <HAL_GPIO_WritePin>
	switch(led7_index){
 80015f0:	4b3f      	ldr	r3, [pc, #252]	; (80016f0 <led7Scan+0x12c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d86b      	bhi.n	80016d0 <led7Scan+0x10c>
 80015f8:	a201      	add	r2, pc, #4	; (adr r2, 8001600 <led7Scan+0x3c>)
 80015fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fe:	bf00      	nop
 8001600:	08001611 	.word	0x08001611
 8001604:	08001641 	.word	0x08001641
 8001608:	08001671 	.word	0x08001671
 800160c:	080016a1 	.word	0x080016a1
	case 0:
		  HAL_GPIO_WritePin(LD_LED1_GPIO_Port, LD_LED1_Pin, 0);
 8001610:	2200      	movs	r2, #0
 8001612:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001616:	4839      	ldr	r0, [pc, #228]	; (80016fc <led7Scan+0x138>)
 8001618:	f002 fd5c 	bl	80040d4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, 1);
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001622:	4837      	ldr	r0, [pc, #220]	; (8001700 <led7Scan+0x13c>)
 8001624:	f002 fd56 	bl	80040d4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED3_GPIO_Port, LD_LED3_Pin, 1);
 8001628:	2201      	movs	r2, #1
 800162a:	2104      	movs	r1, #4
 800162c:	4833      	ldr	r0, [pc, #204]	; (80016fc <led7Scan+0x138>)
 800162e:	f002 fd51 	bl	80040d4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED4_GPIO_Port, LD_LED4_Pin, 1);
 8001632:	2201      	movs	r2, #1
 8001634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001638:	4830      	ldr	r0, [pc, #192]	; (80016fc <led7Scan+0x138>)
 800163a:	f002 fd4b 	bl	80040d4 <HAL_GPIO_WritePin>
		  break;
 800163e:	e047      	b.n	80016d0 <led7Scan+0x10c>
	case 1:
		  HAL_GPIO_WritePin(LD_LED1_GPIO_Port, LD_LED1_Pin, 1);
 8001640:	2201      	movs	r2, #1
 8001642:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001646:	482d      	ldr	r0, [pc, #180]	; (80016fc <led7Scan+0x138>)
 8001648:	f002 fd44 	bl	80040d4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001652:	482b      	ldr	r0, [pc, #172]	; (8001700 <led7Scan+0x13c>)
 8001654:	f002 fd3e 	bl	80040d4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED3_GPIO_Port, LD_LED3_Pin, 1);
 8001658:	2201      	movs	r2, #1
 800165a:	2104      	movs	r1, #4
 800165c:	4827      	ldr	r0, [pc, #156]	; (80016fc <led7Scan+0x138>)
 800165e:	f002 fd39 	bl	80040d4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED4_GPIO_Port, LD_LED4_Pin, 1);
 8001662:	2201      	movs	r2, #1
 8001664:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001668:	4824      	ldr	r0, [pc, #144]	; (80016fc <led7Scan+0x138>)
 800166a:	f002 fd33 	bl	80040d4 <HAL_GPIO_WritePin>
		  break;
 800166e:	e02f      	b.n	80016d0 <led7Scan+0x10c>
	case 2:
		  HAL_GPIO_WritePin(LD_LED1_GPIO_Port, LD_LED1_Pin, 1);
 8001670:	2201      	movs	r2, #1
 8001672:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001676:	4821      	ldr	r0, [pc, #132]	; (80016fc <led7Scan+0x138>)
 8001678:	f002 fd2c 	bl	80040d4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, 1);
 800167c:	2201      	movs	r2, #1
 800167e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001682:	481f      	ldr	r0, [pc, #124]	; (8001700 <led7Scan+0x13c>)
 8001684:	f002 fd26 	bl	80040d4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED3_GPIO_Port, LD_LED3_Pin, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	2104      	movs	r1, #4
 800168c:	481b      	ldr	r0, [pc, #108]	; (80016fc <led7Scan+0x138>)
 800168e:	f002 fd21 	bl	80040d4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED4_GPIO_Port, LD_LED4_Pin, 1);
 8001692:	2201      	movs	r2, #1
 8001694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001698:	4818      	ldr	r0, [pc, #96]	; (80016fc <led7Scan+0x138>)
 800169a:	f002 fd1b 	bl	80040d4 <HAL_GPIO_WritePin>
		  break;
 800169e:	e017      	b.n	80016d0 <led7Scan+0x10c>
	case 3:
		  HAL_GPIO_WritePin(LD_LED1_GPIO_Port, LD_LED1_Pin, 1);
 80016a0:	2201      	movs	r2, #1
 80016a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016a6:	4815      	ldr	r0, [pc, #84]	; (80016fc <led7Scan+0x138>)
 80016a8:	f002 fd14 	bl	80040d4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, 1);
 80016ac:	2201      	movs	r2, #1
 80016ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b2:	4813      	ldr	r0, [pc, #76]	; (8001700 <led7Scan+0x13c>)
 80016b4:	f002 fd0e 	bl	80040d4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED3_GPIO_Port, LD_LED3_Pin, 1);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2104      	movs	r1, #4
 80016bc:	480f      	ldr	r0, [pc, #60]	; (80016fc <led7Scan+0x138>)
 80016be:	f002 fd09 	bl	80040d4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED4_GPIO_Port, LD_LED4_Pin, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016c8:	480c      	ldr	r0, [pc, #48]	; (80016fc <led7Scan+0x138>)
 80016ca:	f002 fd03 	bl	80040d4 <HAL_GPIO_WritePin>
		  break;
 80016ce:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <led7Scan+0x12c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	425a      	negs	r2, r3
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	f002 0203 	and.w	r2, r2, #3
 80016e0:	bf58      	it	pl
 80016e2:	4253      	negpl	r3, r2
 80016e4:	4a02      	ldr	r2, [pc, #8]	; (80016f0 <led7Scan+0x12c>)
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40021800 	.word	0x40021800
 80016f0:	2000020c 	.word	0x2000020c
 80016f4:	20000004 	.word	0x20000004
 80016f8:	2000041c 	.word	0x2000041c
 80016fc:	40020400 	.word	0x40020400
 8001700:	40021400 	.word	0x40021400

08001704 <led7Set1Digit>:

void led7Set1Digit(int num, int position){
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
	if(num > 9 || num < 0) return;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b09      	cmp	r3, #9
 8001712:	dc43      	bgt.n	800179c <led7Set1Digit+0x98>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	db40      	blt.n	800179c <led7Set1Digit+0x98>
	unsigned char digit = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b09      	cmp	r3, #9
 8001722:	d835      	bhi.n	8001790 <led7Set1Digit+0x8c>
 8001724:	a201      	add	r2, pc, #4	; (adr r2, 800172c <led7Set1Digit+0x28>)
 8001726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172a:	bf00      	nop
 800172c:	08001755 	.word	0x08001755
 8001730:	0800175b 	.word	0x0800175b
 8001734:	08001761 	.word	0x08001761
 8001738:	08001767 	.word	0x08001767
 800173c:	0800176d 	.word	0x0800176d
 8001740:	08001773 	.word	0x08001773
 8001744:	08001779 	.word	0x08001779
 8001748:	0800177f 	.word	0x0800177f
 800174c:	08001785 	.word	0x08001785
 8001750:	0800178b 	.word	0x0800178b
	switch(num){
	case 0:
		digit = 0x03;
 8001754:	2303      	movs	r3, #3
 8001756:	73fb      	strb	r3, [r7, #15]
		break;
 8001758:	e01a      	b.n	8001790 <led7Set1Digit+0x8c>
	case 1:
		digit = 0x9f;
 800175a:	239f      	movs	r3, #159	; 0x9f
 800175c:	73fb      	strb	r3, [r7, #15]
		break;
 800175e:	e017      	b.n	8001790 <led7Set1Digit+0x8c>
	case 2:
		digit = 0x25;
 8001760:	2325      	movs	r3, #37	; 0x25
 8001762:	73fb      	strb	r3, [r7, #15]
		break;
 8001764:	e014      	b.n	8001790 <led7Set1Digit+0x8c>
	case 3:
		digit = 0x0d;
 8001766:	230d      	movs	r3, #13
 8001768:	73fb      	strb	r3, [r7, #15]
		break;
 800176a:	e011      	b.n	8001790 <led7Set1Digit+0x8c>
	case 4:
		digit = 0x99;
 800176c:	2399      	movs	r3, #153	; 0x99
 800176e:	73fb      	strb	r3, [r7, #15]
		break;
 8001770:	e00e      	b.n	8001790 <led7Set1Digit+0x8c>
	case 5:
		digit = 0x49;
 8001772:	2349      	movs	r3, #73	; 0x49
 8001774:	73fb      	strb	r3, [r7, #15]
		break;
 8001776:	e00b      	b.n	8001790 <led7Set1Digit+0x8c>
	case 6:
		digit = 0x41;
 8001778:	2341      	movs	r3, #65	; 0x41
 800177a:	73fb      	strb	r3, [r7, #15]
		break;
 800177c:	e008      	b.n	8001790 <led7Set1Digit+0x8c>
	case 7:
		digit = 0x1f;
 800177e:	231f      	movs	r3, #31
 8001780:	73fb      	strb	r3, [r7, #15]
		break;
 8001782:	e005      	b.n	8001790 <led7Set1Digit+0x8c>
	case 8:
		digit = 0x01;
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
		break;
 8001788:	e002      	b.n	8001790 <led7Set1Digit+0x8c>
	case 9:
		digit = 0x09;
 800178a:	2309      	movs	r3, #9
 800178c:	73fb      	strb	r3, [r7, #15]
		break;
 800178e:	bf00      	nop
	}
	led7[position - 1] = digit;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	3b01      	subs	r3, #1
 8001794:	4904      	ldr	r1, [pc, #16]	; (80017a8 <led7Set1Digit+0xa4>)
 8001796:	7bfa      	ldrb	r2, [r7, #15]
 8001798:	54ca      	strb	r2, [r1, r3]
 800179a:	e000      	b.n	800179e <led7Set1Digit+0x9a>
	if(num > 9 || num < 0) return;
 800179c:	bf00      	nop
}
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	20000004 	.word	0x20000004

080017ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b0:	f001 f94e 	bl	8002a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b4:	f000 f850 	bl	8001858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b8:	f000 faf2 	bl	8001da0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80017bc:	f000 f994 	bl	8001ae8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80017c0:	f000 fa7a 	bl	8001cb8 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80017c4:	f000 f95a 	bl	8001a7c <MX_SPI1_Init>
  MX_DMA_Init();
 80017c8:	f000 faca 	bl	8001d60 <MX_DMA_Init>
  MX_ADC1_Init();
 80017cc:	f000 f8ac 	bl	8001928 <MX_ADC1_Init>
  MX_TIM3_Init();
 80017d0:	f000 f9d6 	bl	8001b80 <MX_TIM3_Init>
  MX_I2C1_Init();
 80017d4:	f000 f924 	bl	8001a20 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80017d8:	f000 fa98 	bl	8001d0c <MX_USART2_UART_Init>
  MX_TIM13_Init();
 80017dc:	f000 fa1e 	bl	8001c1c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  timer_init();
 80017e0:	f000 ffea 	bl	80027b8 <timer_init>
  pwm_init();
 80017e4:	f000 fbf6 	bl	8001fd4 <pwm_init>
  button_init();
 80017e8:	f7ff fca0 	bl	800112c <button_init>
  led7_init();
 80017ec:	f7ff fec4 	bl	8001578 <led7_init>
  ADC_Init();
 80017f0:	f7ff fba6 	bl	8000f40 <ADC_Init>
  UART_Init();
 80017f4:	f001 f878 	bl	80028e8 <UART_Init>
  ds3231_init();
 80017f8:	f7ff fde8 	bl	80013cc <ds3231_init>
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 80017fc:	2201      	movs	r2, #1
 80017fe:	2110      	movs	r1, #16
 8001800:	4812      	ldr	r0, [pc, #72]	; (800184c <main+0xa0>)
 8001802:	f002 fc67 	bl	80040d4 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(!flag_timer2);
 8001806:	bf00      	nop
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <main+0xa4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0fb      	beq.n	8001808 <main+0x5c>
	  button_scan();
 8001810:	f7ff fc9c 	bl	800114c <button_scan>
	  test_output();
 8001814:	f000 fbb4 	bl	8001f80 <test_output>
	  time_display();
 8001818:	f7ff fe0a 	bl	8001430 <time_display>
	  button_test();
 800181c:	f7ff fcf8 	bl	8001210 <button_test>
	  test_pwm();
 8001820:	f000 fbf4 	bl	800200c <test_pwm>
	  setTimer2(50);
 8001824:	2032      	movs	r0, #50	; 0x32
 8001826:	f000 fff5 	bl	8002814 <setTimer2>
	  if(flag_timer1){
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <main+0xa8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0e9      	beq.n	8001806 <main+0x5a>
		  setTimer1(1000);
 8001832:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001836:	f000 ffd7 	bl	80027e8 <setTimer1>
		  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800183a:	2110      	movs	r1, #16
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <main+0xa0>)
 800183e:	f002 fc62 	bl	8004106 <HAL_GPIO_TogglePin>
		  read_time();
 8001842:	f7ff fe33 	bl	80014ac <read_time>
		  test_adc();
 8001846:	f7ff fc39 	bl	80010bc <test_adc>
  {
 800184a:	e7dc      	b.n	8001806 <main+0x5a>
 800184c:	40021000 	.word	0x40021000
 8001850:	2000021c 	.word	0x2000021c
 8001854:	20000218 	.word	0x20000218

08001858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b094      	sub	sp, #80	; 0x50
 800185c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800185e:	f107 0320 	add.w	r3, r7, #32
 8001862:	2230      	movs	r2, #48	; 0x30
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f007 fe9e 	bl	80095a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <SystemClock_Config+0xc8>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	4a26      	ldr	r2, [pc, #152]	; (8001920 <SystemClock_Config+0xc8>)
 8001886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188a:	6413      	str	r3, [r2, #64]	; 0x40
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <SystemClock_Config+0xc8>)
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001898:	2300      	movs	r3, #0
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <SystemClock_Config+0xcc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a20      	ldr	r2, [pc, #128]	; (8001924 <SystemClock_Config+0xcc>)
 80018a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <SystemClock_Config+0xcc>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018b4:	2301      	movs	r3, #1
 80018b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018be:	2302      	movs	r3, #2
 80018c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018c8:	2304      	movs	r3, #4
 80018ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80018cc:	2348      	movs	r3, #72	; 0x48
 80018ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018d0:	2302      	movs	r3, #2
 80018d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018d4:	2304      	movs	r3, #4
 80018d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d8:	f107 0320 	add.w	r3, r7, #32
 80018dc:	4618      	mov	r0, r3
 80018de:	f004 fa93 	bl	8005e08 <HAL_RCC_OscConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018e8:	f000 fb6e 	bl	8001fc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ec:	230f      	movs	r3, #15
 80018ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f0:	2302      	movs	r3, #2
 80018f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	2102      	movs	r1, #2
 8001908:	4618      	mov	r0, r3
 800190a:	f004 fcf5 	bl	80062f8 <HAL_RCC_ClockConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001914:	f000 fb58 	bl	8001fc8 <Error_Handler>
  }
}
 8001918:	bf00      	nop
 800191a:	3750      	adds	r7, #80	; 0x50
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40023800 	.word	0x40023800
 8001924:	40007000 	.word	0x40007000

08001928 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800192e:	463b      	mov	r3, r7
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800193a:	4b36      	ldr	r3, [pc, #216]	; (8001a14 <MX_ADC1_Init+0xec>)
 800193c:	4a36      	ldr	r2, [pc, #216]	; (8001a18 <MX_ADC1_Init+0xf0>)
 800193e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001940:	4b34      	ldr	r3, [pc, #208]	; (8001a14 <MX_ADC1_Init+0xec>)
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001946:	4b33      	ldr	r3, [pc, #204]	; (8001a14 <MX_ADC1_Init+0xec>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800194c:	4b31      	ldr	r3, [pc, #196]	; (8001a14 <MX_ADC1_Init+0xec>)
 800194e:	2201      	movs	r2, #1
 8001950:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001952:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <MX_ADC1_Init+0xec>)
 8001954:	2200      	movs	r2, #0
 8001956:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001958:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <MX_ADC1_Init+0xec>)
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001960:	4b2c      	ldr	r3, [pc, #176]	; (8001a14 <MX_ADC1_Init+0xec>)
 8001962:	2200      	movs	r2, #0
 8001964:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001966:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <MX_ADC1_Init+0xec>)
 8001968:	4a2c      	ldr	r2, [pc, #176]	; (8001a1c <MX_ADC1_Init+0xf4>)
 800196a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800196c:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <MX_ADC1_Init+0xec>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001972:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <MX_ADC1_Init+0xec>)
 8001974:	2204      	movs	r2, #4
 8001976:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001978:	4b26      	ldr	r3, [pc, #152]	; (8001a14 <MX_ADC1_Init+0xec>)
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001980:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <MX_ADC1_Init+0xec>)
 8001982:	2201      	movs	r2, #1
 8001984:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001986:	4823      	ldr	r0, [pc, #140]	; (8001a14 <MX_ADC1_Init+0xec>)
 8001988:	f001 f8d4 	bl	8002b34 <HAL_ADC_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001992:	f000 fb19 	bl	8001fc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001996:	230a      	movs	r3, #10
 8001998:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800199a:	2301      	movs	r3, #1
 800199c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800199e:	2301      	movs	r3, #1
 80019a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019a2:	463b      	mov	r3, r7
 80019a4:	4619      	mov	r1, r3
 80019a6:	481b      	ldr	r0, [pc, #108]	; (8001a14 <MX_ADC1_Init+0xec>)
 80019a8:	f001 fa36 	bl	8002e18 <HAL_ADC_ConfigChannel>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80019b2:	f000 fb09 	bl	8001fc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80019b6:	230b      	movs	r3, #11
 80019b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80019ba:	2302      	movs	r3, #2
 80019bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019be:	463b      	mov	r3, r7
 80019c0:	4619      	mov	r1, r3
 80019c2:	4814      	ldr	r0, [pc, #80]	; (8001a14 <MX_ADC1_Init+0xec>)
 80019c4:	f001 fa28 	bl	8002e18 <HAL_ADC_ConfigChannel>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80019ce:	f000 fafb 	bl	8001fc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80019d2:	2308      	movs	r3, #8
 80019d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80019d6:	2303      	movs	r3, #3
 80019d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019da:	463b      	mov	r3, r7
 80019dc:	4619      	mov	r1, r3
 80019de:	480d      	ldr	r0, [pc, #52]	; (8001a14 <MX_ADC1_Init+0xec>)
 80019e0:	f001 fa1a 	bl	8002e18 <HAL_ADC_ConfigChannel>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80019ea:	f000 faed 	bl	8001fc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80019ee:	2309      	movs	r3, #9
 80019f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80019f2:	2304      	movs	r3, #4
 80019f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019f6:	463b      	mov	r3, r7
 80019f8:	4619      	mov	r1, r3
 80019fa:	4806      	ldr	r0, [pc, #24]	; (8001a14 <MX_ADC1_Init+0xec>)
 80019fc:	f001 fa0c 	bl	8002e18 <HAL_ADC_ConfigChannel>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001a06:	f000 fadf 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200002d8 	.word	0x200002d8
 8001a18:	40012000 	.word	0x40012000
 8001a1c:	0f000001 	.word	0x0f000001

08001a20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <MX_I2C1_Init+0x50>)
 8001a26:	4a13      	ldr	r2, [pc, #76]	; (8001a74 <MX_I2C1_Init+0x54>)
 8001a28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_I2C1_Init+0x50>)
 8001a2c:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <MX_I2C1_Init+0x58>)
 8001a2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <MX_I2C1_Init+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <MX_I2C1_Init+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <MX_I2C1_Init+0x50>)
 8001a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a44:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <MX_I2C1_Init+0x50>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <MX_I2C1_Init+0x50>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a50:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <MX_I2C1_Init+0x50>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <MX_I2C1_Init+0x50>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a5c:	4804      	ldr	r0, [pc, #16]	; (8001a70 <MX_I2C1_Init+0x50>)
 8001a5e:	f002 fb6d 	bl	800413c <HAL_I2C_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a68:	f000 faae 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	2000023c 	.word	0x2000023c
 8001a74:	40005400 	.word	0x40005400
 8001a78:	000186a0 	.word	0x000186a0

08001a7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a80:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <MX_SPI1_Init+0x64>)
 8001a82:	4a18      	ldr	r2, [pc, #96]	; (8001ae4 <MX_SPI1_Init+0x68>)
 8001a84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <MX_SPI1_Init+0x64>)
 8001a88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <MX_SPI1_Init+0x64>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <MX_SPI1_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_SPI1_Init+0x64>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <MX_SPI1_Init+0x64>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_SPI1_Init+0x64>)
 8001aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_SPI1_Init+0x64>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <MX_SPI1_Init+0x64>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_SPI1_Init+0x64>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <MX_SPI1_Init+0x64>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_SPI1_Init+0x64>)
 8001ac8:	220a      	movs	r2, #10
 8001aca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001acc:	4804      	ldr	r0, [pc, #16]	; (8001ae0 <MX_SPI1_Init+0x64>)
 8001ace:	f004 fe0f 	bl	80066f0 <HAL_SPI_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ad8:	f000 fa76 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	2000041c 	.word	0x2000041c
 8001ae4:	40013000 	.word	0x40013000

08001ae8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aee:	f107 0308 	add.w	r3, r7, #8
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afc:	463b      	mov	r3, r7
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b04:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <MX_TIM2_Init+0x94>)
 8001b06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <MX_TIM2_Init+0x94>)
 8001b0e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001b12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <MX_TIM2_Init+0x94>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <MX_TIM2_Init+0x94>)
 8001b1c:	2263      	movs	r2, #99	; 0x63
 8001b1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b20:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <MX_TIM2_Init+0x94>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <MX_TIM2_Init+0x94>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b2c:	4813      	ldr	r0, [pc, #76]	; (8001b7c <MX_TIM2_Init+0x94>)
 8001b2e:	f005 fca5 	bl	800747c <HAL_TIM_Base_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b38:	f000 fa46 	bl	8001fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b42:	f107 0308 	add.w	r3, r7, #8
 8001b46:	4619      	mov	r1, r3
 8001b48:	480c      	ldr	r0, [pc, #48]	; (8001b7c <MX_TIM2_Init+0x94>)
 8001b4a:	f006 f8ab 	bl	8007ca4 <HAL_TIM_ConfigClockSource>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b54:	f000 fa38 	bl	8001fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b60:	463b      	mov	r3, r7
 8001b62:	4619      	mov	r1, r3
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <MX_TIM2_Init+0x94>)
 8001b66:	f006 fc9d 	bl	80084a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b70:	f000 fa2a 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000474 	.word	0x20000474

08001b80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b86:	f107 0308 	add.w	r3, r7, #8
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b94:	463b      	mov	r3, r7
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b9c:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <MX_TIM3_Init+0x94>)
 8001b9e:	4a1e      	ldr	r2, [pc, #120]	; (8001c18 <MX_TIM3_Init+0x98>)
 8001ba0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <MX_TIM3_Init+0x94>)
 8001ba4:	2247      	movs	r2, #71	; 0x47
 8001ba6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <MX_TIM3_Init+0x94>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8001bae:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <MX_TIM3_Init+0x94>)
 8001bb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001bb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <MX_TIM3_Init+0x94>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bbc:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <MX_TIM3_Init+0x94>)
 8001bbe:	2280      	movs	r2, #128	; 0x80
 8001bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bc2:	4814      	ldr	r0, [pc, #80]	; (8001c14 <MX_TIM3_Init+0x94>)
 8001bc4:	f005 fc5a 	bl	800747c <HAL_TIM_Base_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001bce:	f000 f9fb 	bl	8001fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bd8:	f107 0308 	add.w	r3, r7, #8
 8001bdc:	4619      	mov	r1, r3
 8001bde:	480d      	ldr	r0, [pc, #52]	; (8001c14 <MX_TIM3_Init+0x94>)
 8001be0:	f006 f860 	bl	8007ca4 <HAL_TIM_ConfigClockSource>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001bea:	f000 f9ed 	bl	8001fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4806      	ldr	r0, [pc, #24]	; (8001c14 <MX_TIM3_Init+0x94>)
 8001bfc:	f006 fc52 	bl	80084a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001c06:	f000 f9df 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000290 	.word	0x20000290
 8001c18:	40000400 	.word	0x40000400

08001c1c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
 8001c30:	615a      	str	r2, [r3, #20]
 8001c32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001c34:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <MX_TIM13_Init+0x94>)
 8001c36:	4a1f      	ldr	r2, [pc, #124]	; (8001cb4 <MX_TIM13_Init+0x98>)
 8001c38:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 7199;
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <MX_TIM13_Init+0x94>)
 8001c3c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001c40:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c42:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <MX_TIM13_Init+0x94>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9;
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <MX_TIM13_Init+0x94>)
 8001c4a:	2209      	movs	r2, #9
 8001c4c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4e:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <MX_TIM13_Init+0x94>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <MX_TIM13_Init+0x94>)
 8001c56:	2280      	movs	r2, #128	; 0x80
 8001c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001c5a:	4815      	ldr	r0, [pc, #84]	; (8001cb0 <MX_TIM13_Init+0x94>)
 8001c5c:	f005 fc0e 	bl	800747c <HAL_TIM_Base_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001c66:	f000 f9af 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001c6a:	4811      	ldr	r0, [pc, #68]	; (8001cb0 <MX_TIM13_Init+0x94>)
 8001c6c:	f005 fd2e 	bl	80076cc <HAL_TIM_PWM_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001c76:	f000 f9a7 	bl	8001fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c7a:	2360      	movs	r3, #96	; 0x60
 8001c7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4807      	ldr	r0, [pc, #28]	; (8001cb0 <MX_TIM13_Init+0x94>)
 8001c92:	f005 ff45 	bl	8007b20 <HAL_TIM_PWM_ConfigChannel>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001c9c:	f000 f994 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001ca0:	4803      	ldr	r0, [pc, #12]	; (8001cb0 <MX_TIM13_Init+0x94>)
 8001ca2:	f000 fb85 	bl	80023b0 <HAL_TIM_MspPostInit>

}
 8001ca6:	bf00      	nop
 8001ca8:	3720      	adds	r7, #32
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000330 	.word	0x20000330
 8001cb4:	40001c00 	.word	0x40001c00

08001cb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001cbe:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <MX_USART1_UART_Init+0x50>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001cf0:	f006 fc68 	bl	80085c4 <HAL_UART_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cfa:	f000 f965 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000378 	.word	0x20000378
 8001d08:	40011000 	.word	0x40011000

08001d0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d12:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <MX_USART2_UART_Init+0x50>)
 8001d14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d32:	220c      	movs	r2, #12
 8001d34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d42:	4805      	ldr	r0, [pc, #20]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d44:	f006 fc3e 	bl	80085c4 <HAL_UART_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d4e:	f000 f93b 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200004bc 	.word	0x200004bc
 8001d5c:	40004400 	.word	0x40004400

08001d60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <MX_DMA_Init+0x3c>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a0b      	ldr	r2, [pc, #44]	; (8001d9c <MX_DMA_Init+0x3c>)
 8001d70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <MX_DMA_Init+0x3c>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2100      	movs	r1, #0
 8001d86:	2038      	movs	r0, #56	; 0x38
 8001d88:	f001 fbc1 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d8c:	2038      	movs	r0, #56	; 0x38
 8001d8e:	f001 fbda 	bl	8003546 <HAL_NVIC_EnableIRQ>

}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800

08001da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08e      	sub	sp, #56	; 0x38
 8001da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	623b      	str	r3, [r7, #32]
 8001dba:	4b6b      	ldr	r3, [pc, #428]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a6a      	ldr	r2, [pc, #424]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001dc0:	f043 0310 	orr.w	r3, r3, #16
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b68      	ldr	r3, [pc, #416]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	623b      	str	r3, [r7, #32]
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
 8001dd6:	4b64      	ldr	r3, [pc, #400]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a63      	ldr	r2, [pc, #396]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001ddc:	f043 0320 	orr.w	r3, r3, #32
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b61      	ldr	r3, [pc, #388]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	61fb      	str	r3, [r7, #28]
 8001dec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	61bb      	str	r3, [r7, #24]
 8001df2:	4b5d      	ldr	r3, [pc, #372]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a5c      	ldr	r2, [pc, #368]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b5a      	ldr	r3, [pc, #360]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e06:	61bb      	str	r3, [r7, #24]
 8001e08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	4b56      	ldr	r3, [pc, #344]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	4a55      	ldr	r2, [pc, #340]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1a:	4b53      	ldr	r3, [pc, #332]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	4b4f      	ldr	r3, [pc, #316]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a4e      	ldr	r2, [pc, #312]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b4c      	ldr	r3, [pc, #304]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	4b48      	ldr	r3, [pc, #288]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a47      	ldr	r2, [pc, #284]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b45      	ldr	r3, [pc, #276]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a40      	ldr	r2, [pc, #256]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b3e      	ldr	r3, [pc, #248]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	4b3a      	ldr	r3, [pc, #232]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a39      	ldr	r2, [pc, #228]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001e84:	f043 0308 	orr.w	r3, r3, #8
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b37      	ldr	r3, [pc, #220]	; (8001f68 <MX_GPIO_Init+0x1c8>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	607b      	str	r3, [r7, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2170      	movs	r1, #112	; 0x70
 8001e9a:	4834      	ldr	r0, [pc, #208]	; (8001f6c <MX_GPIO_Init+0x1cc>)
 8001e9c:	f002 f91a 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_LED3_Pin|LD_LED1_Pin|LD_LED4_Pin, GPIO_PIN_RESET);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f640 4104 	movw	r1, #3076	; 0xc04
 8001ea6:	4832      	ldr	r0, [pc, #200]	; (8001f70 <MX_GPIO_Init+0x1d0>)
 8001ea8:	f002 f914 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, GPIO_PIN_RESET);
 8001eac:	2200      	movs	r2, #0
 8001eae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eb2:	4830      	ldr	r0, [pc, #192]	; (8001f74 <MX_GPIO_Init+0x1d4>)
 8001eb4:	f002 f90e 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|ONE_WIRE_Pin, GPIO_PIN_RESET);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001ebe:	482e      	ldr	r0, [pc, #184]	; (8001f78 <MX_GPIO_Init+0x1d8>)
 8001ec0:	f002 f908 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BTN_LOAD_Pin|LD_COLON_Pin, GPIO_PIN_RESET);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2148      	movs	r1, #72	; 0x48
 8001ec8:	482c      	ldr	r0, [pc, #176]	; (8001f7c <MX_GPIO_Init+0x1dc>)
 8001eca:	f002 f903 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin OUTPUT_Y0_Pin OUTPUT_Y1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001ece:	2370      	movs	r3, #112	; 0x70
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2300      	movs	r3, #0
 8001edc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4821      	ldr	r0, [pc, #132]	; (8001f6c <MX_GPIO_Init+0x1cc>)
 8001ee6:	f001 ff59 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_LED3_Pin LD_LED1_Pin LD_LED4_Pin */
  GPIO_InitStruct.Pin = LD_LED3_Pin|LD_LED1_Pin|LD_LED4_Pin;
 8001eea:	f640 4304 	movw	r3, #3076	; 0xc04
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f00:	4619      	mov	r1, r3
 8001f02:	481b      	ldr	r0, [pc, #108]	; (8001f70 <MX_GPIO_Init+0x1d0>)
 8001f04:	f001 ff4a 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_LED2_Pin */
  GPIO_InitStruct.Pin = LD_LED2_Pin;
 8001f08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f16:	2300      	movs	r3, #0
 8001f18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LED2_GPIO_Port, &GPIO_InitStruct);
 8001f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4814      	ldr	r0, [pc, #80]	; (8001f74 <MX_GPIO_Init+0x1d4>)
 8001f22:	f001 ff3b 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_LATCH_Pin ONE_WIRE_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|ONE_WIRE_Pin;
 8001f26:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	480e      	ldr	r0, [pc, #56]	; (8001f78 <MX_GPIO_Init+0x1d8>)
 8001f40:	f001 ff2c 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_LOAD_Pin LD_COLON_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin|LD_COLON_Pin;
 8001f44:	2348      	movs	r3, #72	; 0x48
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4808      	ldr	r0, [pc, #32]	; (8001f7c <MX_GPIO_Init+0x1dc>)
 8001f5c:	f001 ff1e 	bl	8003d9c <HAL_GPIO_Init>

}
 8001f60:	bf00      	nop
 8001f62:	3738      	adds	r7, #56	; 0x38
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40020400 	.word	0x40020400
 8001f74:	40021400 	.word	0x40021400
 8001f78:	40021800 	.word	0x40021800
 8001f7c:	40020c00 	.word	0x40020c00

08001f80 <test_output>:
	__HAL_TIM_ENABLE(&htim3);
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
	__HAL_TIM_DISABLE(&htim3);
}

void test_output(){
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, button_count[1]);
 8001f84:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <test_output+0x3c>)
 8001f86:	785b      	ldrb	r3, [r3, #1]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	2120      	movs	r1, #32
 8001f8c:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <test_output+0x40>)
 8001f8e:	f002 f8a1 	bl	80040d4 <HAL_GPIO_WritePin>
	if(button_count[2] % 20 == 1){
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <test_output+0x3c>)
 8001f94:	789a      	ldrb	r2, [r3, #2]
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <test_output+0x44>)
 8001f98:	fba3 1302 	umull	r1, r3, r3, r2
 8001f9c:	0919      	lsrs	r1, r3, #4
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d103      	bne.n	8001fb6 <test_output+0x36>
		HAL_GPIO_TogglePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin);
 8001fae:	2140      	movs	r1, #64	; 0x40
 8001fb0:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <test_output+0x40>)
 8001fb2:	f002 f8a8 	bl	8004106 <HAL_GPIO_TogglePin>
	}
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000200 	.word	0x20000200
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	cccccccd 	.word	0xcccccccd

08001fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fcc:	b672      	cpsid	i
}
 8001fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <Error_Handler+0x8>
	...

08001fd4 <pwm_init>:

#include "pwm.h"

unsigned char pwm = 0;

void pwm_init(){
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <pwm_init+0x10>)
 8001fdc:	f005 fbd0 	bl	8007780 <HAL_TIM_PWM_Start>
}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000330 	.word	0x20000330

08001fe8 <setDutyCycle>:

void setDutyCycle(unsigned char value){
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim13,TIM_CHANNEL_1,value);
 8001ff2:	4b05      	ldr	r3, [pc, #20]	; (8002008 <setDutyCycle+0x20>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	79fa      	ldrb	r2, [r7, #7]
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20000330 	.word	0x20000330

0800200c <test_pwm>:

void test_pwm(){
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
	if(button_count[0] == 1){
 8002010:	4b0e      	ldr	r3, [pc, #56]	; (800204c <test_pwm+0x40>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d112      	bne.n	800203e <test_pwm+0x32>
		if(pwm == 0) pwm = 5;
 8002018:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <test_pwm+0x44>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d103      	bne.n	8002028 <test_pwm+0x1c>
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <test_pwm+0x44>)
 8002022:	2205      	movs	r2, #5
 8002024:	701a      	strb	r2, [r3, #0]
 8002026:	e00a      	b.n	800203e <test_pwm+0x32>
		else if(pwm == 5) pwm = 9;
 8002028:	4b09      	ldr	r3, [pc, #36]	; (8002050 <test_pwm+0x44>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b05      	cmp	r3, #5
 800202e:	d103      	bne.n	8002038 <test_pwm+0x2c>
 8002030:	4b07      	ldr	r3, [pc, #28]	; (8002050 <test_pwm+0x44>)
 8002032:	2209      	movs	r2, #9
 8002034:	701a      	strb	r2, [r3, #0]
 8002036:	e002      	b.n	800203e <test_pwm+0x32>
		else pwm = 0;
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <test_pwm+0x44>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
	}
	setDutyCycle(pwm);
 800203e:	4b04      	ldr	r3, [pc, #16]	; (8002050 <test_pwm+0x44>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ffd0 	bl	8001fe8 <setDutyCycle>
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000200 	.word	0x20000200
 8002050:	20000210 	.word	0x20000210

08002054 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_MspInit+0x4c>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	4a0f      	ldr	r2, [pc, #60]	; (80020a0 <HAL_MspInit+0x4c>)
 8002064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002068:	6453      	str	r3, [r2, #68]	; 0x44
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_MspInit+0x4c>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	603b      	str	r3, [r7, #0]
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_MspInit+0x4c>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <HAL_MspInit+0x4c>)
 8002080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_MspInit+0x4c>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800

080020a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a3c      	ldr	r2, [pc, #240]	; (80021b4 <HAL_ADC_MspInit+0x110>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d171      	bne.n	80021aa <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <HAL_ADC_MspInit+0x114>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	4a3a      	ldr	r2, [pc, #232]	; (80021b8 <HAL_ADC_MspInit+0x114>)
 80020d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d4:	6453      	str	r3, [r2, #68]	; 0x44
 80020d6:	4b38      	ldr	r3, [pc, #224]	; (80021b8 <HAL_ADC_MspInit+0x114>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	4b34      	ldr	r3, [pc, #208]	; (80021b8 <HAL_ADC_MspInit+0x114>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a33      	ldr	r2, [pc, #204]	; (80021b8 <HAL_ADC_MspInit+0x114>)
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <HAL_ADC_MspInit+0x114>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <HAL_ADC_MspInit+0x114>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a2c      	ldr	r2, [pc, #176]	; (80021b8 <HAL_ADC_MspInit+0x114>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <HAL_ADC_MspInit+0x114>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800211a:	2303      	movs	r3, #3
 800211c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800211e:	2303      	movs	r3, #3
 8002120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	4619      	mov	r1, r3
 800212c:	4823      	ldr	r0, [pc, #140]	; (80021bc <HAL_ADC_MspInit+0x118>)
 800212e:	f001 fe35 	bl	8003d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002132:	2303      	movs	r3, #3
 8002134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002136:	2303      	movs	r3, #3
 8002138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	4619      	mov	r1, r3
 8002144:	481e      	ldr	r0, [pc, #120]	; (80021c0 <HAL_ADC_MspInit+0x11c>)
 8002146:	f001 fe29 	bl	8003d9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800214a:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <HAL_ADC_MspInit+0x120>)
 800214c:	4a1e      	ldr	r2, [pc, #120]	; (80021c8 <HAL_ADC_MspInit+0x124>)
 800214e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002150:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <HAL_ADC_MspInit+0x120>)
 8002152:	2200      	movs	r2, #0
 8002154:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002156:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <HAL_ADC_MspInit+0x120>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800215c:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_ADC_MspInit+0x120>)
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002162:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <HAL_ADC_MspInit+0x120>)
 8002164:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002168:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800216a:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <HAL_ADC_MspInit+0x120>)
 800216c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002170:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002172:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <HAL_ADC_MspInit+0x120>)
 8002174:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002178:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_ADC_MspInit+0x120>)
 800217c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002180:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <HAL_ADC_MspInit+0x120>)
 8002184:	2200      	movs	r2, #0
 8002186:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002188:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <HAL_ADC_MspInit+0x120>)
 800218a:	2200      	movs	r2, #0
 800218c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800218e:	480d      	ldr	r0, [pc, #52]	; (80021c4 <HAL_ADC_MspInit+0x120>)
 8002190:	f001 f9f4 	bl	800357c <HAL_DMA_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800219a:	f7ff ff15 	bl	8001fc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a08      	ldr	r2, [pc, #32]	; (80021c4 <HAL_ADC_MspInit+0x120>)
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38
 80021a4:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <HAL_ADC_MspInit+0x120>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021aa:	bf00      	nop
 80021ac:	3728      	adds	r7, #40	; 0x28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40012000 	.word	0x40012000
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40020800 	.word	0x40020800
 80021c0:	40020400 	.word	0x40020400
 80021c4:	200003bc 	.word	0x200003bc
 80021c8:	40026410 	.word	0x40026410

080021cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a1d      	ldr	r2, [pc, #116]	; (8002260 <HAL_I2C_MspInit+0x94>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d133      	bne.n	8002256 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <HAL_I2C_MspInit+0x98>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a1b      	ldr	r2, [pc, #108]	; (8002264 <HAL_I2C_MspInit+0x98>)
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_I2C_MspInit+0x98>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800220a:	23c0      	movs	r3, #192	; 0xc0
 800220c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800220e:	2312      	movs	r3, #18
 8002210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002216:	2303      	movs	r3, #3
 8002218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800221a:	2304      	movs	r3, #4
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221e:	f107 0314 	add.w	r3, r7, #20
 8002222:	4619      	mov	r1, r3
 8002224:	4810      	ldr	r0, [pc, #64]	; (8002268 <HAL_I2C_MspInit+0x9c>)
 8002226:	f001 fdb9 	bl	8003d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <HAL_I2C_MspInit+0x98>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	4a0c      	ldr	r2, [pc, #48]	; (8002264 <HAL_I2C_MspInit+0x98>)
 8002234:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002238:	6413      	str	r3, [r2, #64]	; 0x40
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_I2C_MspInit+0x98>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2100      	movs	r1, #0
 800224a:	201f      	movs	r0, #31
 800224c:	f001 f95f 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002250:	201f      	movs	r0, #31
 8002252:	f001 f978 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002256:	bf00      	nop
 8002258:	3728      	adds	r7, #40	; 0x28
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40005400 	.word	0x40005400
 8002264:	40023800 	.word	0x40023800
 8002268:	40020400 	.word	0x40020400

0800226c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a1d      	ldr	r2, [pc, #116]	; (8002300 <HAL_SPI_MspInit+0x94>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d133      	bne.n	80022f6 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <HAL_SPI_MspInit+0x98>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	4a1b      	ldr	r2, [pc, #108]	; (8002304 <HAL_SPI_MspInit+0x98>)
 8002298:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800229c:	6453      	str	r3, [r2, #68]	; 0x44
 800229e:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_SPI_MspInit+0x98>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <HAL_SPI_MspInit+0x98>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a14      	ldr	r2, [pc, #80]	; (8002304 <HAL_SPI_MspInit+0x98>)
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_SPI_MspInit+0x98>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80022c6:	2338      	movs	r3, #56	; 0x38
 80022c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d2:	2303      	movs	r3, #3
 80022d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022d6:	2305      	movs	r3, #5
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022da:	f107 0314 	add.w	r3, r7, #20
 80022de:	4619      	mov	r1, r3
 80022e0:	4809      	ldr	r0, [pc, #36]	; (8002308 <HAL_SPI_MspInit+0x9c>)
 80022e2:	f001 fd5b 	bl	8003d9c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	2023      	movs	r0, #35	; 0x23
 80022ec:	f001 f90f 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80022f0:	2023      	movs	r0, #35	; 0x23
 80022f2:	f001 f928 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022f6:	bf00      	nop
 80022f8:	3728      	adds	r7, #40	; 0x28
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40013000 	.word	0x40013000
 8002304:	40023800 	.word	0x40023800
 8002308:	40020400 	.word	0x40020400

0800230c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231c:	d116      	bne.n	800234c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_TIM_Base_MspInit+0x98>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4a1f      	ldr	r2, [pc, #124]	; (80023a4 <HAL_TIM_Base_MspInit+0x98>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6413      	str	r3, [r2, #64]	; 0x40
 800232e:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <HAL_TIM_Base_MspInit+0x98>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2100      	movs	r1, #0
 800233e:	201c      	movs	r0, #28
 8002340:	f001 f8e5 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002344:	201c      	movs	r0, #28
 8002346:	f001 f8fe 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800234a:	e026      	b.n	800239a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a15      	ldr	r2, [pc, #84]	; (80023a8 <HAL_TIM_Base_MspInit+0x9c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d10e      	bne.n	8002374 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <HAL_TIM_Base_MspInit+0x98>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a11      	ldr	r2, [pc, #68]	; (80023a4 <HAL_TIM_Base_MspInit+0x98>)
 8002360:	f043 0302 	orr.w	r3, r3, #2
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <HAL_TIM_Base_MspInit+0x98>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	693b      	ldr	r3, [r7, #16]
}
 8002372:	e012      	b.n	800239a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0c      	ldr	r2, [pc, #48]	; (80023ac <HAL_TIM_Base_MspInit+0xa0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d10d      	bne.n	800239a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <HAL_TIM_Base_MspInit+0x98>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	4a07      	ldr	r2, [pc, #28]	; (80023a4 <HAL_TIM_Base_MspInit+0x98>)
 8002388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800238c:	6413      	str	r3, [r2, #64]	; 0x40
 800238e:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_TIM_Base_MspInit+0x98>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
}
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40000400 	.word	0x40000400
 80023ac:	40001c00 	.word	0x40001c00

080023b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 030c 	add.w	r3, r7, #12
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a12      	ldr	r2, [pc, #72]	; (8002418 <HAL_TIM_MspPostInit+0x68>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d11e      	bne.n	8002410 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	4b11      	ldr	r3, [pc, #68]	; (800241c <HAL_TIM_MspPostInit+0x6c>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a10      	ldr	r2, [pc, #64]	; (800241c <HAL_TIM_MspPostInit+0x6c>)
 80023dc:	f043 0320 	orr.w	r3, r3, #32
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <HAL_TIM_MspPostInit+0x6c>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0320 	and.w	r3, r3, #32
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002400:	2309      	movs	r3, #9
 8002402:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	4619      	mov	r1, r3
 800240a:	4805      	ldr	r0, [pc, #20]	; (8002420 <HAL_TIM_MspPostInit+0x70>)
 800240c:	f001 fcc6 	bl	8003d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002410:	bf00      	nop
 8002412:	3720      	adds	r7, #32
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40001c00 	.word	0x40001c00
 800241c:	40023800 	.word	0x40023800
 8002420:	40021400 	.word	0x40021400

08002424 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08c      	sub	sp, #48	; 0x30
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 031c 	add.w	r3, r7, #28
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a3a      	ldr	r2, [pc, #232]	; (800252c <HAL_UART_MspInit+0x108>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d135      	bne.n	80024b2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	4b39      	ldr	r3, [pc, #228]	; (8002530 <HAL_UART_MspInit+0x10c>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	4a38      	ldr	r2, [pc, #224]	; (8002530 <HAL_UART_MspInit+0x10c>)
 8002450:	f043 0310 	orr.w	r3, r3, #16
 8002454:	6453      	str	r3, [r2, #68]	; 0x44
 8002456:	4b36      	ldr	r3, [pc, #216]	; (8002530 <HAL_UART_MspInit+0x10c>)
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	61bb      	str	r3, [r7, #24]
 8002460:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	4b32      	ldr	r3, [pc, #200]	; (8002530 <HAL_UART_MspInit+0x10c>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	4a31      	ldr	r2, [pc, #196]	; (8002530 <HAL_UART_MspInit+0x10c>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	6313      	str	r3, [r2, #48]	; 0x30
 8002472:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <HAL_UART_MspInit+0x10c>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800247e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248c:	2303      	movs	r3, #3
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002490:	2307      	movs	r3, #7
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002494:	f107 031c 	add.w	r3, r7, #28
 8002498:	4619      	mov	r1, r3
 800249a:	4826      	ldr	r0, [pc, #152]	; (8002534 <HAL_UART_MspInit+0x110>)
 800249c:	f001 fc7e 	bl	8003d9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024a0:	2200      	movs	r2, #0
 80024a2:	2100      	movs	r1, #0
 80024a4:	2025      	movs	r0, #37	; 0x25
 80024a6:	f001 f832 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024aa:	2025      	movs	r0, #37	; 0x25
 80024ac:	f001 f84b 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024b0:	e038      	b.n	8002524 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a20      	ldr	r2, [pc, #128]	; (8002538 <HAL_UART_MspInit+0x114>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d133      	bne.n	8002524 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024bc:	2300      	movs	r3, #0
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_UART_MspInit+0x10c>)
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	4a1a      	ldr	r2, [pc, #104]	; (8002530 <HAL_UART_MspInit+0x10c>)
 80024c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ca:	6413      	str	r3, [r2, #64]	; 0x40
 80024cc:	4b18      	ldr	r3, [pc, #96]	; (8002530 <HAL_UART_MspInit+0x10c>)
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	4b14      	ldr	r3, [pc, #80]	; (8002530 <HAL_UART_MspInit+0x10c>)
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	4a13      	ldr	r2, [pc, #76]	; (8002530 <HAL_UART_MspInit+0x10c>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6313      	str	r3, [r2, #48]	; 0x30
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <HAL_UART_MspInit+0x10c>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024f4:	230c      	movs	r3, #12
 80024f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f8:	2302      	movs	r3, #2
 80024fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002500:	2303      	movs	r3, #3
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002504:	2307      	movs	r3, #7
 8002506:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002508:	f107 031c 	add.w	r3, r7, #28
 800250c:	4619      	mov	r1, r3
 800250e:	4809      	ldr	r0, [pc, #36]	; (8002534 <HAL_UART_MspInit+0x110>)
 8002510:	f001 fc44 	bl	8003d9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002514:	2200      	movs	r2, #0
 8002516:	2100      	movs	r1, #0
 8002518:	2026      	movs	r0, #38	; 0x26
 800251a:	f000 fff8 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800251e:	2026      	movs	r0, #38	; 0x26
 8002520:	f001 f811 	bl	8003546 <HAL_NVIC_EnableIRQ>
}
 8002524:	bf00      	nop
 8002526:	3730      	adds	r7, #48	; 0x30
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40011000 	.word	0x40011000
 8002530:	40023800 	.word	0x40023800
 8002534:	40020000 	.word	0x40020000
 8002538:	40004400 	.word	0x40004400

0800253c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002540:	e7fe      	b.n	8002540 <NMI_Handler+0x4>

08002542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002546:	e7fe      	b.n	8002546 <HardFault_Handler+0x4>

08002548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800254c:	e7fe      	b.n	800254c <MemManage_Handler+0x4>

0800254e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002552:	e7fe      	b.n	8002552 <BusFault_Handler+0x4>

08002554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <UsageFault_Handler+0x4>

0800255a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002588:	f000 fab4 	bl	8002af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}

08002590 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002594:	4802      	ldr	r0, [pc, #8]	; (80025a0 <TIM2_IRQHandler+0x10>)
 8002596:	f005 f9bb 	bl	8007910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000474 	.word	0x20000474

080025a4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80025a8:	4802      	ldr	r0, [pc, #8]	; (80025b4 <I2C1_EV_IRQHandler+0x10>)
 80025aa:	f002 f87b 	bl	80046a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	2000023c 	.word	0x2000023c

080025b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80025bc:	4802      	ldr	r0, [pc, #8]	; (80025c8 <SPI1_IRQHandler+0x10>)
 80025be:	f004 fd0f 	bl	8006fe0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	2000041c 	.word	0x2000041c

080025cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025d0:	4802      	ldr	r0, [pc, #8]	; (80025dc <USART1_IRQHandler+0x10>)
 80025d2:	f006 f907 	bl	80087e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000378 	.word	0x20000378

080025e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025e4:	4802      	ldr	r0, [pc, #8]	; (80025f0 <USART2_IRQHandler+0x10>)
 80025e6:	f006 f8fd 	bl	80087e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	200004bc 	.word	0x200004bc

080025f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <DMA2_Stream0_IRQHandler+0x10>)
 80025fa:	f001 f957 	bl	80038ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200003bc 	.word	0x200003bc

08002608 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
	return 1;
 800260c:	2301      	movs	r3, #1
}
 800260e:	4618      	mov	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <_kill>:

int _kill(int pid, int sig)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002622:	f006 ff97 	bl	8009554 <__errno>
 8002626:	4603      	mov	r3, r0
 8002628:	2216      	movs	r2, #22
 800262a:	601a      	str	r2, [r3, #0]
	return -1;
 800262c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <_exit>:

void _exit (int status)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002640:	f04f 31ff 	mov.w	r1, #4294967295
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ffe7 	bl	8002618 <_kill>
	while (1) {}		/* Make sure we hang here */
 800264a:	e7fe      	b.n	800264a <_exit+0x12>

0800264c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	e00a      	b.n	8002674 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800265e:	f3af 8000 	nop.w
 8002662:	4601      	mov	r1, r0
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	60ba      	str	r2, [r7, #8]
 800266a:	b2ca      	uxtb	r2, r1
 800266c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	3301      	adds	r3, #1
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	429a      	cmp	r2, r3
 800267a:	dbf0      	blt.n	800265e <_read+0x12>
	}

return len;
 800267c:	687b      	ldr	r3, [r7, #4]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	e009      	b.n	80026ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	60ba      	str	r2, [r7, #8]
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	3301      	adds	r3, #1
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	dbf1      	blt.n	8002698 <_write+0x12>
	}
	return len;
 80026b4:	687b      	ldr	r3, [r7, #4]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <_close>:

int _close(int file)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
	return -1;
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026e6:	605a      	str	r2, [r3, #4]
	return 0;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <_isatty>:

int _isatty(int file)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
	return 1;
 80026fe:	2301      	movs	r3, #1
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
	return 0;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002730:	4a14      	ldr	r2, [pc, #80]	; (8002784 <_sbrk+0x5c>)
 8002732:	4b15      	ldr	r3, [pc, #84]	; (8002788 <_sbrk+0x60>)
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800273c:	4b13      	ldr	r3, [pc, #76]	; (800278c <_sbrk+0x64>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d102      	bne.n	800274a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <_sbrk+0x64>)
 8002746:	4a12      	ldr	r2, [pc, #72]	; (8002790 <_sbrk+0x68>)
 8002748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800274a:	4b10      	ldr	r3, [pc, #64]	; (800278c <_sbrk+0x64>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	429a      	cmp	r2, r3
 8002756:	d207      	bcs.n	8002768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002758:	f006 fefc 	bl	8009554 <__errno>
 800275c:	4603      	mov	r3, r0
 800275e:	220c      	movs	r2, #12
 8002760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002762:	f04f 33ff 	mov.w	r3, #4294967295
 8002766:	e009      	b.n	800277c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <_sbrk+0x64>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800276e:	4b07      	ldr	r3, [pc, #28]	; (800278c <_sbrk+0x64>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	4a05      	ldr	r2, [pc, #20]	; (800278c <_sbrk+0x64>)
 8002778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800277a:	68fb      	ldr	r3, [r7, #12]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20020000 	.word	0x20020000
 8002788:	00000400 	.word	0x00000400
 800278c:	20000214 	.word	0x20000214
 8002790:	20000598 	.word	0x20000598

08002794 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <SystemInit+0x20>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	4a05      	ldr	r2, [pc, #20]	; (80027b4 <SystemInit+0x20>)
 80027a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <timer_init>:
 *  Created on: Aug 1, 2023
 *      Author: phamv
 */
#include "timer.h"

void timer_init(){
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80027bc:	4808      	ldr	r0, [pc, #32]	; (80027e0 <timer_init+0x28>)
 80027be:	f004 ff15 	bl	80075ec <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Init(&htim3);
 80027c2:	4808      	ldr	r0, [pc, #32]	; (80027e4 <timer_init+0x2c>)
 80027c4:	f004 fe5a 	bl	800747c <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start(&htim3);
 80027c8:	4806      	ldr	r0, [pc, #24]	; (80027e4 <timer_init+0x2c>)
 80027ca:	f004 fea7 	bl	800751c <HAL_TIM_Base_Start>
//	HAL_TIM_PWM_Init(&htim13);
	setTimer1(1000);
 80027ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027d2:	f000 f809 	bl	80027e8 <setTimer1>
	setTimer2(50);
 80027d6:	2032      	movs	r0, #50	; 0x32
 80027d8:	f000 f81c 	bl	8002814 <setTimer2>
}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20000474 	.word	0x20000474
 80027e4:	20000290 	.word	0x20000290

080027e8 <setTimer1>:

int flag_timer1 = 0, flag_timer2 = 0, flag_timer3 = 0;
int timer1_counter = 0, timer2_counter = 0, timer3_counter = 0;

void setTimer1(int duration){
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
	timer1_counter = 1000;
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <setTimer1+0x24>)
 80027f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027f6:	601a      	str	r2, [r3, #0]
	flag_timer1 = 0;
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <setTimer1+0x28>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	20000224 	.word	0x20000224
 8002810:	20000218 	.word	0x20000218

08002814 <setTimer2>:

void setTimer2(int duration){
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 800281c:	4a05      	ldr	r2, [pc, #20]	; (8002834 <setTimer2+0x20>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6013      	str	r3, [r2, #0]
	flag_timer2 = 0;
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <setTimer2+0x24>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	20000228 	.word	0x20000228
 8002838:	2000021c 	.word	0x2000021c

0800283c <timerRun>:
	timer3_counter = duration/TIMER_CYCLE;
	flag_timer3 = 0;
}


void timerRun(){
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8002840:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <timerRun+0x70>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	dd0b      	ble.n	8002860 <timerRun+0x24>
		timer1_counter--;
 8002848:	4b18      	ldr	r3, [pc, #96]	; (80028ac <timerRun+0x70>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3b01      	subs	r3, #1
 800284e:	4a17      	ldr	r2, [pc, #92]	; (80028ac <timerRun+0x70>)
 8002850:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) flag_timer1 = 1;
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <timerRun+0x70>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d102      	bne.n	8002860 <timerRun+0x24>
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <timerRun+0x74>)
 800285c:	2201      	movs	r2, #1
 800285e:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0){
 8002860:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <timerRun+0x78>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	dd0b      	ble.n	8002880 <timerRun+0x44>
		timer2_counter--;
 8002868:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <timerRun+0x78>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	3b01      	subs	r3, #1
 800286e:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <timerRun+0x78>)
 8002870:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) flag_timer2 = 1;
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <timerRun+0x78>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d102      	bne.n	8002880 <timerRun+0x44>
 800287a:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <timerRun+0x7c>)
 800287c:	2201      	movs	r2, #1
 800287e:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter > 0){
 8002880:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <timerRun+0x80>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	dd0b      	ble.n	80028a0 <timerRun+0x64>
		timer3_counter--;
 8002888:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <timerRun+0x80>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3b01      	subs	r3, #1
 800288e:	4a0b      	ldr	r2, [pc, #44]	; (80028bc <timerRun+0x80>)
 8002890:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) flag_timer3 = 1;
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <timerRun+0x80>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d102      	bne.n	80028a0 <timerRun+0x64>
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <timerRun+0x84>)
 800289c:	2201      	movs	r2, #1
 800289e:	601a      	str	r2, [r3, #0]
	}
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000224 	.word	0x20000224
 80028b0:	20000218 	.word	0x20000218
 80028b4:	20000228 	.word	0x20000228
 80028b8:	2000021c 	.word	0x2000021c
 80028bc:	2000022c 	.word	0x2000022c
 80028c0:	20000220 	.word	0x20000220

080028c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d4:	d103      	bne.n	80028de <HAL_TIM_PeriodElapsedCallback+0x1a>
		timerRun();
 80028d6:	f7ff ffb1 	bl	800283c <timerRun>
		led7Scan();
 80028da:	f7fe fe73 	bl	80015c4 <led7Scan>
	}
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <UART_Init>:
#include "uart.h"

unsigned char receive_buffer1 = 0;
unsigned char receive_buffer2 = 0;

void UART_Init(){
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80028ec:	2201      	movs	r2, #1
 80028ee:	4905      	ldr	r1, [pc, #20]	; (8002904 <UART_Init+0x1c>)
 80028f0:	4805      	ldr	r0, [pc, #20]	; (8002908 <UART_Init+0x20>)
 80028f2:	f005 ff46 	bl	8008782 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 80028f6:	2201      	movs	r2, #1
 80028f8:	4904      	ldr	r1, [pc, #16]	; (800290c <UART_Init+0x24>)
 80028fa:	4805      	ldr	r0, [pc, #20]	; (8002910 <UART_Init+0x28>)
 80028fc:	f005 ff41 	bl	8008782 <HAL_UART_Receive_IT>
}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20000230 	.word	0x20000230
 8002908:	20000378 	.word	0x20000378
 800290c:	20000231 	.word	0x20000231
 8002910:	200004bc 	.word	0x200004bc

08002914 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a11      	ldr	r2, [pc, #68]	; (8002968 <HAL_UART_RxCpltCallback+0x54>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d10a      	bne.n	800293c <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002926:	230a      	movs	r3, #10
 8002928:	2201      	movs	r2, #1
 800292a:	4910      	ldr	r1, [pc, #64]	; (800296c <HAL_UART_RxCpltCallback+0x58>)
 800292c:	4810      	ldr	r0, [pc, #64]	; (8002970 <HAL_UART_RxCpltCallback+0x5c>)
 800292e:	f005 fe96 	bl	800865e <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002932:	2201      	movs	r2, #1
 8002934:	490d      	ldr	r1, [pc, #52]	; (800296c <HAL_UART_RxCpltCallback+0x58>)
 8002936:	480e      	ldr	r0, [pc, #56]	; (8002970 <HAL_UART_RxCpltCallback+0x5c>)
 8002938:	f005 ff23 	bl	8008782 <HAL_UART_Receive_IT>
	}
	if(huart->Instance == USART2){
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <HAL_UART_RxCpltCallback+0x60>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d10c      	bne.n	8002960 <HAL_UART_RxCpltCallback+0x4c>
		fsm_GetTime();
 8002946:	f7fe fca9 	bl	800129c <fsm_GetTime>
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 800294a:	2201      	movs	r2, #1
 800294c:	490a      	ldr	r1, [pc, #40]	; (8002978 <HAL_UART_RxCpltCallback+0x64>)
 800294e:	480b      	ldr	r0, [pc, #44]	; (800297c <HAL_UART_RxCpltCallback+0x68>)
 8002950:	f005 ff17 	bl	8008782 <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart1, &receive_buffer2, 1, 10);
 8002954:	230a      	movs	r3, #10
 8002956:	2201      	movs	r2, #1
 8002958:	4907      	ldr	r1, [pc, #28]	; (8002978 <HAL_UART_RxCpltCallback+0x64>)
 800295a:	4805      	ldr	r0, [pc, #20]	; (8002970 <HAL_UART_RxCpltCallback+0x5c>)
 800295c:	f005 fe7f 	bl	800865e <HAL_UART_Transmit>
	}
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40011000 	.word	0x40011000
 800296c:	20000230 	.word	0x20000230
 8002970:	20000378 	.word	0x20000378
 8002974:	40004400 	.word	0x40004400
 8002978:	20000231 	.word	0x20000231
 800297c:	200004bc 	.word	0x200004bc

08002980 <BCD2DEC>:
 *      Author: phamv
 */

#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	0092      	lsls	r2, r2, #2
 8002994:	4413      	add	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	b2db      	uxtb	r3, r3
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	4a0d      	ldr	r2, [pc, #52]	; (80029f8 <DEC2BCD+0x44>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	08db      	lsrs	r3, r3, #3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	b258      	sxtb	r0, r3
 80029ce:	79fa      	ldrb	r2, [r7, #7]
 80029d0:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <DEC2BCD+0x44>)
 80029d2:	fba3 1302 	umull	r1, r3, r3, r2
 80029d6:	08d9      	lsrs	r1, r3, #3
 80029d8:	460b      	mov	r3, r1
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	b25b      	sxtb	r3, r3
 80029e6:	4303      	orrs	r3, r0
 80029e8:	b25b      	sxtb	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	cccccccd 	.word	0xcccccccd

080029fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a00:	480d      	ldr	r0, [pc, #52]	; (8002a38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a02:	490e      	ldr	r1, [pc, #56]	; (8002a3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a04:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a08:	e002      	b.n	8002a10 <LoopCopyDataInit>

08002a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a0e:	3304      	adds	r3, #4

08002a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a14:	d3f9      	bcc.n	8002a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a16:	4a0b      	ldr	r2, [pc, #44]	; (8002a44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a18:	4c0b      	ldr	r4, [pc, #44]	; (8002a48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a1c:	e001      	b.n	8002a22 <LoopFillZerobss>

08002a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a20:	3204      	adds	r2, #4

08002a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a24:	d3fb      	bcc.n	8002a1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a26:	f7ff feb5 	bl	8002794 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a2a:	f006 fd99 	bl	8009560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a2e:	f7fe febd 	bl	80017ac <main>
  bx  lr    
 8002a32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a3c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002a40:	0800c764 	.word	0x0800c764
  ldr r2, =_sbss
 8002a44:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002a48:	20000598 	.word	0x20000598

08002a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a4c:	e7fe      	b.n	8002a4c <ADC_IRQHandler>
	...

08002a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a54:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <HAL_Init+0x40>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0d      	ldr	r2, [pc, #52]	; (8002a90 <HAL_Init+0x40>)
 8002a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_Init+0x40>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <HAL_Init+0x40>)
 8002a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <HAL_Init+0x40>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a07      	ldr	r2, [pc, #28]	; (8002a90 <HAL_Init+0x40>)
 8002a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a78:	2003      	movs	r0, #3
 8002a7a:	f000 fd3d 	bl	80034f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a7e:	200f      	movs	r0, #15
 8002a80:	f000 f808 	bl	8002a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a84:	f7ff fae6 	bl	8002054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023c00 	.word	0x40023c00

08002a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a9c:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_InitTick+0x54>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_InitTick+0x58>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fd55 	bl	8003562 <HAL_SYSTICK_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00e      	b.n	8002ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b0f      	cmp	r3, #15
 8002ac6:	d80a      	bhi.n	8002ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad0:	f000 fd1d 	bl	800350e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ad4:	4a06      	ldr	r2, [pc, #24]	; (8002af0 <HAL_InitTick+0x5c>)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	e000      	b.n	8002ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000008 	.word	0x20000008
 8002aec:	20000010 	.word	0x20000010
 8002af0:	2000000c 	.word	0x2000000c

08002af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_IncTick+0x20>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_IncTick+0x24>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <HAL_IncTick+0x24>)
 8002b06:	6013      	str	r3, [r2, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	20000010 	.word	0x20000010
 8002b18:	20000584 	.word	0x20000584

08002b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_GetTick+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000584 	.word	0x20000584

08002b34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e033      	b.n	8002bb2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff faa6 	bl	80020a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d118      	bne.n	8002ba4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b7a:	f023 0302 	bic.w	r3, r3, #2
 8002b7e:	f043 0202 	orr.w	r2, r3, #2
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fa68 	bl	800305c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f023 0303 	bic.w	r3, r3, #3
 8002b9a:	f043 0201 	orr.w	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ba2:	e001      	b.n	8002ba8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_ADC_Start_DMA+0x1e>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e0e9      	b.n	8002dae <HAL_ADC_Start_DMA+0x1f2>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d018      	beq.n	8002c22 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c00:	4b6d      	ldr	r3, [pc, #436]	; (8002db8 <HAL_ADC_Start_DMA+0x1fc>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a6d      	ldr	r2, [pc, #436]	; (8002dbc <HAL_ADC_Start_DMA+0x200>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	0c9a      	lsrs	r2, r3, #18
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4413      	add	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002c14:	e002      	b.n	8002c1c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f9      	bne.n	8002c16 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c30:	d107      	bne.n	8002c42 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c40:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	f040 80a1 	bne.w	8002d94 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d007      	beq.n	8002c84 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c90:	d106      	bne.n	8002ca0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	f023 0206 	bic.w	r2, r3, #6
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	645a      	str	r2, [r3, #68]	; 0x44
 8002c9e:	e002      	b.n	8002ca6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cae:	4b44      	ldr	r3, [pc, #272]	; (8002dc0 <HAL_ADC_Start_DMA+0x204>)
 8002cb0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	4a43      	ldr	r2, [pc, #268]	; (8002dc4 <HAL_ADC_Start_DMA+0x208>)
 8002cb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	4a42      	ldr	r2, [pc, #264]	; (8002dc8 <HAL_ADC_Start_DMA+0x20c>)
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	4a41      	ldr	r2, [pc, #260]	; (8002dcc <HAL_ADC_Start_DMA+0x210>)
 8002cc8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002cd2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ce2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cf2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	334c      	adds	r3, #76	; 0x4c
 8002cfe:	4619      	mov	r1, r3
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f000 fce8 	bl	80036d8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d12a      	bne.n	8002d6a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a2d      	ldr	r2, [pc, #180]	; (8002dd0 <HAL_ADC_Start_DMA+0x214>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d015      	beq.n	8002d4a <HAL_ADC_Start_DMA+0x18e>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a2c      	ldr	r2, [pc, #176]	; (8002dd4 <HAL_ADC_Start_DMA+0x218>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d105      	bne.n	8002d34 <HAL_ADC_Start_DMA+0x178>
 8002d28:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <HAL_ADC_Start_DMA+0x204>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 031f 	and.w	r3, r3, #31
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a27      	ldr	r2, [pc, #156]	; (8002dd8 <HAL_ADC_Start_DMA+0x21c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d136      	bne.n	8002dac <HAL_ADC_Start_DMA+0x1f0>
 8002d3e:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <HAL_ADC_Start_DMA+0x204>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d130      	bne.n	8002dac <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d129      	bne.n	8002dac <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	e020      	b.n	8002dac <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <HAL_ADC_Start_DMA+0x214>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d11b      	bne.n	8002dac <HAL_ADC_Start_DMA+0x1f0>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d114      	bne.n	8002dac <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d90:	609a      	str	r2, [r3, #8]
 8002d92:	e00b      	b.n	8002dac <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	f043 0210 	orr.w	r2, r3, #16
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da4:	f043 0201 	orr.w	r2, r3, #1
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000008 	.word	0x20000008
 8002dbc:	431bde83 	.word	0x431bde83
 8002dc0:	40012300 	.word	0x40012300
 8002dc4:	08003255 	.word	0x08003255
 8002dc8:	0800330f 	.word	0x0800330f
 8002dcc:	0800332b 	.word	0x0800332b
 8002dd0:	40012000 	.word	0x40012000
 8002dd4:	40012100 	.word	0x40012100
 8002dd8:	40012200 	.word	0x40012200

08002ddc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x1c>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e105      	b.n	8003040 <HAL_ADC_ConfigChannel+0x228>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b09      	cmp	r3, #9
 8002e42:	d925      	bls.n	8002e90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68d9      	ldr	r1, [r3, #12]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	461a      	mov	r2, r3
 8002e52:	4613      	mov	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4413      	add	r3, r2
 8002e58:	3b1e      	subs	r3, #30
 8002e5a:	2207      	movs	r2, #7
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43da      	mvns	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	400a      	ands	r2, r1
 8002e68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68d9      	ldr	r1, [r3, #12]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4403      	add	r3, r0
 8002e82:	3b1e      	subs	r3, #30
 8002e84:	409a      	lsls	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	60da      	str	r2, [r3, #12]
 8002e8e:	e022      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6919      	ldr	r1, [r3, #16]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	4413      	add	r3, r2
 8002ea4:	2207      	movs	r2, #7
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43da      	mvns	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	400a      	ands	r2, r1
 8002eb2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6919      	ldr	r1, [r3, #16]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4403      	add	r3, r0
 8002ecc:	409a      	lsls	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d824      	bhi.n	8002f28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	3b05      	subs	r3, #5
 8002ef0:	221f      	movs	r2, #31
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	400a      	ands	r2, r1
 8002efe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	3b05      	subs	r3, #5
 8002f1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	635a      	str	r2, [r3, #52]	; 0x34
 8002f26:	e04c      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b0c      	cmp	r3, #12
 8002f2e:	d824      	bhi.n	8002f7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	3b23      	subs	r3, #35	; 0x23
 8002f42:	221f      	movs	r2, #31
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43da      	mvns	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	400a      	ands	r2, r1
 8002f50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	4618      	mov	r0, r3
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	3b23      	subs	r3, #35	; 0x23
 8002f6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
 8002f78:	e023      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	3b41      	subs	r3, #65	; 0x41
 8002f8c:	221f      	movs	r2, #31
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43da      	mvns	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	400a      	ands	r2, r1
 8002f9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	4618      	mov	r0, r3
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3b41      	subs	r3, #65	; 0x41
 8002fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fc2:	4b22      	ldr	r3, [pc, #136]	; (800304c <HAL_ADC_ConfigChannel+0x234>)
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a21      	ldr	r2, [pc, #132]	; (8003050 <HAL_ADC_ConfigChannel+0x238>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d109      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x1cc>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b12      	cmp	r3, #18
 8002fd6:	d105      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a19      	ldr	r2, [pc, #100]	; (8003050 <HAL_ADC_ConfigChannel+0x238>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d123      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x21e>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b10      	cmp	r3, #16
 8002ff4:	d003      	beq.n	8002ffe <HAL_ADC_ConfigChannel+0x1e6>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b11      	cmp	r3, #17
 8002ffc:	d11b      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b10      	cmp	r3, #16
 8003010:	d111      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003012:	4b10      	ldr	r3, [pc, #64]	; (8003054 <HAL_ADC_ConfigChannel+0x23c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a10      	ldr	r2, [pc, #64]	; (8003058 <HAL_ADC_ConfigChannel+0x240>)
 8003018:	fba2 2303 	umull	r2, r3, r2, r3
 800301c:	0c9a      	lsrs	r2, r3, #18
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003028:	e002      	b.n	8003030 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	3b01      	subs	r3, #1
 800302e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f9      	bne.n	800302a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	40012300 	.word	0x40012300
 8003050:	40012000 	.word	0x40012000
 8003054:	20000008 	.word	0x20000008
 8003058:	431bde83 	.word	0x431bde83

0800305c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003064:	4b79      	ldr	r3, [pc, #484]	; (800324c <ADC_Init+0x1f0>)
 8003066:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	431a      	orrs	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003090:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6859      	ldr	r1, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	021a      	lsls	r2, r3, #8
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80030b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6859      	ldr	r1, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6899      	ldr	r1, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	4a58      	ldr	r2, [pc, #352]	; (8003250 <ADC_Init+0x1f4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d022      	beq.n	800313a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003102:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6899      	ldr	r1, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003124:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6899      	ldr	r1, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	e00f      	b.n	800315a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003148:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003158:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0202 	bic.w	r2, r2, #2
 8003168:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6899      	ldr	r1, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	7e1b      	ldrb	r3, [r3, #24]
 8003174:	005a      	lsls	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01b      	beq.n	80031c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003196:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80031a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6859      	ldr	r1, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	3b01      	subs	r3, #1
 80031b4:	035a      	lsls	r2, r3, #13
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	e007      	b.n	80031d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80031de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	051a      	lsls	r2, r3, #20
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003204:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6899      	ldr	r1, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003212:	025a      	lsls	r2, r3, #9
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800322a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6899      	ldr	r1, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	029a      	lsls	r2, r3, #10
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	609a      	str	r2, [r3, #8]
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	40012300 	.word	0x40012300
 8003250:	0f000001 	.word	0x0f000001

08003254 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003260:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800326a:	2b00      	cmp	r3, #0
 800326c:	d13c      	bne.n	80032e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d12b      	bne.n	80032e0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800328c:	2b00      	cmp	r3, #0
 800328e:	d127      	bne.n	80032e0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003296:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800329a:	2b00      	cmp	r3, #0
 800329c:	d006      	beq.n	80032ac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d119      	bne.n	80032e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0220 	bic.w	r2, r2, #32
 80032ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d105      	bne.n	80032e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	f043 0201 	orr.w	r2, r3, #1
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f7ff fd7b 	bl	8002ddc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032e6:	e00e      	b.n	8003306 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f7ff fd85 	bl	8002e04 <HAL_ADC_ErrorCallback>
}
 80032fa:	e004      	b.n	8003306 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	4798      	blx	r3
}
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b084      	sub	sp, #16
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f7ff fd67 	bl	8002df0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003322:	bf00      	nop
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003336:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2240      	movs	r2, #64	; 0x40
 800333c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f043 0204 	orr.w	r2, r3, #4
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7ff fd5a 	bl	8002e04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003368:	4b0c      	ldr	r3, [pc, #48]	; (800339c <__NVIC_SetPriorityGrouping+0x44>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003374:	4013      	ands	r3, r2
 8003376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800338a:	4a04      	ldr	r2, [pc, #16]	; (800339c <__NVIC_SetPriorityGrouping+0x44>)
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	60d3      	str	r3, [r2, #12]
}
 8003390:	bf00      	nop
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	e000ed00 	.word	0xe000ed00

080033a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <__NVIC_GetPriorityGrouping+0x18>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	0a1b      	lsrs	r3, r3, #8
 80033aa:	f003 0307 	and.w	r3, r3, #7
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	db0b      	blt.n	80033e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	f003 021f 	and.w	r2, r3, #31
 80033d4:	4907      	ldr	r1, [pc, #28]	; (80033f4 <__NVIC_EnableIRQ+0x38>)
 80033d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	2001      	movs	r0, #1
 80033de:	fa00 f202 	lsl.w	r2, r0, r2
 80033e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	e000e100 	.word	0xe000e100

080033f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	6039      	str	r1, [r7, #0]
 8003402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003408:	2b00      	cmp	r3, #0
 800340a:	db0a      	blt.n	8003422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	b2da      	uxtb	r2, r3
 8003410:	490c      	ldr	r1, [pc, #48]	; (8003444 <__NVIC_SetPriority+0x4c>)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	0112      	lsls	r2, r2, #4
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	440b      	add	r3, r1
 800341c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003420:	e00a      	b.n	8003438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	b2da      	uxtb	r2, r3
 8003426:	4908      	ldr	r1, [pc, #32]	; (8003448 <__NVIC_SetPriority+0x50>)
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	3b04      	subs	r3, #4
 8003430:	0112      	lsls	r2, r2, #4
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	440b      	add	r3, r1
 8003436:	761a      	strb	r2, [r3, #24]
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	e000e100 	.word	0xe000e100
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800344c:	b480      	push	{r7}
 800344e:	b089      	sub	sp, #36	; 0x24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f1c3 0307 	rsb	r3, r3, #7
 8003466:	2b04      	cmp	r3, #4
 8003468:	bf28      	it	cs
 800346a:	2304      	movcs	r3, #4
 800346c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3304      	adds	r3, #4
 8003472:	2b06      	cmp	r3, #6
 8003474:	d902      	bls.n	800347c <NVIC_EncodePriority+0x30>
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3b03      	subs	r3, #3
 800347a:	e000      	b.n	800347e <NVIC_EncodePriority+0x32>
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003480:	f04f 32ff 	mov.w	r2, #4294967295
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43da      	mvns	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	401a      	ands	r2, r3
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003494:	f04f 31ff 	mov.w	r1, #4294967295
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	fa01 f303 	lsl.w	r3, r1, r3
 800349e:	43d9      	mvns	r1, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a4:	4313      	orrs	r3, r2
         );
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3724      	adds	r7, #36	; 0x24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3b01      	subs	r3, #1
 80034c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034c4:	d301      	bcc.n	80034ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034c6:	2301      	movs	r3, #1
 80034c8:	e00f      	b.n	80034ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ca:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <SysTick_Config+0x40>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034d2:	210f      	movs	r1, #15
 80034d4:	f04f 30ff 	mov.w	r0, #4294967295
 80034d8:	f7ff ff8e 	bl	80033f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <SysTick_Config+0x40>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034e2:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <SysTick_Config+0x40>)
 80034e4:	2207      	movs	r2, #7
 80034e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	e000e010 	.word	0xe000e010

080034f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ff29 	bl	8003358 <__NVIC_SetPriorityGrouping>
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800350e:	b580      	push	{r7, lr}
 8003510:	b086      	sub	sp, #24
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003520:	f7ff ff3e 	bl	80033a0 <__NVIC_GetPriorityGrouping>
 8003524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	6978      	ldr	r0, [r7, #20]
 800352c:	f7ff ff8e 	bl	800344c <NVIC_EncodePriority>
 8003530:	4602      	mov	r2, r0
 8003532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ff5d 	bl	80033f8 <__NVIC_SetPriority>
}
 800353e:	bf00      	nop
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	4603      	mov	r3, r0
 800354e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff31 	bl	80033bc <__NVIC_EnableIRQ>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ffa2 	bl	80034b4 <SysTick_Config>
 8003570:	4603      	mov	r3, r0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003588:	f7ff fac8 	bl	8002b1c <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e099      	b.n	80036cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0201 	bic.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035b8:	e00f      	b.n	80035da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035ba:	f7ff faaf 	bl	8002b1c <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b05      	cmp	r3, #5
 80035c6:	d908      	bls.n	80035da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2220      	movs	r2, #32
 80035cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2203      	movs	r2, #3
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e078      	b.n	80036cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e8      	bne.n	80035ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4b38      	ldr	r3, [pc, #224]	; (80036d4 <HAL_DMA_Init+0x158>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003606:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003612:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800361e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4313      	orrs	r3, r2
 800362a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	2b04      	cmp	r3, #4
 8003632:	d107      	bne.n	8003644 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	4313      	orrs	r3, r2
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f023 0307 	bic.w	r3, r3, #7
 800365a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	2b04      	cmp	r3, #4
 800366c:	d117      	bne.n	800369e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00e      	beq.n	800369e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fb0f 	bl	8003ca4 <DMA_CheckFifoParam>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2240      	movs	r2, #64	; 0x40
 8003690:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800369a:	2301      	movs	r3, #1
 800369c:	e016      	b.n	80036cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fac6 	bl	8003c38 <DMA_CalcBaseAndBitshift>
 80036ac:	4603      	mov	r3, r0
 80036ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b4:	223f      	movs	r2, #63	; 0x3f
 80036b6:	409a      	lsls	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	f010803f 	.word	0xf010803f

080036d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_DMA_Start_IT+0x26>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e040      	b.n	8003780 <HAL_DMA_Start_IT+0xa8>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b01      	cmp	r3, #1
 8003710:	d12f      	bne.n	8003772 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2202      	movs	r2, #2
 8003716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 fa58 	bl	8003bdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003730:	223f      	movs	r2, #63	; 0x3f
 8003732:	409a      	lsls	r2, r3
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0216 	orr.w	r2, r2, #22
 8003746:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	d007      	beq.n	8003760 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0208 	orr.w	r2, r2, #8
 800375e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	e005      	b.n	800377e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800377a:	2302      	movs	r3, #2
 800377c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800377e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003796:	f7ff f9c1 	bl	8002b1c <HAL_GetTick>
 800379a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d008      	beq.n	80037ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2280      	movs	r2, #128	; 0x80
 80037ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e052      	b.n	8003860 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0216 	bic.w	r2, r2, #22
 80037c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_DMA_Abort+0x62>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d007      	beq.n	80037fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0208 	bic.w	r2, r2, #8
 80037f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0201 	bic.w	r2, r2, #1
 8003808:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800380a:	e013      	b.n	8003834 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800380c:	f7ff f986 	bl	8002b1c <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b05      	cmp	r3, #5
 8003818:	d90c      	bls.n	8003834 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2220      	movs	r2, #32
 800381e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2203      	movs	r2, #3
 8003824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e015      	b.n	8003860 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1e4      	bne.n	800380c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003846:	223f      	movs	r2, #63	; 0x3f
 8003848:	409a      	lsls	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d004      	beq.n	8003886 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2280      	movs	r2, #128	; 0x80
 8003880:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e00c      	b.n	80038a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2205      	movs	r2, #5
 800388a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0201 	bic.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038b8:	4b92      	ldr	r3, [pc, #584]	; (8003b04 <HAL_DMA_IRQHandler+0x258>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a92      	ldr	r2, [pc, #584]	; (8003b08 <HAL_DMA_IRQHandler+0x25c>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	0a9b      	lsrs	r3, r3, #10
 80038c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d6:	2208      	movs	r2, #8
 80038d8:	409a      	lsls	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4013      	ands	r3, r2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d01a      	beq.n	8003918 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d013      	beq.n	8003918 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0204 	bic.w	r2, r2, #4
 80038fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003904:	2208      	movs	r2, #8
 8003906:	409a      	lsls	r2, r3
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	f043 0201 	orr.w	r2, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391c:	2201      	movs	r2, #1
 800391e:	409a      	lsls	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4013      	ands	r3, r2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d012      	beq.n	800394e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00b      	beq.n	800394e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393a:	2201      	movs	r2, #1
 800393c:	409a      	lsls	r2, r3
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	f043 0202 	orr.w	r2, r3, #2
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003952:	2204      	movs	r2, #4
 8003954:	409a      	lsls	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4013      	ands	r3, r2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d012      	beq.n	8003984 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00b      	beq.n	8003984 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003970:	2204      	movs	r2, #4
 8003972:	409a      	lsls	r2, r3
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397c:	f043 0204 	orr.w	r2, r3, #4
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003988:	2210      	movs	r2, #16
 800398a:	409a      	lsls	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4013      	ands	r3, r2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d043      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d03c      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a6:	2210      	movs	r2, #16
 80039a8:	409a      	lsls	r2, r3
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d018      	beq.n	80039ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d108      	bne.n	80039dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d024      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	4798      	blx	r3
 80039da:	e01f      	b.n	8003a1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d01b      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	4798      	blx	r3
 80039ec:	e016      	b.n	8003a1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d107      	bne.n	8003a0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0208 	bic.w	r2, r2, #8
 8003a0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a20:	2220      	movs	r2, #32
 8003a22:	409a      	lsls	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 808e 	beq.w	8003b4a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8086 	beq.w	8003b4a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a42:	2220      	movs	r2, #32
 8003a44:	409a      	lsls	r2, r3
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b05      	cmp	r3, #5
 8003a54:	d136      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0216 	bic.w	r2, r2, #22
 8003a64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695a      	ldr	r2, [r3, #20]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d103      	bne.n	8003a86 <HAL_DMA_IRQHandler+0x1da>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d007      	beq.n	8003a96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0208 	bic.w	r2, r2, #8
 8003a94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9a:	223f      	movs	r2, #63	; 0x3f
 8003a9c:	409a      	lsls	r2, r3
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d07d      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
        }
        return;
 8003ac2:	e078      	b.n	8003bb6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d01c      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d108      	bne.n	8003af2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d030      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4798      	blx	r3
 8003af0:	e02b      	b.n	8003b4a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d027      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	4798      	blx	r3
 8003b02:	e022      	b.n	8003b4a <HAL_DMA_IRQHandler+0x29e>
 8003b04:	20000008 	.word	0x20000008
 8003b08:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10f      	bne.n	8003b3a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0210 	bic.w	r2, r2, #16
 8003b28:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d032      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d022      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2205      	movs	r2, #5
 8003b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0201 	bic.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d307      	bcc.n	8003b92 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f2      	bne.n	8003b76 <HAL_DMA_IRQHandler+0x2ca>
 8003b90:	e000      	b.n	8003b94 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003b92:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	4798      	blx	r3
 8003bb4:	e000      	b.n	8003bb8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003bb6:	bf00      	nop
    }
  }
}
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop

08003bc0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bce:	b2db      	uxtb	r3, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bf8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b40      	cmp	r3, #64	; 0x40
 8003c08:	d108      	bne.n	8003c1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c1a:	e007      	b.n	8003c2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	60da      	str	r2, [r3, #12]
}
 8003c2c:	bf00      	nop
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	3b10      	subs	r3, #16
 8003c48:	4a14      	ldr	r2, [pc, #80]	; (8003c9c <DMA_CalcBaseAndBitshift+0x64>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	091b      	lsrs	r3, r3, #4
 8003c50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c52:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <DMA_CalcBaseAndBitshift+0x68>)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4413      	add	r3, r2
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d909      	bls.n	8003c7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c6e:	f023 0303 	bic.w	r3, r3, #3
 8003c72:	1d1a      	adds	r2, r3, #4
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	659a      	str	r2, [r3, #88]	; 0x58
 8003c78:	e007      	b.n	8003c8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c82:	f023 0303 	bic.w	r3, r3, #3
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	aaaaaaab 	.word	0xaaaaaaab
 8003ca0:	0800c368 	.word	0x0800c368

08003ca4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d11f      	bne.n	8003cfe <DMA_CheckFifoParam+0x5a>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d856      	bhi.n	8003d72 <DMA_CheckFifoParam+0xce>
 8003cc4:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <DMA_CheckFifoParam+0x28>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003cdd 	.word	0x08003cdd
 8003cd0:	08003cef 	.word	0x08003cef
 8003cd4:	08003cdd 	.word	0x08003cdd
 8003cd8:	08003d73 	.word	0x08003d73
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d046      	beq.n	8003d76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cec:	e043      	b.n	8003d76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cf6:	d140      	bne.n	8003d7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cfc:	e03d      	b.n	8003d7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d06:	d121      	bne.n	8003d4c <DMA_CheckFifoParam+0xa8>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d837      	bhi.n	8003d7e <DMA_CheckFifoParam+0xda>
 8003d0e:	a201      	add	r2, pc, #4	; (adr r2, 8003d14 <DMA_CheckFifoParam+0x70>)
 8003d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d14:	08003d25 	.word	0x08003d25
 8003d18:	08003d2b 	.word	0x08003d2b
 8003d1c:	08003d25 	.word	0x08003d25
 8003d20:	08003d3d 	.word	0x08003d3d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
      break;
 8003d28:	e030      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d025      	beq.n	8003d82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d3a:	e022      	b.n	8003d82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d44:	d11f      	bne.n	8003d86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d4a:	e01c      	b.n	8003d86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d903      	bls.n	8003d5a <DMA_CheckFifoParam+0xb6>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d003      	beq.n	8003d60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d58:	e018      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d5e:	e015      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00e      	beq.n	8003d8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d70:	e00b      	b.n	8003d8a <DMA_CheckFifoParam+0xe6>
      break;
 8003d72:	bf00      	nop
 8003d74:	e00a      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
      break;
 8003d76:	bf00      	nop
 8003d78:	e008      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
      break;
 8003d7a:	bf00      	nop
 8003d7c:	e006      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
      break;
 8003d7e:	bf00      	nop
 8003d80:	e004      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
      break;
 8003d82:	bf00      	nop
 8003d84:	e002      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
      break;   
 8003d86:	bf00      	nop
 8003d88:	e000      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
      break;
 8003d8a:	bf00      	nop
    }
  } 
  
  return status; 
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop

08003d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b089      	sub	sp, #36	; 0x24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
 8003db6:	e16b      	b.n	8004090 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003db8:	2201      	movs	r2, #1
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	f040 815a 	bne.w	800408a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d005      	beq.n	8003dee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d130      	bne.n	8003e50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	2203      	movs	r2, #3
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4013      	ands	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e24:	2201      	movs	r2, #1
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4013      	ands	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f003 0201 	and.w	r2, r3, #1
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d017      	beq.n	8003e8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	2203      	movs	r2, #3
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d123      	bne.n	8003ee0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	08da      	lsrs	r2, r3, #3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3208      	adds	r2, #8
 8003ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	220f      	movs	r2, #15
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	08da      	lsrs	r2, r3, #3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3208      	adds	r2, #8
 8003eda:	69b9      	ldr	r1, [r7, #24]
 8003edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	2203      	movs	r2, #3
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 0203 	and.w	r2, r3, #3
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 80b4 	beq.w	800408a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	4b60      	ldr	r3, [pc, #384]	; (80040a8 <HAL_GPIO_Init+0x30c>)
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	4a5f      	ldr	r2, [pc, #380]	; (80040a8 <HAL_GPIO_Init+0x30c>)
 8003f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f30:	6453      	str	r3, [r2, #68]	; 0x44
 8003f32:	4b5d      	ldr	r3, [pc, #372]	; (80040a8 <HAL_GPIO_Init+0x30c>)
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f3e:	4a5b      	ldr	r2, [pc, #364]	; (80040ac <HAL_GPIO_Init+0x310>)
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	089b      	lsrs	r3, r3, #2
 8003f44:	3302      	adds	r3, #2
 8003f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	220f      	movs	r2, #15
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a52      	ldr	r2, [pc, #328]	; (80040b0 <HAL_GPIO_Init+0x314>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d02b      	beq.n	8003fc2 <HAL_GPIO_Init+0x226>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a51      	ldr	r2, [pc, #324]	; (80040b4 <HAL_GPIO_Init+0x318>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d025      	beq.n	8003fbe <HAL_GPIO_Init+0x222>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a50      	ldr	r2, [pc, #320]	; (80040b8 <HAL_GPIO_Init+0x31c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01f      	beq.n	8003fba <HAL_GPIO_Init+0x21e>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a4f      	ldr	r2, [pc, #316]	; (80040bc <HAL_GPIO_Init+0x320>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d019      	beq.n	8003fb6 <HAL_GPIO_Init+0x21a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a4e      	ldr	r2, [pc, #312]	; (80040c0 <HAL_GPIO_Init+0x324>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d013      	beq.n	8003fb2 <HAL_GPIO_Init+0x216>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a4d      	ldr	r2, [pc, #308]	; (80040c4 <HAL_GPIO_Init+0x328>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00d      	beq.n	8003fae <HAL_GPIO_Init+0x212>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a4c      	ldr	r2, [pc, #304]	; (80040c8 <HAL_GPIO_Init+0x32c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d007      	beq.n	8003faa <HAL_GPIO_Init+0x20e>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a4b      	ldr	r2, [pc, #300]	; (80040cc <HAL_GPIO_Init+0x330>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d101      	bne.n	8003fa6 <HAL_GPIO_Init+0x20a>
 8003fa2:	2307      	movs	r3, #7
 8003fa4:	e00e      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003fa6:	2308      	movs	r3, #8
 8003fa8:	e00c      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003faa:	2306      	movs	r3, #6
 8003fac:	e00a      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003fae:	2305      	movs	r3, #5
 8003fb0:	e008      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	e006      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e004      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e002      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	f002 0203 	and.w	r2, r2, #3
 8003fca:	0092      	lsls	r2, r2, #2
 8003fcc:	4093      	lsls	r3, r2
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fd4:	4935      	ldr	r1, [pc, #212]	; (80040ac <HAL_GPIO_Init+0x310>)
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	089b      	lsrs	r3, r3, #2
 8003fda:	3302      	adds	r3, #2
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fe2:	4b3b      	ldr	r3, [pc, #236]	; (80040d0 <HAL_GPIO_Init+0x334>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	43db      	mvns	r3, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004006:	4a32      	ldr	r2, [pc, #200]	; (80040d0 <HAL_GPIO_Init+0x334>)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800400c:	4b30      	ldr	r3, [pc, #192]	; (80040d0 <HAL_GPIO_Init+0x334>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	43db      	mvns	r3, r3
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	4013      	ands	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004030:	4a27      	ldr	r2, [pc, #156]	; (80040d0 <HAL_GPIO_Init+0x334>)
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004036:	4b26      	ldr	r3, [pc, #152]	; (80040d0 <HAL_GPIO_Init+0x334>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	43db      	mvns	r3, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4013      	ands	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800405a:	4a1d      	ldr	r2, [pc, #116]	; (80040d0 <HAL_GPIO_Init+0x334>)
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004060:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <HAL_GPIO_Init+0x334>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	43db      	mvns	r3, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004084:	4a12      	ldr	r2, [pc, #72]	; (80040d0 <HAL_GPIO_Init+0x334>)
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	3301      	adds	r3, #1
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	2b0f      	cmp	r3, #15
 8004094:	f67f ae90 	bls.w	8003db8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004098:	bf00      	nop
 800409a:	bf00      	nop
 800409c:	3724      	adds	r7, #36	; 0x24
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800
 80040ac:	40013800 	.word	0x40013800
 80040b0:	40020000 	.word	0x40020000
 80040b4:	40020400 	.word	0x40020400
 80040b8:	40020800 	.word	0x40020800
 80040bc:	40020c00 	.word	0x40020c00
 80040c0:	40021000 	.word	0x40021000
 80040c4:	40021400 	.word	0x40021400
 80040c8:	40021800 	.word	0x40021800
 80040cc:	40021c00 	.word	0x40021c00
 80040d0:	40013c00 	.word	0x40013c00

080040d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	807b      	strh	r3, [r7, #2]
 80040e0:	4613      	mov	r3, r2
 80040e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040e4:	787b      	ldrb	r3, [r7, #1]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040ea:	887a      	ldrh	r2, [r7, #2]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040f0:	e003      	b.n	80040fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040f2:	887b      	ldrh	r3, [r7, #2]
 80040f4:	041a      	lsls	r2, r3, #16
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	619a      	str	r2, [r3, #24]
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004106:	b480      	push	{r7}
 8004108:	b085      	sub	sp, #20
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	460b      	mov	r3, r1
 8004110:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004118:	887a      	ldrh	r2, [r7, #2]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4013      	ands	r3, r2
 800411e:	041a      	lsls	r2, r3, #16
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	43d9      	mvns	r1, r3
 8004124:	887b      	ldrh	r3, [r7, #2]
 8004126:	400b      	ands	r3, r1
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	619a      	str	r2, [r3, #24]
}
 800412e:	bf00      	nop
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e12b      	b.n	80043a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fe f832 	bl	80021cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2224      	movs	r2, #36	; 0x24
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0201 	bic.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800418e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800419e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041a0:	f002 fa7e 	bl	80066a0 <HAL_RCC_GetPCLK1Freq>
 80041a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4a81      	ldr	r2, [pc, #516]	; (80043b0 <HAL_I2C_Init+0x274>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d807      	bhi.n	80041c0 <HAL_I2C_Init+0x84>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4a80      	ldr	r2, [pc, #512]	; (80043b4 <HAL_I2C_Init+0x278>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	bf94      	ite	ls
 80041b8:	2301      	movls	r3, #1
 80041ba:	2300      	movhi	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	e006      	b.n	80041ce <HAL_I2C_Init+0x92>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a7d      	ldr	r2, [pc, #500]	; (80043b8 <HAL_I2C_Init+0x27c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	bf94      	ite	ls
 80041c8:	2301      	movls	r3, #1
 80041ca:	2300      	movhi	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e0e7      	b.n	80043a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4a78      	ldr	r2, [pc, #480]	; (80043bc <HAL_I2C_Init+0x280>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	0c9b      	lsrs	r3, r3, #18
 80041e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	4a6a      	ldr	r2, [pc, #424]	; (80043b0 <HAL_I2C_Init+0x274>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d802      	bhi.n	8004210 <HAL_I2C_Init+0xd4>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	3301      	adds	r3, #1
 800420e:	e009      	b.n	8004224 <HAL_I2C_Init+0xe8>
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004216:	fb02 f303 	mul.w	r3, r2, r3
 800421a:	4a69      	ldr	r2, [pc, #420]	; (80043c0 <HAL_I2C_Init+0x284>)
 800421c:	fba2 2303 	umull	r2, r3, r2, r3
 8004220:	099b      	lsrs	r3, r3, #6
 8004222:	3301      	adds	r3, #1
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	430b      	orrs	r3, r1
 800422a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004236:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	495c      	ldr	r1, [pc, #368]	; (80043b0 <HAL_I2C_Init+0x274>)
 8004240:	428b      	cmp	r3, r1
 8004242:	d819      	bhi.n	8004278 <HAL_I2C_Init+0x13c>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1e59      	subs	r1, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004252:	1c59      	adds	r1, r3, #1
 8004254:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004258:	400b      	ands	r3, r1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_I2C_Init+0x138>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1e59      	subs	r1, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	fbb1 f3f3 	udiv	r3, r1, r3
 800426c:	3301      	adds	r3, #1
 800426e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004272:	e051      	b.n	8004318 <HAL_I2C_Init+0x1dc>
 8004274:	2304      	movs	r3, #4
 8004276:	e04f      	b.n	8004318 <HAL_I2C_Init+0x1dc>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d111      	bne.n	80042a4 <HAL_I2C_Init+0x168>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	1e58      	subs	r0, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6859      	ldr	r1, [r3, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	440b      	add	r3, r1
 800428e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004292:	3301      	adds	r3, #1
 8004294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004298:	2b00      	cmp	r3, #0
 800429a:	bf0c      	ite	eq
 800429c:	2301      	moveq	r3, #1
 800429e:	2300      	movne	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	e012      	b.n	80042ca <HAL_I2C_Init+0x18e>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	1e58      	subs	r0, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	0099      	lsls	r1, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ba:	3301      	adds	r3, #1
 80042bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf0c      	ite	eq
 80042c4:	2301      	moveq	r3, #1
 80042c6:	2300      	movne	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_I2C_Init+0x196>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e022      	b.n	8004318 <HAL_I2C_Init+0x1dc>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10e      	bne.n	80042f8 <HAL_I2C_Init+0x1bc>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1e58      	subs	r0, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6859      	ldr	r1, [r3, #4]
 80042e2:	460b      	mov	r3, r1
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	440b      	add	r3, r1
 80042e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ec:	3301      	adds	r3, #1
 80042ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f6:	e00f      	b.n	8004318 <HAL_I2C_Init+0x1dc>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1e58      	subs	r0, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6859      	ldr	r1, [r3, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	0099      	lsls	r1, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	fbb0 f3f3 	udiv	r3, r0, r3
 800430e:	3301      	adds	r3, #1
 8004310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	6809      	ldr	r1, [r1, #0]
 800431c:	4313      	orrs	r3, r2
 800431e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69da      	ldr	r2, [r3, #28]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004346:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6911      	ldr	r1, [r2, #16]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	68d2      	ldr	r2, [r2, #12]
 8004352:	4311      	orrs	r1, r2
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	430b      	orrs	r3, r1
 800435a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695a      	ldr	r2, [r3, #20]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	000186a0 	.word	0x000186a0
 80043b4:	001e847f 	.word	0x001e847f
 80043b8:	003d08ff 	.word	0x003d08ff
 80043bc:	431bde83 	.word	0x431bde83
 80043c0:	10624dd3 	.word	0x10624dd3

080043c4 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	4608      	mov	r0, r1
 80043ce:	4611      	mov	r1, r2
 80043d0:	461a      	mov	r2, r3
 80043d2:	4603      	mov	r3, r0
 80043d4:	817b      	strh	r3, [r7, #10]
 80043d6:	460b      	mov	r3, r1
 80043d8:	813b      	strh	r3, [r7, #8]
 80043da:	4613      	mov	r3, r2
 80043dc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b20      	cmp	r3, #32
 80043ec:	f040 808e 	bne.w	800450c <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80043f0:	4b4a      	ldr	r3, [pc, #296]	; (800451c <HAL_I2C_Mem_Write_IT+0x158>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	08db      	lsrs	r3, r3, #3
 80043f6:	4a4a      	ldr	r2, [pc, #296]	; (8004520 <HAL_I2C_Mem_Write_IT+0x15c>)
 80043f8:	fba2 2303 	umull	r2, r3, r2, r3
 80043fc:	0a1a      	lsrs	r2, r3, #8
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	009a      	lsls	r2, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	3b01      	subs	r3, #1
 800440e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d116      	bne.n	8004444 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	f043 0220 	orr.w	r2, r3, #32
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e064      	b.n	800450e <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b02      	cmp	r3, #2
 8004450:	d0db      	beq.n	800440a <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_I2C_Mem_Write_IT+0x9c>
 800445c:	2302      	movs	r3, #2
 800445e:	e056      	b.n	800450e <HAL_I2C_Mem_Write_IT+0x14a>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b01      	cmp	r3, #1
 8004474:	d007      	beq.n	8004486 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0201 	orr.w	r2, r2, #1
 8004484:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004494:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2221      	movs	r2, #33	; 0x21
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2240      	movs	r2, #64	; 0x40
 80044a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a3a      	ldr	r2, [r7, #32]
 80044b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4a17      	ldr	r2, [pc, #92]	; (8004524 <HAL_I2C_Mem_Write_IT+0x160>)
 80044c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80044c8:	897a      	ldrh	r2, [r7, #10]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80044ce:	893a      	ldrh	r2, [r7, #8]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80044d4:	88fa      	ldrh	r2, [r7, #6]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ee:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004506:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	e000      	b.n	800450e <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800450c:	2302      	movs	r3, #2
  }
}
 800450e:	4618      	mov	r0, r3
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	20000008 	.word	0x20000008
 8004520:	14f8b589 	.word	0x14f8b589
 8004524:	ffff0000 	.word	0xffff0000

08004528 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	4608      	mov	r0, r1
 8004532:	4611      	mov	r1, r2
 8004534:	461a      	mov	r2, r3
 8004536:	4603      	mov	r3, r0
 8004538:	817b      	strh	r3, [r7, #10]
 800453a:	460b      	mov	r3, r1
 800453c:	813b      	strh	r3, [r7, #8]
 800453e:	4613      	mov	r3, r2
 8004540:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b20      	cmp	r3, #32
 8004550:	f040 809a 	bne.w	8004688 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004554:	4b50      	ldr	r3, [pc, #320]	; (8004698 <HAL_I2C_Mem_Read_IT+0x170>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	08db      	lsrs	r3, r3, #3
 800455a:	4a50      	ldr	r2, [pc, #320]	; (800469c <HAL_I2C_Mem_Read_IT+0x174>)
 800455c:	fba2 2303 	umull	r2, r3, r2, r3
 8004560:	0a1a      	lsrs	r2, r3, #8
 8004562:	4613      	mov	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	009a      	lsls	r2, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	3b01      	subs	r3, #1
 8004572:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d116      	bne.n	80045a8 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004594:	f043 0220 	orr.w	r2, r3, #32
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e070      	b.n	800468a <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d0db      	beq.n	800456e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_I2C_Mem_Read_IT+0x9c>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e062      	b.n	800468a <HAL_I2C_Mem_Read_IT+0x162>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d007      	beq.n	80045ea <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0201 	orr.w	r2, r2, #1
 80045e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045f8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2222      	movs	r2, #34	; 0x22
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2240      	movs	r2, #64	; 0x40
 8004606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a3a      	ldr	r2, [r7, #32]
 8004614:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800461a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4a1d      	ldr	r2, [pc, #116]	; (80046a0 <HAL_I2C_Mem_Read_IT+0x178>)
 800462a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800462c:	897a      	ldrh	r2, [r7, #10]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004632:	893a      	ldrh	r2, [r7, #8]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004638:	88fa      	ldrh	r2, [r7, #6]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004652:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004662:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004670:	2b00      	cmp	r3, #0
 8004672:	d007      	beq.n	8004684 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004682:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	e000      	b.n	800468a <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8004688:	2302      	movs	r3, #2
  }
}
 800468a:	4618      	mov	r0, r3
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20000008 	.word	0x20000008
 800469c:	14f8b589 	.word	0x14f8b589
 80046a0:	ffff0000 	.word	0xffff0000

080046a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046c4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046cc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	2b10      	cmp	r3, #16
 80046d2:	d003      	beq.n	80046dc <HAL_I2C_EV_IRQHandler+0x38>
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
 80046d6:	2b40      	cmp	r3, #64	; 0x40
 80046d8:	f040 80c1 	bne.w	800485e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10d      	bne.n	8004712 <HAL_I2C_EV_IRQHandler+0x6e>
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80046fc:	d003      	beq.n	8004706 <HAL_I2C_EV_IRQHandler+0x62>
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004704:	d101      	bne.n	800470a <HAL_I2C_EV_IRQHandler+0x66>
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <HAL_I2C_EV_IRQHandler+0x68>
 800470a:	2300      	movs	r3, #0
 800470c:	2b01      	cmp	r3, #1
 800470e:	f000 8132 	beq.w	8004976 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00c      	beq.n	8004736 <HAL_I2C_EV_IRQHandler+0x92>
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	0a5b      	lsrs	r3, r3, #9
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d006      	beq.n	8004736 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f001 fb51 	bl	8005dd0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fcc8 	bl	80050c4 <I2C_Master_SB>
 8004734:	e092      	b.n	800485c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	08db      	lsrs	r3, r3, #3
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d009      	beq.n	8004756 <HAL_I2C_EV_IRQHandler+0xb2>
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	0a5b      	lsrs	r3, r3, #9
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fd3e 	bl	80051d0 <I2C_Master_ADD10>
 8004754:	e082      	b.n	800485c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	085b      	lsrs	r3, r3, #1
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <HAL_I2C_EV_IRQHandler+0xd2>
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	0a5b      	lsrs	r3, r3, #9
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fd58 	bl	8005224 <I2C_Master_ADDR>
 8004774:	e072      	b.n	800485c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	089b      	lsrs	r3, r3, #2
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d03b      	beq.n	80047fa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800478c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004790:	f000 80f3 	beq.w	800497a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	09db      	lsrs	r3, r3, #7
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00f      	beq.n	80047c0 <HAL_I2C_EV_IRQHandler+0x11c>
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	0a9b      	lsrs	r3, r3, #10
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d009      	beq.n	80047c0 <HAL_I2C_EV_IRQHandler+0x11c>
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	089b      	lsrs	r3, r3, #2
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d103      	bne.n	80047c0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f942 	bl	8004a42 <I2C_MasterTransmit_TXE>
 80047be:	e04d      	b.n	800485c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	089b      	lsrs	r3, r3, #2
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80d6 	beq.w	800497a <HAL_I2C_EV_IRQHandler+0x2d6>
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	0a5b      	lsrs	r3, r3, #9
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 80cf 	beq.w	800497a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80047dc:	7bbb      	ldrb	r3, [r7, #14]
 80047de:	2b21      	cmp	r3, #33	; 0x21
 80047e0:	d103      	bne.n	80047ea <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f9c9 	bl	8004b7a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047e8:	e0c7      	b.n	800497a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
 80047ec:	2b40      	cmp	r3, #64	; 0x40
 80047ee:	f040 80c4 	bne.w	800497a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fa37 	bl	8004c66 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047f8:	e0bf      	b.n	800497a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004808:	f000 80b7 	beq.w	800497a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	099b      	lsrs	r3, r3, #6
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00f      	beq.n	8004838 <HAL_I2C_EV_IRQHandler+0x194>
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	0a9b      	lsrs	r3, r3, #10
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d009      	beq.n	8004838 <HAL_I2C_EV_IRQHandler+0x194>
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	089b      	lsrs	r3, r3, #2
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d103      	bne.n	8004838 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 faac 	bl	8004d8e <I2C_MasterReceive_RXNE>
 8004836:	e011      	b.n	800485c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	089b      	lsrs	r3, r3, #2
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 809a 	beq.w	800497a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	0a5b      	lsrs	r3, r3, #9
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 8093 	beq.w	800497a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 fb4b 	bl	8004ef0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800485a:	e08e      	b.n	800497a <HAL_I2C_EV_IRQHandler+0x2d6>
 800485c:	e08d      	b.n	800497a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d004      	beq.n	8004870 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	61fb      	str	r3, [r7, #28]
 800486e:	e007      	b.n	8004880 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	085b      	lsrs	r3, r3, #1
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	d012      	beq.n	80048b2 <HAL_I2C_EV_IRQHandler+0x20e>
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	0a5b      	lsrs	r3, r3, #9
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00c      	beq.n	80048b2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80048a8:	69b9      	ldr	r1, [r7, #24]
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 ff09 	bl	80056c2 <I2C_Slave_ADDR>
 80048b0:	e066      	b.n	8004980 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	091b      	lsrs	r3, r3, #4
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d009      	beq.n	80048d2 <HAL_I2C_EV_IRQHandler+0x22e>
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	0a5b      	lsrs	r3, r3, #9
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 ff44 	bl	8005758 <I2C_Slave_STOPF>
 80048d0:	e056      	b.n	8004980 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048d2:	7bbb      	ldrb	r3, [r7, #14]
 80048d4:	2b21      	cmp	r3, #33	; 0x21
 80048d6:	d002      	beq.n	80048de <HAL_I2C_EV_IRQHandler+0x23a>
 80048d8:	7bbb      	ldrb	r3, [r7, #14]
 80048da:	2b29      	cmp	r3, #41	; 0x29
 80048dc:	d125      	bne.n	800492a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	09db      	lsrs	r3, r3, #7
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00f      	beq.n	800490a <HAL_I2C_EV_IRQHandler+0x266>
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	0a9b      	lsrs	r3, r3, #10
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d009      	beq.n	800490a <HAL_I2C_EV_IRQHandler+0x266>
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	089b      	lsrs	r3, r3, #2
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d103      	bne.n	800490a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fe1f 	bl	8005546 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004908:	e039      	b.n	800497e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	089b      	lsrs	r3, r3, #2
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d033      	beq.n	800497e <HAL_I2C_EV_IRQHandler+0x2da>
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	0a5b      	lsrs	r3, r3, #9
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d02d      	beq.n	800497e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fe4c 	bl	80055c0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004928:	e029      	b.n	800497e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	099b      	lsrs	r3, r3, #6
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00f      	beq.n	8004956 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	0a9b      	lsrs	r3, r3, #10
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d009      	beq.n	8004956 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	089b      	lsrs	r3, r3, #2
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d103      	bne.n	8004956 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fe57 	bl	8005602 <I2C_SlaveReceive_RXNE>
 8004954:	e014      	b.n	8004980 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	089b      	lsrs	r3, r3, #2
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00e      	beq.n	8004980 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	0a5b      	lsrs	r3, r3, #9
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d008      	beq.n	8004980 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fe85 	bl	800567e <I2C_SlaveReceive_BTF>
 8004974:	e004      	b.n	8004980 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004976:	bf00      	nop
 8004978:	e002      	b.n	8004980 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800497a:	bf00      	nop
 800497c:	e000      	b.n	8004980 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800497e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004980:	3720      	adds	r7, #32
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	460b      	mov	r3, r1
 80049e0:	70fb      	strb	r3, [r7, #3]
 80049e2:	4613      	mov	r3, r2
 80049e4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a50:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a58:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d150      	bne.n	8004b0a <I2C_MasterTransmit_TXE+0xc8>
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	2b21      	cmp	r3, #33	; 0x21
 8004a6c:	d14d      	bne.n	8004b0a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d01d      	beq.n	8004ab0 <I2C_MasterTransmit_TXE+0x6e>
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b20      	cmp	r3, #32
 8004a78:	d01a      	beq.n	8004ab0 <I2C_MasterTransmit_TXE+0x6e>
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a80:	d016      	beq.n	8004ab0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a90:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2211      	movs	r2, #17
 8004a96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff ff6c 	bl	8004986 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004aae:	e060      	b.n	8004b72 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004abe:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ace:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b40      	cmp	r3, #64	; 0x40
 8004ae8:	d107      	bne.n	8004afa <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff ff87 	bl	8004a06 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004af8:	e03b      	b.n	8004b72 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7ff ff3f 	bl	8004986 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b08:	e033      	b.n	8004b72 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
 8004b0c:	2b21      	cmp	r3, #33	; 0x21
 8004b0e:	d005      	beq.n	8004b1c <I2C_MasterTransmit_TXE+0xda>
 8004b10:	7bbb      	ldrb	r3, [r7, #14]
 8004b12:	2b40      	cmp	r3, #64	; 0x40
 8004b14:	d12d      	bne.n	8004b72 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	2b22      	cmp	r3, #34	; 0x22
 8004b1a:	d12a      	bne.n	8004b72 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d108      	bne.n	8004b38 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b34:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004b36:	e01c      	b.n	8004b72 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b40      	cmp	r3, #64	; 0x40
 8004b42:	d103      	bne.n	8004b4c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f88e 	bl	8004c66 <I2C_MemoryTransmit_TXE_BTF>
}
 8004b4a:	e012      	b.n	8004b72 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	781a      	ldrb	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b70:	e7ff      	b.n	8004b72 <I2C_MasterTransmit_TXE+0x130>
 8004b72:	bf00      	nop
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b21      	cmp	r3, #33	; 0x21
 8004b92:	d164      	bne.n	8004c5e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d012      	beq.n	8004bc4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	781a      	ldrb	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004bc2:	e04c      	b.n	8004c5e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d01d      	beq.n	8004c06 <I2C_MasterTransmit_BTF+0x8c>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2b20      	cmp	r3, #32
 8004bce:	d01a      	beq.n	8004c06 <I2C_MasterTransmit_BTF+0x8c>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bd6:	d016      	beq.n	8004c06 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004be6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2211      	movs	r2, #17
 8004bec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7ff fec1 	bl	8004986 <HAL_I2C_MasterTxCpltCallback>
}
 8004c04:	e02b      	b.n	8004c5e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c14:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c24:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b40      	cmp	r3, #64	; 0x40
 8004c3e:	d107      	bne.n	8004c50 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff fedc 	bl	8004a06 <HAL_I2C_MemTxCpltCallback>
}
 8004c4e:	e006      	b.n	8004c5e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7ff fe94 	bl	8004986 <HAL_I2C_MasterTxCpltCallback>
}
 8004c5e:	bf00      	nop
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b084      	sub	sp, #16
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c74:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d11d      	bne.n	8004cba <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d10b      	bne.n	8004c9e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c96:	1c9a      	adds	r2, r3, #2
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004c9c:	e073      	b.n	8004d86 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	121b      	asrs	r3, r3, #8
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cb8:	e065      	b.n	8004d86 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d10b      	bne.n	8004cda <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cd8:	e055      	b.n	8004d86 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d151      	bne.n	8004d86 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
 8004ce4:	2b22      	cmp	r3, #34	; 0x22
 8004ce6:	d10d      	bne.n	8004d04 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cf6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d02:	e040      	b.n	8004d86 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d015      	beq.n	8004d3a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
 8004d10:	2b21      	cmp	r3, #33	; 0x21
 8004d12:	d112      	bne.n	8004d3a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	781a      	ldrb	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d38:	e025      	b.n	8004d86 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d120      	bne.n	8004d86 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	2b21      	cmp	r3, #33	; 0x21
 8004d48:	d11d      	bne.n	8004d86 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d58:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d68:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff fe40 	bl	8004a06 <HAL_I2C_MemTxCpltCallback>
}
 8004d86:	bf00      	nop
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b22      	cmp	r3, #34	; 0x22
 8004da0:	f040 80a2 	bne.w	8004ee8 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d921      	bls.n	8004df6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	f040 8082 	bne.w	8004ee8 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004df4:	e078      	b.n	8004ee8 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d074      	beq.n	8004ee8 <I2C_MasterReceive_RXNE+0x15a>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d002      	beq.n	8004e0a <I2C_MasterReceive_RXNE+0x7c>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d16e      	bne.n	8004ee8 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 ffae 	bl	8005d6c <I2C_WaitOnSTOPRequestThroughIT>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d142      	bne.n	8004e9c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e24:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e34:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b40      	cmp	r3, #64	; 0x40
 8004e6e:	d10a      	bne.n	8004e86 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fc fb28 	bl	80014d4 <HAL_I2C_MemRxCpltCallback>
}
 8004e84:	e030      	b.n	8004ee8 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2212      	movs	r2, #18
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff fd80 	bl	800499a <HAL_I2C_MasterRxCpltCallback>
}
 8004e9a:	e025      	b.n	8004ee8 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004eaa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff fd99 	bl	8004a1a <HAL_I2C_ErrorCallback>
}
 8004ee8:	bf00      	nop
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d11b      	bne.n	8004f40 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f16:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004f3e:	e0bd      	b.n	80050bc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d129      	bne.n	8004f9e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f58:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d00a      	beq.n	8004f76 <I2C_MasterReceive_BTF+0x86>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d007      	beq.n	8004f76 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f74:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f9c:	e08e      	b.n	80050bc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d176      	bne.n	8005096 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d002      	beq.n	8004fb4 <I2C_MasterReceive_BTF+0xc4>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d108      	bne.n	8004fc6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	e019      	b.n	8004ffa <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	d002      	beq.n	8004fd2 <I2C_MasterReceive_BTF+0xe2>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d108      	bne.n	8004fe4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	e00a      	b.n	8004ffa <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b10      	cmp	r3, #16
 8004fe8:	d007      	beq.n	8004ffa <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ff8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	691a      	ldr	r2, [r3, #16]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005054:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b40      	cmp	r3, #64	; 0x40
 8005068:	d10a      	bne.n	8005080 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7fc fa2b 	bl	80014d4 <HAL_I2C_MemRxCpltCallback>
}
 800507e:	e01d      	b.n	80050bc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2212      	movs	r2, #18
 800508c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7ff fc83 	bl	800499a <HAL_I2C_MasterRxCpltCallback>
}
 8005094:	e012      	b.n	80050bc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050bc:	bf00      	nop
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b40      	cmp	r3, #64	; 0x40
 80050d6:	d117      	bne.n	8005108 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d109      	bne.n	80050f4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	461a      	mov	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050f0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80050f2:	e067      	b.n	80051c4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	f043 0301 	orr.w	r3, r3, #1
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	611a      	str	r2, [r3, #16]
}
 8005106:	e05d      	b.n	80051c4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005110:	d133      	bne.n	800517a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b21      	cmp	r3, #33	; 0x21
 800511c:	d109      	bne.n	8005132 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005122:	b2db      	uxtb	r3, r3
 8005124:	461a      	mov	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800512e:	611a      	str	r2, [r3, #16]
 8005130:	e008      	b.n	8005144 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005136:	b2db      	uxtb	r3, r3
 8005138:	f043 0301 	orr.w	r3, r3, #1
 800513c:	b2da      	uxtb	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005148:	2b00      	cmp	r3, #0
 800514a:	d004      	beq.n	8005156 <I2C_Master_SB+0x92>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d108      	bne.n	8005168 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	2b00      	cmp	r3, #0
 800515c:	d032      	beq.n	80051c4 <I2C_Master_SB+0x100>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005164:	2b00      	cmp	r3, #0
 8005166:	d02d      	beq.n	80051c4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005176:	605a      	str	r2, [r3, #4]
}
 8005178:	e024      	b.n	80051c4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10e      	bne.n	80051a0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005186:	b29b      	uxth	r3, r3
 8005188:	11db      	asrs	r3, r3, #7
 800518a:	b2db      	uxtb	r3, r3
 800518c:	f003 0306 	and.w	r3, r3, #6
 8005190:	b2db      	uxtb	r3, r3
 8005192:	f063 030f 	orn	r3, r3, #15
 8005196:	b2da      	uxtb	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	611a      	str	r2, [r3, #16]
}
 800519e:	e011      	b.n	80051c4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d10d      	bne.n	80051c4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	11db      	asrs	r3, r3, #7
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	f003 0306 	and.w	r3, r3, #6
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	f063 030e 	orn	r3, r3, #14
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	611a      	str	r2, [r3, #16]
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d004      	beq.n	80051f6 <I2C_Master_ADD10+0x26>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d108      	bne.n	8005208 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00c      	beq.n	8005218 <I2C_Master_ADD10+0x48>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005204:	2b00      	cmp	r3, #0
 8005206:	d007      	beq.n	8005218 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005216:	605a      	str	r2, [r3, #4]
  }
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005224:	b480      	push	{r7}
 8005226:	b091      	sub	sp, #68	; 0x44
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005232:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005240:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b22      	cmp	r3, #34	; 0x22
 800524c:	f040 8169 	bne.w	8005522 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10f      	bne.n	8005278 <I2C_Master_ADDR+0x54>
 8005258:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800525c:	2b40      	cmp	r3, #64	; 0x40
 800525e:	d10b      	bne.n	8005278 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005260:	2300      	movs	r3, #0
 8005262:	633b      	str	r3, [r7, #48]	; 0x30
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	633b      	str	r3, [r7, #48]	; 0x30
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	633b      	str	r3, [r7, #48]	; 0x30
 8005274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005276:	e160      	b.n	800553a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800527c:	2b00      	cmp	r3, #0
 800527e:	d11d      	bne.n	80052bc <I2C_Master_ADDR+0x98>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005288:	d118      	bne.n	80052bc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800528a:	2300      	movs	r3, #0
 800528c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052ae:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	651a      	str	r2, [r3, #80]	; 0x50
 80052ba:	e13e      	b.n	800553a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d113      	bne.n	80052ee <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c6:	2300      	movs	r3, #0
 80052c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052da:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	e115      	b.n	800551a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	f040 808a 	bne.w	800540e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005300:	d137      	bne.n	8005372 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005310:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800531c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005320:	d113      	bne.n	800534a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005330:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005332:	2300      	movs	r3, #0
 8005334:	627b      	str	r3, [r7, #36]	; 0x24
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	627b      	str	r3, [r7, #36]	; 0x24
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	e0e7      	b.n	800551a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800534a:	2300      	movs	r3, #0
 800534c:	623b      	str	r3, [r7, #32]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	623b      	str	r3, [r7, #32]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	623b      	str	r3, [r7, #32]
 800535e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	e0d3      	b.n	800551a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	2b08      	cmp	r3, #8
 8005376:	d02e      	beq.n	80053d6 <I2C_Master_ADDR+0x1b2>
 8005378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537a:	2b20      	cmp	r3, #32
 800537c:	d02b      	beq.n	80053d6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800537e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005380:	2b12      	cmp	r3, #18
 8005382:	d102      	bne.n	800538a <I2C_Master_ADDR+0x166>
 8005384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005386:	2b01      	cmp	r3, #1
 8005388:	d125      	bne.n	80053d6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538c:	2b04      	cmp	r3, #4
 800538e:	d00e      	beq.n	80053ae <I2C_Master_ADDR+0x18a>
 8005390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005392:	2b02      	cmp	r3, #2
 8005394:	d00b      	beq.n	80053ae <I2C_Master_ADDR+0x18a>
 8005396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005398:	2b10      	cmp	r3, #16
 800539a:	d008      	beq.n	80053ae <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	e007      	b.n	80053be <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053bc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053be:	2300      	movs	r3, #0
 80053c0:	61fb      	str	r3, [r7, #28]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	61fb      	str	r3, [r7, #28]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	61fb      	str	r3, [r7, #28]
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	e0a1      	b.n	800551a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e6:	2300      	movs	r3, #0
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	61bb      	str	r3, [r7, #24]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	61bb      	str	r3, [r7, #24]
 80053fa:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	e085      	b.n	800551a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005412:	b29b      	uxth	r3, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d14d      	bne.n	80054b4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541a:	2b04      	cmp	r3, #4
 800541c:	d016      	beq.n	800544c <I2C_Master_ADDR+0x228>
 800541e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005420:	2b02      	cmp	r3, #2
 8005422:	d013      	beq.n	800544c <I2C_Master_ADDR+0x228>
 8005424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005426:	2b10      	cmp	r3, #16
 8005428:	d010      	beq.n	800544c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005438:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	e007      	b.n	800545c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800545a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800546a:	d117      	bne.n	800549c <I2C_Master_ADDR+0x278>
 800546c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005472:	d00b      	beq.n	800548c <I2C_Master_ADDR+0x268>
 8005474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005476:	2b01      	cmp	r3, #1
 8005478:	d008      	beq.n	800548c <I2C_Master_ADDR+0x268>
 800547a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547c:	2b08      	cmp	r3, #8
 800547e:	d005      	beq.n	800548c <I2C_Master_ADDR+0x268>
 8005480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005482:	2b10      	cmp	r3, #16
 8005484:	d002      	beq.n	800548c <I2C_Master_ADDR+0x268>
 8005486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005488:	2b20      	cmp	r3, #32
 800548a:	d107      	bne.n	800549c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800549a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	e032      	b.n	800551a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054c2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054d2:	d117      	bne.n	8005504 <I2C_Master_ADDR+0x2e0>
 80054d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054da:	d00b      	beq.n	80054f4 <I2C_Master_ADDR+0x2d0>
 80054dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d008      	beq.n	80054f4 <I2C_Master_ADDR+0x2d0>
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d005      	beq.n	80054f4 <I2C_Master_ADDR+0x2d0>
 80054e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ea:	2b10      	cmp	r3, #16
 80054ec:	d002      	beq.n	80054f4 <I2C_Master_ADDR+0x2d0>
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d107      	bne.n	8005504 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005502:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005504:	2300      	movs	r3, #0
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	613b      	str	r3, [r7, #16]
 8005518:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005520:	e00b      	b.n	800553a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005522:	2300      	movs	r3, #0
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	68fb      	ldr	r3, [r7, #12]
}
 8005538:	e7ff      	b.n	800553a <I2C_Master_ADDR+0x316>
 800553a:	bf00      	nop
 800553c:	3744      	adds	r7, #68	; 0x44
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005554:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555a:	b29b      	uxth	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d02b      	beq.n	80055b8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	781a      	ldrb	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557a:	b29b      	uxth	r3, r3
 800557c:	3b01      	subs	r3, #1
 800557e:	b29a      	uxth	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005588:	b29b      	uxth	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d114      	bne.n	80055b8 <I2C_SlaveTransmit_TXE+0x72>
 800558e:	7bfb      	ldrb	r3, [r7, #15]
 8005590:	2b29      	cmp	r3, #41	; 0x29
 8005592:	d111      	bne.n	80055b8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055a2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2221      	movs	r2, #33	; 0x21
 80055a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2228      	movs	r2, #40	; 0x28
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff f9fb 	bl	80049ae <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055b8:	bf00      	nop
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d011      	beq.n	80055f6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	781a      	ldrb	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005610:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005616:	b29b      	uxth	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d02c      	beq.n	8005676 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691a      	ldr	r2, [r3, #16]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005638:	b29b      	uxth	r3, r3
 800563a:	3b01      	subs	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d114      	bne.n	8005676 <I2C_SlaveReceive_RXNE+0x74>
 800564c:	7bfb      	ldrb	r3, [r7, #15]
 800564e:	2b2a      	cmp	r3, #42	; 0x2a
 8005650:	d111      	bne.n	8005676 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005660:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2222      	movs	r2, #34	; 0x22
 8005666:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2228      	movs	r2, #40	; 0x28
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7ff f9a6 	bl	80049c2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005676:	bf00      	nop
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568a:	b29b      	uxth	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d012      	beq.n	80056b6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691a      	ldr	r2, [r3, #16]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80056cc:	2300      	movs	r3, #0
 80056ce:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056dc:	2b28      	cmp	r3, #40	; 0x28
 80056de:	d127      	bne.n	8005730 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ee:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	089b      	lsrs	r3, r3, #2
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80056fc:	2301      	movs	r3, #1
 80056fe:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	09db      	lsrs	r3, r3, #7
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d103      	bne.n	8005714 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	81bb      	strh	r3, [r7, #12]
 8005712:	e002      	b.n	800571a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005722:	89ba      	ldrh	r2, [r7, #12]
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff f954 	bl	80049d6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800572e:	e00e      	b.n	800574e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005730:	2300      	movs	r3, #0
 8005732:	60bb      	str	r3, [r7, #8]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	60bb      	str	r3, [r7, #8]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	60bb      	str	r3, [r7, #8]
 8005744:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800574e:	bf00      	nop
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005766:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005776:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005778:	2300      	movs	r3, #0
 800577a:	60bb      	str	r3, [r7, #8]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	60bb      	str	r3, [r7, #8]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057b4:	d172      	bne.n	800589c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
 80057b8:	2b22      	cmp	r3, #34	; 0x22
 80057ba:	d002      	beq.n	80057c2 <I2C_Slave_STOPF+0x6a>
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	2b2a      	cmp	r3, #42	; 0x2a
 80057c0:	d135      	bne.n	800582e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d005      	beq.n	80057e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	f043 0204 	orr.w	r2, r3, #4
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe f9e0 	bl	8003bc0 <HAL_DMA_GetState>
 8005800:	4603      	mov	r3, r0
 8005802:	2b01      	cmp	r3, #1
 8005804:	d049      	beq.n	800589a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	4a69      	ldr	r2, [pc, #420]	; (80059b0 <I2C_Slave_STOPF+0x258>)
 800580c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005812:	4618      	mov	r0, r3
 8005814:	f7fe f828 	bl	8003868 <HAL_DMA_Abort_IT>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d03d      	beq.n	800589a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005828:	4610      	mov	r0, r2
 800582a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800582c:	e035      	b.n	800589a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	b29a      	uxth	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005840:	b29b      	uxth	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	f043 0204 	orr.w	r2, r3, #4
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005860:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005866:	4618      	mov	r0, r3
 8005868:	f7fe f9aa 	bl	8003bc0 <HAL_DMA_GetState>
 800586c:	4603      	mov	r3, r0
 800586e:	2b01      	cmp	r3, #1
 8005870:	d014      	beq.n	800589c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005876:	4a4e      	ldr	r2, [pc, #312]	; (80059b0 <I2C_Slave_STOPF+0x258>)
 8005878:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587e:	4618      	mov	r0, r3
 8005880:	f7fd fff2 	bl	8003868 <HAL_DMA_Abort_IT>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d008      	beq.n	800589c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005894:	4610      	mov	r0, r2
 8005896:	4798      	blx	r3
 8005898:	e000      	b.n	800589c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800589a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d03e      	beq.n	8005924 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d112      	bne.n	80058da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691a      	ldr	r2, [r3, #16]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e4:	2b40      	cmp	r3, #64	; 0x40
 80058e6:	d112      	bne.n	800590e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691a      	ldr	r2, [r3, #16]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005912:	b29b      	uxth	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d005      	beq.n	8005924 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	f043 0204 	orr.w	r2, r3, #4
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f843 	bl	80059b8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005932:	e039      	b.n	80059a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	2b2a      	cmp	r3, #42	; 0x2a
 8005938:	d109      	bne.n	800594e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2228      	movs	r2, #40	; 0x28
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7ff f83a 	bl	80049c2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b28      	cmp	r3, #40	; 0x28
 8005958:	d111      	bne.n	800597e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a15      	ldr	r2, [pc, #84]	; (80059b4 <I2C_Slave_STOPF+0x25c>)
 800595e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff f83b 	bl	80049f2 <HAL_I2C_ListenCpltCallback>
}
 800597c:	e014      	b.n	80059a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005982:	2b22      	cmp	r3, #34	; 0x22
 8005984:	d002      	beq.n	800598c <I2C_Slave_STOPF+0x234>
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	2b22      	cmp	r3, #34	; 0x22
 800598a:	d10d      	bne.n	80059a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2220      	movs	r2, #32
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7ff f80d 	bl	80049c2 <HAL_I2C_SlaveRxCpltCallback>
}
 80059a8:	bf00      	nop
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	08005c1d 	.word	0x08005c1d
 80059b4:	ffff0000 	.word	0xffff0000

080059b8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80059d0:	7bbb      	ldrb	r3, [r7, #14]
 80059d2:	2b10      	cmp	r3, #16
 80059d4:	d002      	beq.n	80059dc <I2C_ITError+0x24>
 80059d6:	7bbb      	ldrb	r3, [r7, #14]
 80059d8:	2b40      	cmp	r3, #64	; 0x40
 80059da:	d10a      	bne.n	80059f2 <I2C_ITError+0x3a>
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
 80059de:	2b22      	cmp	r3, #34	; 0x22
 80059e0:	d107      	bne.n	80059f2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059f0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059f8:	2b28      	cmp	r3, #40	; 0x28
 80059fa:	d107      	bne.n	8005a0c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2228      	movs	r2, #40	; 0x28
 8005a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a0a:	e015      	b.n	8005a38 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a1a:	d00a      	beq.n	8005a32 <I2C_ITError+0x7a>
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	2b60      	cmp	r3, #96	; 0x60
 8005a20:	d007      	beq.n	8005a32 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a46:	d162      	bne.n	8005b0e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a56:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d020      	beq.n	8005aa8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6a:	4a6a      	ldr	r2, [pc, #424]	; (8005c14 <I2C_ITError+0x25c>)
 8005a6c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fd fef8 	bl	8003868 <HAL_DMA_Abort_IT>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 8089 	beq.w	8005b92 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0201 	bic.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	4798      	blx	r3
 8005aa6:	e074      	b.n	8005b92 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aac:	4a59      	ldr	r2, [pc, #356]	; (8005c14 <I2C_ITError+0x25c>)
 8005aae:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fd fed7 	bl	8003868 <HAL_DMA_Abort_IT>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d068      	beq.n	8005b92 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aca:	2b40      	cmp	r3, #64	; 0x40
 8005acc:	d10b      	bne.n	8005ae6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0201 	bic.w	r2, r2, #1
 8005af4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b08:	4610      	mov	r0, r2
 8005b0a:	4798      	blx	r3
 8005b0c:	e041      	b.n	8005b92 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b60      	cmp	r3, #96	; 0x60
 8005b18:	d125      	bne.n	8005b66 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b32:	2b40      	cmp	r3, #64	; 0x40
 8005b34:	d10b      	bne.n	8005b4e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	b2d2      	uxtb	r2, r2
 8005b42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0201 	bic.w	r2, r2, #1
 8005b5c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7fe ff65 	bl	8004a2e <HAL_I2C_AbortCpltCallback>
 8005b64:	e015      	b.n	8005b92 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b70:	2b40      	cmp	r3, #64	; 0x40
 8005b72:	d10b      	bne.n	8005b8c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7fe ff44 	bl	8004a1a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10e      	bne.n	8005bc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d109      	bne.n	8005bc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d104      	bne.n	8005bc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d007      	beq.n	8005bd0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bce:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d113      	bne.n	8005c0c <I2C_ITError+0x254>
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	2b28      	cmp	r3, #40	; 0x28
 8005be8:	d110      	bne.n	8005c0c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a0a      	ldr	r2, [pc, #40]	; (8005c18 <I2C_ITError+0x260>)
 8005bee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7fe fef3 	bl	80049f2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c0c:	bf00      	nop
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	08005c1d 	.word	0x08005c1d
 8005c18:	ffff0000 	.word	0xffff0000

08005c1c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c34:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c36:	4b4b      	ldr	r3, [pc, #300]	; (8005d64 <I2C_DMAAbort+0x148>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	08db      	lsrs	r3, r3, #3
 8005c3c:	4a4a      	ldr	r2, [pc, #296]	; (8005d68 <I2C_DMAAbort+0x14c>)
 8005c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c42:	0a1a      	lsrs	r2, r3, #8
 8005c44:	4613      	mov	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	00da      	lsls	r2, r3, #3
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	f043 0220 	orr.w	r2, r3, #32
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005c62:	e00a      	b.n	8005c7a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c78:	d0ea      	beq.n	8005c50 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c86:	2200      	movs	r2, #0
 8005c88:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	2200      	movs	r2, #0
 8005c98:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ca8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2200      	movs	r2, #0
 8005cae:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ccc:	2200      	movs	r2, #0
 8005cce:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0201 	bic.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b60      	cmp	r3, #96	; 0x60
 8005cea:	d10e      	bne.n	8005d0a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d02:	6978      	ldr	r0, [r7, #20]
 8005d04:	f7fe fe93 	bl	8004a2e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d08:	e027      	b.n	8005d5a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d0a:	7cfb      	ldrb	r3, [r7, #19]
 8005d0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d10:	2b28      	cmp	r3, #40	; 0x28
 8005d12:	d117      	bne.n	8005d44 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0201 	orr.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d32:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	2200      	movs	r2, #0
 8005d38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2228      	movs	r2, #40	; 0x28
 8005d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d42:	e007      	b.n	8005d54 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005d54:	6978      	ldr	r0, [r7, #20]
 8005d56:	f7fe fe60 	bl	8004a1a <HAL_I2C_ErrorCallback>
}
 8005d5a:	bf00      	nop
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20000008 	.word	0x20000008
 8005d68:	14f8b589 	.word	0x14f8b589

08005d6c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d78:	4b13      	ldr	r3, [pc, #76]	; (8005dc8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	08db      	lsrs	r3, r3, #3
 8005d7e:	4a13      	ldr	r2, [pc, #76]	; (8005dcc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005d80:	fba2 2303 	umull	r2, r3, r2, r3
 8005d84:	0a1a      	lsrs	r2, r3, #8
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d107      	bne.n	8005daa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	f043 0220 	orr.w	r2, r3, #32
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e008      	b.n	8005dbc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db8:	d0e9      	beq.n	8005d8e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	20000008 	.word	0x20000008
 8005dcc:	14f8b589 	.word	0x14f8b589

08005dd0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005de0:	d103      	bne.n	8005dea <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005de8:	e007      	b.n	8005dfa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dee:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005df2:	d102      	bne.n	8005dfa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2208      	movs	r2, #8
 8005df8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
	...

08005e08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e264      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d075      	beq.n	8005f12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e26:	4ba3      	ldr	r3, [pc, #652]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f003 030c 	and.w	r3, r3, #12
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d00c      	beq.n	8005e4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e32:	4ba0      	ldr	r3, [pc, #640]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	d112      	bne.n	8005e64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e3e:	4b9d      	ldr	r3, [pc, #628]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e4a:	d10b      	bne.n	8005e64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e4c:	4b99      	ldr	r3, [pc, #612]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d05b      	beq.n	8005f10 <HAL_RCC_OscConfig+0x108>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d157      	bne.n	8005f10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e23f      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e6c:	d106      	bne.n	8005e7c <HAL_RCC_OscConfig+0x74>
 8005e6e:	4b91      	ldr	r3, [pc, #580]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a90      	ldr	r2, [pc, #576]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	e01d      	b.n	8005eb8 <HAL_RCC_OscConfig+0xb0>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e84:	d10c      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x98>
 8005e86:	4b8b      	ldr	r3, [pc, #556]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a8a      	ldr	r2, [pc, #552]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e90:	6013      	str	r3, [r2, #0]
 8005e92:	4b88      	ldr	r3, [pc, #544]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a87      	ldr	r2, [pc, #540]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	e00b      	b.n	8005eb8 <HAL_RCC_OscConfig+0xb0>
 8005ea0:	4b84      	ldr	r3, [pc, #528]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a83      	ldr	r2, [pc, #524]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	4b81      	ldr	r3, [pc, #516]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a80      	ldr	r2, [pc, #512]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d013      	beq.n	8005ee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec0:	f7fc fe2c 	bl	8002b1c <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ec8:	f7fc fe28 	bl	8002b1c <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b64      	cmp	r3, #100	; 0x64
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e204      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eda:	4b76      	ldr	r3, [pc, #472]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0f0      	beq.n	8005ec8 <HAL_RCC_OscConfig+0xc0>
 8005ee6:	e014      	b.n	8005f12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee8:	f7fc fe18 	bl	8002b1c <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ef0:	f7fc fe14 	bl	8002b1c <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b64      	cmp	r3, #100	; 0x64
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e1f0      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f02:	4b6c      	ldr	r3, [pc, #432]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1f0      	bne.n	8005ef0 <HAL_RCC_OscConfig+0xe8>
 8005f0e:	e000      	b.n	8005f12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d063      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f1e:	4b65      	ldr	r3, [pc, #404]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f003 030c 	and.w	r3, r3, #12
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00b      	beq.n	8005f42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f2a:	4b62      	ldr	r3, [pc, #392]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f32:	2b08      	cmp	r3, #8
 8005f34:	d11c      	bne.n	8005f70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f36:	4b5f      	ldr	r3, [pc, #380]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d116      	bne.n	8005f70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f42:	4b5c      	ldr	r3, [pc, #368]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d005      	beq.n	8005f5a <HAL_RCC_OscConfig+0x152>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d001      	beq.n	8005f5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e1c4      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f5a:	4b56      	ldr	r3, [pc, #344]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	4952      	ldr	r1, [pc, #328]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f6e:	e03a      	b.n	8005fe6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d020      	beq.n	8005fba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f78:	4b4f      	ldr	r3, [pc, #316]	; (80060b8 <HAL_RCC_OscConfig+0x2b0>)
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7e:	f7fc fdcd 	bl	8002b1c <HAL_GetTick>
 8005f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f84:	e008      	b.n	8005f98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f86:	f7fc fdc9 	bl	8002b1c <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d901      	bls.n	8005f98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e1a5      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f98:	4b46      	ldr	r3, [pc, #280]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d0f0      	beq.n	8005f86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa4:	4b43      	ldr	r3, [pc, #268]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	4940      	ldr	r1, [pc, #256]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	600b      	str	r3, [r1, #0]
 8005fb8:	e015      	b.n	8005fe6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fba:	4b3f      	ldr	r3, [pc, #252]	; (80060b8 <HAL_RCC_OscConfig+0x2b0>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc0:	f7fc fdac 	bl	8002b1c <HAL_GetTick>
 8005fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fc8:	f7fc fda8 	bl	8002b1c <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e184      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fda:	4b36      	ldr	r3, [pc, #216]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1f0      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0308 	and.w	r3, r3, #8
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d030      	beq.n	8006054 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d016      	beq.n	8006028 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ffa:	4b30      	ldr	r3, [pc, #192]	; (80060bc <HAL_RCC_OscConfig+0x2b4>)
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006000:	f7fc fd8c 	bl	8002b1c <HAL_GetTick>
 8006004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006006:	e008      	b.n	800601a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006008:	f7fc fd88 	bl	8002b1c <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b02      	cmp	r3, #2
 8006014:	d901      	bls.n	800601a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e164      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800601a:	4b26      	ldr	r3, [pc, #152]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 800601c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0f0      	beq.n	8006008 <HAL_RCC_OscConfig+0x200>
 8006026:	e015      	b.n	8006054 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006028:	4b24      	ldr	r3, [pc, #144]	; (80060bc <HAL_RCC_OscConfig+0x2b4>)
 800602a:	2200      	movs	r2, #0
 800602c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800602e:	f7fc fd75 	bl	8002b1c <HAL_GetTick>
 8006032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006034:	e008      	b.n	8006048 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006036:	f7fc fd71 	bl	8002b1c <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d901      	bls.n	8006048 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e14d      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006048:	4b1a      	ldr	r3, [pc, #104]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 800604a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800604c:	f003 0302 	and.w	r3, r3, #2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1f0      	bne.n	8006036 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 80a0 	beq.w	80061a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006062:	2300      	movs	r3, #0
 8006064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006066:	4b13      	ldr	r3, [pc, #76]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10f      	bne.n	8006092 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006072:	2300      	movs	r3, #0
 8006074:	60bb      	str	r3, [r7, #8]
 8006076:	4b0f      	ldr	r3, [pc, #60]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	4a0e      	ldr	r2, [pc, #56]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 800607c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006080:	6413      	str	r3, [r2, #64]	; 0x40
 8006082:	4b0c      	ldr	r3, [pc, #48]	; (80060b4 <HAL_RCC_OscConfig+0x2ac>)
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800608a:	60bb      	str	r3, [r7, #8]
 800608c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800608e:	2301      	movs	r3, #1
 8006090:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006092:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <HAL_RCC_OscConfig+0x2b8>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609a:	2b00      	cmp	r3, #0
 800609c:	d121      	bne.n	80060e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800609e:	4b08      	ldr	r3, [pc, #32]	; (80060c0 <HAL_RCC_OscConfig+0x2b8>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a07      	ldr	r2, [pc, #28]	; (80060c0 <HAL_RCC_OscConfig+0x2b8>)
 80060a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060aa:	f7fc fd37 	bl	8002b1c <HAL_GetTick>
 80060ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b0:	e011      	b.n	80060d6 <HAL_RCC_OscConfig+0x2ce>
 80060b2:	bf00      	nop
 80060b4:	40023800 	.word	0x40023800
 80060b8:	42470000 	.word	0x42470000
 80060bc:	42470e80 	.word	0x42470e80
 80060c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060c4:	f7fc fd2a 	bl	8002b1c <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e106      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d6:	4b85      	ldr	r3, [pc, #532]	; (80062ec <HAL_RCC_OscConfig+0x4e4>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0f0      	beq.n	80060c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d106      	bne.n	80060f8 <HAL_RCC_OscConfig+0x2f0>
 80060ea:	4b81      	ldr	r3, [pc, #516]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 80060ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ee:	4a80      	ldr	r2, [pc, #512]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 80060f0:	f043 0301 	orr.w	r3, r3, #1
 80060f4:	6713      	str	r3, [r2, #112]	; 0x70
 80060f6:	e01c      	b.n	8006132 <HAL_RCC_OscConfig+0x32a>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	2b05      	cmp	r3, #5
 80060fe:	d10c      	bne.n	800611a <HAL_RCC_OscConfig+0x312>
 8006100:	4b7b      	ldr	r3, [pc, #492]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006104:	4a7a      	ldr	r2, [pc, #488]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006106:	f043 0304 	orr.w	r3, r3, #4
 800610a:	6713      	str	r3, [r2, #112]	; 0x70
 800610c:	4b78      	ldr	r3, [pc, #480]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 800610e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006110:	4a77      	ldr	r2, [pc, #476]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006112:	f043 0301 	orr.w	r3, r3, #1
 8006116:	6713      	str	r3, [r2, #112]	; 0x70
 8006118:	e00b      	b.n	8006132 <HAL_RCC_OscConfig+0x32a>
 800611a:	4b75      	ldr	r3, [pc, #468]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 800611c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611e:	4a74      	ldr	r2, [pc, #464]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006120:	f023 0301 	bic.w	r3, r3, #1
 8006124:	6713      	str	r3, [r2, #112]	; 0x70
 8006126:	4b72      	ldr	r3, [pc, #456]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612a:	4a71      	ldr	r2, [pc, #452]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 800612c:	f023 0304 	bic.w	r3, r3, #4
 8006130:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d015      	beq.n	8006166 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800613a:	f7fc fcef 	bl	8002b1c <HAL_GetTick>
 800613e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006140:	e00a      	b.n	8006158 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006142:	f7fc fceb 	bl	8002b1c <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006150:	4293      	cmp	r3, r2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e0c5      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006158:	4b65      	ldr	r3, [pc, #404]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 800615a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d0ee      	beq.n	8006142 <HAL_RCC_OscConfig+0x33a>
 8006164:	e014      	b.n	8006190 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006166:	f7fc fcd9 	bl	8002b1c <HAL_GetTick>
 800616a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800616c:	e00a      	b.n	8006184 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800616e:	f7fc fcd5 	bl	8002b1c <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	f241 3288 	movw	r2, #5000	; 0x1388
 800617c:	4293      	cmp	r3, r2
 800617e:	d901      	bls.n	8006184 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e0af      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006184:	4b5a      	ldr	r3, [pc, #360]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1ee      	bne.n	800616e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006190:	7dfb      	ldrb	r3, [r7, #23]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d105      	bne.n	80061a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006196:	4b56      	ldr	r3, [pc, #344]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	4a55      	ldr	r2, [pc, #340]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 800619c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 809b 	beq.w	80062e2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061ac:	4b50      	ldr	r3, [pc, #320]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 030c 	and.w	r3, r3, #12
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d05c      	beq.n	8006272 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d141      	bne.n	8006244 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061c0:	4b4c      	ldr	r3, [pc, #304]	; (80062f4 <HAL_RCC_OscConfig+0x4ec>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c6:	f7fc fca9 	bl	8002b1c <HAL_GetTick>
 80061ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ce:	f7fc fca5 	bl	8002b1c <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e081      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061e0:	4b43      	ldr	r3, [pc, #268]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1f0      	bne.n	80061ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	69da      	ldr	r2, [r3, #28]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fa:	019b      	lsls	r3, r3, #6
 80061fc:	431a      	orrs	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006202:	085b      	lsrs	r3, r3, #1
 8006204:	3b01      	subs	r3, #1
 8006206:	041b      	lsls	r3, r3, #16
 8006208:	431a      	orrs	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620e:	061b      	lsls	r3, r3, #24
 8006210:	4937      	ldr	r1, [pc, #220]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006212:	4313      	orrs	r3, r2
 8006214:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006216:	4b37      	ldr	r3, [pc, #220]	; (80062f4 <HAL_RCC_OscConfig+0x4ec>)
 8006218:	2201      	movs	r2, #1
 800621a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800621c:	f7fc fc7e 	bl	8002b1c <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006224:	f7fc fc7a 	bl	8002b1c <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b02      	cmp	r3, #2
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e056      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006236:	4b2e      	ldr	r3, [pc, #184]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0f0      	beq.n	8006224 <HAL_RCC_OscConfig+0x41c>
 8006242:	e04e      	b.n	80062e2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006244:	4b2b      	ldr	r3, [pc, #172]	; (80062f4 <HAL_RCC_OscConfig+0x4ec>)
 8006246:	2200      	movs	r2, #0
 8006248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800624a:	f7fc fc67 	bl	8002b1c <HAL_GetTick>
 800624e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006250:	e008      	b.n	8006264 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006252:	f7fc fc63 	bl	8002b1c <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	2b02      	cmp	r3, #2
 800625e:	d901      	bls.n	8006264 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e03f      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006264:	4b22      	ldr	r3, [pc, #136]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1f0      	bne.n	8006252 <HAL_RCC_OscConfig+0x44a>
 8006270:	e037      	b.n	80062e2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d101      	bne.n	800627e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e032      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800627e:	4b1c      	ldr	r3, [pc, #112]	; (80062f0 <HAL_RCC_OscConfig+0x4e8>)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d028      	beq.n	80062de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006296:	429a      	cmp	r2, r3
 8006298:	d121      	bne.n	80062de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d11a      	bne.n	80062de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062ae:	4013      	ands	r3, r2
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d111      	bne.n	80062de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c4:	085b      	lsrs	r3, r3, #1
 80062c6:	3b01      	subs	r3, #1
 80062c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d107      	bne.n	80062de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062da:	429a      	cmp	r2, r3
 80062dc:	d001      	beq.n	80062e2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e000      	b.n	80062e4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	40007000 	.word	0x40007000
 80062f0:	40023800 	.word	0x40023800
 80062f4:	42470060 	.word	0x42470060

080062f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e0cc      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800630c:	4b68      	ldr	r3, [pc, #416]	; (80064b0 <HAL_RCC_ClockConfig+0x1b8>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d90c      	bls.n	8006334 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800631a:	4b65      	ldr	r3, [pc, #404]	; (80064b0 <HAL_RCC_ClockConfig+0x1b8>)
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	b2d2      	uxtb	r2, r2
 8006320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006322:	4b63      	ldr	r3, [pc, #396]	; (80064b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	429a      	cmp	r2, r3
 800632e:	d001      	beq.n	8006334 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e0b8      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d020      	beq.n	8006382 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d005      	beq.n	8006358 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800634c:	4b59      	ldr	r3, [pc, #356]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	4a58      	ldr	r2, [pc, #352]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006356:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0308 	and.w	r3, r3, #8
 8006360:	2b00      	cmp	r3, #0
 8006362:	d005      	beq.n	8006370 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006364:	4b53      	ldr	r3, [pc, #332]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	4a52      	ldr	r2, [pc, #328]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 800636a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800636e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006370:	4b50      	ldr	r3, [pc, #320]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	494d      	ldr	r1, [pc, #308]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 800637e:	4313      	orrs	r3, r2
 8006380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b00      	cmp	r3, #0
 800638c:	d044      	beq.n	8006418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d107      	bne.n	80063a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006396:	4b47      	ldr	r3, [pc, #284]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d119      	bne.n	80063d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e07f      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d003      	beq.n	80063b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d107      	bne.n	80063c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063b6:	4b3f      	ldr	r3, [pc, #252]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d109      	bne.n	80063d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e06f      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063c6:	4b3b      	ldr	r3, [pc, #236]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e067      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063d6:	4b37      	ldr	r3, [pc, #220]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f023 0203 	bic.w	r2, r3, #3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	4934      	ldr	r1, [pc, #208]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063e8:	f7fc fb98 	bl	8002b1c <HAL_GetTick>
 80063ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ee:	e00a      	b.n	8006406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063f0:	f7fc fb94 	bl	8002b1c <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80063fe:	4293      	cmp	r3, r2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e04f      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006406:	4b2b      	ldr	r3, [pc, #172]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 020c 	and.w	r2, r3, #12
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	429a      	cmp	r2, r3
 8006416:	d1eb      	bne.n	80063f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006418:	4b25      	ldr	r3, [pc, #148]	; (80064b0 <HAL_RCC_ClockConfig+0x1b8>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	429a      	cmp	r2, r3
 8006424:	d20c      	bcs.n	8006440 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006426:	4b22      	ldr	r3, [pc, #136]	; (80064b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	b2d2      	uxtb	r2, r2
 800642c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800642e:	4b20      	ldr	r3, [pc, #128]	; (80064b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d001      	beq.n	8006440 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e032      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d008      	beq.n	800645e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800644c:	4b19      	ldr	r3, [pc, #100]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	4916      	ldr	r1, [pc, #88]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 800645a:	4313      	orrs	r3, r2
 800645c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0308 	and.w	r3, r3, #8
 8006466:	2b00      	cmp	r3, #0
 8006468:	d009      	beq.n	800647e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800646a:	4b12      	ldr	r3, [pc, #72]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	490e      	ldr	r1, [pc, #56]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 800647a:	4313      	orrs	r3, r2
 800647c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800647e:	f000 f821 	bl	80064c4 <HAL_RCC_GetSysClockFreq>
 8006482:	4602      	mov	r2, r0
 8006484:	4b0b      	ldr	r3, [pc, #44]	; (80064b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	091b      	lsrs	r3, r3, #4
 800648a:	f003 030f 	and.w	r3, r3, #15
 800648e:	490a      	ldr	r1, [pc, #40]	; (80064b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006490:	5ccb      	ldrb	r3, [r1, r3]
 8006492:	fa22 f303 	lsr.w	r3, r2, r3
 8006496:	4a09      	ldr	r2, [pc, #36]	; (80064bc <HAL_RCC_ClockConfig+0x1c4>)
 8006498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800649a:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <HAL_RCC_ClockConfig+0x1c8>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fc faf8 	bl	8002a94 <HAL_InitTick>

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	40023c00 	.word	0x40023c00
 80064b4:	40023800 	.word	0x40023800
 80064b8:	0800c350 	.word	0x0800c350
 80064bc:	20000008 	.word	0x20000008
 80064c0:	2000000c 	.word	0x2000000c

080064c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80064c8:	b084      	sub	sp, #16
 80064ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	607b      	str	r3, [r7, #4]
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	2300      	movs	r3, #0
 80064d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064dc:	4b67      	ldr	r3, [pc, #412]	; (800667c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f003 030c 	and.w	r3, r3, #12
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	d00d      	beq.n	8006504 <HAL_RCC_GetSysClockFreq+0x40>
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	f200 80bd 	bhi.w	8006668 <HAL_RCC_GetSysClockFreq+0x1a4>
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <HAL_RCC_GetSysClockFreq+0x34>
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d003      	beq.n	80064fe <HAL_RCC_GetSysClockFreq+0x3a>
 80064f6:	e0b7      	b.n	8006668 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064f8:	4b61      	ldr	r3, [pc, #388]	; (8006680 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80064fa:	60bb      	str	r3, [r7, #8]
       break;
 80064fc:	e0b7      	b.n	800666e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064fe:	4b61      	ldr	r3, [pc, #388]	; (8006684 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006500:	60bb      	str	r3, [r7, #8]
      break;
 8006502:	e0b4      	b.n	800666e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006504:	4b5d      	ldr	r3, [pc, #372]	; (800667c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800650c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800650e:	4b5b      	ldr	r3, [pc, #364]	; (800667c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d04d      	beq.n	80065b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800651a:	4b58      	ldr	r3, [pc, #352]	; (800667c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	099b      	lsrs	r3, r3, #6
 8006520:	461a      	mov	r2, r3
 8006522:	f04f 0300 	mov.w	r3, #0
 8006526:	f240 10ff 	movw	r0, #511	; 0x1ff
 800652a:	f04f 0100 	mov.w	r1, #0
 800652e:	ea02 0800 	and.w	r8, r2, r0
 8006532:	ea03 0901 	and.w	r9, r3, r1
 8006536:	4640      	mov	r0, r8
 8006538:	4649      	mov	r1, r9
 800653a:	f04f 0200 	mov.w	r2, #0
 800653e:	f04f 0300 	mov.w	r3, #0
 8006542:	014b      	lsls	r3, r1, #5
 8006544:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006548:	0142      	lsls	r2, r0, #5
 800654a:	4610      	mov	r0, r2
 800654c:	4619      	mov	r1, r3
 800654e:	ebb0 0008 	subs.w	r0, r0, r8
 8006552:	eb61 0109 	sbc.w	r1, r1, r9
 8006556:	f04f 0200 	mov.w	r2, #0
 800655a:	f04f 0300 	mov.w	r3, #0
 800655e:	018b      	lsls	r3, r1, #6
 8006560:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006564:	0182      	lsls	r2, r0, #6
 8006566:	1a12      	subs	r2, r2, r0
 8006568:	eb63 0301 	sbc.w	r3, r3, r1
 800656c:	f04f 0000 	mov.w	r0, #0
 8006570:	f04f 0100 	mov.w	r1, #0
 8006574:	00d9      	lsls	r1, r3, #3
 8006576:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800657a:	00d0      	lsls	r0, r2, #3
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	eb12 0208 	adds.w	r2, r2, r8
 8006584:	eb43 0309 	adc.w	r3, r3, r9
 8006588:	f04f 0000 	mov.w	r0, #0
 800658c:	f04f 0100 	mov.w	r1, #0
 8006590:	0259      	lsls	r1, r3, #9
 8006592:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006596:	0250      	lsls	r0, r2, #9
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	4610      	mov	r0, r2
 800659e:	4619      	mov	r1, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	461a      	mov	r2, r3
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	f7fa fb4e 	bl	8000c48 <__aeabi_uldivmod>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4613      	mov	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	e04a      	b.n	800664c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065b6:	4b31      	ldr	r3, [pc, #196]	; (800667c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	099b      	lsrs	r3, r3, #6
 80065bc:	461a      	mov	r2, r3
 80065be:	f04f 0300 	mov.w	r3, #0
 80065c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80065c6:	f04f 0100 	mov.w	r1, #0
 80065ca:	ea02 0400 	and.w	r4, r2, r0
 80065ce:	ea03 0501 	and.w	r5, r3, r1
 80065d2:	4620      	mov	r0, r4
 80065d4:	4629      	mov	r1, r5
 80065d6:	f04f 0200 	mov.w	r2, #0
 80065da:	f04f 0300 	mov.w	r3, #0
 80065de:	014b      	lsls	r3, r1, #5
 80065e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80065e4:	0142      	lsls	r2, r0, #5
 80065e6:	4610      	mov	r0, r2
 80065e8:	4619      	mov	r1, r3
 80065ea:	1b00      	subs	r0, r0, r4
 80065ec:	eb61 0105 	sbc.w	r1, r1, r5
 80065f0:	f04f 0200 	mov.w	r2, #0
 80065f4:	f04f 0300 	mov.w	r3, #0
 80065f8:	018b      	lsls	r3, r1, #6
 80065fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80065fe:	0182      	lsls	r2, r0, #6
 8006600:	1a12      	subs	r2, r2, r0
 8006602:	eb63 0301 	sbc.w	r3, r3, r1
 8006606:	f04f 0000 	mov.w	r0, #0
 800660a:	f04f 0100 	mov.w	r1, #0
 800660e:	00d9      	lsls	r1, r3, #3
 8006610:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006614:	00d0      	lsls	r0, r2, #3
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	1912      	adds	r2, r2, r4
 800661c:	eb45 0303 	adc.w	r3, r5, r3
 8006620:	f04f 0000 	mov.w	r0, #0
 8006624:	f04f 0100 	mov.w	r1, #0
 8006628:	0299      	lsls	r1, r3, #10
 800662a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800662e:	0290      	lsls	r0, r2, #10
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	4610      	mov	r0, r2
 8006636:	4619      	mov	r1, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	461a      	mov	r2, r3
 800663c:	f04f 0300 	mov.w	r3, #0
 8006640:	f7fa fb02 	bl	8000c48 <__aeabi_uldivmod>
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
 8006648:	4613      	mov	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800664c:	4b0b      	ldr	r3, [pc, #44]	; (800667c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	0c1b      	lsrs	r3, r3, #16
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	3301      	adds	r3, #1
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	fbb2 f3f3 	udiv	r3, r2, r3
 8006664:	60bb      	str	r3, [r7, #8]
      break;
 8006666:	e002      	b.n	800666e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006668:	4b05      	ldr	r3, [pc, #20]	; (8006680 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800666a:	60bb      	str	r3, [r7, #8]
      break;
 800666c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800666e:	68bb      	ldr	r3, [r7, #8]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800667a:	bf00      	nop
 800667c:	40023800 	.word	0x40023800
 8006680:	00f42400 	.word	0x00f42400
 8006684:	007a1200 	.word	0x007a1200

08006688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006688:	b480      	push	{r7}
 800668a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800668c:	4b03      	ldr	r3, [pc, #12]	; (800669c <HAL_RCC_GetHCLKFreq+0x14>)
 800668e:	681b      	ldr	r3, [r3, #0]
}
 8006690:	4618      	mov	r0, r3
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	20000008 	.word	0x20000008

080066a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066a4:	f7ff fff0 	bl	8006688 <HAL_RCC_GetHCLKFreq>
 80066a8:	4602      	mov	r2, r0
 80066aa:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	0a9b      	lsrs	r3, r3, #10
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	4903      	ldr	r1, [pc, #12]	; (80066c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066b6:	5ccb      	ldrb	r3, [r1, r3]
 80066b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066bc:	4618      	mov	r0, r3
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40023800 	.word	0x40023800
 80066c4:	0800c360 	.word	0x0800c360

080066c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066cc:	f7ff ffdc 	bl	8006688 <HAL_RCC_GetHCLKFreq>
 80066d0:	4602      	mov	r2, r0
 80066d2:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	0b5b      	lsrs	r3, r3, #13
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	4903      	ldr	r1, [pc, #12]	; (80066ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80066de:	5ccb      	ldrb	r3, [r1, r3]
 80066e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40023800 	.word	0x40023800
 80066ec:	0800c360 	.word	0x0800c360

080066f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e07b      	b.n	80067fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	2b00      	cmp	r3, #0
 8006708:	d108      	bne.n	800671c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006712:	d009      	beq.n	8006728 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	61da      	str	r2, [r3, #28]
 800671a:	e005      	b.n	8006728 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d106      	bne.n	8006748 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7fb fd92 	bl	800226c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800675e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006770:	431a      	orrs	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800677a:	431a      	orrs	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	431a      	orrs	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	431a      	orrs	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006798:	431a      	orrs	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ac:	ea42 0103 	orr.w	r1, r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	0c1b      	lsrs	r3, r3, #16
 80067c6:	f003 0104 	and.w	r1, r3, #4
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	f003 0210 	and.w	r2, r3, #16
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69da      	ldr	r2, [r3, #28]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b088      	sub	sp, #32
 8006806:	af00      	add	r7, sp, #0
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	603b      	str	r3, [r7, #0]
 800680e:	4613      	mov	r3, r2
 8006810:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800681c:	2b01      	cmp	r3, #1
 800681e:	d101      	bne.n	8006824 <HAL_SPI_Transmit+0x22>
 8006820:	2302      	movs	r3, #2
 8006822:	e126      	b.n	8006a72 <HAL_SPI_Transmit+0x270>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800682c:	f7fc f976 	bl	8002b1c <HAL_GetTick>
 8006830:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006832:	88fb      	ldrh	r3, [r7, #6]
 8006834:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b01      	cmp	r3, #1
 8006840:	d002      	beq.n	8006848 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006842:	2302      	movs	r3, #2
 8006844:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006846:	e10b      	b.n	8006a60 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <HAL_SPI_Transmit+0x52>
 800684e:	88fb      	ldrh	r3, [r7, #6]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d102      	bne.n	800685a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006858:	e102      	b.n	8006a60 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2203      	movs	r2, #3
 800685e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	88fa      	ldrh	r2, [r7, #6]
 8006872:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	88fa      	ldrh	r2, [r7, #6]
 8006878:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068a0:	d10f      	bne.n	80068c2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068cc:	2b40      	cmp	r3, #64	; 0x40
 80068ce:	d007      	beq.n	80068e0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068e8:	d14b      	bne.n	8006982 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <HAL_SPI_Transmit+0xf6>
 80068f2:	8afb      	ldrh	r3, [r7, #22]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d13e      	bne.n	8006976 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	881a      	ldrh	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006908:	1c9a      	adds	r2, r3, #2
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006912:	b29b      	uxth	r3, r3
 8006914:	3b01      	subs	r3, #1
 8006916:	b29a      	uxth	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800691c:	e02b      	b.n	8006976 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b02      	cmp	r3, #2
 800692a:	d112      	bne.n	8006952 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006930:	881a      	ldrh	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693c:	1c9a      	adds	r2, r3, #2
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006946:	b29b      	uxth	r3, r3
 8006948:	3b01      	subs	r3, #1
 800694a:	b29a      	uxth	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006950:	e011      	b.n	8006976 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006952:	f7fc f8e3 	bl	8002b1c <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d803      	bhi.n	800696a <HAL_SPI_Transmit+0x168>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006968:	d102      	bne.n	8006970 <HAL_SPI_Transmit+0x16e>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d102      	bne.n	8006976 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006974:	e074      	b.n	8006a60 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800697a:	b29b      	uxth	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1ce      	bne.n	800691e <HAL_SPI_Transmit+0x11c>
 8006980:	e04c      	b.n	8006a1c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <HAL_SPI_Transmit+0x18e>
 800698a:	8afb      	ldrh	r3, [r7, #22]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d140      	bne.n	8006a12 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	330c      	adds	r3, #12
 800699a:	7812      	ldrb	r2, [r2, #0]
 800699c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	3b01      	subs	r3, #1
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80069b6:	e02c      	b.n	8006a12 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d113      	bne.n	80069ee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	330c      	adds	r3, #12
 80069d0:	7812      	ldrb	r2, [r2, #0]
 80069d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	3b01      	subs	r3, #1
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80069ec:	e011      	b.n	8006a12 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069ee:	f7fc f895 	bl	8002b1c <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d803      	bhi.n	8006a06 <HAL_SPI_Transmit+0x204>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a04:	d102      	bne.n	8006a0c <HAL_SPI_Transmit+0x20a>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d102      	bne.n	8006a12 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a10:	e026      	b.n	8006a60 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1cd      	bne.n	80069b8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 fce9 	bl	80073f8 <SPI_EndRxTxTransaction>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d002      	beq.n	8006a32 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10a      	bne.n	8006a50 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	613b      	str	r3, [r7, #16]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	613b      	str	r3, [r7, #16]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	613b      	str	r3, [r7, #16]
 8006a4e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	77fb      	strb	r3, [r7, #31]
 8006a5c:	e000      	b.n	8006a60 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006a5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a70:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3720      	adds	r7, #32
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b088      	sub	sp, #32
 8006a7e:	af02      	add	r7, sp, #8
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	603b      	str	r3, [r7, #0]
 8006a86:	4613      	mov	r3, r2
 8006a88:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a96:	d112      	bne.n	8006abe <HAL_SPI_Receive+0x44>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10e      	bne.n	8006abe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2204      	movs	r2, #4
 8006aa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006aa8:	88fa      	ldrh	r2, [r7, #6]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	68b9      	ldr	r1, [r7, #8]
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 f8f1 	bl	8006c9c <HAL_SPI_TransmitReceive>
 8006aba:	4603      	mov	r3, r0
 8006abc:	e0ea      	b.n	8006c94 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <HAL_SPI_Receive+0x52>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e0e3      	b.n	8006c94 <HAL_SPI_Receive+0x21a>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ad4:	f7fc f822 	bl	8002b1c <HAL_GetTick>
 8006ad8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d002      	beq.n	8006aec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006aea:	e0ca      	b.n	8006c82 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <HAL_SPI_Receive+0x7e>
 8006af2:	88fb      	ldrh	r3, [r7, #6]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d102      	bne.n	8006afe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006afc:	e0c1      	b.n	8006c82 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2204      	movs	r2, #4
 8006b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	88fa      	ldrh	r2, [r7, #6]
 8006b16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	88fa      	ldrh	r2, [r7, #6]
 8006b1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b44:	d10f      	bne.n	8006b66 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b64:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b70:	2b40      	cmp	r3, #64	; 0x40
 8006b72:	d007      	beq.n	8006b84 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b82:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d162      	bne.n	8006c52 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006b8c:	e02e      	b.n	8006bec <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d115      	bne.n	8006bc8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f103 020c 	add.w	r2, r3, #12
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba8:	7812      	ldrb	r2, [r2, #0]
 8006baa:	b2d2      	uxtb	r2, r2
 8006bac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb2:	1c5a      	adds	r2, r3, #1
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006bc6:	e011      	b.n	8006bec <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bc8:	f7fb ffa8 	bl	8002b1c <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d803      	bhi.n	8006be0 <HAL_SPI_Receive+0x166>
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bde:	d102      	bne.n	8006be6 <HAL_SPI_Receive+0x16c>
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d102      	bne.n	8006bec <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006bea:	e04a      	b.n	8006c82 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1cb      	bne.n	8006b8e <HAL_SPI_Receive+0x114>
 8006bf6:	e031      	b.n	8006c5c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d113      	bne.n	8006c2e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c10:	b292      	uxth	r2, r2
 8006c12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	1c9a      	adds	r2, r3, #2
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	3b01      	subs	r3, #1
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c2c:	e011      	b.n	8006c52 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c2e:	f7fb ff75 	bl	8002b1c <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d803      	bhi.n	8006c46 <HAL_SPI_Receive+0x1cc>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c44:	d102      	bne.n	8006c4c <HAL_SPI_Receive+0x1d2>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d102      	bne.n	8006c52 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006c50:	e017      	b.n	8006c82 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1cd      	bne.n	8006bf8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	6839      	ldr	r1, [r7, #0]
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 fb63 	bl	800732c <SPI_EndRxTransaction>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	75fb      	strb	r3, [r7, #23]
 8006c7e:	e000      	b.n	8006c82 <HAL_SPI_Receive+0x208>
  }

error :
 8006c80:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08c      	sub	sp, #48	; 0x30
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006caa:	2301      	movs	r3, #1
 8006cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d101      	bne.n	8006cc2 <HAL_SPI_TransmitReceive+0x26>
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	e18a      	b.n	8006fd8 <HAL_SPI_TransmitReceive+0x33c>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cca:	f7fb ff27 	bl	8002b1c <HAL_GetTick>
 8006cce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006ce0:	887b      	ldrh	r3, [r7, #2]
 8006ce2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ce4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d00f      	beq.n	8006d0c <HAL_SPI_TransmitReceive+0x70>
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cf2:	d107      	bne.n	8006d04 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d103      	bne.n	8006d04 <HAL_SPI_TransmitReceive+0x68>
 8006cfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d003      	beq.n	8006d0c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006d04:	2302      	movs	r3, #2
 8006d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006d0a:	e15b      	b.n	8006fc4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d005      	beq.n	8006d1e <HAL_SPI_TransmitReceive+0x82>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <HAL_SPI_TransmitReceive+0x82>
 8006d18:	887b      	ldrh	r3, [r7, #2]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d103      	bne.n	8006d26 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006d24:	e14e      	b.n	8006fc4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	d003      	beq.n	8006d3a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2205      	movs	r2, #5
 8006d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	887a      	ldrh	r2, [r7, #2]
 8006d4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	887a      	ldrh	r2, [r7, #2]
 8006d50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	887a      	ldrh	r2, [r7, #2]
 8006d5c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	887a      	ldrh	r2, [r7, #2]
 8006d62:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7a:	2b40      	cmp	r3, #64	; 0x40
 8006d7c:	d007      	beq.n	8006d8e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d96:	d178      	bne.n	8006e8a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <HAL_SPI_TransmitReceive+0x10a>
 8006da0:	8b7b      	ldrh	r3, [r7, #26]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d166      	bne.n	8006e74 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006daa:	881a      	ldrh	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db6:	1c9a      	adds	r2, r3, #2
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dca:	e053      	b.n	8006e74 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d11b      	bne.n	8006e12 <HAL_SPI_TransmitReceive+0x176>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d016      	beq.n	8006e12 <HAL_SPI_TransmitReceive+0x176>
 8006de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d113      	bne.n	8006e12 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dee:	881a      	ldrh	r2, [r3, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfa:	1c9a      	adds	r2, r3, #2
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	3b01      	subs	r3, #1
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d119      	bne.n	8006e54 <HAL_SPI_TransmitReceive+0x1b8>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d014      	beq.n	8006e54 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68da      	ldr	r2, [r3, #12]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e34:	b292      	uxth	r2, r2
 8006e36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3c:	1c9a      	adds	r2, r3, #2
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e50:	2301      	movs	r3, #1
 8006e52:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e54:	f7fb fe62 	bl	8002b1c <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d807      	bhi.n	8006e74 <HAL_SPI_TransmitReceive+0x1d8>
 8006e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6a:	d003      	beq.n	8006e74 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006e72:	e0a7      	b.n	8006fc4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1a6      	bne.n	8006dcc <HAL_SPI_TransmitReceive+0x130>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1a1      	bne.n	8006dcc <HAL_SPI_TransmitReceive+0x130>
 8006e88:	e07c      	b.n	8006f84 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d002      	beq.n	8006e98 <HAL_SPI_TransmitReceive+0x1fc>
 8006e92:	8b7b      	ldrh	r3, [r7, #26]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d16b      	bne.n	8006f70 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	7812      	ldrb	r2, [r2, #0]
 8006ea4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eaa:	1c5a      	adds	r2, r3, #1
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ebe:	e057      	b.n	8006f70 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d11c      	bne.n	8006f08 <HAL_SPI_TransmitReceive+0x26c>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d017      	beq.n	8006f08 <HAL_SPI_TransmitReceive+0x26c>
 8006ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d114      	bne.n	8006f08 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	330c      	adds	r3, #12
 8006ee8:	7812      	ldrb	r2, [r2, #0]
 8006eea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	3b01      	subs	r3, #1
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d119      	bne.n	8006f4a <HAL_SPI_TransmitReceive+0x2ae>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d014      	beq.n	8006f4a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68da      	ldr	r2, [r3, #12]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2a:	b2d2      	uxtb	r2, r2
 8006f2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f46:	2301      	movs	r3, #1
 8006f48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006f4a:	f7fb fde7 	bl	8002b1c <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d803      	bhi.n	8006f62 <HAL_SPI_TransmitReceive+0x2c6>
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f60:	d102      	bne.n	8006f68 <HAL_SPI_TransmitReceive+0x2cc>
 8006f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d103      	bne.n	8006f70 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006f6e:	e029      	b.n	8006fc4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1a2      	bne.n	8006ec0 <HAL_SPI_TransmitReceive+0x224>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d19d      	bne.n	8006ec0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 fa35 	bl	80073f8 <SPI_EndRxTxTransaction>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d006      	beq.n	8006fa2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006fa0:	e010      	b.n	8006fc4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10b      	bne.n	8006fc2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006faa:	2300      	movs	r3, #0
 8006fac:	617b      	str	r3, [r7, #20]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	617b      	str	r3, [r7, #20]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	617b      	str	r3, [r7, #20]
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	e000      	b.n	8006fc4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006fc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006fd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3730      	adds	r7, #48	; 0x30
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	099b      	lsrs	r3, r3, #6
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10f      	bne.n	8007024 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00a      	beq.n	8007024 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	099b      	lsrs	r3, r3, #6
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b00      	cmp	r3, #0
 8007018:	d004      	beq.n	8007024 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	4798      	blx	r3
    return;
 8007022:	e0d7      	b.n	80071d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	085b      	lsrs	r3, r3, #1
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00a      	beq.n	8007046 <HAL_SPI_IRQHandler+0x66>
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	09db      	lsrs	r3, r3, #7
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	d004      	beq.n	8007046 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	4798      	blx	r3
    return;
 8007044:	e0c6      	b.n	80071d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	095b      	lsrs	r3, r3, #5
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10c      	bne.n	800706c <HAL_SPI_IRQHandler+0x8c>
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	099b      	lsrs	r3, r3, #6
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	0a1b      	lsrs	r3, r3, #8
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 80b4 	beq.w	80071d4 <HAL_SPI_IRQHandler+0x1f4>
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	095b      	lsrs	r3, r3, #5
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 80ad 	beq.w	80071d4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	099b      	lsrs	r3, r3, #6
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d023      	beq.n	80070ce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b03      	cmp	r3, #3
 8007090:	d011      	beq.n	80070b6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007096:	f043 0204 	orr.w	r2, r3, #4
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800709e:	2300      	movs	r3, #0
 80070a0:	617b      	str	r3, [r7, #20]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	617b      	str	r3, [r7, #20]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	617b      	str	r3, [r7, #20]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	e00b      	b.n	80070ce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070b6:	2300      	movs	r3, #0
 80070b8:	613b      	str	r3, [r7, #16]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	613b      	str	r3, [r7, #16]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	613b      	str	r3, [r7, #16]
 80070ca:	693b      	ldr	r3, [r7, #16]
        return;
 80070cc:	e082      	b.n	80071d4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	095b      	lsrs	r3, r3, #5
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d014      	beq.n	8007104 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070de:	f043 0201 	orr.w	r2, r3, #1
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80070e6:	2300      	movs	r3, #0
 80070e8:	60fb      	str	r3, [r7, #12]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	60fb      	str	r3, [r7, #12]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	0a1b      	lsrs	r3, r3, #8
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00c      	beq.n	800712a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007114:	f043 0208 	orr.w	r2, r3, #8
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800711c:	2300      	movs	r3, #0
 800711e:	60bb      	str	r3, [r7, #8]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	60bb      	str	r3, [r7, #8]
 8007128:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712e:	2b00      	cmp	r3, #0
 8007130:	d04f      	beq.n	80071d2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007140:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d104      	bne.n	800715e <HAL_SPI_IRQHandler+0x17e>
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d034      	beq.n	80071c8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f022 0203 	bic.w	r2, r2, #3
 800716c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007172:	2b00      	cmp	r3, #0
 8007174:	d011      	beq.n	800719a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800717a:	4a18      	ldr	r2, [pc, #96]	; (80071dc <HAL_SPI_IRQHandler+0x1fc>)
 800717c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007182:	4618      	mov	r0, r3
 8007184:	f7fc fb70 	bl	8003868 <HAL_DMA_Abort_IT>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d005      	beq.n	800719a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007192:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d016      	beq.n	80071d0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a6:	4a0d      	ldr	r2, [pc, #52]	; (80071dc <HAL_SPI_IRQHandler+0x1fc>)
 80071a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fc fb5a 	bl	8003868 <HAL_DMA_Abort_IT>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80071c6:	e003      	b.n	80071d0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f809 	bl	80071e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80071ce:	e000      	b.n	80071d2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80071d0:	bf00      	nop
    return;
 80071d2:	bf00      	nop
  }
}
 80071d4:	3720      	adds	r7, #32
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	080071f5 	.word	0x080071f5

080071e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007200:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f7ff ffe6 	bl	80071e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007214:	bf00      	nop
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b088      	sub	sp, #32
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	603b      	str	r3, [r7, #0]
 8007228:	4613      	mov	r3, r2
 800722a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800722c:	f7fb fc76 	bl	8002b1c <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007234:	1a9b      	subs	r3, r3, r2
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	4413      	add	r3, r2
 800723a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800723c:	f7fb fc6e 	bl	8002b1c <HAL_GetTick>
 8007240:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007242:	4b39      	ldr	r3, [pc, #228]	; (8007328 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	015b      	lsls	r3, r3, #5
 8007248:	0d1b      	lsrs	r3, r3, #20
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	fb02 f303 	mul.w	r3, r2, r3
 8007250:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007252:	e054      	b.n	80072fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725a:	d050      	beq.n	80072fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800725c:	f7fb fc5e 	bl	8002b1c <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	69fa      	ldr	r2, [r7, #28]
 8007268:	429a      	cmp	r2, r3
 800726a:	d902      	bls.n	8007272 <SPI_WaitFlagStateUntilTimeout+0x56>
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d13d      	bne.n	80072ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007280:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800728a:	d111      	bne.n	80072b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007294:	d004      	beq.n	80072a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800729e:	d107      	bne.n	80072b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072b8:	d10f      	bne.n	80072da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e017      	b.n	800731e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	3b01      	subs	r3, #1
 80072fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	689a      	ldr	r2, [r3, #8]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	4013      	ands	r3, r2
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	429a      	cmp	r2, r3
 800730c:	bf0c      	ite	eq
 800730e:	2301      	moveq	r3, #1
 8007310:	2300      	movne	r3, #0
 8007312:	b2db      	uxtb	r3, r3
 8007314:	461a      	mov	r2, r3
 8007316:	79fb      	ldrb	r3, [r7, #7]
 8007318:	429a      	cmp	r2, r3
 800731a:	d19b      	bne.n	8007254 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3720      	adds	r7, #32
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20000008 	.word	0x20000008

0800732c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af02      	add	r7, sp, #8
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007340:	d111      	bne.n	8007366 <SPI_EndRxTransaction+0x3a>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800734a:	d004      	beq.n	8007356 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007354:	d107      	bne.n	8007366 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007364:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800736e:	d12a      	bne.n	80073c6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007378:	d012      	beq.n	80073a0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2200      	movs	r2, #0
 8007382:	2180      	movs	r1, #128	; 0x80
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f7ff ff49 	bl	800721c <SPI_WaitFlagStateUntilTimeout>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d02d      	beq.n	80073ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007394:	f043 0220 	orr.w	r2, r3, #32
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e026      	b.n	80073ee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2200      	movs	r2, #0
 80073a8:	2101      	movs	r1, #1
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f7ff ff36 	bl	800721c <SPI_WaitFlagStateUntilTimeout>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d01a      	beq.n	80073ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ba:	f043 0220 	orr.w	r2, r3, #32
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e013      	b.n	80073ee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	2200      	movs	r2, #0
 80073ce:	2101      	movs	r1, #1
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f7ff ff23 	bl	800721c <SPI_WaitFlagStateUntilTimeout>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d007      	beq.n	80073ec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e0:	f043 0220 	orr.w	r2, r3, #32
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e000      	b.n	80073ee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af02      	add	r7, sp, #8
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007404:	4b1b      	ldr	r3, [pc, #108]	; (8007474 <SPI_EndRxTxTransaction+0x7c>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a1b      	ldr	r2, [pc, #108]	; (8007478 <SPI_EndRxTxTransaction+0x80>)
 800740a:	fba2 2303 	umull	r2, r3, r2, r3
 800740e:	0d5b      	lsrs	r3, r3, #21
 8007410:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007414:	fb02 f303 	mul.w	r3, r2, r3
 8007418:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007422:	d112      	bne.n	800744a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2200      	movs	r2, #0
 800742c:	2180      	movs	r1, #128	; 0x80
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f7ff fef4 	bl	800721c <SPI_WaitFlagStateUntilTimeout>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d016      	beq.n	8007468 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743e:	f043 0220 	orr.w	r2, r3, #32
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e00f      	b.n	800746a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00a      	beq.n	8007466 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	3b01      	subs	r3, #1
 8007454:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007460:	2b80      	cmp	r3, #128	; 0x80
 8007462:	d0f2      	beq.n	800744a <SPI_EndRxTxTransaction+0x52>
 8007464:	e000      	b.n	8007468 <SPI_EndRxTxTransaction+0x70>
        break;
 8007466:	bf00      	nop
  }

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	20000008 	.word	0x20000008
 8007478:	165e9f81 	.word	0x165e9f81

0800747c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e041      	b.n	8007512 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d106      	bne.n	80074a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7fa ff32 	bl	800230c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	3304      	adds	r3, #4
 80074b8:	4619      	mov	r1, r3
 80074ba:	4610      	mov	r0, r2
 80074bc:	f000 fce2 	bl	8007e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
	...

0800751c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b01      	cmp	r3, #1
 800752e:	d001      	beq.n	8007534 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e046      	b.n	80075c2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a23      	ldr	r2, [pc, #140]	; (80075d0 <HAL_TIM_Base_Start+0xb4>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d022      	beq.n	800758c <HAL_TIM_Base_Start+0x70>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800754e:	d01d      	beq.n	800758c <HAL_TIM_Base_Start+0x70>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a1f      	ldr	r2, [pc, #124]	; (80075d4 <HAL_TIM_Base_Start+0xb8>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d018      	beq.n	800758c <HAL_TIM_Base_Start+0x70>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a1e      	ldr	r2, [pc, #120]	; (80075d8 <HAL_TIM_Base_Start+0xbc>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d013      	beq.n	800758c <HAL_TIM_Base_Start+0x70>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a1c      	ldr	r2, [pc, #112]	; (80075dc <HAL_TIM_Base_Start+0xc0>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d00e      	beq.n	800758c <HAL_TIM_Base_Start+0x70>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a1b      	ldr	r2, [pc, #108]	; (80075e0 <HAL_TIM_Base_Start+0xc4>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d009      	beq.n	800758c <HAL_TIM_Base_Start+0x70>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a19      	ldr	r2, [pc, #100]	; (80075e4 <HAL_TIM_Base_Start+0xc8>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d004      	beq.n	800758c <HAL_TIM_Base_Start+0x70>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a18      	ldr	r2, [pc, #96]	; (80075e8 <HAL_TIM_Base_Start+0xcc>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d111      	bne.n	80075b0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2b06      	cmp	r3, #6
 800759c:	d010      	beq.n	80075c0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f042 0201 	orr.w	r2, r2, #1
 80075ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ae:	e007      	b.n	80075c0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f042 0201 	orr.w	r2, r2, #1
 80075be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3714      	adds	r7, #20
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	40010000 	.word	0x40010000
 80075d4:	40000400 	.word	0x40000400
 80075d8:	40000800 	.word	0x40000800
 80075dc:	40000c00 	.word	0x40000c00
 80075e0:	40010400 	.word	0x40010400
 80075e4:	40014000 	.word	0x40014000
 80075e8:	40001800 	.word	0x40001800

080075ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d001      	beq.n	8007604 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e04e      	b.n	80076a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2202      	movs	r2, #2
 8007608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68da      	ldr	r2, [r3, #12]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f042 0201 	orr.w	r2, r2, #1
 800761a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a23      	ldr	r2, [pc, #140]	; (80076b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d022      	beq.n	800766c <HAL_TIM_Base_Start_IT+0x80>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800762e:	d01d      	beq.n	800766c <HAL_TIM_Base_Start_IT+0x80>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a1f      	ldr	r2, [pc, #124]	; (80076b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d018      	beq.n	800766c <HAL_TIM_Base_Start_IT+0x80>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a1e      	ldr	r2, [pc, #120]	; (80076b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d013      	beq.n	800766c <HAL_TIM_Base_Start_IT+0x80>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a1c      	ldr	r2, [pc, #112]	; (80076bc <HAL_TIM_Base_Start_IT+0xd0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d00e      	beq.n	800766c <HAL_TIM_Base_Start_IT+0x80>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a1b      	ldr	r2, [pc, #108]	; (80076c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d009      	beq.n	800766c <HAL_TIM_Base_Start_IT+0x80>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a19      	ldr	r2, [pc, #100]	; (80076c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d004      	beq.n	800766c <HAL_TIM_Base_Start_IT+0x80>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a18      	ldr	r2, [pc, #96]	; (80076c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d111      	bne.n	8007690 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f003 0307 	and.w	r3, r3, #7
 8007676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b06      	cmp	r3, #6
 800767c:	d010      	beq.n	80076a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f042 0201 	orr.w	r2, r2, #1
 800768c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800768e:	e007      	b.n	80076a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f042 0201 	orr.w	r2, r2, #1
 800769e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3714      	adds	r7, #20
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	40010000 	.word	0x40010000
 80076b4:	40000400 	.word	0x40000400
 80076b8:	40000800 	.word	0x40000800
 80076bc:	40000c00 	.word	0x40000c00
 80076c0:	40010400 	.word	0x40010400
 80076c4:	40014000 	.word	0x40014000
 80076c8:	40001800 	.word	0x40001800

080076cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e041      	b.n	8007762 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d106      	bne.n	80076f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f839 	bl	800776a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3304      	adds	r3, #4
 8007708:	4619      	mov	r1, r3
 800770a:	4610      	mov	r0, r2
 800770c:	f000 fbba 	bl	8007e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007772:	bf00      	nop
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
	...

08007780 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d109      	bne.n	80077a4 <HAL_TIM_PWM_Start+0x24>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b01      	cmp	r3, #1
 800779a:	bf14      	ite	ne
 800779c:	2301      	movne	r3, #1
 800779e:	2300      	moveq	r3, #0
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	e022      	b.n	80077ea <HAL_TIM_PWM_Start+0x6a>
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	d109      	bne.n	80077be <HAL_TIM_PWM_Start+0x3e>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	bf14      	ite	ne
 80077b6:	2301      	movne	r3, #1
 80077b8:	2300      	moveq	r3, #0
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	e015      	b.n	80077ea <HAL_TIM_PWM_Start+0x6a>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d109      	bne.n	80077d8 <HAL_TIM_PWM_Start+0x58>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	bf14      	ite	ne
 80077d0:	2301      	movne	r3, #1
 80077d2:	2300      	moveq	r3, #0
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	e008      	b.n	80077ea <HAL_TIM_PWM_Start+0x6a>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	bf14      	ite	ne
 80077e4:	2301      	movne	r3, #1
 80077e6:	2300      	moveq	r3, #0
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e07c      	b.n	80078ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d104      	bne.n	8007802 <HAL_TIM_PWM_Start+0x82>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2202      	movs	r2, #2
 80077fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007800:	e013      	b.n	800782a <HAL_TIM_PWM_Start+0xaa>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b04      	cmp	r3, #4
 8007806:	d104      	bne.n	8007812 <HAL_TIM_PWM_Start+0x92>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2202      	movs	r2, #2
 800780c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007810:	e00b      	b.n	800782a <HAL_TIM_PWM_Start+0xaa>
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	2b08      	cmp	r3, #8
 8007816:	d104      	bne.n	8007822 <HAL_TIM_PWM_Start+0xa2>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007820:	e003      	b.n	800782a <HAL_TIM_PWM_Start+0xaa>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2202      	movs	r2, #2
 8007826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2201      	movs	r2, #1
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fe10 	bl	8008458 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a2d      	ldr	r2, [pc, #180]	; (80078f4 <HAL_TIM_PWM_Start+0x174>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d004      	beq.n	800784c <HAL_TIM_PWM_Start+0xcc>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a2c      	ldr	r2, [pc, #176]	; (80078f8 <HAL_TIM_PWM_Start+0x178>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d101      	bne.n	8007850 <HAL_TIM_PWM_Start+0xd0>
 800784c:	2301      	movs	r3, #1
 800784e:	e000      	b.n	8007852 <HAL_TIM_PWM_Start+0xd2>
 8007850:	2300      	movs	r3, #0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d007      	beq.n	8007866 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007864:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a22      	ldr	r2, [pc, #136]	; (80078f4 <HAL_TIM_PWM_Start+0x174>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d022      	beq.n	80078b6 <HAL_TIM_PWM_Start+0x136>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007878:	d01d      	beq.n	80078b6 <HAL_TIM_PWM_Start+0x136>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a1f      	ldr	r2, [pc, #124]	; (80078fc <HAL_TIM_PWM_Start+0x17c>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d018      	beq.n	80078b6 <HAL_TIM_PWM_Start+0x136>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a1d      	ldr	r2, [pc, #116]	; (8007900 <HAL_TIM_PWM_Start+0x180>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d013      	beq.n	80078b6 <HAL_TIM_PWM_Start+0x136>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a1c      	ldr	r2, [pc, #112]	; (8007904 <HAL_TIM_PWM_Start+0x184>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d00e      	beq.n	80078b6 <HAL_TIM_PWM_Start+0x136>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a16      	ldr	r2, [pc, #88]	; (80078f8 <HAL_TIM_PWM_Start+0x178>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d009      	beq.n	80078b6 <HAL_TIM_PWM_Start+0x136>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a18      	ldr	r2, [pc, #96]	; (8007908 <HAL_TIM_PWM_Start+0x188>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d004      	beq.n	80078b6 <HAL_TIM_PWM_Start+0x136>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a16      	ldr	r2, [pc, #88]	; (800790c <HAL_TIM_PWM_Start+0x18c>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d111      	bne.n	80078da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f003 0307 	and.w	r3, r3, #7
 80078c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2b06      	cmp	r3, #6
 80078c6:	d010      	beq.n	80078ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f042 0201 	orr.w	r2, r2, #1
 80078d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d8:	e007      	b.n	80078ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f042 0201 	orr.w	r2, r2, #1
 80078e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	40010000 	.word	0x40010000
 80078f8:	40010400 	.word	0x40010400
 80078fc:	40000400 	.word	0x40000400
 8007900:	40000800 	.word	0x40000800
 8007904:	40000c00 	.word	0x40000c00
 8007908:	40014000 	.word	0x40014000
 800790c:	40001800 	.word	0x40001800

08007910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b02      	cmp	r3, #2
 8007924:	d122      	bne.n	800796c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	f003 0302 	and.w	r3, r3, #2
 8007930:	2b02      	cmp	r3, #2
 8007932:	d11b      	bne.n	800796c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f06f 0202 	mvn.w	r2, #2
 800793c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	f003 0303 	and.w	r3, r3, #3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fa77 	bl	8007e46 <HAL_TIM_IC_CaptureCallback>
 8007958:	e005      	b.n	8007966 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fa69 	bl	8007e32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fa7a 	bl	8007e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	f003 0304 	and.w	r3, r3, #4
 8007976:	2b04      	cmp	r3, #4
 8007978:	d122      	bne.n	80079c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	f003 0304 	and.w	r3, r3, #4
 8007984:	2b04      	cmp	r3, #4
 8007986:	d11b      	bne.n	80079c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f06f 0204 	mvn.w	r2, #4
 8007990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2202      	movs	r2, #2
 8007996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fa4d 	bl	8007e46 <HAL_TIM_IC_CaptureCallback>
 80079ac:	e005      	b.n	80079ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fa3f 	bl	8007e32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fa50 	bl	8007e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	f003 0308 	and.w	r3, r3, #8
 80079ca:	2b08      	cmp	r3, #8
 80079cc:	d122      	bne.n	8007a14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	f003 0308 	and.w	r3, r3, #8
 80079d8:	2b08      	cmp	r3, #8
 80079da:	d11b      	bne.n	8007a14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f06f 0208 	mvn.w	r2, #8
 80079e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2204      	movs	r2, #4
 80079ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	f003 0303 	and.w	r3, r3, #3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fa23 	bl	8007e46 <HAL_TIM_IC_CaptureCallback>
 8007a00:	e005      	b.n	8007a0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fa15 	bl	8007e32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fa26 	bl	8007e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	f003 0310 	and.w	r3, r3, #16
 8007a1e:	2b10      	cmp	r3, #16
 8007a20:	d122      	bne.n	8007a68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f003 0310 	and.w	r3, r3, #16
 8007a2c:	2b10      	cmp	r3, #16
 8007a2e:	d11b      	bne.n	8007a68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f06f 0210 	mvn.w	r2, #16
 8007a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2208      	movs	r2, #8
 8007a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f9f9 	bl	8007e46 <HAL_TIM_IC_CaptureCallback>
 8007a54:	e005      	b.n	8007a62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f9eb 	bl	8007e32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f9fc 	bl	8007e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d10e      	bne.n	8007a94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d107      	bne.n	8007a94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f06f 0201 	mvn.w	r2, #1
 8007a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7fa ff18 	bl	80028c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a9e:	2b80      	cmp	r3, #128	; 0x80
 8007aa0:	d10e      	bne.n	8007ac0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aac:	2b80      	cmp	r3, #128	; 0x80
 8007aae:	d107      	bne.n	8007ac0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fd78 	bl	80085b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aca:	2b40      	cmp	r3, #64	; 0x40
 8007acc:	d10e      	bne.n	8007aec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad8:	2b40      	cmp	r3, #64	; 0x40
 8007ada:	d107      	bne.n	8007aec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f9c1 	bl	8007e6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	f003 0320 	and.w	r3, r3, #32
 8007af6:	2b20      	cmp	r3, #32
 8007af8:	d10e      	bne.n	8007b18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f003 0320 	and.w	r3, r3, #32
 8007b04:	2b20      	cmp	r3, #32
 8007b06:	d107      	bne.n	8007b18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f06f 0220 	mvn.w	r2, #32
 8007b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fd42 	bl	800859c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b18:	bf00      	nop
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d101      	bne.n	8007b3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e0ae      	b.n	8007c9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2b0c      	cmp	r3, #12
 8007b4a:	f200 809f 	bhi.w	8007c8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007b4e:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007b89 	.word	0x08007b89
 8007b58:	08007c8d 	.word	0x08007c8d
 8007b5c:	08007c8d 	.word	0x08007c8d
 8007b60:	08007c8d 	.word	0x08007c8d
 8007b64:	08007bc9 	.word	0x08007bc9
 8007b68:	08007c8d 	.word	0x08007c8d
 8007b6c:	08007c8d 	.word	0x08007c8d
 8007b70:	08007c8d 	.word	0x08007c8d
 8007b74:	08007c0b 	.word	0x08007c0b
 8007b78:	08007c8d 	.word	0x08007c8d
 8007b7c:	08007c8d 	.word	0x08007c8d
 8007b80:	08007c8d 	.word	0x08007c8d
 8007b84:	08007c4b 	.word	0x08007c4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68b9      	ldr	r1, [r7, #8]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 fa18 	bl	8007fc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	699a      	ldr	r2, [r3, #24]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f042 0208 	orr.w	r2, r2, #8
 8007ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	699a      	ldr	r2, [r3, #24]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 0204 	bic.w	r2, r2, #4
 8007bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6999      	ldr	r1, [r3, #24]
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	691a      	ldr	r2, [r3, #16]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	619a      	str	r2, [r3, #24]
      break;
 8007bc6:	e064      	b.n	8007c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68b9      	ldr	r1, [r7, #8]
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 fa68 	bl	80080a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	699a      	ldr	r2, [r3, #24]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	699a      	ldr	r2, [r3, #24]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6999      	ldr	r1, [r3, #24]
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	021a      	lsls	r2, r3, #8
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	430a      	orrs	r2, r1
 8007c06:	619a      	str	r2, [r3, #24]
      break;
 8007c08:	e043      	b.n	8007c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68b9      	ldr	r1, [r7, #8]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f000 fabd 	bl	8008190 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	69da      	ldr	r2, [r3, #28]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f042 0208 	orr.w	r2, r2, #8
 8007c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	69da      	ldr	r2, [r3, #28]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 0204 	bic.w	r2, r2, #4
 8007c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	69d9      	ldr	r1, [r3, #28]
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	691a      	ldr	r2, [r3, #16]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	61da      	str	r2, [r3, #28]
      break;
 8007c48:	e023      	b.n	8007c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68b9      	ldr	r1, [r7, #8]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f000 fb11 	bl	8008278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	69da      	ldr	r2, [r3, #28]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	69da      	ldr	r2, [r3, #28]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	69d9      	ldr	r1, [r3, #28]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	021a      	lsls	r2, r3, #8
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	61da      	str	r2, [r3, #28]
      break;
 8007c8a:	e002      	b.n	8007c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3718      	adds	r7, #24
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d101      	bne.n	8007cc0 <HAL_TIM_ConfigClockSource+0x1c>
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	e0b4      	b.n	8007e2a <HAL_TIM_ConfigClockSource+0x186>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ce6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cf8:	d03e      	beq.n	8007d78 <HAL_TIM_ConfigClockSource+0xd4>
 8007cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cfe:	f200 8087 	bhi.w	8007e10 <HAL_TIM_ConfigClockSource+0x16c>
 8007d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d06:	f000 8086 	beq.w	8007e16 <HAL_TIM_ConfigClockSource+0x172>
 8007d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d0e:	d87f      	bhi.n	8007e10 <HAL_TIM_ConfigClockSource+0x16c>
 8007d10:	2b70      	cmp	r3, #112	; 0x70
 8007d12:	d01a      	beq.n	8007d4a <HAL_TIM_ConfigClockSource+0xa6>
 8007d14:	2b70      	cmp	r3, #112	; 0x70
 8007d16:	d87b      	bhi.n	8007e10 <HAL_TIM_ConfigClockSource+0x16c>
 8007d18:	2b60      	cmp	r3, #96	; 0x60
 8007d1a:	d050      	beq.n	8007dbe <HAL_TIM_ConfigClockSource+0x11a>
 8007d1c:	2b60      	cmp	r3, #96	; 0x60
 8007d1e:	d877      	bhi.n	8007e10 <HAL_TIM_ConfigClockSource+0x16c>
 8007d20:	2b50      	cmp	r3, #80	; 0x50
 8007d22:	d03c      	beq.n	8007d9e <HAL_TIM_ConfigClockSource+0xfa>
 8007d24:	2b50      	cmp	r3, #80	; 0x50
 8007d26:	d873      	bhi.n	8007e10 <HAL_TIM_ConfigClockSource+0x16c>
 8007d28:	2b40      	cmp	r3, #64	; 0x40
 8007d2a:	d058      	beq.n	8007dde <HAL_TIM_ConfigClockSource+0x13a>
 8007d2c:	2b40      	cmp	r3, #64	; 0x40
 8007d2e:	d86f      	bhi.n	8007e10 <HAL_TIM_ConfigClockSource+0x16c>
 8007d30:	2b30      	cmp	r3, #48	; 0x30
 8007d32:	d064      	beq.n	8007dfe <HAL_TIM_ConfigClockSource+0x15a>
 8007d34:	2b30      	cmp	r3, #48	; 0x30
 8007d36:	d86b      	bhi.n	8007e10 <HAL_TIM_ConfigClockSource+0x16c>
 8007d38:	2b20      	cmp	r3, #32
 8007d3a:	d060      	beq.n	8007dfe <HAL_TIM_ConfigClockSource+0x15a>
 8007d3c:	2b20      	cmp	r3, #32
 8007d3e:	d867      	bhi.n	8007e10 <HAL_TIM_ConfigClockSource+0x16c>
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d05c      	beq.n	8007dfe <HAL_TIM_ConfigClockSource+0x15a>
 8007d44:	2b10      	cmp	r3, #16
 8007d46:	d05a      	beq.n	8007dfe <HAL_TIM_ConfigClockSource+0x15a>
 8007d48:	e062      	b.n	8007e10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6818      	ldr	r0, [r3, #0]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	6899      	ldr	r1, [r3, #8]
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	f000 fb5d 	bl	8008418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	609a      	str	r2, [r3, #8]
      break;
 8007d76:	e04f      	b.n	8007e18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6818      	ldr	r0, [r3, #0]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	6899      	ldr	r1, [r3, #8]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	f000 fb46 	bl	8008418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689a      	ldr	r2, [r3, #8]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d9a:	609a      	str	r2, [r3, #8]
      break;
 8007d9c:	e03c      	b.n	8007e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6818      	ldr	r0, [r3, #0]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	6859      	ldr	r1, [r3, #4]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	461a      	mov	r2, r3
 8007dac:	f000 faba 	bl	8008324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2150      	movs	r1, #80	; 0x50
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 fb13 	bl	80083e2 <TIM_ITRx_SetConfig>
      break;
 8007dbc:	e02c      	b.n	8007e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6818      	ldr	r0, [r3, #0]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	6859      	ldr	r1, [r3, #4]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f000 fad9 	bl	8008382 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2160      	movs	r1, #96	; 0x60
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f000 fb03 	bl	80083e2 <TIM_ITRx_SetConfig>
      break;
 8007ddc:	e01c      	b.n	8007e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6818      	ldr	r0, [r3, #0]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	6859      	ldr	r1, [r3, #4]
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	461a      	mov	r2, r3
 8007dec:	f000 fa9a 	bl	8008324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2140      	movs	r1, #64	; 0x40
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 faf3 	bl	80083e2 <TIM_ITRx_SetConfig>
      break;
 8007dfc:	e00c      	b.n	8007e18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4619      	mov	r1, r3
 8007e08:	4610      	mov	r0, r2
 8007e0a:	f000 faea 	bl	80083e2 <TIM_ITRx_SetConfig>
      break;
 8007e0e:	e003      	b.n	8007e18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	73fb      	strb	r3, [r7, #15]
      break;
 8007e14:	e000      	b.n	8007e18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e3a:	bf00      	nop
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b083      	sub	sp, #12
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e4e:	bf00      	nop
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b083      	sub	sp, #12
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e62:	bf00      	nop
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e76:	bf00      	nop
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
	...

08007e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a40      	ldr	r2, [pc, #256]	; (8007f98 <TIM_Base_SetConfig+0x114>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d013      	beq.n	8007ec4 <TIM_Base_SetConfig+0x40>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ea2:	d00f      	beq.n	8007ec4 <TIM_Base_SetConfig+0x40>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a3d      	ldr	r2, [pc, #244]	; (8007f9c <TIM_Base_SetConfig+0x118>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d00b      	beq.n	8007ec4 <TIM_Base_SetConfig+0x40>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a3c      	ldr	r2, [pc, #240]	; (8007fa0 <TIM_Base_SetConfig+0x11c>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d007      	beq.n	8007ec4 <TIM_Base_SetConfig+0x40>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a3b      	ldr	r2, [pc, #236]	; (8007fa4 <TIM_Base_SetConfig+0x120>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d003      	beq.n	8007ec4 <TIM_Base_SetConfig+0x40>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a3a      	ldr	r2, [pc, #232]	; (8007fa8 <TIM_Base_SetConfig+0x124>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d108      	bne.n	8007ed6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a2f      	ldr	r2, [pc, #188]	; (8007f98 <TIM_Base_SetConfig+0x114>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d02b      	beq.n	8007f36 <TIM_Base_SetConfig+0xb2>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ee4:	d027      	beq.n	8007f36 <TIM_Base_SetConfig+0xb2>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a2c      	ldr	r2, [pc, #176]	; (8007f9c <TIM_Base_SetConfig+0x118>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d023      	beq.n	8007f36 <TIM_Base_SetConfig+0xb2>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a2b      	ldr	r2, [pc, #172]	; (8007fa0 <TIM_Base_SetConfig+0x11c>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d01f      	beq.n	8007f36 <TIM_Base_SetConfig+0xb2>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a2a      	ldr	r2, [pc, #168]	; (8007fa4 <TIM_Base_SetConfig+0x120>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d01b      	beq.n	8007f36 <TIM_Base_SetConfig+0xb2>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a29      	ldr	r2, [pc, #164]	; (8007fa8 <TIM_Base_SetConfig+0x124>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d017      	beq.n	8007f36 <TIM_Base_SetConfig+0xb2>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a28      	ldr	r2, [pc, #160]	; (8007fac <TIM_Base_SetConfig+0x128>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d013      	beq.n	8007f36 <TIM_Base_SetConfig+0xb2>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a27      	ldr	r2, [pc, #156]	; (8007fb0 <TIM_Base_SetConfig+0x12c>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d00f      	beq.n	8007f36 <TIM_Base_SetConfig+0xb2>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a26      	ldr	r2, [pc, #152]	; (8007fb4 <TIM_Base_SetConfig+0x130>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d00b      	beq.n	8007f36 <TIM_Base_SetConfig+0xb2>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a25      	ldr	r2, [pc, #148]	; (8007fb8 <TIM_Base_SetConfig+0x134>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d007      	beq.n	8007f36 <TIM_Base_SetConfig+0xb2>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a24      	ldr	r2, [pc, #144]	; (8007fbc <TIM_Base_SetConfig+0x138>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d003      	beq.n	8007f36 <TIM_Base_SetConfig+0xb2>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a23      	ldr	r2, [pc, #140]	; (8007fc0 <TIM_Base_SetConfig+0x13c>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d108      	bne.n	8007f48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	689a      	ldr	r2, [r3, #8]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a0a      	ldr	r2, [pc, #40]	; (8007f98 <TIM_Base_SetConfig+0x114>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d003      	beq.n	8007f7c <TIM_Base_SetConfig+0xf8>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a0c      	ldr	r2, [pc, #48]	; (8007fa8 <TIM_Base_SetConfig+0x124>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d103      	bne.n	8007f84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	691a      	ldr	r2, [r3, #16]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	615a      	str	r2, [r3, #20]
}
 8007f8a:	bf00      	nop
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	40010000 	.word	0x40010000
 8007f9c:	40000400 	.word	0x40000400
 8007fa0:	40000800 	.word	0x40000800
 8007fa4:	40000c00 	.word	0x40000c00
 8007fa8:	40010400 	.word	0x40010400
 8007fac:	40014000 	.word	0x40014000
 8007fb0:	40014400 	.word	0x40014400
 8007fb4:	40014800 	.word	0x40014800
 8007fb8:	40001800 	.word	0x40001800
 8007fbc:	40001c00 	.word	0x40001c00
 8007fc0:	40002000 	.word	0x40002000

08007fc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	f023 0201 	bic.w	r2, r3, #1
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f023 0303 	bic.w	r3, r3, #3
 8007ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	4313      	orrs	r3, r2
 8008004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f023 0302 	bic.w	r3, r3, #2
 800800c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	4313      	orrs	r3, r2
 8008016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a20      	ldr	r2, [pc, #128]	; (800809c <TIM_OC1_SetConfig+0xd8>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d003      	beq.n	8008028 <TIM_OC1_SetConfig+0x64>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a1f      	ldr	r2, [pc, #124]	; (80080a0 <TIM_OC1_SetConfig+0xdc>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d10c      	bne.n	8008042 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f023 0308 	bic.w	r3, r3, #8
 800802e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	697a      	ldr	r2, [r7, #20]
 8008036:	4313      	orrs	r3, r2
 8008038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f023 0304 	bic.w	r3, r3, #4
 8008040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a15      	ldr	r2, [pc, #84]	; (800809c <TIM_OC1_SetConfig+0xd8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d003      	beq.n	8008052 <TIM_OC1_SetConfig+0x8e>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a14      	ldr	r2, [pc, #80]	; (80080a0 <TIM_OC1_SetConfig+0xdc>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d111      	bne.n	8008076 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	4313      	orrs	r3, r2
 800806a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	4313      	orrs	r3, r2
 8008074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	685a      	ldr	r2, [r3, #4]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	697a      	ldr	r2, [r7, #20]
 800808e:	621a      	str	r2, [r3, #32]
}
 8008090:	bf00      	nop
 8008092:	371c      	adds	r7, #28
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	40010000 	.word	0x40010000
 80080a0:	40010400 	.word	0x40010400

080080a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b087      	sub	sp, #28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	f023 0210 	bic.w	r2, r3, #16
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	021b      	lsls	r3, r3, #8
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f023 0320 	bic.w	r3, r3, #32
 80080ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	011b      	lsls	r3, r3, #4
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a22      	ldr	r2, [pc, #136]	; (8008188 <TIM_OC2_SetConfig+0xe4>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d003      	beq.n	800810c <TIM_OC2_SetConfig+0x68>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a21      	ldr	r2, [pc, #132]	; (800818c <TIM_OC2_SetConfig+0xe8>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d10d      	bne.n	8008128 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	011b      	lsls	r3, r3, #4
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	4313      	orrs	r3, r2
 800811e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008126:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a17      	ldr	r2, [pc, #92]	; (8008188 <TIM_OC2_SetConfig+0xe4>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d003      	beq.n	8008138 <TIM_OC2_SetConfig+0x94>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a16      	ldr	r2, [pc, #88]	; (800818c <TIM_OC2_SetConfig+0xe8>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d113      	bne.n	8008160 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800813e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008146:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	4313      	orrs	r3, r2
 8008152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	4313      	orrs	r3, r2
 800815e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685a      	ldr	r2, [r3, #4]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	621a      	str	r2, [r3, #32]
}
 800817a:	bf00      	nop
 800817c:	371c      	adds	r7, #28
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	40010000 	.word	0x40010000
 800818c:	40010400 	.word	0x40010400

08008190 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008190:	b480      	push	{r7}
 8008192:	b087      	sub	sp, #28
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f023 0303 	bic.w	r3, r3, #3
 80081c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	021b      	lsls	r3, r3, #8
 80081e0:	697a      	ldr	r2, [r7, #20]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a21      	ldr	r2, [pc, #132]	; (8008270 <TIM_OC3_SetConfig+0xe0>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d003      	beq.n	80081f6 <TIM_OC3_SetConfig+0x66>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a20      	ldr	r2, [pc, #128]	; (8008274 <TIM_OC3_SetConfig+0xe4>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d10d      	bne.n	8008212 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	021b      	lsls	r3, r3, #8
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	4313      	orrs	r3, r2
 8008208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a16      	ldr	r2, [pc, #88]	; (8008270 <TIM_OC3_SetConfig+0xe0>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d003      	beq.n	8008222 <TIM_OC3_SetConfig+0x92>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a15      	ldr	r2, [pc, #84]	; (8008274 <TIM_OC3_SetConfig+0xe4>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d113      	bne.n	800824a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	011b      	lsls	r3, r3, #4
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	4313      	orrs	r3, r2
 800823c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	011b      	lsls	r3, r3, #4
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	4313      	orrs	r3, r2
 8008248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	621a      	str	r2, [r3, #32]
}
 8008264:	bf00      	nop
 8008266:	371c      	adds	r7, #28
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr
 8008270:	40010000 	.word	0x40010000
 8008274:	40010400 	.word	0x40010400

08008278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	69db      	ldr	r3, [r3, #28]
 800829e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	021b      	lsls	r3, r3, #8
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	031b      	lsls	r3, r3, #12
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a12      	ldr	r2, [pc, #72]	; (800831c <TIM_OC4_SetConfig+0xa4>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d003      	beq.n	80082e0 <TIM_OC4_SetConfig+0x68>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a11      	ldr	r2, [pc, #68]	; (8008320 <TIM_OC4_SetConfig+0xa8>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d109      	bne.n	80082f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	019b      	lsls	r3, r3, #6
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	685a      	ldr	r2, [r3, #4]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	621a      	str	r2, [r3, #32]
}
 800830e:	bf00      	nop
 8008310:	371c      	adds	r7, #28
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	40010000 	.word	0x40010000
 8008320:	40010400 	.word	0x40010400

08008324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008324:	b480      	push	{r7}
 8008326:	b087      	sub	sp, #28
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6a1b      	ldr	r3, [r3, #32]
 8008334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	f023 0201 	bic.w	r2, r3, #1
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800834e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	011b      	lsls	r3, r3, #4
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	4313      	orrs	r3, r2
 8008358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	f023 030a 	bic.w	r3, r3, #10
 8008360:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	4313      	orrs	r3, r2
 8008368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	621a      	str	r2, [r3, #32]
}
 8008376:	bf00      	nop
 8008378:	371c      	adds	r7, #28
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008382:	b480      	push	{r7}
 8008384:	b087      	sub	sp, #28
 8008386:	af00      	add	r7, sp, #0
 8008388:	60f8      	str	r0, [r7, #12]
 800838a:	60b9      	str	r1, [r7, #8]
 800838c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	f023 0210 	bic.w	r2, r3, #16
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6a1b      	ldr	r3, [r3, #32]
 80083a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	031b      	lsls	r3, r3, #12
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	011b      	lsls	r3, r3, #4
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	697a      	ldr	r2, [r7, #20]
 80083ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	621a      	str	r2, [r3, #32]
}
 80083d6:	bf00      	nop
 80083d8:	371c      	adds	r7, #28
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b085      	sub	sp, #20
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083fa:	683a      	ldr	r2, [r7, #0]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	4313      	orrs	r3, r2
 8008400:	f043 0307 	orr.w	r3, r3, #7
 8008404:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	609a      	str	r2, [r3, #8]
}
 800840c:	bf00      	nop
 800840e:	3714      	adds	r7, #20
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008418:	b480      	push	{r7}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
 8008424:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008432:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	021a      	lsls	r2, r3, #8
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	431a      	orrs	r2, r3
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	4313      	orrs	r3, r2
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	4313      	orrs	r3, r2
 8008444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	609a      	str	r2, [r3, #8]
}
 800844c:	bf00      	nop
 800844e:	371c      	adds	r7, #28
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	f003 031f 	and.w	r3, r3, #31
 800846a:	2201      	movs	r2, #1
 800846c:	fa02 f303 	lsl.w	r3, r2, r3
 8008470:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6a1a      	ldr	r2, [r3, #32]
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	43db      	mvns	r3, r3
 800847a:	401a      	ands	r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6a1a      	ldr	r2, [r3, #32]
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f003 031f 	and.w	r3, r3, #31
 800848a:	6879      	ldr	r1, [r7, #4]
 800848c:	fa01 f303 	lsl.w	r3, r1, r3
 8008490:	431a      	orrs	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	621a      	str	r2, [r3, #32]
}
 8008496:	bf00      	nop
 8008498:	371c      	adds	r7, #28
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
	...

080084a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d101      	bne.n	80084bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084b8:	2302      	movs	r3, #2
 80084ba:	e05a      	b.n	8008572 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2202      	movs	r2, #2
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a21      	ldr	r2, [pc, #132]	; (8008580 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d022      	beq.n	8008546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008508:	d01d      	beq.n	8008546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a1d      	ldr	r2, [pc, #116]	; (8008584 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d018      	beq.n	8008546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a1b      	ldr	r2, [pc, #108]	; (8008588 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d013      	beq.n	8008546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a1a      	ldr	r2, [pc, #104]	; (800858c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d00e      	beq.n	8008546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a18      	ldr	r2, [pc, #96]	; (8008590 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d009      	beq.n	8008546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a17      	ldr	r2, [pc, #92]	; (8008594 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d004      	beq.n	8008546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a15      	ldr	r2, [pc, #84]	; (8008598 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d10c      	bne.n	8008560 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800854c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	4313      	orrs	r3, r2
 8008556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	40010000 	.word	0x40010000
 8008584:	40000400 	.word	0x40000400
 8008588:	40000800 	.word	0x40000800
 800858c:	40000c00 	.word	0x40000c00
 8008590:	40010400 	.word	0x40010400
 8008594:	40014000 	.word	0x40014000
 8008598:	40001800 	.word	0x40001800

0800859c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d101      	bne.n	80085d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e03f      	b.n	8008656 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d106      	bne.n	80085f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7f9 ff1a 	bl	8002424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2224      	movs	r2, #36	; 0x24
 80085f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68da      	ldr	r2, [r3, #12]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008606:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fddb 	bl	80091c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	691a      	ldr	r2, [r3, #16]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800861c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	695a      	ldr	r2, [r3, #20]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800862c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68da      	ldr	r2, [r3, #12]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800863c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2220      	movs	r2, #32
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2220      	movs	r2, #32
 8008650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b08a      	sub	sp, #40	; 0x28
 8008662:	af02      	add	r7, sp, #8
 8008664:	60f8      	str	r0, [r7, #12]
 8008666:	60b9      	str	r1, [r7, #8]
 8008668:	603b      	str	r3, [r7, #0]
 800866a:	4613      	mov	r3, r2
 800866c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800866e:	2300      	movs	r3, #0
 8008670:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b20      	cmp	r3, #32
 800867c:	d17c      	bne.n	8008778 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <HAL_UART_Transmit+0x2c>
 8008684:	88fb      	ldrh	r3, [r7, #6]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e075      	b.n	800877a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008694:	2b01      	cmp	r3, #1
 8008696:	d101      	bne.n	800869c <HAL_UART_Transmit+0x3e>
 8008698:	2302      	movs	r3, #2
 800869a:	e06e      	b.n	800877a <HAL_UART_Transmit+0x11c>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2221      	movs	r2, #33	; 0x21
 80086ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086b2:	f7fa fa33 	bl	8002b1c <HAL_GetTick>
 80086b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	88fa      	ldrh	r2, [r7, #6]
 80086bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	88fa      	ldrh	r2, [r7, #6]
 80086c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086cc:	d108      	bne.n	80086e0 <HAL_UART_Transmit+0x82>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d104      	bne.n	80086e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80086d6:	2300      	movs	r3, #0
 80086d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	61bb      	str	r3, [r7, #24]
 80086de:	e003      	b.n	80086e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086e4:	2300      	movs	r3, #0
 80086e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80086f0:	e02a      	b.n	8008748 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2200      	movs	r2, #0
 80086fa:	2180      	movs	r1, #128	; 0x80
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 fb1f 	bl	8008d40 <UART_WaitOnFlagUntilTimeout>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e036      	b.n	800877a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10b      	bne.n	800872a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	881b      	ldrh	r3, [r3, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008720:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	3302      	adds	r3, #2
 8008726:	61bb      	str	r3, [r7, #24]
 8008728:	e007      	b.n	800873a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	781a      	ldrb	r2, [r3, #0]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	3301      	adds	r3, #1
 8008738:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800873e:	b29b      	uxth	r3, r3
 8008740:	3b01      	subs	r3, #1
 8008742:	b29a      	uxth	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800874c:	b29b      	uxth	r3, r3
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1cf      	bne.n	80086f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	2200      	movs	r2, #0
 800875a:	2140      	movs	r1, #64	; 0x40
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f000 faef 	bl	8008d40 <UART_WaitOnFlagUntilTimeout>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d001      	beq.n	800876c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e006      	b.n	800877a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2220      	movs	r2, #32
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	e000      	b.n	800877a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008778:	2302      	movs	r3, #2
  }
}
 800877a:	4618      	mov	r0, r3
 800877c:	3720      	adds	r7, #32
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b084      	sub	sp, #16
 8008786:	af00      	add	r7, sp, #0
 8008788:	60f8      	str	r0, [r7, #12]
 800878a:	60b9      	str	r1, [r7, #8]
 800878c:	4613      	mov	r3, r2
 800878e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008796:	b2db      	uxtb	r3, r3
 8008798:	2b20      	cmp	r3, #32
 800879a:	d11d      	bne.n	80087d8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d002      	beq.n	80087a8 <HAL_UART_Receive_IT+0x26>
 80087a2:	88fb      	ldrh	r3, [r7, #6]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d101      	bne.n	80087ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	e016      	b.n	80087da <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d101      	bne.n	80087ba <HAL_UART_Receive_IT+0x38>
 80087b6:	2302      	movs	r3, #2
 80087b8:	e00f      	b.n	80087da <HAL_UART_Receive_IT+0x58>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80087c8:	88fb      	ldrh	r3, [r7, #6]
 80087ca:	461a      	mov	r2, r3
 80087cc:	68b9      	ldr	r1, [r7, #8]
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	f000 fb24 	bl	8008e1c <UART_Start_Receive_IT>
 80087d4:	4603      	mov	r3, r0
 80087d6:	e000      	b.n	80087da <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80087d8:	2302      	movs	r3, #2
  }
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
	...

080087e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b0ba      	sub	sp, #232	; 0xe8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800880a:	2300      	movs	r3, #0
 800880c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008810:	2300      	movs	r3, #0
 8008812:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800881a:	f003 030f 	and.w	r3, r3, #15
 800881e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008822:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10f      	bne.n	800884a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800882a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800882e:	f003 0320 	and.w	r3, r3, #32
 8008832:	2b00      	cmp	r3, #0
 8008834:	d009      	beq.n	800884a <HAL_UART_IRQHandler+0x66>
 8008836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800883a:	f003 0320 	and.w	r3, r3, #32
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fc03 	bl	800904e <UART_Receive_IT>
      return;
 8008848:	e256      	b.n	8008cf8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800884a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 80de 	beq.w	8008a10 <HAL_UART_IRQHandler+0x22c>
 8008854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008858:	f003 0301 	and.w	r3, r3, #1
 800885c:	2b00      	cmp	r3, #0
 800885e:	d106      	bne.n	800886e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008864:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 80d1 	beq.w	8008a10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800886e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00b      	beq.n	8008892 <HAL_UART_IRQHandler+0xae>
 800887a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800887e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008882:	2b00      	cmp	r3, #0
 8008884:	d005      	beq.n	8008892 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888a:	f043 0201 	orr.w	r2, r3, #1
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008896:	f003 0304 	and.w	r3, r3, #4
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00b      	beq.n	80088b6 <HAL_UART_IRQHandler+0xd2>
 800889e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d005      	beq.n	80088b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ae:	f043 0202 	orr.w	r2, r3, #2
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ba:	f003 0302 	and.w	r3, r3, #2
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00b      	beq.n	80088da <HAL_UART_IRQHandler+0xf6>
 80088c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d005      	beq.n	80088da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d2:	f043 0204 	orr.w	r2, r3, #4
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80088da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088de:	f003 0308 	and.w	r3, r3, #8
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d011      	beq.n	800890a <HAL_UART_IRQHandler+0x126>
 80088e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088ea:	f003 0320 	and.w	r3, r3, #32
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d105      	bne.n	80088fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80088f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d005      	beq.n	800890a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008902:	f043 0208 	orr.w	r2, r3, #8
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890e:	2b00      	cmp	r3, #0
 8008910:	f000 81ed 	beq.w	8008cee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008918:	f003 0320 	and.w	r3, r3, #32
 800891c:	2b00      	cmp	r3, #0
 800891e:	d008      	beq.n	8008932 <HAL_UART_IRQHandler+0x14e>
 8008920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008924:	f003 0320 	and.w	r3, r3, #32
 8008928:	2b00      	cmp	r3, #0
 800892a:	d002      	beq.n	8008932 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fb8e 	bl	800904e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800893c:	2b40      	cmp	r3, #64	; 0x40
 800893e:	bf0c      	ite	eq
 8008940:	2301      	moveq	r3, #1
 8008942:	2300      	movne	r3, #0
 8008944:	b2db      	uxtb	r3, r3
 8008946:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894e:	f003 0308 	and.w	r3, r3, #8
 8008952:	2b00      	cmp	r3, #0
 8008954:	d103      	bne.n	800895e <HAL_UART_IRQHandler+0x17a>
 8008956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800895a:	2b00      	cmp	r3, #0
 800895c:	d04f      	beq.n	80089fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fa96 	bl	8008e90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800896e:	2b40      	cmp	r3, #64	; 0x40
 8008970:	d141      	bne.n	80089f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3314      	adds	r3, #20
 8008978:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008980:	e853 3f00 	ldrex	r3, [r3]
 8008984:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008988:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800898c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008990:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	3314      	adds	r3, #20
 800899a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800899e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80089a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80089aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80089ae:	e841 2300 	strex	r3, r2, [r1]
 80089b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80089b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1d9      	bne.n	8008972 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d013      	beq.n	80089ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ca:	4a7d      	ldr	r2, [pc, #500]	; (8008bc0 <HAL_UART_IRQHandler+0x3dc>)
 80089cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fa ff48 	bl	8003868 <HAL_DMA_Abort_IT>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d016      	beq.n	8008a0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80089e8:	4610      	mov	r0, r2
 80089ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089ec:	e00e      	b.n	8008a0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f990 	bl	8008d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089f4:	e00a      	b.n	8008a0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f98c 	bl	8008d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089fc:	e006      	b.n	8008a0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f988 	bl	8008d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008a0a:	e170      	b.n	8008cee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a0c:	bf00      	nop
    return;
 8008a0e:	e16e      	b.n	8008cee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	f040 814a 	bne.w	8008cae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a1e:	f003 0310 	and.w	r3, r3, #16
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 8143 	beq.w	8008cae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a2c:	f003 0310 	and.w	r3, r3, #16
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 813c 	beq.w	8008cae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a36:	2300      	movs	r3, #0
 8008a38:	60bb      	str	r3, [r7, #8]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	60bb      	str	r3, [r7, #8]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	60bb      	str	r3, [r7, #8]
 8008a4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a56:	2b40      	cmp	r3, #64	; 0x40
 8008a58:	f040 80b4 	bne.w	8008bc4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f000 8140 	beq.w	8008cf2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	f080 8139 	bcs.w	8008cf2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a92:	f000 8088 	beq.w	8008ba6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	330c      	adds	r3, #12
 8008a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008aa4:	e853 3f00 	ldrex	r3, [r3]
 8008aa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008aac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	330c      	adds	r3, #12
 8008abe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008ac2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008ac6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008ace:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008ad2:	e841 2300 	strex	r3, r2, [r1]
 8008ad6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1d9      	bne.n	8008a96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3314      	adds	r3, #20
 8008ae8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008aec:	e853 3f00 	ldrex	r3, [r3]
 8008af0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008af2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008af4:	f023 0301 	bic.w	r3, r3, #1
 8008af8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3314      	adds	r3, #20
 8008b02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008b0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b12:	e841 2300 	strex	r3, r2, [r1]
 8008b16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1e1      	bne.n	8008ae2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	3314      	adds	r3, #20
 8008b24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3314      	adds	r3, #20
 8008b3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008b42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b4a:	e841 2300 	strex	r3, r2, [r1]
 8008b4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1e3      	bne.n	8008b1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2220      	movs	r2, #32
 8008b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	330c      	adds	r3, #12
 8008b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b6e:	e853 3f00 	ldrex	r3, [r3]
 8008b72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b76:	f023 0310 	bic.w	r3, r3, #16
 8008b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	330c      	adds	r3, #12
 8008b84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008b88:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b90:	e841 2300 	strex	r3, r2, [r1]
 8008b94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1e3      	bne.n	8008b64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7fa fdf1 	bl	8003788 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f8b6 	bl	8008d28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008bbc:	e099      	b.n	8008cf2 <HAL_UART_IRQHandler+0x50e>
 8008bbe:	bf00      	nop
 8008bc0:	08008f57 	.word	0x08008f57
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f000 808b 	beq.w	8008cf6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008be0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 8086 	beq.w	8008cf6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	330c      	adds	r3, #12
 8008bf0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf4:	e853 3f00 	ldrex	r3, [r3]
 8008bf8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	330c      	adds	r3, #12
 8008c0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008c0e:	647a      	str	r2, [r7, #68]	; 0x44
 8008c10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c16:	e841 2300 	strex	r3, r2, [r1]
 8008c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1e3      	bne.n	8008bea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	3314      	adds	r3, #20
 8008c28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	e853 3f00 	ldrex	r3, [r3]
 8008c30:	623b      	str	r3, [r7, #32]
   return(result);
 8008c32:	6a3b      	ldr	r3, [r7, #32]
 8008c34:	f023 0301 	bic.w	r3, r3, #1
 8008c38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	3314      	adds	r3, #20
 8008c42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008c46:	633a      	str	r2, [r7, #48]	; 0x30
 8008c48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c4e:	e841 2300 	strex	r3, r2, [r1]
 8008c52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1e3      	bne.n	8008c22 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2220      	movs	r2, #32
 8008c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	330c      	adds	r3, #12
 8008c6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	e853 3f00 	ldrex	r3, [r3]
 8008c76:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f023 0310 	bic.w	r3, r3, #16
 8008c7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	330c      	adds	r3, #12
 8008c88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008c8c:	61fa      	str	r2, [r7, #28]
 8008c8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c90:	69b9      	ldr	r1, [r7, #24]
 8008c92:	69fa      	ldr	r2, [r7, #28]
 8008c94:	e841 2300 	strex	r3, r2, [r1]
 8008c98:	617b      	str	r3, [r7, #20]
   return(result);
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1e3      	bne.n	8008c68 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ca0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f83e 	bl	8008d28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008cac:	e023      	b.n	8008cf6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d009      	beq.n	8008cce <HAL_UART_IRQHandler+0x4ea>
 8008cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d003      	beq.n	8008cce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f959 	bl	8008f7e <UART_Transmit_IT>
    return;
 8008ccc:	e014      	b.n	8008cf8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00e      	beq.n	8008cf8 <HAL_UART_IRQHandler+0x514>
 8008cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d008      	beq.n	8008cf8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f999 	bl	800901e <UART_EndTransmit_IT>
    return;
 8008cec:	e004      	b.n	8008cf8 <HAL_UART_IRQHandler+0x514>
    return;
 8008cee:	bf00      	nop
 8008cf0:	e002      	b.n	8008cf8 <HAL_UART_IRQHandler+0x514>
      return;
 8008cf2:	bf00      	nop
 8008cf4:	e000      	b.n	8008cf8 <HAL_UART_IRQHandler+0x514>
      return;
 8008cf6:	bf00      	nop
  }
}
 8008cf8:	37e8      	adds	r7, #232	; 0xe8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop

08008d00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	460b      	mov	r3, r1
 8008d32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b090      	sub	sp, #64	; 0x40
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	603b      	str	r3, [r7, #0]
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d50:	e050      	b.n	8008df4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d58:	d04c      	beq.n	8008df4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d007      	beq.n	8008d70 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d60:	f7f9 fedc 	bl	8002b1c <HAL_GetTick>
 8008d64:	4602      	mov	r2, r0
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d241      	bcs.n	8008df4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	330c      	adds	r3, #12
 8008d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7a:	e853 3f00 	ldrex	r3, [r3]
 8008d7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	330c      	adds	r3, #12
 8008d8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d90:	637a      	str	r2, [r7, #52]	; 0x34
 8008d92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d98:	e841 2300 	strex	r3, r2, [r1]
 8008d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1e5      	bne.n	8008d70 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	3314      	adds	r3, #20
 8008daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	e853 3f00 	ldrex	r3, [r3]
 8008db2:	613b      	str	r3, [r7, #16]
   return(result);
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	f023 0301 	bic.w	r3, r3, #1
 8008dba:	63bb      	str	r3, [r7, #56]	; 0x38
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	3314      	adds	r3, #20
 8008dc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dc4:	623a      	str	r2, [r7, #32]
 8008dc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc8:	69f9      	ldr	r1, [r7, #28]
 8008dca:	6a3a      	ldr	r2, [r7, #32]
 8008dcc:	e841 2300 	strex	r3, r2, [r1]
 8008dd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1e5      	bne.n	8008da4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2220      	movs	r2, #32
 8008ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2220      	movs	r2, #32
 8008de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e00f      	b.n	8008e14 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	bf0c      	ite	eq
 8008e04:	2301      	moveq	r3, #1
 8008e06:	2300      	movne	r3, #0
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	79fb      	ldrb	r3, [r7, #7]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d09f      	beq.n	8008d52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3740      	adds	r7, #64	; 0x40
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	4613      	mov	r3, r2
 8008e28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	68ba      	ldr	r2, [r7, #8]
 8008e2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	88fa      	ldrh	r2, [r7, #6]
 8008e34:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	88fa      	ldrh	r2, [r7, #6]
 8008e3a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2222      	movs	r2, #34	; 0x22
 8008e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68da      	ldr	r2, [r3, #12]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e60:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	695a      	ldr	r2, [r3, #20]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f042 0201 	orr.w	r2, r2, #1
 8008e70:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68da      	ldr	r2, [r3, #12]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f042 0220 	orr.w	r2, r2, #32
 8008e80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3714      	adds	r7, #20
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b095      	sub	sp, #84	; 0x54
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	330c      	adds	r3, #12
 8008e9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea2:	e853 3f00 	ldrex	r3, [r3]
 8008ea6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	330c      	adds	r3, #12
 8008eb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008eb8:	643a      	str	r2, [r7, #64]	; 0x40
 8008eba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ebe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ec0:	e841 2300 	strex	r3, r2, [r1]
 8008ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1e5      	bne.n	8008e98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3314      	adds	r3, #20
 8008ed2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	e853 3f00 	ldrex	r3, [r3]
 8008eda:	61fb      	str	r3, [r7, #28]
   return(result);
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	f023 0301 	bic.w	r3, r3, #1
 8008ee2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	3314      	adds	r3, #20
 8008eea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008eec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008eee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ef4:	e841 2300 	strex	r3, r2, [r1]
 8008ef8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d1e5      	bne.n	8008ecc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d119      	bne.n	8008f3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	330c      	adds	r3, #12
 8008f0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	e853 3f00 	ldrex	r3, [r3]
 8008f16:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	f023 0310 	bic.w	r3, r3, #16
 8008f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	330c      	adds	r3, #12
 8008f26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f28:	61ba      	str	r2, [r7, #24]
 8008f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2c:	6979      	ldr	r1, [r7, #20]
 8008f2e:	69ba      	ldr	r2, [r7, #24]
 8008f30:	e841 2300 	strex	r3, r2, [r1]
 8008f34:	613b      	str	r3, [r7, #16]
   return(result);
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e5      	bne.n	8008f08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2220      	movs	r2, #32
 8008f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008f4a:	bf00      	nop
 8008f4c:	3754      	adds	r7, #84	; 0x54
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f7ff fecf 	bl	8008d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f76:	bf00      	nop
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b085      	sub	sp, #20
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	2b21      	cmp	r3, #33	; 0x21
 8008f90:	d13e      	bne.n	8009010 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f9a:	d114      	bne.n	8008fc6 <UART_Transmit_IT+0x48>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d110      	bne.n	8008fc6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a1b      	ldr	r3, [r3, #32]
 8008fa8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	881b      	ldrh	r3, [r3, #0]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fb8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	1c9a      	adds	r2, r3, #2
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	621a      	str	r2, [r3, #32]
 8008fc4:	e008      	b.n	8008fd8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	1c59      	adds	r1, r3, #1
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	6211      	str	r1, [r2, #32]
 8008fd0:	781a      	ldrb	r2, [r3, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d10f      	bne.n	800900c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ffa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68da      	ldr	r2, [r3, #12]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800900a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	e000      	b.n	8009012 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009010:	2302      	movs	r3, #2
  }
}
 8009012:	4618      	mov	r0, r3
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b082      	sub	sp, #8
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68da      	ldr	r2, [r3, #12]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009034:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2220      	movs	r2, #32
 800903a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f7ff fe5e 	bl	8008d00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b08c      	sub	sp, #48	; 0x30
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800905c:	b2db      	uxtb	r3, r3
 800905e:	2b22      	cmp	r3, #34	; 0x22
 8009060:	f040 80ab 	bne.w	80091ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800906c:	d117      	bne.n	800909e <UART_Receive_IT+0x50>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d113      	bne.n	800909e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009076:	2300      	movs	r3, #0
 8009078:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	b29b      	uxth	r3, r3
 8009088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800908c:	b29a      	uxth	r2, r3
 800908e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009090:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009096:	1c9a      	adds	r2, r3, #2
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	629a      	str	r2, [r3, #40]	; 0x28
 800909c:	e026      	b.n	80090ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80090a4:	2300      	movs	r3, #0
 80090a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090b0:	d007      	beq.n	80090c2 <UART_Receive_IT+0x74>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10a      	bne.n	80090d0 <UART_Receive_IT+0x82>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d106      	bne.n	80090d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090cc:	701a      	strb	r2, [r3, #0]
 80090ce:	e008      	b.n	80090e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e6:	1c5a      	adds	r2, r3, #1
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	3b01      	subs	r3, #1
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	4619      	mov	r1, r3
 80090fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d15a      	bne.n	80091b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	68da      	ldr	r2, [r3, #12]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f022 0220 	bic.w	r2, r2, #32
 800910e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68da      	ldr	r2, [r3, #12]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800911e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	695a      	ldr	r2, [r3, #20]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f022 0201 	bic.w	r2, r2, #1
 800912e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2220      	movs	r2, #32
 8009134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913c:	2b01      	cmp	r3, #1
 800913e:	d135      	bne.n	80091ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	330c      	adds	r3, #12
 800914c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	e853 3f00 	ldrex	r3, [r3]
 8009154:	613b      	str	r3, [r7, #16]
   return(result);
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	f023 0310 	bic.w	r3, r3, #16
 800915c:	627b      	str	r3, [r7, #36]	; 0x24
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	330c      	adds	r3, #12
 8009164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009166:	623a      	str	r2, [r7, #32]
 8009168:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916a:	69f9      	ldr	r1, [r7, #28]
 800916c:	6a3a      	ldr	r2, [r7, #32]
 800916e:	e841 2300 	strex	r3, r2, [r1]
 8009172:	61bb      	str	r3, [r7, #24]
   return(result);
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1e5      	bne.n	8009146 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0310 	and.w	r3, r3, #16
 8009184:	2b10      	cmp	r3, #16
 8009186:	d10a      	bne.n	800919e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009188:	2300      	movs	r3, #0
 800918a:	60fb      	str	r3, [r7, #12]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	60fb      	str	r3, [r7, #12]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	60fb      	str	r3, [r7, #12]
 800919c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7ff fdbf 	bl	8008d28 <HAL_UARTEx_RxEventCallback>
 80091aa:	e002      	b.n	80091b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f7f9 fbb1 	bl	8002914 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80091b2:	2300      	movs	r3, #0
 80091b4:	e002      	b.n	80091bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	e000      	b.n	80091bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80091ba:	2302      	movs	r3, #2
  }
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3730      	adds	r7, #48	; 0x30
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c8:	b09f      	sub	sp, #124	; 0x7c
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80091d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091da:	68d9      	ldr	r1, [r3, #12]
 80091dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	ea40 0301 	orr.w	r3, r0, r1
 80091e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80091e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091e8:	689a      	ldr	r2, [r3, #8]
 80091ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	431a      	orrs	r2, r3
 80091f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091f2:	695b      	ldr	r3, [r3, #20]
 80091f4:	431a      	orrs	r2, r3
 80091f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80091fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009208:	f021 010c 	bic.w	r1, r1, #12
 800920c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009212:	430b      	orrs	r3, r1
 8009214:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	695b      	ldr	r3, [r3, #20]
 800921c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009222:	6999      	ldr	r1, [r3, #24]
 8009224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	ea40 0301 	orr.w	r3, r0, r1
 800922c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800922e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	4bc5      	ldr	r3, [pc, #788]	; (8009548 <UART_SetConfig+0x384>)
 8009234:	429a      	cmp	r2, r3
 8009236:	d004      	beq.n	8009242 <UART_SetConfig+0x7e>
 8009238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	4bc3      	ldr	r3, [pc, #780]	; (800954c <UART_SetConfig+0x388>)
 800923e:	429a      	cmp	r2, r3
 8009240:	d103      	bne.n	800924a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009242:	f7fd fa41 	bl	80066c8 <HAL_RCC_GetPCLK2Freq>
 8009246:	6778      	str	r0, [r7, #116]	; 0x74
 8009248:	e002      	b.n	8009250 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800924a:	f7fd fa29 	bl	80066a0 <HAL_RCC_GetPCLK1Freq>
 800924e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009252:	69db      	ldr	r3, [r3, #28]
 8009254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009258:	f040 80b6 	bne.w	80093c8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800925c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800925e:	461c      	mov	r4, r3
 8009260:	f04f 0500 	mov.w	r5, #0
 8009264:	4622      	mov	r2, r4
 8009266:	462b      	mov	r3, r5
 8009268:	1891      	adds	r1, r2, r2
 800926a:	6439      	str	r1, [r7, #64]	; 0x40
 800926c:	415b      	adcs	r3, r3
 800926e:	647b      	str	r3, [r7, #68]	; 0x44
 8009270:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009274:	1912      	adds	r2, r2, r4
 8009276:	eb45 0303 	adc.w	r3, r5, r3
 800927a:	f04f 0000 	mov.w	r0, #0
 800927e:	f04f 0100 	mov.w	r1, #0
 8009282:	00d9      	lsls	r1, r3, #3
 8009284:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009288:	00d0      	lsls	r0, r2, #3
 800928a:	4602      	mov	r2, r0
 800928c:	460b      	mov	r3, r1
 800928e:	1911      	adds	r1, r2, r4
 8009290:	6639      	str	r1, [r7, #96]	; 0x60
 8009292:	416b      	adcs	r3, r5
 8009294:	667b      	str	r3, [r7, #100]	; 0x64
 8009296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	461a      	mov	r2, r3
 800929c:	f04f 0300 	mov.w	r3, #0
 80092a0:	1891      	adds	r1, r2, r2
 80092a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80092a4:	415b      	adcs	r3, r3
 80092a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80092ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80092b0:	f7f7 fcca 	bl	8000c48 <__aeabi_uldivmod>
 80092b4:	4602      	mov	r2, r0
 80092b6:	460b      	mov	r3, r1
 80092b8:	4ba5      	ldr	r3, [pc, #660]	; (8009550 <UART_SetConfig+0x38c>)
 80092ba:	fba3 2302 	umull	r2, r3, r3, r2
 80092be:	095b      	lsrs	r3, r3, #5
 80092c0:	011e      	lsls	r6, r3, #4
 80092c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092c4:	461c      	mov	r4, r3
 80092c6:	f04f 0500 	mov.w	r5, #0
 80092ca:	4622      	mov	r2, r4
 80092cc:	462b      	mov	r3, r5
 80092ce:	1891      	adds	r1, r2, r2
 80092d0:	6339      	str	r1, [r7, #48]	; 0x30
 80092d2:	415b      	adcs	r3, r3
 80092d4:	637b      	str	r3, [r7, #52]	; 0x34
 80092d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80092da:	1912      	adds	r2, r2, r4
 80092dc:	eb45 0303 	adc.w	r3, r5, r3
 80092e0:	f04f 0000 	mov.w	r0, #0
 80092e4:	f04f 0100 	mov.w	r1, #0
 80092e8:	00d9      	lsls	r1, r3, #3
 80092ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80092ee:	00d0      	lsls	r0, r2, #3
 80092f0:	4602      	mov	r2, r0
 80092f2:	460b      	mov	r3, r1
 80092f4:	1911      	adds	r1, r2, r4
 80092f6:	65b9      	str	r1, [r7, #88]	; 0x58
 80092f8:	416b      	adcs	r3, r5
 80092fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	461a      	mov	r2, r3
 8009302:	f04f 0300 	mov.w	r3, #0
 8009306:	1891      	adds	r1, r2, r2
 8009308:	62b9      	str	r1, [r7, #40]	; 0x28
 800930a:	415b      	adcs	r3, r3
 800930c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800930e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009312:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009316:	f7f7 fc97 	bl	8000c48 <__aeabi_uldivmod>
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	4b8c      	ldr	r3, [pc, #560]	; (8009550 <UART_SetConfig+0x38c>)
 8009320:	fba3 1302 	umull	r1, r3, r3, r2
 8009324:	095b      	lsrs	r3, r3, #5
 8009326:	2164      	movs	r1, #100	; 0x64
 8009328:	fb01 f303 	mul.w	r3, r1, r3
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	00db      	lsls	r3, r3, #3
 8009330:	3332      	adds	r3, #50	; 0x32
 8009332:	4a87      	ldr	r2, [pc, #540]	; (8009550 <UART_SetConfig+0x38c>)
 8009334:	fba2 2303 	umull	r2, r3, r2, r3
 8009338:	095b      	lsrs	r3, r3, #5
 800933a:	005b      	lsls	r3, r3, #1
 800933c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009340:	441e      	add	r6, r3
 8009342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009344:	4618      	mov	r0, r3
 8009346:	f04f 0100 	mov.w	r1, #0
 800934a:	4602      	mov	r2, r0
 800934c:	460b      	mov	r3, r1
 800934e:	1894      	adds	r4, r2, r2
 8009350:	623c      	str	r4, [r7, #32]
 8009352:	415b      	adcs	r3, r3
 8009354:	627b      	str	r3, [r7, #36]	; 0x24
 8009356:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800935a:	1812      	adds	r2, r2, r0
 800935c:	eb41 0303 	adc.w	r3, r1, r3
 8009360:	f04f 0400 	mov.w	r4, #0
 8009364:	f04f 0500 	mov.w	r5, #0
 8009368:	00dd      	lsls	r5, r3, #3
 800936a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800936e:	00d4      	lsls	r4, r2, #3
 8009370:	4622      	mov	r2, r4
 8009372:	462b      	mov	r3, r5
 8009374:	1814      	adds	r4, r2, r0
 8009376:	653c      	str	r4, [r7, #80]	; 0x50
 8009378:	414b      	adcs	r3, r1
 800937a:	657b      	str	r3, [r7, #84]	; 0x54
 800937c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	461a      	mov	r2, r3
 8009382:	f04f 0300 	mov.w	r3, #0
 8009386:	1891      	adds	r1, r2, r2
 8009388:	61b9      	str	r1, [r7, #24]
 800938a:	415b      	adcs	r3, r3
 800938c:	61fb      	str	r3, [r7, #28]
 800938e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009392:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009396:	f7f7 fc57 	bl	8000c48 <__aeabi_uldivmod>
 800939a:	4602      	mov	r2, r0
 800939c:	460b      	mov	r3, r1
 800939e:	4b6c      	ldr	r3, [pc, #432]	; (8009550 <UART_SetConfig+0x38c>)
 80093a0:	fba3 1302 	umull	r1, r3, r3, r2
 80093a4:	095b      	lsrs	r3, r3, #5
 80093a6:	2164      	movs	r1, #100	; 0x64
 80093a8:	fb01 f303 	mul.w	r3, r1, r3
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	00db      	lsls	r3, r3, #3
 80093b0:	3332      	adds	r3, #50	; 0x32
 80093b2:	4a67      	ldr	r2, [pc, #412]	; (8009550 <UART_SetConfig+0x38c>)
 80093b4:	fba2 2303 	umull	r2, r3, r2, r3
 80093b8:	095b      	lsrs	r3, r3, #5
 80093ba:	f003 0207 	and.w	r2, r3, #7
 80093be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4432      	add	r2, r6
 80093c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80093c6:	e0b9      	b.n	800953c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093ca:	461c      	mov	r4, r3
 80093cc:	f04f 0500 	mov.w	r5, #0
 80093d0:	4622      	mov	r2, r4
 80093d2:	462b      	mov	r3, r5
 80093d4:	1891      	adds	r1, r2, r2
 80093d6:	6139      	str	r1, [r7, #16]
 80093d8:	415b      	adcs	r3, r3
 80093da:	617b      	str	r3, [r7, #20]
 80093dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80093e0:	1912      	adds	r2, r2, r4
 80093e2:	eb45 0303 	adc.w	r3, r5, r3
 80093e6:	f04f 0000 	mov.w	r0, #0
 80093ea:	f04f 0100 	mov.w	r1, #0
 80093ee:	00d9      	lsls	r1, r3, #3
 80093f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80093f4:	00d0      	lsls	r0, r2, #3
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	eb12 0804 	adds.w	r8, r2, r4
 80093fe:	eb43 0905 	adc.w	r9, r3, r5
 8009402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	4618      	mov	r0, r3
 8009408:	f04f 0100 	mov.w	r1, #0
 800940c:	f04f 0200 	mov.w	r2, #0
 8009410:	f04f 0300 	mov.w	r3, #0
 8009414:	008b      	lsls	r3, r1, #2
 8009416:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800941a:	0082      	lsls	r2, r0, #2
 800941c:	4640      	mov	r0, r8
 800941e:	4649      	mov	r1, r9
 8009420:	f7f7 fc12 	bl	8000c48 <__aeabi_uldivmod>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	4b49      	ldr	r3, [pc, #292]	; (8009550 <UART_SetConfig+0x38c>)
 800942a:	fba3 2302 	umull	r2, r3, r3, r2
 800942e:	095b      	lsrs	r3, r3, #5
 8009430:	011e      	lsls	r6, r3, #4
 8009432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009434:	4618      	mov	r0, r3
 8009436:	f04f 0100 	mov.w	r1, #0
 800943a:	4602      	mov	r2, r0
 800943c:	460b      	mov	r3, r1
 800943e:	1894      	adds	r4, r2, r2
 8009440:	60bc      	str	r4, [r7, #8]
 8009442:	415b      	adcs	r3, r3
 8009444:	60fb      	str	r3, [r7, #12]
 8009446:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800944a:	1812      	adds	r2, r2, r0
 800944c:	eb41 0303 	adc.w	r3, r1, r3
 8009450:	f04f 0400 	mov.w	r4, #0
 8009454:	f04f 0500 	mov.w	r5, #0
 8009458:	00dd      	lsls	r5, r3, #3
 800945a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800945e:	00d4      	lsls	r4, r2, #3
 8009460:	4622      	mov	r2, r4
 8009462:	462b      	mov	r3, r5
 8009464:	1814      	adds	r4, r2, r0
 8009466:	64bc      	str	r4, [r7, #72]	; 0x48
 8009468:	414b      	adcs	r3, r1
 800946a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800946c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	4618      	mov	r0, r3
 8009472:	f04f 0100 	mov.w	r1, #0
 8009476:	f04f 0200 	mov.w	r2, #0
 800947a:	f04f 0300 	mov.w	r3, #0
 800947e:	008b      	lsls	r3, r1, #2
 8009480:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009484:	0082      	lsls	r2, r0, #2
 8009486:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800948a:	f7f7 fbdd 	bl	8000c48 <__aeabi_uldivmod>
 800948e:	4602      	mov	r2, r0
 8009490:	460b      	mov	r3, r1
 8009492:	4b2f      	ldr	r3, [pc, #188]	; (8009550 <UART_SetConfig+0x38c>)
 8009494:	fba3 1302 	umull	r1, r3, r3, r2
 8009498:	095b      	lsrs	r3, r3, #5
 800949a:	2164      	movs	r1, #100	; 0x64
 800949c:	fb01 f303 	mul.w	r3, r1, r3
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	011b      	lsls	r3, r3, #4
 80094a4:	3332      	adds	r3, #50	; 0x32
 80094a6:	4a2a      	ldr	r2, [pc, #168]	; (8009550 <UART_SetConfig+0x38c>)
 80094a8:	fba2 2303 	umull	r2, r3, r2, r3
 80094ac:	095b      	lsrs	r3, r3, #5
 80094ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094b2:	441e      	add	r6, r3
 80094b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094b6:	4618      	mov	r0, r3
 80094b8:	f04f 0100 	mov.w	r1, #0
 80094bc:	4602      	mov	r2, r0
 80094be:	460b      	mov	r3, r1
 80094c0:	1894      	adds	r4, r2, r2
 80094c2:	603c      	str	r4, [r7, #0]
 80094c4:	415b      	adcs	r3, r3
 80094c6:	607b      	str	r3, [r7, #4]
 80094c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094cc:	1812      	adds	r2, r2, r0
 80094ce:	eb41 0303 	adc.w	r3, r1, r3
 80094d2:	f04f 0400 	mov.w	r4, #0
 80094d6:	f04f 0500 	mov.w	r5, #0
 80094da:	00dd      	lsls	r5, r3, #3
 80094dc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80094e0:	00d4      	lsls	r4, r2, #3
 80094e2:	4622      	mov	r2, r4
 80094e4:	462b      	mov	r3, r5
 80094e6:	eb12 0a00 	adds.w	sl, r2, r0
 80094ea:	eb43 0b01 	adc.w	fp, r3, r1
 80094ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	4618      	mov	r0, r3
 80094f4:	f04f 0100 	mov.w	r1, #0
 80094f8:	f04f 0200 	mov.w	r2, #0
 80094fc:	f04f 0300 	mov.w	r3, #0
 8009500:	008b      	lsls	r3, r1, #2
 8009502:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009506:	0082      	lsls	r2, r0, #2
 8009508:	4650      	mov	r0, sl
 800950a:	4659      	mov	r1, fp
 800950c:	f7f7 fb9c 	bl	8000c48 <__aeabi_uldivmod>
 8009510:	4602      	mov	r2, r0
 8009512:	460b      	mov	r3, r1
 8009514:	4b0e      	ldr	r3, [pc, #56]	; (8009550 <UART_SetConfig+0x38c>)
 8009516:	fba3 1302 	umull	r1, r3, r3, r2
 800951a:	095b      	lsrs	r3, r3, #5
 800951c:	2164      	movs	r1, #100	; 0x64
 800951e:	fb01 f303 	mul.w	r3, r1, r3
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	011b      	lsls	r3, r3, #4
 8009526:	3332      	adds	r3, #50	; 0x32
 8009528:	4a09      	ldr	r2, [pc, #36]	; (8009550 <UART_SetConfig+0x38c>)
 800952a:	fba2 2303 	umull	r2, r3, r2, r3
 800952e:	095b      	lsrs	r3, r3, #5
 8009530:	f003 020f 	and.w	r2, r3, #15
 8009534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4432      	add	r2, r6
 800953a:	609a      	str	r2, [r3, #8]
}
 800953c:	bf00      	nop
 800953e:	377c      	adds	r7, #124	; 0x7c
 8009540:	46bd      	mov	sp, r7
 8009542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009546:	bf00      	nop
 8009548:	40011000 	.word	0x40011000
 800954c:	40011400 	.word	0x40011400
 8009550:	51eb851f 	.word	0x51eb851f

08009554 <__errno>:
 8009554:	4b01      	ldr	r3, [pc, #4]	; (800955c <__errno+0x8>)
 8009556:	6818      	ldr	r0, [r3, #0]
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	20000014 	.word	0x20000014

08009560 <__libc_init_array>:
 8009560:	b570      	push	{r4, r5, r6, lr}
 8009562:	4d0d      	ldr	r5, [pc, #52]	; (8009598 <__libc_init_array+0x38>)
 8009564:	4c0d      	ldr	r4, [pc, #52]	; (800959c <__libc_init_array+0x3c>)
 8009566:	1b64      	subs	r4, r4, r5
 8009568:	10a4      	asrs	r4, r4, #2
 800956a:	2600      	movs	r6, #0
 800956c:	42a6      	cmp	r6, r4
 800956e:	d109      	bne.n	8009584 <__libc_init_array+0x24>
 8009570:	4d0b      	ldr	r5, [pc, #44]	; (80095a0 <__libc_init_array+0x40>)
 8009572:	4c0c      	ldr	r4, [pc, #48]	; (80095a4 <__libc_init_array+0x44>)
 8009574:	f002 feb6 	bl	800c2e4 <_init>
 8009578:	1b64      	subs	r4, r4, r5
 800957a:	10a4      	asrs	r4, r4, #2
 800957c:	2600      	movs	r6, #0
 800957e:	42a6      	cmp	r6, r4
 8009580:	d105      	bne.n	800958e <__libc_init_array+0x2e>
 8009582:	bd70      	pop	{r4, r5, r6, pc}
 8009584:	f855 3b04 	ldr.w	r3, [r5], #4
 8009588:	4798      	blx	r3
 800958a:	3601      	adds	r6, #1
 800958c:	e7ee      	b.n	800956c <__libc_init_array+0xc>
 800958e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009592:	4798      	blx	r3
 8009594:	3601      	adds	r6, #1
 8009596:	e7f2      	b.n	800957e <__libc_init_array+0x1e>
 8009598:	0800c75c 	.word	0x0800c75c
 800959c:	0800c75c 	.word	0x0800c75c
 80095a0:	0800c75c 	.word	0x0800c75c
 80095a4:	0800c760 	.word	0x0800c760

080095a8 <memset>:
 80095a8:	4402      	add	r2, r0
 80095aa:	4603      	mov	r3, r0
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d100      	bne.n	80095b2 <memset+0xa>
 80095b0:	4770      	bx	lr
 80095b2:	f803 1b01 	strb.w	r1, [r3], #1
 80095b6:	e7f9      	b.n	80095ac <memset+0x4>

080095b8 <__cvt>:
 80095b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095bc:	ec55 4b10 	vmov	r4, r5, d0
 80095c0:	2d00      	cmp	r5, #0
 80095c2:	460e      	mov	r6, r1
 80095c4:	4619      	mov	r1, r3
 80095c6:	462b      	mov	r3, r5
 80095c8:	bfbb      	ittet	lt
 80095ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80095ce:	461d      	movlt	r5, r3
 80095d0:	2300      	movge	r3, #0
 80095d2:	232d      	movlt	r3, #45	; 0x2d
 80095d4:	700b      	strb	r3, [r1, #0]
 80095d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80095dc:	4691      	mov	r9, r2
 80095de:	f023 0820 	bic.w	r8, r3, #32
 80095e2:	bfbc      	itt	lt
 80095e4:	4622      	movlt	r2, r4
 80095e6:	4614      	movlt	r4, r2
 80095e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095ec:	d005      	beq.n	80095fa <__cvt+0x42>
 80095ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80095f2:	d100      	bne.n	80095f6 <__cvt+0x3e>
 80095f4:	3601      	adds	r6, #1
 80095f6:	2102      	movs	r1, #2
 80095f8:	e000      	b.n	80095fc <__cvt+0x44>
 80095fa:	2103      	movs	r1, #3
 80095fc:	ab03      	add	r3, sp, #12
 80095fe:	9301      	str	r3, [sp, #4]
 8009600:	ab02      	add	r3, sp, #8
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	ec45 4b10 	vmov	d0, r4, r5
 8009608:	4653      	mov	r3, sl
 800960a:	4632      	mov	r2, r6
 800960c:	f000 fcec 	bl	8009fe8 <_dtoa_r>
 8009610:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009614:	4607      	mov	r7, r0
 8009616:	d102      	bne.n	800961e <__cvt+0x66>
 8009618:	f019 0f01 	tst.w	r9, #1
 800961c:	d022      	beq.n	8009664 <__cvt+0xac>
 800961e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009622:	eb07 0906 	add.w	r9, r7, r6
 8009626:	d110      	bne.n	800964a <__cvt+0x92>
 8009628:	783b      	ldrb	r3, [r7, #0]
 800962a:	2b30      	cmp	r3, #48	; 0x30
 800962c:	d10a      	bne.n	8009644 <__cvt+0x8c>
 800962e:	2200      	movs	r2, #0
 8009630:	2300      	movs	r3, #0
 8009632:	4620      	mov	r0, r4
 8009634:	4629      	mov	r1, r5
 8009636:	f7f7 fa47 	bl	8000ac8 <__aeabi_dcmpeq>
 800963a:	b918      	cbnz	r0, 8009644 <__cvt+0x8c>
 800963c:	f1c6 0601 	rsb	r6, r6, #1
 8009640:	f8ca 6000 	str.w	r6, [sl]
 8009644:	f8da 3000 	ldr.w	r3, [sl]
 8009648:	4499      	add	r9, r3
 800964a:	2200      	movs	r2, #0
 800964c:	2300      	movs	r3, #0
 800964e:	4620      	mov	r0, r4
 8009650:	4629      	mov	r1, r5
 8009652:	f7f7 fa39 	bl	8000ac8 <__aeabi_dcmpeq>
 8009656:	b108      	cbz	r0, 800965c <__cvt+0xa4>
 8009658:	f8cd 900c 	str.w	r9, [sp, #12]
 800965c:	2230      	movs	r2, #48	; 0x30
 800965e:	9b03      	ldr	r3, [sp, #12]
 8009660:	454b      	cmp	r3, r9
 8009662:	d307      	bcc.n	8009674 <__cvt+0xbc>
 8009664:	9b03      	ldr	r3, [sp, #12]
 8009666:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009668:	1bdb      	subs	r3, r3, r7
 800966a:	4638      	mov	r0, r7
 800966c:	6013      	str	r3, [r2, #0]
 800966e:	b004      	add	sp, #16
 8009670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009674:	1c59      	adds	r1, r3, #1
 8009676:	9103      	str	r1, [sp, #12]
 8009678:	701a      	strb	r2, [r3, #0]
 800967a:	e7f0      	b.n	800965e <__cvt+0xa6>

0800967c <__exponent>:
 800967c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800967e:	4603      	mov	r3, r0
 8009680:	2900      	cmp	r1, #0
 8009682:	bfb8      	it	lt
 8009684:	4249      	neglt	r1, r1
 8009686:	f803 2b02 	strb.w	r2, [r3], #2
 800968a:	bfb4      	ite	lt
 800968c:	222d      	movlt	r2, #45	; 0x2d
 800968e:	222b      	movge	r2, #43	; 0x2b
 8009690:	2909      	cmp	r1, #9
 8009692:	7042      	strb	r2, [r0, #1]
 8009694:	dd2a      	ble.n	80096ec <__exponent+0x70>
 8009696:	f10d 0407 	add.w	r4, sp, #7
 800969a:	46a4      	mov	ip, r4
 800969c:	270a      	movs	r7, #10
 800969e:	46a6      	mov	lr, r4
 80096a0:	460a      	mov	r2, r1
 80096a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80096a6:	fb07 1516 	mls	r5, r7, r6, r1
 80096aa:	3530      	adds	r5, #48	; 0x30
 80096ac:	2a63      	cmp	r2, #99	; 0x63
 80096ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80096b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80096b6:	4631      	mov	r1, r6
 80096b8:	dcf1      	bgt.n	800969e <__exponent+0x22>
 80096ba:	3130      	adds	r1, #48	; 0x30
 80096bc:	f1ae 0502 	sub.w	r5, lr, #2
 80096c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80096c4:	1c44      	adds	r4, r0, #1
 80096c6:	4629      	mov	r1, r5
 80096c8:	4561      	cmp	r1, ip
 80096ca:	d30a      	bcc.n	80096e2 <__exponent+0x66>
 80096cc:	f10d 0209 	add.w	r2, sp, #9
 80096d0:	eba2 020e 	sub.w	r2, r2, lr
 80096d4:	4565      	cmp	r5, ip
 80096d6:	bf88      	it	hi
 80096d8:	2200      	movhi	r2, #0
 80096da:	4413      	add	r3, r2
 80096dc:	1a18      	subs	r0, r3, r0
 80096de:	b003      	add	sp, #12
 80096e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80096ea:	e7ed      	b.n	80096c8 <__exponent+0x4c>
 80096ec:	2330      	movs	r3, #48	; 0x30
 80096ee:	3130      	adds	r1, #48	; 0x30
 80096f0:	7083      	strb	r3, [r0, #2]
 80096f2:	70c1      	strb	r1, [r0, #3]
 80096f4:	1d03      	adds	r3, r0, #4
 80096f6:	e7f1      	b.n	80096dc <__exponent+0x60>

080096f8 <_printf_float>:
 80096f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	ed2d 8b02 	vpush	{d8}
 8009700:	b08d      	sub	sp, #52	; 0x34
 8009702:	460c      	mov	r4, r1
 8009704:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009708:	4616      	mov	r6, r2
 800970a:	461f      	mov	r7, r3
 800970c:	4605      	mov	r5, r0
 800970e:	f001 fa57 	bl	800abc0 <_localeconv_r>
 8009712:	f8d0 a000 	ldr.w	sl, [r0]
 8009716:	4650      	mov	r0, sl
 8009718:	f7f6 fd5a 	bl	80001d0 <strlen>
 800971c:	2300      	movs	r3, #0
 800971e:	930a      	str	r3, [sp, #40]	; 0x28
 8009720:	6823      	ldr	r3, [r4, #0]
 8009722:	9305      	str	r3, [sp, #20]
 8009724:	f8d8 3000 	ldr.w	r3, [r8]
 8009728:	f894 b018 	ldrb.w	fp, [r4, #24]
 800972c:	3307      	adds	r3, #7
 800972e:	f023 0307 	bic.w	r3, r3, #7
 8009732:	f103 0208 	add.w	r2, r3, #8
 8009736:	f8c8 2000 	str.w	r2, [r8]
 800973a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009742:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009746:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800974a:	9307      	str	r3, [sp, #28]
 800974c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009750:	ee08 0a10 	vmov	s16, r0
 8009754:	4b9f      	ldr	r3, [pc, #636]	; (80099d4 <_printf_float+0x2dc>)
 8009756:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800975a:	f04f 32ff 	mov.w	r2, #4294967295
 800975e:	f7f7 f9e5 	bl	8000b2c <__aeabi_dcmpun>
 8009762:	bb88      	cbnz	r0, 80097c8 <_printf_float+0xd0>
 8009764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009768:	4b9a      	ldr	r3, [pc, #616]	; (80099d4 <_printf_float+0x2dc>)
 800976a:	f04f 32ff 	mov.w	r2, #4294967295
 800976e:	f7f7 f9bf 	bl	8000af0 <__aeabi_dcmple>
 8009772:	bb48      	cbnz	r0, 80097c8 <_printf_float+0xd0>
 8009774:	2200      	movs	r2, #0
 8009776:	2300      	movs	r3, #0
 8009778:	4640      	mov	r0, r8
 800977a:	4649      	mov	r1, r9
 800977c:	f7f7 f9ae 	bl	8000adc <__aeabi_dcmplt>
 8009780:	b110      	cbz	r0, 8009788 <_printf_float+0x90>
 8009782:	232d      	movs	r3, #45	; 0x2d
 8009784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009788:	4b93      	ldr	r3, [pc, #588]	; (80099d8 <_printf_float+0x2e0>)
 800978a:	4894      	ldr	r0, [pc, #592]	; (80099dc <_printf_float+0x2e4>)
 800978c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009790:	bf94      	ite	ls
 8009792:	4698      	movls	r8, r3
 8009794:	4680      	movhi	r8, r0
 8009796:	2303      	movs	r3, #3
 8009798:	6123      	str	r3, [r4, #16]
 800979a:	9b05      	ldr	r3, [sp, #20]
 800979c:	f023 0204 	bic.w	r2, r3, #4
 80097a0:	6022      	str	r2, [r4, #0]
 80097a2:	f04f 0900 	mov.w	r9, #0
 80097a6:	9700      	str	r7, [sp, #0]
 80097a8:	4633      	mov	r3, r6
 80097aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80097ac:	4621      	mov	r1, r4
 80097ae:	4628      	mov	r0, r5
 80097b0:	f000 f9d8 	bl	8009b64 <_printf_common>
 80097b4:	3001      	adds	r0, #1
 80097b6:	f040 8090 	bne.w	80098da <_printf_float+0x1e2>
 80097ba:	f04f 30ff 	mov.w	r0, #4294967295
 80097be:	b00d      	add	sp, #52	; 0x34
 80097c0:	ecbd 8b02 	vpop	{d8}
 80097c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c8:	4642      	mov	r2, r8
 80097ca:	464b      	mov	r3, r9
 80097cc:	4640      	mov	r0, r8
 80097ce:	4649      	mov	r1, r9
 80097d0:	f7f7 f9ac 	bl	8000b2c <__aeabi_dcmpun>
 80097d4:	b140      	cbz	r0, 80097e8 <_printf_float+0xf0>
 80097d6:	464b      	mov	r3, r9
 80097d8:	2b00      	cmp	r3, #0
 80097da:	bfbc      	itt	lt
 80097dc:	232d      	movlt	r3, #45	; 0x2d
 80097de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80097e2:	487f      	ldr	r0, [pc, #508]	; (80099e0 <_printf_float+0x2e8>)
 80097e4:	4b7f      	ldr	r3, [pc, #508]	; (80099e4 <_printf_float+0x2ec>)
 80097e6:	e7d1      	b.n	800978c <_printf_float+0x94>
 80097e8:	6863      	ldr	r3, [r4, #4]
 80097ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80097ee:	9206      	str	r2, [sp, #24]
 80097f0:	1c5a      	adds	r2, r3, #1
 80097f2:	d13f      	bne.n	8009874 <_printf_float+0x17c>
 80097f4:	2306      	movs	r3, #6
 80097f6:	6063      	str	r3, [r4, #4]
 80097f8:	9b05      	ldr	r3, [sp, #20]
 80097fa:	6861      	ldr	r1, [r4, #4]
 80097fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009800:	2300      	movs	r3, #0
 8009802:	9303      	str	r3, [sp, #12]
 8009804:	ab0a      	add	r3, sp, #40	; 0x28
 8009806:	e9cd b301 	strd	fp, r3, [sp, #4]
 800980a:	ab09      	add	r3, sp, #36	; 0x24
 800980c:	ec49 8b10 	vmov	d0, r8, r9
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	6022      	str	r2, [r4, #0]
 8009814:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009818:	4628      	mov	r0, r5
 800981a:	f7ff fecd 	bl	80095b8 <__cvt>
 800981e:	9b06      	ldr	r3, [sp, #24]
 8009820:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009822:	2b47      	cmp	r3, #71	; 0x47
 8009824:	4680      	mov	r8, r0
 8009826:	d108      	bne.n	800983a <_printf_float+0x142>
 8009828:	1cc8      	adds	r0, r1, #3
 800982a:	db02      	blt.n	8009832 <_printf_float+0x13a>
 800982c:	6863      	ldr	r3, [r4, #4]
 800982e:	4299      	cmp	r1, r3
 8009830:	dd41      	ble.n	80098b6 <_printf_float+0x1be>
 8009832:	f1ab 0b02 	sub.w	fp, fp, #2
 8009836:	fa5f fb8b 	uxtb.w	fp, fp
 800983a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800983e:	d820      	bhi.n	8009882 <_printf_float+0x18a>
 8009840:	3901      	subs	r1, #1
 8009842:	465a      	mov	r2, fp
 8009844:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009848:	9109      	str	r1, [sp, #36]	; 0x24
 800984a:	f7ff ff17 	bl	800967c <__exponent>
 800984e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009850:	1813      	adds	r3, r2, r0
 8009852:	2a01      	cmp	r2, #1
 8009854:	4681      	mov	r9, r0
 8009856:	6123      	str	r3, [r4, #16]
 8009858:	dc02      	bgt.n	8009860 <_printf_float+0x168>
 800985a:	6822      	ldr	r2, [r4, #0]
 800985c:	07d2      	lsls	r2, r2, #31
 800985e:	d501      	bpl.n	8009864 <_printf_float+0x16c>
 8009860:	3301      	adds	r3, #1
 8009862:	6123      	str	r3, [r4, #16]
 8009864:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009868:	2b00      	cmp	r3, #0
 800986a:	d09c      	beq.n	80097a6 <_printf_float+0xae>
 800986c:	232d      	movs	r3, #45	; 0x2d
 800986e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009872:	e798      	b.n	80097a6 <_printf_float+0xae>
 8009874:	9a06      	ldr	r2, [sp, #24]
 8009876:	2a47      	cmp	r2, #71	; 0x47
 8009878:	d1be      	bne.n	80097f8 <_printf_float+0x100>
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1bc      	bne.n	80097f8 <_printf_float+0x100>
 800987e:	2301      	movs	r3, #1
 8009880:	e7b9      	b.n	80097f6 <_printf_float+0xfe>
 8009882:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009886:	d118      	bne.n	80098ba <_printf_float+0x1c2>
 8009888:	2900      	cmp	r1, #0
 800988a:	6863      	ldr	r3, [r4, #4]
 800988c:	dd0b      	ble.n	80098a6 <_printf_float+0x1ae>
 800988e:	6121      	str	r1, [r4, #16]
 8009890:	b913      	cbnz	r3, 8009898 <_printf_float+0x1a0>
 8009892:	6822      	ldr	r2, [r4, #0]
 8009894:	07d0      	lsls	r0, r2, #31
 8009896:	d502      	bpl.n	800989e <_printf_float+0x1a6>
 8009898:	3301      	adds	r3, #1
 800989a:	440b      	add	r3, r1
 800989c:	6123      	str	r3, [r4, #16]
 800989e:	65a1      	str	r1, [r4, #88]	; 0x58
 80098a0:	f04f 0900 	mov.w	r9, #0
 80098a4:	e7de      	b.n	8009864 <_printf_float+0x16c>
 80098a6:	b913      	cbnz	r3, 80098ae <_printf_float+0x1b6>
 80098a8:	6822      	ldr	r2, [r4, #0]
 80098aa:	07d2      	lsls	r2, r2, #31
 80098ac:	d501      	bpl.n	80098b2 <_printf_float+0x1ba>
 80098ae:	3302      	adds	r3, #2
 80098b0:	e7f4      	b.n	800989c <_printf_float+0x1a4>
 80098b2:	2301      	movs	r3, #1
 80098b4:	e7f2      	b.n	800989c <_printf_float+0x1a4>
 80098b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80098ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098bc:	4299      	cmp	r1, r3
 80098be:	db05      	blt.n	80098cc <_printf_float+0x1d4>
 80098c0:	6823      	ldr	r3, [r4, #0]
 80098c2:	6121      	str	r1, [r4, #16]
 80098c4:	07d8      	lsls	r0, r3, #31
 80098c6:	d5ea      	bpl.n	800989e <_printf_float+0x1a6>
 80098c8:	1c4b      	adds	r3, r1, #1
 80098ca:	e7e7      	b.n	800989c <_printf_float+0x1a4>
 80098cc:	2900      	cmp	r1, #0
 80098ce:	bfd4      	ite	le
 80098d0:	f1c1 0202 	rsble	r2, r1, #2
 80098d4:	2201      	movgt	r2, #1
 80098d6:	4413      	add	r3, r2
 80098d8:	e7e0      	b.n	800989c <_printf_float+0x1a4>
 80098da:	6823      	ldr	r3, [r4, #0]
 80098dc:	055a      	lsls	r2, r3, #21
 80098de:	d407      	bmi.n	80098f0 <_printf_float+0x1f8>
 80098e0:	6923      	ldr	r3, [r4, #16]
 80098e2:	4642      	mov	r2, r8
 80098e4:	4631      	mov	r1, r6
 80098e6:	4628      	mov	r0, r5
 80098e8:	47b8      	blx	r7
 80098ea:	3001      	adds	r0, #1
 80098ec:	d12c      	bne.n	8009948 <_printf_float+0x250>
 80098ee:	e764      	b.n	80097ba <_printf_float+0xc2>
 80098f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098f4:	f240 80e0 	bls.w	8009ab8 <_printf_float+0x3c0>
 80098f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098fc:	2200      	movs	r2, #0
 80098fe:	2300      	movs	r3, #0
 8009900:	f7f7 f8e2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009904:	2800      	cmp	r0, #0
 8009906:	d034      	beq.n	8009972 <_printf_float+0x27a>
 8009908:	4a37      	ldr	r2, [pc, #220]	; (80099e8 <_printf_float+0x2f0>)
 800990a:	2301      	movs	r3, #1
 800990c:	4631      	mov	r1, r6
 800990e:	4628      	mov	r0, r5
 8009910:	47b8      	blx	r7
 8009912:	3001      	adds	r0, #1
 8009914:	f43f af51 	beq.w	80097ba <_printf_float+0xc2>
 8009918:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800991c:	429a      	cmp	r2, r3
 800991e:	db02      	blt.n	8009926 <_printf_float+0x22e>
 8009920:	6823      	ldr	r3, [r4, #0]
 8009922:	07d8      	lsls	r0, r3, #31
 8009924:	d510      	bpl.n	8009948 <_printf_float+0x250>
 8009926:	ee18 3a10 	vmov	r3, s16
 800992a:	4652      	mov	r2, sl
 800992c:	4631      	mov	r1, r6
 800992e:	4628      	mov	r0, r5
 8009930:	47b8      	blx	r7
 8009932:	3001      	adds	r0, #1
 8009934:	f43f af41 	beq.w	80097ba <_printf_float+0xc2>
 8009938:	f04f 0800 	mov.w	r8, #0
 800993c:	f104 091a 	add.w	r9, r4, #26
 8009940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009942:	3b01      	subs	r3, #1
 8009944:	4543      	cmp	r3, r8
 8009946:	dc09      	bgt.n	800995c <_printf_float+0x264>
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	079b      	lsls	r3, r3, #30
 800994c:	f100 8105 	bmi.w	8009b5a <_printf_float+0x462>
 8009950:	68e0      	ldr	r0, [r4, #12]
 8009952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009954:	4298      	cmp	r0, r3
 8009956:	bfb8      	it	lt
 8009958:	4618      	movlt	r0, r3
 800995a:	e730      	b.n	80097be <_printf_float+0xc6>
 800995c:	2301      	movs	r3, #1
 800995e:	464a      	mov	r2, r9
 8009960:	4631      	mov	r1, r6
 8009962:	4628      	mov	r0, r5
 8009964:	47b8      	blx	r7
 8009966:	3001      	adds	r0, #1
 8009968:	f43f af27 	beq.w	80097ba <_printf_float+0xc2>
 800996c:	f108 0801 	add.w	r8, r8, #1
 8009970:	e7e6      	b.n	8009940 <_printf_float+0x248>
 8009972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009974:	2b00      	cmp	r3, #0
 8009976:	dc39      	bgt.n	80099ec <_printf_float+0x2f4>
 8009978:	4a1b      	ldr	r2, [pc, #108]	; (80099e8 <_printf_float+0x2f0>)
 800997a:	2301      	movs	r3, #1
 800997c:	4631      	mov	r1, r6
 800997e:	4628      	mov	r0, r5
 8009980:	47b8      	blx	r7
 8009982:	3001      	adds	r0, #1
 8009984:	f43f af19 	beq.w	80097ba <_printf_float+0xc2>
 8009988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800998c:	4313      	orrs	r3, r2
 800998e:	d102      	bne.n	8009996 <_printf_float+0x29e>
 8009990:	6823      	ldr	r3, [r4, #0]
 8009992:	07d9      	lsls	r1, r3, #31
 8009994:	d5d8      	bpl.n	8009948 <_printf_float+0x250>
 8009996:	ee18 3a10 	vmov	r3, s16
 800999a:	4652      	mov	r2, sl
 800999c:	4631      	mov	r1, r6
 800999e:	4628      	mov	r0, r5
 80099a0:	47b8      	blx	r7
 80099a2:	3001      	adds	r0, #1
 80099a4:	f43f af09 	beq.w	80097ba <_printf_float+0xc2>
 80099a8:	f04f 0900 	mov.w	r9, #0
 80099ac:	f104 0a1a 	add.w	sl, r4, #26
 80099b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b2:	425b      	negs	r3, r3
 80099b4:	454b      	cmp	r3, r9
 80099b6:	dc01      	bgt.n	80099bc <_printf_float+0x2c4>
 80099b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ba:	e792      	b.n	80098e2 <_printf_float+0x1ea>
 80099bc:	2301      	movs	r3, #1
 80099be:	4652      	mov	r2, sl
 80099c0:	4631      	mov	r1, r6
 80099c2:	4628      	mov	r0, r5
 80099c4:	47b8      	blx	r7
 80099c6:	3001      	adds	r0, #1
 80099c8:	f43f aef7 	beq.w	80097ba <_printf_float+0xc2>
 80099cc:	f109 0901 	add.w	r9, r9, #1
 80099d0:	e7ee      	b.n	80099b0 <_printf_float+0x2b8>
 80099d2:	bf00      	nop
 80099d4:	7fefffff 	.word	0x7fefffff
 80099d8:	0800c374 	.word	0x0800c374
 80099dc:	0800c378 	.word	0x0800c378
 80099e0:	0800c380 	.word	0x0800c380
 80099e4:	0800c37c 	.word	0x0800c37c
 80099e8:	0800c384 	.word	0x0800c384
 80099ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099f0:	429a      	cmp	r2, r3
 80099f2:	bfa8      	it	ge
 80099f4:	461a      	movge	r2, r3
 80099f6:	2a00      	cmp	r2, #0
 80099f8:	4691      	mov	r9, r2
 80099fa:	dc37      	bgt.n	8009a6c <_printf_float+0x374>
 80099fc:	f04f 0b00 	mov.w	fp, #0
 8009a00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a04:	f104 021a 	add.w	r2, r4, #26
 8009a08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a0a:	9305      	str	r3, [sp, #20]
 8009a0c:	eba3 0309 	sub.w	r3, r3, r9
 8009a10:	455b      	cmp	r3, fp
 8009a12:	dc33      	bgt.n	8009a7c <_printf_float+0x384>
 8009a14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	db3b      	blt.n	8009a94 <_printf_float+0x39c>
 8009a1c:	6823      	ldr	r3, [r4, #0]
 8009a1e:	07da      	lsls	r2, r3, #31
 8009a20:	d438      	bmi.n	8009a94 <_printf_float+0x39c>
 8009a22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a24:	9b05      	ldr	r3, [sp, #20]
 8009a26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	eba2 0901 	sub.w	r9, r2, r1
 8009a2e:	4599      	cmp	r9, r3
 8009a30:	bfa8      	it	ge
 8009a32:	4699      	movge	r9, r3
 8009a34:	f1b9 0f00 	cmp.w	r9, #0
 8009a38:	dc35      	bgt.n	8009aa6 <_printf_float+0x3ae>
 8009a3a:	f04f 0800 	mov.w	r8, #0
 8009a3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a42:	f104 0a1a 	add.w	sl, r4, #26
 8009a46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a4a:	1a9b      	subs	r3, r3, r2
 8009a4c:	eba3 0309 	sub.w	r3, r3, r9
 8009a50:	4543      	cmp	r3, r8
 8009a52:	f77f af79 	ble.w	8009948 <_printf_float+0x250>
 8009a56:	2301      	movs	r3, #1
 8009a58:	4652      	mov	r2, sl
 8009a5a:	4631      	mov	r1, r6
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	47b8      	blx	r7
 8009a60:	3001      	adds	r0, #1
 8009a62:	f43f aeaa 	beq.w	80097ba <_printf_float+0xc2>
 8009a66:	f108 0801 	add.w	r8, r8, #1
 8009a6a:	e7ec      	b.n	8009a46 <_printf_float+0x34e>
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	4631      	mov	r1, r6
 8009a70:	4642      	mov	r2, r8
 8009a72:	4628      	mov	r0, r5
 8009a74:	47b8      	blx	r7
 8009a76:	3001      	adds	r0, #1
 8009a78:	d1c0      	bne.n	80099fc <_printf_float+0x304>
 8009a7a:	e69e      	b.n	80097ba <_printf_float+0xc2>
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	4631      	mov	r1, r6
 8009a80:	4628      	mov	r0, r5
 8009a82:	9205      	str	r2, [sp, #20]
 8009a84:	47b8      	blx	r7
 8009a86:	3001      	adds	r0, #1
 8009a88:	f43f ae97 	beq.w	80097ba <_printf_float+0xc2>
 8009a8c:	9a05      	ldr	r2, [sp, #20]
 8009a8e:	f10b 0b01 	add.w	fp, fp, #1
 8009a92:	e7b9      	b.n	8009a08 <_printf_float+0x310>
 8009a94:	ee18 3a10 	vmov	r3, s16
 8009a98:	4652      	mov	r2, sl
 8009a9a:	4631      	mov	r1, r6
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	47b8      	blx	r7
 8009aa0:	3001      	adds	r0, #1
 8009aa2:	d1be      	bne.n	8009a22 <_printf_float+0x32a>
 8009aa4:	e689      	b.n	80097ba <_printf_float+0xc2>
 8009aa6:	9a05      	ldr	r2, [sp, #20]
 8009aa8:	464b      	mov	r3, r9
 8009aaa:	4442      	add	r2, r8
 8009aac:	4631      	mov	r1, r6
 8009aae:	4628      	mov	r0, r5
 8009ab0:	47b8      	blx	r7
 8009ab2:	3001      	adds	r0, #1
 8009ab4:	d1c1      	bne.n	8009a3a <_printf_float+0x342>
 8009ab6:	e680      	b.n	80097ba <_printf_float+0xc2>
 8009ab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009aba:	2a01      	cmp	r2, #1
 8009abc:	dc01      	bgt.n	8009ac2 <_printf_float+0x3ca>
 8009abe:	07db      	lsls	r3, r3, #31
 8009ac0:	d538      	bpl.n	8009b34 <_printf_float+0x43c>
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	4642      	mov	r2, r8
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	4628      	mov	r0, r5
 8009aca:	47b8      	blx	r7
 8009acc:	3001      	adds	r0, #1
 8009ace:	f43f ae74 	beq.w	80097ba <_printf_float+0xc2>
 8009ad2:	ee18 3a10 	vmov	r3, s16
 8009ad6:	4652      	mov	r2, sl
 8009ad8:	4631      	mov	r1, r6
 8009ada:	4628      	mov	r0, r5
 8009adc:	47b8      	blx	r7
 8009ade:	3001      	adds	r0, #1
 8009ae0:	f43f ae6b 	beq.w	80097ba <_printf_float+0xc2>
 8009ae4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ae8:	2200      	movs	r2, #0
 8009aea:	2300      	movs	r3, #0
 8009aec:	f7f6 ffec 	bl	8000ac8 <__aeabi_dcmpeq>
 8009af0:	b9d8      	cbnz	r0, 8009b2a <_printf_float+0x432>
 8009af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af4:	f108 0201 	add.w	r2, r8, #1
 8009af8:	3b01      	subs	r3, #1
 8009afa:	4631      	mov	r1, r6
 8009afc:	4628      	mov	r0, r5
 8009afe:	47b8      	blx	r7
 8009b00:	3001      	adds	r0, #1
 8009b02:	d10e      	bne.n	8009b22 <_printf_float+0x42a>
 8009b04:	e659      	b.n	80097ba <_printf_float+0xc2>
 8009b06:	2301      	movs	r3, #1
 8009b08:	4652      	mov	r2, sl
 8009b0a:	4631      	mov	r1, r6
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	47b8      	blx	r7
 8009b10:	3001      	adds	r0, #1
 8009b12:	f43f ae52 	beq.w	80097ba <_printf_float+0xc2>
 8009b16:	f108 0801 	add.w	r8, r8, #1
 8009b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	4543      	cmp	r3, r8
 8009b20:	dcf1      	bgt.n	8009b06 <_printf_float+0x40e>
 8009b22:	464b      	mov	r3, r9
 8009b24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009b28:	e6dc      	b.n	80098e4 <_printf_float+0x1ec>
 8009b2a:	f04f 0800 	mov.w	r8, #0
 8009b2e:	f104 0a1a 	add.w	sl, r4, #26
 8009b32:	e7f2      	b.n	8009b1a <_printf_float+0x422>
 8009b34:	2301      	movs	r3, #1
 8009b36:	4642      	mov	r2, r8
 8009b38:	e7df      	b.n	8009afa <_printf_float+0x402>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	464a      	mov	r2, r9
 8009b3e:	4631      	mov	r1, r6
 8009b40:	4628      	mov	r0, r5
 8009b42:	47b8      	blx	r7
 8009b44:	3001      	adds	r0, #1
 8009b46:	f43f ae38 	beq.w	80097ba <_printf_float+0xc2>
 8009b4a:	f108 0801 	add.w	r8, r8, #1
 8009b4e:	68e3      	ldr	r3, [r4, #12]
 8009b50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b52:	1a5b      	subs	r3, r3, r1
 8009b54:	4543      	cmp	r3, r8
 8009b56:	dcf0      	bgt.n	8009b3a <_printf_float+0x442>
 8009b58:	e6fa      	b.n	8009950 <_printf_float+0x258>
 8009b5a:	f04f 0800 	mov.w	r8, #0
 8009b5e:	f104 0919 	add.w	r9, r4, #25
 8009b62:	e7f4      	b.n	8009b4e <_printf_float+0x456>

08009b64 <_printf_common>:
 8009b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b68:	4616      	mov	r6, r2
 8009b6a:	4699      	mov	r9, r3
 8009b6c:	688a      	ldr	r2, [r1, #8]
 8009b6e:	690b      	ldr	r3, [r1, #16]
 8009b70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b74:	4293      	cmp	r3, r2
 8009b76:	bfb8      	it	lt
 8009b78:	4613      	movlt	r3, r2
 8009b7a:	6033      	str	r3, [r6, #0]
 8009b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b80:	4607      	mov	r7, r0
 8009b82:	460c      	mov	r4, r1
 8009b84:	b10a      	cbz	r2, 8009b8a <_printf_common+0x26>
 8009b86:	3301      	adds	r3, #1
 8009b88:	6033      	str	r3, [r6, #0]
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	0699      	lsls	r1, r3, #26
 8009b8e:	bf42      	ittt	mi
 8009b90:	6833      	ldrmi	r3, [r6, #0]
 8009b92:	3302      	addmi	r3, #2
 8009b94:	6033      	strmi	r3, [r6, #0]
 8009b96:	6825      	ldr	r5, [r4, #0]
 8009b98:	f015 0506 	ands.w	r5, r5, #6
 8009b9c:	d106      	bne.n	8009bac <_printf_common+0x48>
 8009b9e:	f104 0a19 	add.w	sl, r4, #25
 8009ba2:	68e3      	ldr	r3, [r4, #12]
 8009ba4:	6832      	ldr	r2, [r6, #0]
 8009ba6:	1a9b      	subs	r3, r3, r2
 8009ba8:	42ab      	cmp	r3, r5
 8009baa:	dc26      	bgt.n	8009bfa <_printf_common+0x96>
 8009bac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bb0:	1e13      	subs	r3, r2, #0
 8009bb2:	6822      	ldr	r2, [r4, #0]
 8009bb4:	bf18      	it	ne
 8009bb6:	2301      	movne	r3, #1
 8009bb8:	0692      	lsls	r2, r2, #26
 8009bba:	d42b      	bmi.n	8009c14 <_printf_common+0xb0>
 8009bbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bc0:	4649      	mov	r1, r9
 8009bc2:	4638      	mov	r0, r7
 8009bc4:	47c0      	blx	r8
 8009bc6:	3001      	adds	r0, #1
 8009bc8:	d01e      	beq.n	8009c08 <_printf_common+0xa4>
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	68e5      	ldr	r5, [r4, #12]
 8009bce:	6832      	ldr	r2, [r6, #0]
 8009bd0:	f003 0306 	and.w	r3, r3, #6
 8009bd4:	2b04      	cmp	r3, #4
 8009bd6:	bf08      	it	eq
 8009bd8:	1aad      	subeq	r5, r5, r2
 8009bda:	68a3      	ldr	r3, [r4, #8]
 8009bdc:	6922      	ldr	r2, [r4, #16]
 8009bde:	bf0c      	ite	eq
 8009be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009be4:	2500      	movne	r5, #0
 8009be6:	4293      	cmp	r3, r2
 8009be8:	bfc4      	itt	gt
 8009bea:	1a9b      	subgt	r3, r3, r2
 8009bec:	18ed      	addgt	r5, r5, r3
 8009bee:	2600      	movs	r6, #0
 8009bf0:	341a      	adds	r4, #26
 8009bf2:	42b5      	cmp	r5, r6
 8009bf4:	d11a      	bne.n	8009c2c <_printf_common+0xc8>
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	e008      	b.n	8009c0c <_printf_common+0xa8>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	4652      	mov	r2, sl
 8009bfe:	4649      	mov	r1, r9
 8009c00:	4638      	mov	r0, r7
 8009c02:	47c0      	blx	r8
 8009c04:	3001      	adds	r0, #1
 8009c06:	d103      	bne.n	8009c10 <_printf_common+0xac>
 8009c08:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c10:	3501      	adds	r5, #1
 8009c12:	e7c6      	b.n	8009ba2 <_printf_common+0x3e>
 8009c14:	18e1      	adds	r1, r4, r3
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	2030      	movs	r0, #48	; 0x30
 8009c1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c1e:	4422      	add	r2, r4
 8009c20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c28:	3302      	adds	r3, #2
 8009c2a:	e7c7      	b.n	8009bbc <_printf_common+0x58>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	4622      	mov	r2, r4
 8009c30:	4649      	mov	r1, r9
 8009c32:	4638      	mov	r0, r7
 8009c34:	47c0      	blx	r8
 8009c36:	3001      	adds	r0, #1
 8009c38:	d0e6      	beq.n	8009c08 <_printf_common+0xa4>
 8009c3a:	3601      	adds	r6, #1
 8009c3c:	e7d9      	b.n	8009bf2 <_printf_common+0x8e>
	...

08009c40 <_printf_i>:
 8009c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c44:	460c      	mov	r4, r1
 8009c46:	4691      	mov	r9, r2
 8009c48:	7e27      	ldrb	r7, [r4, #24]
 8009c4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009c4c:	2f78      	cmp	r7, #120	; 0x78
 8009c4e:	4680      	mov	r8, r0
 8009c50:	469a      	mov	sl, r3
 8009c52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c56:	d807      	bhi.n	8009c68 <_printf_i+0x28>
 8009c58:	2f62      	cmp	r7, #98	; 0x62
 8009c5a:	d80a      	bhi.n	8009c72 <_printf_i+0x32>
 8009c5c:	2f00      	cmp	r7, #0
 8009c5e:	f000 80d8 	beq.w	8009e12 <_printf_i+0x1d2>
 8009c62:	2f58      	cmp	r7, #88	; 0x58
 8009c64:	f000 80a3 	beq.w	8009dae <_printf_i+0x16e>
 8009c68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c70:	e03a      	b.n	8009ce8 <_printf_i+0xa8>
 8009c72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c76:	2b15      	cmp	r3, #21
 8009c78:	d8f6      	bhi.n	8009c68 <_printf_i+0x28>
 8009c7a:	a001      	add	r0, pc, #4	; (adr r0, 8009c80 <_printf_i+0x40>)
 8009c7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009c80:	08009cd9 	.word	0x08009cd9
 8009c84:	08009ced 	.word	0x08009ced
 8009c88:	08009c69 	.word	0x08009c69
 8009c8c:	08009c69 	.word	0x08009c69
 8009c90:	08009c69 	.word	0x08009c69
 8009c94:	08009c69 	.word	0x08009c69
 8009c98:	08009ced 	.word	0x08009ced
 8009c9c:	08009c69 	.word	0x08009c69
 8009ca0:	08009c69 	.word	0x08009c69
 8009ca4:	08009c69 	.word	0x08009c69
 8009ca8:	08009c69 	.word	0x08009c69
 8009cac:	08009df9 	.word	0x08009df9
 8009cb0:	08009d1d 	.word	0x08009d1d
 8009cb4:	08009ddb 	.word	0x08009ddb
 8009cb8:	08009c69 	.word	0x08009c69
 8009cbc:	08009c69 	.word	0x08009c69
 8009cc0:	08009e1b 	.word	0x08009e1b
 8009cc4:	08009c69 	.word	0x08009c69
 8009cc8:	08009d1d 	.word	0x08009d1d
 8009ccc:	08009c69 	.word	0x08009c69
 8009cd0:	08009c69 	.word	0x08009c69
 8009cd4:	08009de3 	.word	0x08009de3
 8009cd8:	680b      	ldr	r3, [r1, #0]
 8009cda:	1d1a      	adds	r2, r3, #4
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	600a      	str	r2, [r1, #0]
 8009ce0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009ce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e0a3      	b.n	8009e34 <_printf_i+0x1f4>
 8009cec:	6825      	ldr	r5, [r4, #0]
 8009cee:	6808      	ldr	r0, [r1, #0]
 8009cf0:	062e      	lsls	r6, r5, #24
 8009cf2:	f100 0304 	add.w	r3, r0, #4
 8009cf6:	d50a      	bpl.n	8009d0e <_printf_i+0xce>
 8009cf8:	6805      	ldr	r5, [r0, #0]
 8009cfa:	600b      	str	r3, [r1, #0]
 8009cfc:	2d00      	cmp	r5, #0
 8009cfe:	da03      	bge.n	8009d08 <_printf_i+0xc8>
 8009d00:	232d      	movs	r3, #45	; 0x2d
 8009d02:	426d      	negs	r5, r5
 8009d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d08:	485e      	ldr	r0, [pc, #376]	; (8009e84 <_printf_i+0x244>)
 8009d0a:	230a      	movs	r3, #10
 8009d0c:	e019      	b.n	8009d42 <_printf_i+0x102>
 8009d0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009d12:	6805      	ldr	r5, [r0, #0]
 8009d14:	600b      	str	r3, [r1, #0]
 8009d16:	bf18      	it	ne
 8009d18:	b22d      	sxthne	r5, r5
 8009d1a:	e7ef      	b.n	8009cfc <_printf_i+0xbc>
 8009d1c:	680b      	ldr	r3, [r1, #0]
 8009d1e:	6825      	ldr	r5, [r4, #0]
 8009d20:	1d18      	adds	r0, r3, #4
 8009d22:	6008      	str	r0, [r1, #0]
 8009d24:	0628      	lsls	r0, r5, #24
 8009d26:	d501      	bpl.n	8009d2c <_printf_i+0xec>
 8009d28:	681d      	ldr	r5, [r3, #0]
 8009d2a:	e002      	b.n	8009d32 <_printf_i+0xf2>
 8009d2c:	0669      	lsls	r1, r5, #25
 8009d2e:	d5fb      	bpl.n	8009d28 <_printf_i+0xe8>
 8009d30:	881d      	ldrh	r5, [r3, #0]
 8009d32:	4854      	ldr	r0, [pc, #336]	; (8009e84 <_printf_i+0x244>)
 8009d34:	2f6f      	cmp	r7, #111	; 0x6f
 8009d36:	bf0c      	ite	eq
 8009d38:	2308      	moveq	r3, #8
 8009d3a:	230a      	movne	r3, #10
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d42:	6866      	ldr	r6, [r4, #4]
 8009d44:	60a6      	str	r6, [r4, #8]
 8009d46:	2e00      	cmp	r6, #0
 8009d48:	bfa2      	ittt	ge
 8009d4a:	6821      	ldrge	r1, [r4, #0]
 8009d4c:	f021 0104 	bicge.w	r1, r1, #4
 8009d50:	6021      	strge	r1, [r4, #0]
 8009d52:	b90d      	cbnz	r5, 8009d58 <_printf_i+0x118>
 8009d54:	2e00      	cmp	r6, #0
 8009d56:	d04d      	beq.n	8009df4 <_printf_i+0x1b4>
 8009d58:	4616      	mov	r6, r2
 8009d5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d5e:	fb03 5711 	mls	r7, r3, r1, r5
 8009d62:	5dc7      	ldrb	r7, [r0, r7]
 8009d64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d68:	462f      	mov	r7, r5
 8009d6a:	42bb      	cmp	r3, r7
 8009d6c:	460d      	mov	r5, r1
 8009d6e:	d9f4      	bls.n	8009d5a <_printf_i+0x11a>
 8009d70:	2b08      	cmp	r3, #8
 8009d72:	d10b      	bne.n	8009d8c <_printf_i+0x14c>
 8009d74:	6823      	ldr	r3, [r4, #0]
 8009d76:	07df      	lsls	r7, r3, #31
 8009d78:	d508      	bpl.n	8009d8c <_printf_i+0x14c>
 8009d7a:	6923      	ldr	r3, [r4, #16]
 8009d7c:	6861      	ldr	r1, [r4, #4]
 8009d7e:	4299      	cmp	r1, r3
 8009d80:	bfde      	ittt	le
 8009d82:	2330      	movle	r3, #48	; 0x30
 8009d84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d8c:	1b92      	subs	r2, r2, r6
 8009d8e:	6122      	str	r2, [r4, #16]
 8009d90:	f8cd a000 	str.w	sl, [sp]
 8009d94:	464b      	mov	r3, r9
 8009d96:	aa03      	add	r2, sp, #12
 8009d98:	4621      	mov	r1, r4
 8009d9a:	4640      	mov	r0, r8
 8009d9c:	f7ff fee2 	bl	8009b64 <_printf_common>
 8009da0:	3001      	adds	r0, #1
 8009da2:	d14c      	bne.n	8009e3e <_printf_i+0x1fe>
 8009da4:	f04f 30ff 	mov.w	r0, #4294967295
 8009da8:	b004      	add	sp, #16
 8009daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dae:	4835      	ldr	r0, [pc, #212]	; (8009e84 <_printf_i+0x244>)
 8009db0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	680e      	ldr	r6, [r1, #0]
 8009db8:	061f      	lsls	r7, r3, #24
 8009dba:	f856 5b04 	ldr.w	r5, [r6], #4
 8009dbe:	600e      	str	r6, [r1, #0]
 8009dc0:	d514      	bpl.n	8009dec <_printf_i+0x1ac>
 8009dc2:	07d9      	lsls	r1, r3, #31
 8009dc4:	bf44      	itt	mi
 8009dc6:	f043 0320 	orrmi.w	r3, r3, #32
 8009dca:	6023      	strmi	r3, [r4, #0]
 8009dcc:	b91d      	cbnz	r5, 8009dd6 <_printf_i+0x196>
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	f023 0320 	bic.w	r3, r3, #32
 8009dd4:	6023      	str	r3, [r4, #0]
 8009dd6:	2310      	movs	r3, #16
 8009dd8:	e7b0      	b.n	8009d3c <_printf_i+0xfc>
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	f043 0320 	orr.w	r3, r3, #32
 8009de0:	6023      	str	r3, [r4, #0]
 8009de2:	2378      	movs	r3, #120	; 0x78
 8009de4:	4828      	ldr	r0, [pc, #160]	; (8009e88 <_printf_i+0x248>)
 8009de6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009dea:	e7e3      	b.n	8009db4 <_printf_i+0x174>
 8009dec:	065e      	lsls	r6, r3, #25
 8009dee:	bf48      	it	mi
 8009df0:	b2ad      	uxthmi	r5, r5
 8009df2:	e7e6      	b.n	8009dc2 <_printf_i+0x182>
 8009df4:	4616      	mov	r6, r2
 8009df6:	e7bb      	b.n	8009d70 <_printf_i+0x130>
 8009df8:	680b      	ldr	r3, [r1, #0]
 8009dfa:	6826      	ldr	r6, [r4, #0]
 8009dfc:	6960      	ldr	r0, [r4, #20]
 8009dfe:	1d1d      	adds	r5, r3, #4
 8009e00:	600d      	str	r5, [r1, #0]
 8009e02:	0635      	lsls	r5, r6, #24
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	d501      	bpl.n	8009e0c <_printf_i+0x1cc>
 8009e08:	6018      	str	r0, [r3, #0]
 8009e0a:	e002      	b.n	8009e12 <_printf_i+0x1d2>
 8009e0c:	0671      	lsls	r1, r6, #25
 8009e0e:	d5fb      	bpl.n	8009e08 <_printf_i+0x1c8>
 8009e10:	8018      	strh	r0, [r3, #0]
 8009e12:	2300      	movs	r3, #0
 8009e14:	6123      	str	r3, [r4, #16]
 8009e16:	4616      	mov	r6, r2
 8009e18:	e7ba      	b.n	8009d90 <_printf_i+0x150>
 8009e1a:	680b      	ldr	r3, [r1, #0]
 8009e1c:	1d1a      	adds	r2, r3, #4
 8009e1e:	600a      	str	r2, [r1, #0]
 8009e20:	681e      	ldr	r6, [r3, #0]
 8009e22:	6862      	ldr	r2, [r4, #4]
 8009e24:	2100      	movs	r1, #0
 8009e26:	4630      	mov	r0, r6
 8009e28:	f7f6 f9da 	bl	80001e0 <memchr>
 8009e2c:	b108      	cbz	r0, 8009e32 <_printf_i+0x1f2>
 8009e2e:	1b80      	subs	r0, r0, r6
 8009e30:	6060      	str	r0, [r4, #4]
 8009e32:	6863      	ldr	r3, [r4, #4]
 8009e34:	6123      	str	r3, [r4, #16]
 8009e36:	2300      	movs	r3, #0
 8009e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e3c:	e7a8      	b.n	8009d90 <_printf_i+0x150>
 8009e3e:	6923      	ldr	r3, [r4, #16]
 8009e40:	4632      	mov	r2, r6
 8009e42:	4649      	mov	r1, r9
 8009e44:	4640      	mov	r0, r8
 8009e46:	47d0      	blx	sl
 8009e48:	3001      	adds	r0, #1
 8009e4a:	d0ab      	beq.n	8009da4 <_printf_i+0x164>
 8009e4c:	6823      	ldr	r3, [r4, #0]
 8009e4e:	079b      	lsls	r3, r3, #30
 8009e50:	d413      	bmi.n	8009e7a <_printf_i+0x23a>
 8009e52:	68e0      	ldr	r0, [r4, #12]
 8009e54:	9b03      	ldr	r3, [sp, #12]
 8009e56:	4298      	cmp	r0, r3
 8009e58:	bfb8      	it	lt
 8009e5a:	4618      	movlt	r0, r3
 8009e5c:	e7a4      	b.n	8009da8 <_printf_i+0x168>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	4632      	mov	r2, r6
 8009e62:	4649      	mov	r1, r9
 8009e64:	4640      	mov	r0, r8
 8009e66:	47d0      	blx	sl
 8009e68:	3001      	adds	r0, #1
 8009e6a:	d09b      	beq.n	8009da4 <_printf_i+0x164>
 8009e6c:	3501      	adds	r5, #1
 8009e6e:	68e3      	ldr	r3, [r4, #12]
 8009e70:	9903      	ldr	r1, [sp, #12]
 8009e72:	1a5b      	subs	r3, r3, r1
 8009e74:	42ab      	cmp	r3, r5
 8009e76:	dcf2      	bgt.n	8009e5e <_printf_i+0x21e>
 8009e78:	e7eb      	b.n	8009e52 <_printf_i+0x212>
 8009e7a:	2500      	movs	r5, #0
 8009e7c:	f104 0619 	add.w	r6, r4, #25
 8009e80:	e7f5      	b.n	8009e6e <_printf_i+0x22e>
 8009e82:	bf00      	nop
 8009e84:	0800c386 	.word	0x0800c386
 8009e88:	0800c397 	.word	0x0800c397

08009e8c <siprintf>:
 8009e8c:	b40e      	push	{r1, r2, r3}
 8009e8e:	b500      	push	{lr}
 8009e90:	b09c      	sub	sp, #112	; 0x70
 8009e92:	ab1d      	add	r3, sp, #116	; 0x74
 8009e94:	9002      	str	r0, [sp, #8]
 8009e96:	9006      	str	r0, [sp, #24]
 8009e98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e9c:	4809      	ldr	r0, [pc, #36]	; (8009ec4 <siprintf+0x38>)
 8009e9e:	9107      	str	r1, [sp, #28]
 8009ea0:	9104      	str	r1, [sp, #16]
 8009ea2:	4909      	ldr	r1, [pc, #36]	; (8009ec8 <siprintf+0x3c>)
 8009ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea8:	9105      	str	r1, [sp, #20]
 8009eaa:	6800      	ldr	r0, [r0, #0]
 8009eac:	9301      	str	r3, [sp, #4]
 8009eae:	a902      	add	r1, sp, #8
 8009eb0:	f001 fb34 	bl	800b51c <_svfiprintf_r>
 8009eb4:	9b02      	ldr	r3, [sp, #8]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	701a      	strb	r2, [r3, #0]
 8009eba:	b01c      	add	sp, #112	; 0x70
 8009ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ec0:	b003      	add	sp, #12
 8009ec2:	4770      	bx	lr
 8009ec4:	20000014 	.word	0x20000014
 8009ec8:	ffff0208 	.word	0xffff0208

08009ecc <quorem>:
 8009ecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed0:	6903      	ldr	r3, [r0, #16]
 8009ed2:	690c      	ldr	r4, [r1, #16]
 8009ed4:	42a3      	cmp	r3, r4
 8009ed6:	4607      	mov	r7, r0
 8009ed8:	f2c0 8081 	blt.w	8009fde <quorem+0x112>
 8009edc:	3c01      	subs	r4, #1
 8009ede:	f101 0814 	add.w	r8, r1, #20
 8009ee2:	f100 0514 	add.w	r5, r0, #20
 8009ee6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009eea:	9301      	str	r3, [sp, #4]
 8009eec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ef0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009efc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f00:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f04:	d331      	bcc.n	8009f6a <quorem+0x9e>
 8009f06:	f04f 0e00 	mov.w	lr, #0
 8009f0a:	4640      	mov	r0, r8
 8009f0c:	46ac      	mov	ip, r5
 8009f0e:	46f2      	mov	sl, lr
 8009f10:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f14:	b293      	uxth	r3, r2
 8009f16:	fb06 e303 	mla	r3, r6, r3, lr
 8009f1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	ebaa 0303 	sub.w	r3, sl, r3
 8009f24:	0c12      	lsrs	r2, r2, #16
 8009f26:	f8dc a000 	ldr.w	sl, [ip]
 8009f2a:	fb06 e202 	mla	r2, r6, r2, lr
 8009f2e:	fa13 f38a 	uxtah	r3, r3, sl
 8009f32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f36:	fa1f fa82 	uxth.w	sl, r2
 8009f3a:	f8dc 2000 	ldr.w	r2, [ip]
 8009f3e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009f42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f4c:	4581      	cmp	r9, r0
 8009f4e:	f84c 3b04 	str.w	r3, [ip], #4
 8009f52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f56:	d2db      	bcs.n	8009f10 <quorem+0x44>
 8009f58:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f5c:	b92b      	cbnz	r3, 8009f6a <quorem+0x9e>
 8009f5e:	9b01      	ldr	r3, [sp, #4]
 8009f60:	3b04      	subs	r3, #4
 8009f62:	429d      	cmp	r5, r3
 8009f64:	461a      	mov	r2, r3
 8009f66:	d32e      	bcc.n	8009fc6 <quorem+0xfa>
 8009f68:	613c      	str	r4, [r7, #16]
 8009f6a:	4638      	mov	r0, r7
 8009f6c:	f001 f8c0 	bl	800b0f0 <__mcmp>
 8009f70:	2800      	cmp	r0, #0
 8009f72:	db24      	blt.n	8009fbe <quorem+0xf2>
 8009f74:	3601      	adds	r6, #1
 8009f76:	4628      	mov	r0, r5
 8009f78:	f04f 0c00 	mov.w	ip, #0
 8009f7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f80:	f8d0 e000 	ldr.w	lr, [r0]
 8009f84:	b293      	uxth	r3, r2
 8009f86:	ebac 0303 	sub.w	r3, ip, r3
 8009f8a:	0c12      	lsrs	r2, r2, #16
 8009f8c:	fa13 f38e 	uxtah	r3, r3, lr
 8009f90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f9e:	45c1      	cmp	r9, r8
 8009fa0:	f840 3b04 	str.w	r3, [r0], #4
 8009fa4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009fa8:	d2e8      	bcs.n	8009f7c <quorem+0xb0>
 8009faa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fb2:	b922      	cbnz	r2, 8009fbe <quorem+0xf2>
 8009fb4:	3b04      	subs	r3, #4
 8009fb6:	429d      	cmp	r5, r3
 8009fb8:	461a      	mov	r2, r3
 8009fba:	d30a      	bcc.n	8009fd2 <quorem+0x106>
 8009fbc:	613c      	str	r4, [r7, #16]
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	b003      	add	sp, #12
 8009fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc6:	6812      	ldr	r2, [r2, #0]
 8009fc8:	3b04      	subs	r3, #4
 8009fca:	2a00      	cmp	r2, #0
 8009fcc:	d1cc      	bne.n	8009f68 <quorem+0x9c>
 8009fce:	3c01      	subs	r4, #1
 8009fd0:	e7c7      	b.n	8009f62 <quorem+0x96>
 8009fd2:	6812      	ldr	r2, [r2, #0]
 8009fd4:	3b04      	subs	r3, #4
 8009fd6:	2a00      	cmp	r2, #0
 8009fd8:	d1f0      	bne.n	8009fbc <quorem+0xf0>
 8009fda:	3c01      	subs	r4, #1
 8009fdc:	e7eb      	b.n	8009fb6 <quorem+0xea>
 8009fde:	2000      	movs	r0, #0
 8009fe0:	e7ee      	b.n	8009fc0 <quorem+0xf4>
 8009fe2:	0000      	movs	r0, r0
 8009fe4:	0000      	movs	r0, r0
	...

08009fe8 <_dtoa_r>:
 8009fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fec:	ed2d 8b02 	vpush	{d8}
 8009ff0:	ec57 6b10 	vmov	r6, r7, d0
 8009ff4:	b095      	sub	sp, #84	; 0x54
 8009ff6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009ff8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009ffc:	9105      	str	r1, [sp, #20]
 8009ffe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a002:	4604      	mov	r4, r0
 800a004:	9209      	str	r2, [sp, #36]	; 0x24
 800a006:	930f      	str	r3, [sp, #60]	; 0x3c
 800a008:	b975      	cbnz	r5, 800a028 <_dtoa_r+0x40>
 800a00a:	2010      	movs	r0, #16
 800a00c:	f000 fddc 	bl	800abc8 <malloc>
 800a010:	4602      	mov	r2, r0
 800a012:	6260      	str	r0, [r4, #36]	; 0x24
 800a014:	b920      	cbnz	r0, 800a020 <_dtoa_r+0x38>
 800a016:	4bb2      	ldr	r3, [pc, #712]	; (800a2e0 <_dtoa_r+0x2f8>)
 800a018:	21ea      	movs	r1, #234	; 0xea
 800a01a:	48b2      	ldr	r0, [pc, #712]	; (800a2e4 <_dtoa_r+0x2fc>)
 800a01c:	f001 fb8e 	bl	800b73c <__assert_func>
 800a020:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a024:	6005      	str	r5, [r0, #0]
 800a026:	60c5      	str	r5, [r0, #12]
 800a028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a02a:	6819      	ldr	r1, [r3, #0]
 800a02c:	b151      	cbz	r1, 800a044 <_dtoa_r+0x5c>
 800a02e:	685a      	ldr	r2, [r3, #4]
 800a030:	604a      	str	r2, [r1, #4]
 800a032:	2301      	movs	r3, #1
 800a034:	4093      	lsls	r3, r2
 800a036:	608b      	str	r3, [r1, #8]
 800a038:	4620      	mov	r0, r4
 800a03a:	f000 fe1b 	bl	800ac74 <_Bfree>
 800a03e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a040:	2200      	movs	r2, #0
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	1e3b      	subs	r3, r7, #0
 800a046:	bfb9      	ittee	lt
 800a048:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a04c:	9303      	strlt	r3, [sp, #12]
 800a04e:	2300      	movge	r3, #0
 800a050:	f8c8 3000 	strge.w	r3, [r8]
 800a054:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a058:	4ba3      	ldr	r3, [pc, #652]	; (800a2e8 <_dtoa_r+0x300>)
 800a05a:	bfbc      	itt	lt
 800a05c:	2201      	movlt	r2, #1
 800a05e:	f8c8 2000 	strlt.w	r2, [r8]
 800a062:	ea33 0309 	bics.w	r3, r3, r9
 800a066:	d11b      	bne.n	800a0a0 <_dtoa_r+0xb8>
 800a068:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a06a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a06e:	6013      	str	r3, [r2, #0]
 800a070:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a074:	4333      	orrs	r3, r6
 800a076:	f000 857a 	beq.w	800ab6e <_dtoa_r+0xb86>
 800a07a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a07c:	b963      	cbnz	r3, 800a098 <_dtoa_r+0xb0>
 800a07e:	4b9b      	ldr	r3, [pc, #620]	; (800a2ec <_dtoa_r+0x304>)
 800a080:	e024      	b.n	800a0cc <_dtoa_r+0xe4>
 800a082:	4b9b      	ldr	r3, [pc, #620]	; (800a2f0 <_dtoa_r+0x308>)
 800a084:	9300      	str	r3, [sp, #0]
 800a086:	3308      	adds	r3, #8
 800a088:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a08a:	6013      	str	r3, [r2, #0]
 800a08c:	9800      	ldr	r0, [sp, #0]
 800a08e:	b015      	add	sp, #84	; 0x54
 800a090:	ecbd 8b02 	vpop	{d8}
 800a094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a098:	4b94      	ldr	r3, [pc, #592]	; (800a2ec <_dtoa_r+0x304>)
 800a09a:	9300      	str	r3, [sp, #0]
 800a09c:	3303      	adds	r3, #3
 800a09e:	e7f3      	b.n	800a088 <_dtoa_r+0xa0>
 800a0a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	ec51 0b17 	vmov	r0, r1, d7
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a0b0:	f7f6 fd0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0b4:	4680      	mov	r8, r0
 800a0b6:	b158      	cbz	r0, 800a0d0 <_dtoa_r+0xe8>
 800a0b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	6013      	str	r3, [r2, #0]
 800a0be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f000 8551 	beq.w	800ab68 <_dtoa_r+0xb80>
 800a0c6:	488b      	ldr	r0, [pc, #556]	; (800a2f4 <_dtoa_r+0x30c>)
 800a0c8:	6018      	str	r0, [r3, #0]
 800a0ca:	1e43      	subs	r3, r0, #1
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	e7dd      	b.n	800a08c <_dtoa_r+0xa4>
 800a0d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a0d4:	aa12      	add	r2, sp, #72	; 0x48
 800a0d6:	a913      	add	r1, sp, #76	; 0x4c
 800a0d8:	4620      	mov	r0, r4
 800a0da:	f001 f8ad 	bl	800b238 <__d2b>
 800a0de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a0e2:	4683      	mov	fp, r0
 800a0e4:	2d00      	cmp	r5, #0
 800a0e6:	d07c      	beq.n	800a1e2 <_dtoa_r+0x1fa>
 800a0e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a0ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a0f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a0fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a0fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a102:	4b7d      	ldr	r3, [pc, #500]	; (800a2f8 <_dtoa_r+0x310>)
 800a104:	2200      	movs	r2, #0
 800a106:	4630      	mov	r0, r6
 800a108:	4639      	mov	r1, r7
 800a10a:	f7f6 f8bd 	bl	8000288 <__aeabi_dsub>
 800a10e:	a36e      	add	r3, pc, #440	; (adr r3, 800a2c8 <_dtoa_r+0x2e0>)
 800a110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a114:	f7f6 fa70 	bl	80005f8 <__aeabi_dmul>
 800a118:	a36d      	add	r3, pc, #436	; (adr r3, 800a2d0 <_dtoa_r+0x2e8>)
 800a11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11e:	f7f6 f8b5 	bl	800028c <__adddf3>
 800a122:	4606      	mov	r6, r0
 800a124:	4628      	mov	r0, r5
 800a126:	460f      	mov	r7, r1
 800a128:	f7f6 f9fc 	bl	8000524 <__aeabi_i2d>
 800a12c:	a36a      	add	r3, pc, #424	; (adr r3, 800a2d8 <_dtoa_r+0x2f0>)
 800a12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a132:	f7f6 fa61 	bl	80005f8 <__aeabi_dmul>
 800a136:	4602      	mov	r2, r0
 800a138:	460b      	mov	r3, r1
 800a13a:	4630      	mov	r0, r6
 800a13c:	4639      	mov	r1, r7
 800a13e:	f7f6 f8a5 	bl	800028c <__adddf3>
 800a142:	4606      	mov	r6, r0
 800a144:	460f      	mov	r7, r1
 800a146:	f7f6 fd07 	bl	8000b58 <__aeabi_d2iz>
 800a14a:	2200      	movs	r2, #0
 800a14c:	4682      	mov	sl, r0
 800a14e:	2300      	movs	r3, #0
 800a150:	4630      	mov	r0, r6
 800a152:	4639      	mov	r1, r7
 800a154:	f7f6 fcc2 	bl	8000adc <__aeabi_dcmplt>
 800a158:	b148      	cbz	r0, 800a16e <_dtoa_r+0x186>
 800a15a:	4650      	mov	r0, sl
 800a15c:	f7f6 f9e2 	bl	8000524 <__aeabi_i2d>
 800a160:	4632      	mov	r2, r6
 800a162:	463b      	mov	r3, r7
 800a164:	f7f6 fcb0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a168:	b908      	cbnz	r0, 800a16e <_dtoa_r+0x186>
 800a16a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a16e:	f1ba 0f16 	cmp.w	sl, #22
 800a172:	d854      	bhi.n	800a21e <_dtoa_r+0x236>
 800a174:	4b61      	ldr	r3, [pc, #388]	; (800a2fc <_dtoa_r+0x314>)
 800a176:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a182:	f7f6 fcab 	bl	8000adc <__aeabi_dcmplt>
 800a186:	2800      	cmp	r0, #0
 800a188:	d04b      	beq.n	800a222 <_dtoa_r+0x23a>
 800a18a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a18e:	2300      	movs	r3, #0
 800a190:	930e      	str	r3, [sp, #56]	; 0x38
 800a192:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a194:	1b5d      	subs	r5, r3, r5
 800a196:	1e6b      	subs	r3, r5, #1
 800a198:	9304      	str	r3, [sp, #16]
 800a19a:	bf43      	ittte	mi
 800a19c:	2300      	movmi	r3, #0
 800a19e:	f1c5 0801 	rsbmi	r8, r5, #1
 800a1a2:	9304      	strmi	r3, [sp, #16]
 800a1a4:	f04f 0800 	movpl.w	r8, #0
 800a1a8:	f1ba 0f00 	cmp.w	sl, #0
 800a1ac:	db3b      	blt.n	800a226 <_dtoa_r+0x23e>
 800a1ae:	9b04      	ldr	r3, [sp, #16]
 800a1b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a1b4:	4453      	add	r3, sl
 800a1b6:	9304      	str	r3, [sp, #16]
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	9306      	str	r3, [sp, #24]
 800a1bc:	9b05      	ldr	r3, [sp, #20]
 800a1be:	2b09      	cmp	r3, #9
 800a1c0:	d869      	bhi.n	800a296 <_dtoa_r+0x2ae>
 800a1c2:	2b05      	cmp	r3, #5
 800a1c4:	bfc4      	itt	gt
 800a1c6:	3b04      	subgt	r3, #4
 800a1c8:	9305      	strgt	r3, [sp, #20]
 800a1ca:	9b05      	ldr	r3, [sp, #20]
 800a1cc:	f1a3 0302 	sub.w	r3, r3, #2
 800a1d0:	bfcc      	ite	gt
 800a1d2:	2500      	movgt	r5, #0
 800a1d4:	2501      	movle	r5, #1
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	d869      	bhi.n	800a2ae <_dtoa_r+0x2c6>
 800a1da:	e8df f003 	tbb	[pc, r3]
 800a1de:	4e2c      	.short	0x4e2c
 800a1e0:	5a4c      	.short	0x5a4c
 800a1e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a1e6:	441d      	add	r5, r3
 800a1e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a1ec:	2b20      	cmp	r3, #32
 800a1ee:	bfc1      	itttt	gt
 800a1f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a1f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a1f8:	fa09 f303 	lslgt.w	r3, r9, r3
 800a1fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a200:	bfda      	itte	le
 800a202:	f1c3 0320 	rsble	r3, r3, #32
 800a206:	fa06 f003 	lslle.w	r0, r6, r3
 800a20a:	4318      	orrgt	r0, r3
 800a20c:	f7f6 f97a 	bl	8000504 <__aeabi_ui2d>
 800a210:	2301      	movs	r3, #1
 800a212:	4606      	mov	r6, r0
 800a214:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a218:	3d01      	subs	r5, #1
 800a21a:	9310      	str	r3, [sp, #64]	; 0x40
 800a21c:	e771      	b.n	800a102 <_dtoa_r+0x11a>
 800a21e:	2301      	movs	r3, #1
 800a220:	e7b6      	b.n	800a190 <_dtoa_r+0x1a8>
 800a222:	900e      	str	r0, [sp, #56]	; 0x38
 800a224:	e7b5      	b.n	800a192 <_dtoa_r+0x1aa>
 800a226:	f1ca 0300 	rsb	r3, sl, #0
 800a22a:	9306      	str	r3, [sp, #24]
 800a22c:	2300      	movs	r3, #0
 800a22e:	eba8 080a 	sub.w	r8, r8, sl
 800a232:	930d      	str	r3, [sp, #52]	; 0x34
 800a234:	e7c2      	b.n	800a1bc <_dtoa_r+0x1d4>
 800a236:	2300      	movs	r3, #0
 800a238:	9308      	str	r3, [sp, #32]
 800a23a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	dc39      	bgt.n	800a2b4 <_dtoa_r+0x2cc>
 800a240:	f04f 0901 	mov.w	r9, #1
 800a244:	f8cd 9004 	str.w	r9, [sp, #4]
 800a248:	464b      	mov	r3, r9
 800a24a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a24e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a250:	2200      	movs	r2, #0
 800a252:	6042      	str	r2, [r0, #4]
 800a254:	2204      	movs	r2, #4
 800a256:	f102 0614 	add.w	r6, r2, #20
 800a25a:	429e      	cmp	r6, r3
 800a25c:	6841      	ldr	r1, [r0, #4]
 800a25e:	d92f      	bls.n	800a2c0 <_dtoa_r+0x2d8>
 800a260:	4620      	mov	r0, r4
 800a262:	f000 fcc7 	bl	800abf4 <_Balloc>
 800a266:	9000      	str	r0, [sp, #0]
 800a268:	2800      	cmp	r0, #0
 800a26a:	d14b      	bne.n	800a304 <_dtoa_r+0x31c>
 800a26c:	4b24      	ldr	r3, [pc, #144]	; (800a300 <_dtoa_r+0x318>)
 800a26e:	4602      	mov	r2, r0
 800a270:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a274:	e6d1      	b.n	800a01a <_dtoa_r+0x32>
 800a276:	2301      	movs	r3, #1
 800a278:	e7de      	b.n	800a238 <_dtoa_r+0x250>
 800a27a:	2300      	movs	r3, #0
 800a27c:	9308      	str	r3, [sp, #32]
 800a27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a280:	eb0a 0903 	add.w	r9, sl, r3
 800a284:	f109 0301 	add.w	r3, r9, #1
 800a288:	2b01      	cmp	r3, #1
 800a28a:	9301      	str	r3, [sp, #4]
 800a28c:	bfb8      	it	lt
 800a28e:	2301      	movlt	r3, #1
 800a290:	e7dd      	b.n	800a24e <_dtoa_r+0x266>
 800a292:	2301      	movs	r3, #1
 800a294:	e7f2      	b.n	800a27c <_dtoa_r+0x294>
 800a296:	2501      	movs	r5, #1
 800a298:	2300      	movs	r3, #0
 800a29a:	9305      	str	r3, [sp, #20]
 800a29c:	9508      	str	r5, [sp, #32]
 800a29e:	f04f 39ff 	mov.w	r9, #4294967295
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a2a8:	2312      	movs	r3, #18
 800a2aa:	9209      	str	r2, [sp, #36]	; 0x24
 800a2ac:	e7cf      	b.n	800a24e <_dtoa_r+0x266>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	9308      	str	r3, [sp, #32]
 800a2b2:	e7f4      	b.n	800a29e <_dtoa_r+0x2b6>
 800a2b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a2b8:	f8cd 9004 	str.w	r9, [sp, #4]
 800a2bc:	464b      	mov	r3, r9
 800a2be:	e7c6      	b.n	800a24e <_dtoa_r+0x266>
 800a2c0:	3101      	adds	r1, #1
 800a2c2:	6041      	str	r1, [r0, #4]
 800a2c4:	0052      	lsls	r2, r2, #1
 800a2c6:	e7c6      	b.n	800a256 <_dtoa_r+0x26e>
 800a2c8:	636f4361 	.word	0x636f4361
 800a2cc:	3fd287a7 	.word	0x3fd287a7
 800a2d0:	8b60c8b3 	.word	0x8b60c8b3
 800a2d4:	3fc68a28 	.word	0x3fc68a28
 800a2d8:	509f79fb 	.word	0x509f79fb
 800a2dc:	3fd34413 	.word	0x3fd34413
 800a2e0:	0800c3b5 	.word	0x0800c3b5
 800a2e4:	0800c3cc 	.word	0x0800c3cc
 800a2e8:	7ff00000 	.word	0x7ff00000
 800a2ec:	0800c3b1 	.word	0x0800c3b1
 800a2f0:	0800c3a8 	.word	0x0800c3a8
 800a2f4:	0800c385 	.word	0x0800c385
 800a2f8:	3ff80000 	.word	0x3ff80000
 800a2fc:	0800c4c8 	.word	0x0800c4c8
 800a300:	0800c42b 	.word	0x0800c42b
 800a304:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a306:	9a00      	ldr	r2, [sp, #0]
 800a308:	601a      	str	r2, [r3, #0]
 800a30a:	9b01      	ldr	r3, [sp, #4]
 800a30c:	2b0e      	cmp	r3, #14
 800a30e:	f200 80ad 	bhi.w	800a46c <_dtoa_r+0x484>
 800a312:	2d00      	cmp	r5, #0
 800a314:	f000 80aa 	beq.w	800a46c <_dtoa_r+0x484>
 800a318:	f1ba 0f00 	cmp.w	sl, #0
 800a31c:	dd36      	ble.n	800a38c <_dtoa_r+0x3a4>
 800a31e:	4ac3      	ldr	r2, [pc, #780]	; (800a62c <_dtoa_r+0x644>)
 800a320:	f00a 030f 	and.w	r3, sl, #15
 800a324:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a328:	ed93 7b00 	vldr	d7, [r3]
 800a32c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a330:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a334:	eeb0 8a47 	vmov.f32	s16, s14
 800a338:	eef0 8a67 	vmov.f32	s17, s15
 800a33c:	d016      	beq.n	800a36c <_dtoa_r+0x384>
 800a33e:	4bbc      	ldr	r3, [pc, #752]	; (800a630 <_dtoa_r+0x648>)
 800a340:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a344:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a348:	f7f6 fa80 	bl	800084c <__aeabi_ddiv>
 800a34c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a350:	f007 070f 	and.w	r7, r7, #15
 800a354:	2503      	movs	r5, #3
 800a356:	4eb6      	ldr	r6, [pc, #728]	; (800a630 <_dtoa_r+0x648>)
 800a358:	b957      	cbnz	r7, 800a370 <_dtoa_r+0x388>
 800a35a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a35e:	ec53 2b18 	vmov	r2, r3, d8
 800a362:	f7f6 fa73 	bl	800084c <__aeabi_ddiv>
 800a366:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a36a:	e029      	b.n	800a3c0 <_dtoa_r+0x3d8>
 800a36c:	2502      	movs	r5, #2
 800a36e:	e7f2      	b.n	800a356 <_dtoa_r+0x36e>
 800a370:	07f9      	lsls	r1, r7, #31
 800a372:	d508      	bpl.n	800a386 <_dtoa_r+0x39e>
 800a374:	ec51 0b18 	vmov	r0, r1, d8
 800a378:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a37c:	f7f6 f93c 	bl	80005f8 <__aeabi_dmul>
 800a380:	ec41 0b18 	vmov	d8, r0, r1
 800a384:	3501      	adds	r5, #1
 800a386:	107f      	asrs	r7, r7, #1
 800a388:	3608      	adds	r6, #8
 800a38a:	e7e5      	b.n	800a358 <_dtoa_r+0x370>
 800a38c:	f000 80a6 	beq.w	800a4dc <_dtoa_r+0x4f4>
 800a390:	f1ca 0600 	rsb	r6, sl, #0
 800a394:	4ba5      	ldr	r3, [pc, #660]	; (800a62c <_dtoa_r+0x644>)
 800a396:	4fa6      	ldr	r7, [pc, #664]	; (800a630 <_dtoa_r+0x648>)
 800a398:	f006 020f 	and.w	r2, r6, #15
 800a39c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a3a8:	f7f6 f926 	bl	80005f8 <__aeabi_dmul>
 800a3ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3b0:	1136      	asrs	r6, r6, #4
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	2502      	movs	r5, #2
 800a3b6:	2e00      	cmp	r6, #0
 800a3b8:	f040 8085 	bne.w	800a4c6 <_dtoa_r+0x4de>
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1d2      	bne.n	800a366 <_dtoa_r+0x37e>
 800a3c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	f000 808c 	beq.w	800a4e0 <_dtoa_r+0x4f8>
 800a3c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a3cc:	4b99      	ldr	r3, [pc, #612]	; (800a634 <_dtoa_r+0x64c>)
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	4639      	mov	r1, r7
 800a3d4:	f7f6 fb82 	bl	8000adc <__aeabi_dcmplt>
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	f000 8081 	beq.w	800a4e0 <_dtoa_r+0x4f8>
 800a3de:	9b01      	ldr	r3, [sp, #4]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d07d      	beq.n	800a4e0 <_dtoa_r+0x4f8>
 800a3e4:	f1b9 0f00 	cmp.w	r9, #0
 800a3e8:	dd3c      	ble.n	800a464 <_dtoa_r+0x47c>
 800a3ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a3ee:	9307      	str	r3, [sp, #28]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	4b91      	ldr	r3, [pc, #580]	; (800a638 <_dtoa_r+0x650>)
 800a3f4:	4630      	mov	r0, r6
 800a3f6:	4639      	mov	r1, r7
 800a3f8:	f7f6 f8fe 	bl	80005f8 <__aeabi_dmul>
 800a3fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a400:	3501      	adds	r5, #1
 800a402:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a406:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a40a:	4628      	mov	r0, r5
 800a40c:	f7f6 f88a 	bl	8000524 <__aeabi_i2d>
 800a410:	4632      	mov	r2, r6
 800a412:	463b      	mov	r3, r7
 800a414:	f7f6 f8f0 	bl	80005f8 <__aeabi_dmul>
 800a418:	4b88      	ldr	r3, [pc, #544]	; (800a63c <_dtoa_r+0x654>)
 800a41a:	2200      	movs	r2, #0
 800a41c:	f7f5 ff36 	bl	800028c <__adddf3>
 800a420:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a428:	9303      	str	r3, [sp, #12]
 800a42a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d15c      	bne.n	800a4ea <_dtoa_r+0x502>
 800a430:	4b83      	ldr	r3, [pc, #524]	; (800a640 <_dtoa_r+0x658>)
 800a432:	2200      	movs	r2, #0
 800a434:	4630      	mov	r0, r6
 800a436:	4639      	mov	r1, r7
 800a438:	f7f5 ff26 	bl	8000288 <__aeabi_dsub>
 800a43c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a440:	4606      	mov	r6, r0
 800a442:	460f      	mov	r7, r1
 800a444:	f7f6 fb68 	bl	8000b18 <__aeabi_dcmpgt>
 800a448:	2800      	cmp	r0, #0
 800a44a:	f040 8296 	bne.w	800a97a <_dtoa_r+0x992>
 800a44e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a452:	4630      	mov	r0, r6
 800a454:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a458:	4639      	mov	r1, r7
 800a45a:	f7f6 fb3f 	bl	8000adc <__aeabi_dcmplt>
 800a45e:	2800      	cmp	r0, #0
 800a460:	f040 8288 	bne.w	800a974 <_dtoa_r+0x98c>
 800a464:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a468:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a46c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f2c0 8158 	blt.w	800a724 <_dtoa_r+0x73c>
 800a474:	f1ba 0f0e 	cmp.w	sl, #14
 800a478:	f300 8154 	bgt.w	800a724 <_dtoa_r+0x73c>
 800a47c:	4b6b      	ldr	r3, [pc, #428]	; (800a62c <_dtoa_r+0x644>)
 800a47e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a482:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f280 80e3 	bge.w	800a654 <_dtoa_r+0x66c>
 800a48e:	9b01      	ldr	r3, [sp, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	f300 80df 	bgt.w	800a654 <_dtoa_r+0x66c>
 800a496:	f040 826d 	bne.w	800a974 <_dtoa_r+0x98c>
 800a49a:	4b69      	ldr	r3, [pc, #420]	; (800a640 <_dtoa_r+0x658>)
 800a49c:	2200      	movs	r2, #0
 800a49e:	4640      	mov	r0, r8
 800a4a0:	4649      	mov	r1, r9
 800a4a2:	f7f6 f8a9 	bl	80005f8 <__aeabi_dmul>
 800a4a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4aa:	f7f6 fb2b 	bl	8000b04 <__aeabi_dcmpge>
 800a4ae:	9e01      	ldr	r6, [sp, #4]
 800a4b0:	4637      	mov	r7, r6
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	f040 8243 	bne.w	800a93e <_dtoa_r+0x956>
 800a4b8:	9d00      	ldr	r5, [sp, #0]
 800a4ba:	2331      	movs	r3, #49	; 0x31
 800a4bc:	f805 3b01 	strb.w	r3, [r5], #1
 800a4c0:	f10a 0a01 	add.w	sl, sl, #1
 800a4c4:	e23f      	b.n	800a946 <_dtoa_r+0x95e>
 800a4c6:	07f2      	lsls	r2, r6, #31
 800a4c8:	d505      	bpl.n	800a4d6 <_dtoa_r+0x4ee>
 800a4ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4ce:	f7f6 f893 	bl	80005f8 <__aeabi_dmul>
 800a4d2:	3501      	adds	r5, #1
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	1076      	asrs	r6, r6, #1
 800a4d8:	3708      	adds	r7, #8
 800a4da:	e76c      	b.n	800a3b6 <_dtoa_r+0x3ce>
 800a4dc:	2502      	movs	r5, #2
 800a4de:	e76f      	b.n	800a3c0 <_dtoa_r+0x3d8>
 800a4e0:	9b01      	ldr	r3, [sp, #4]
 800a4e2:	f8cd a01c 	str.w	sl, [sp, #28]
 800a4e6:	930c      	str	r3, [sp, #48]	; 0x30
 800a4e8:	e78d      	b.n	800a406 <_dtoa_r+0x41e>
 800a4ea:	9900      	ldr	r1, [sp, #0]
 800a4ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a4ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4f0:	4b4e      	ldr	r3, [pc, #312]	; (800a62c <_dtoa_r+0x644>)
 800a4f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a4f6:	4401      	add	r1, r0
 800a4f8:	9102      	str	r1, [sp, #8]
 800a4fa:	9908      	ldr	r1, [sp, #32]
 800a4fc:	eeb0 8a47 	vmov.f32	s16, s14
 800a500:	eef0 8a67 	vmov.f32	s17, s15
 800a504:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a508:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a50c:	2900      	cmp	r1, #0
 800a50e:	d045      	beq.n	800a59c <_dtoa_r+0x5b4>
 800a510:	494c      	ldr	r1, [pc, #304]	; (800a644 <_dtoa_r+0x65c>)
 800a512:	2000      	movs	r0, #0
 800a514:	f7f6 f99a 	bl	800084c <__aeabi_ddiv>
 800a518:	ec53 2b18 	vmov	r2, r3, d8
 800a51c:	f7f5 feb4 	bl	8000288 <__aeabi_dsub>
 800a520:	9d00      	ldr	r5, [sp, #0]
 800a522:	ec41 0b18 	vmov	d8, r0, r1
 800a526:	4639      	mov	r1, r7
 800a528:	4630      	mov	r0, r6
 800a52a:	f7f6 fb15 	bl	8000b58 <__aeabi_d2iz>
 800a52e:	900c      	str	r0, [sp, #48]	; 0x30
 800a530:	f7f5 fff8 	bl	8000524 <__aeabi_i2d>
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	4630      	mov	r0, r6
 800a53a:	4639      	mov	r1, r7
 800a53c:	f7f5 fea4 	bl	8000288 <__aeabi_dsub>
 800a540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a542:	3330      	adds	r3, #48	; 0x30
 800a544:	f805 3b01 	strb.w	r3, [r5], #1
 800a548:	ec53 2b18 	vmov	r2, r3, d8
 800a54c:	4606      	mov	r6, r0
 800a54e:	460f      	mov	r7, r1
 800a550:	f7f6 fac4 	bl	8000adc <__aeabi_dcmplt>
 800a554:	2800      	cmp	r0, #0
 800a556:	d165      	bne.n	800a624 <_dtoa_r+0x63c>
 800a558:	4632      	mov	r2, r6
 800a55a:	463b      	mov	r3, r7
 800a55c:	4935      	ldr	r1, [pc, #212]	; (800a634 <_dtoa_r+0x64c>)
 800a55e:	2000      	movs	r0, #0
 800a560:	f7f5 fe92 	bl	8000288 <__aeabi_dsub>
 800a564:	ec53 2b18 	vmov	r2, r3, d8
 800a568:	f7f6 fab8 	bl	8000adc <__aeabi_dcmplt>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	f040 80b9 	bne.w	800a6e4 <_dtoa_r+0x6fc>
 800a572:	9b02      	ldr	r3, [sp, #8]
 800a574:	429d      	cmp	r5, r3
 800a576:	f43f af75 	beq.w	800a464 <_dtoa_r+0x47c>
 800a57a:	4b2f      	ldr	r3, [pc, #188]	; (800a638 <_dtoa_r+0x650>)
 800a57c:	ec51 0b18 	vmov	r0, r1, d8
 800a580:	2200      	movs	r2, #0
 800a582:	f7f6 f839 	bl	80005f8 <__aeabi_dmul>
 800a586:	4b2c      	ldr	r3, [pc, #176]	; (800a638 <_dtoa_r+0x650>)
 800a588:	ec41 0b18 	vmov	d8, r0, r1
 800a58c:	2200      	movs	r2, #0
 800a58e:	4630      	mov	r0, r6
 800a590:	4639      	mov	r1, r7
 800a592:	f7f6 f831 	bl	80005f8 <__aeabi_dmul>
 800a596:	4606      	mov	r6, r0
 800a598:	460f      	mov	r7, r1
 800a59a:	e7c4      	b.n	800a526 <_dtoa_r+0x53e>
 800a59c:	ec51 0b17 	vmov	r0, r1, d7
 800a5a0:	f7f6 f82a 	bl	80005f8 <__aeabi_dmul>
 800a5a4:	9b02      	ldr	r3, [sp, #8]
 800a5a6:	9d00      	ldr	r5, [sp, #0]
 800a5a8:	930c      	str	r3, [sp, #48]	; 0x30
 800a5aa:	ec41 0b18 	vmov	d8, r0, r1
 800a5ae:	4639      	mov	r1, r7
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	f7f6 fad1 	bl	8000b58 <__aeabi_d2iz>
 800a5b6:	9011      	str	r0, [sp, #68]	; 0x44
 800a5b8:	f7f5 ffb4 	bl	8000524 <__aeabi_i2d>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	4639      	mov	r1, r7
 800a5c4:	f7f5 fe60 	bl	8000288 <__aeabi_dsub>
 800a5c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5ca:	3330      	adds	r3, #48	; 0x30
 800a5cc:	f805 3b01 	strb.w	r3, [r5], #1
 800a5d0:	9b02      	ldr	r3, [sp, #8]
 800a5d2:	429d      	cmp	r5, r3
 800a5d4:	4606      	mov	r6, r0
 800a5d6:	460f      	mov	r7, r1
 800a5d8:	f04f 0200 	mov.w	r2, #0
 800a5dc:	d134      	bne.n	800a648 <_dtoa_r+0x660>
 800a5de:	4b19      	ldr	r3, [pc, #100]	; (800a644 <_dtoa_r+0x65c>)
 800a5e0:	ec51 0b18 	vmov	r0, r1, d8
 800a5e4:	f7f5 fe52 	bl	800028c <__adddf3>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	4639      	mov	r1, r7
 800a5f0:	f7f6 fa92 	bl	8000b18 <__aeabi_dcmpgt>
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d175      	bne.n	800a6e4 <_dtoa_r+0x6fc>
 800a5f8:	ec53 2b18 	vmov	r2, r3, d8
 800a5fc:	4911      	ldr	r1, [pc, #68]	; (800a644 <_dtoa_r+0x65c>)
 800a5fe:	2000      	movs	r0, #0
 800a600:	f7f5 fe42 	bl	8000288 <__aeabi_dsub>
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	4630      	mov	r0, r6
 800a60a:	4639      	mov	r1, r7
 800a60c:	f7f6 fa66 	bl	8000adc <__aeabi_dcmplt>
 800a610:	2800      	cmp	r0, #0
 800a612:	f43f af27 	beq.w	800a464 <_dtoa_r+0x47c>
 800a616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a618:	1e6b      	subs	r3, r5, #1
 800a61a:	930c      	str	r3, [sp, #48]	; 0x30
 800a61c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a620:	2b30      	cmp	r3, #48	; 0x30
 800a622:	d0f8      	beq.n	800a616 <_dtoa_r+0x62e>
 800a624:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a628:	e04a      	b.n	800a6c0 <_dtoa_r+0x6d8>
 800a62a:	bf00      	nop
 800a62c:	0800c4c8 	.word	0x0800c4c8
 800a630:	0800c4a0 	.word	0x0800c4a0
 800a634:	3ff00000 	.word	0x3ff00000
 800a638:	40240000 	.word	0x40240000
 800a63c:	401c0000 	.word	0x401c0000
 800a640:	40140000 	.word	0x40140000
 800a644:	3fe00000 	.word	0x3fe00000
 800a648:	4baf      	ldr	r3, [pc, #700]	; (800a908 <_dtoa_r+0x920>)
 800a64a:	f7f5 ffd5 	bl	80005f8 <__aeabi_dmul>
 800a64e:	4606      	mov	r6, r0
 800a650:	460f      	mov	r7, r1
 800a652:	e7ac      	b.n	800a5ae <_dtoa_r+0x5c6>
 800a654:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a658:	9d00      	ldr	r5, [sp, #0]
 800a65a:	4642      	mov	r2, r8
 800a65c:	464b      	mov	r3, r9
 800a65e:	4630      	mov	r0, r6
 800a660:	4639      	mov	r1, r7
 800a662:	f7f6 f8f3 	bl	800084c <__aeabi_ddiv>
 800a666:	f7f6 fa77 	bl	8000b58 <__aeabi_d2iz>
 800a66a:	9002      	str	r0, [sp, #8]
 800a66c:	f7f5 ff5a 	bl	8000524 <__aeabi_i2d>
 800a670:	4642      	mov	r2, r8
 800a672:	464b      	mov	r3, r9
 800a674:	f7f5 ffc0 	bl	80005f8 <__aeabi_dmul>
 800a678:	4602      	mov	r2, r0
 800a67a:	460b      	mov	r3, r1
 800a67c:	4630      	mov	r0, r6
 800a67e:	4639      	mov	r1, r7
 800a680:	f7f5 fe02 	bl	8000288 <__aeabi_dsub>
 800a684:	9e02      	ldr	r6, [sp, #8]
 800a686:	9f01      	ldr	r7, [sp, #4]
 800a688:	3630      	adds	r6, #48	; 0x30
 800a68a:	f805 6b01 	strb.w	r6, [r5], #1
 800a68e:	9e00      	ldr	r6, [sp, #0]
 800a690:	1bae      	subs	r6, r5, r6
 800a692:	42b7      	cmp	r7, r6
 800a694:	4602      	mov	r2, r0
 800a696:	460b      	mov	r3, r1
 800a698:	d137      	bne.n	800a70a <_dtoa_r+0x722>
 800a69a:	f7f5 fdf7 	bl	800028c <__adddf3>
 800a69e:	4642      	mov	r2, r8
 800a6a0:	464b      	mov	r3, r9
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	460f      	mov	r7, r1
 800a6a6:	f7f6 fa37 	bl	8000b18 <__aeabi_dcmpgt>
 800a6aa:	b9c8      	cbnz	r0, 800a6e0 <_dtoa_r+0x6f8>
 800a6ac:	4642      	mov	r2, r8
 800a6ae:	464b      	mov	r3, r9
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	4639      	mov	r1, r7
 800a6b4:	f7f6 fa08 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6b8:	b110      	cbz	r0, 800a6c0 <_dtoa_r+0x6d8>
 800a6ba:	9b02      	ldr	r3, [sp, #8]
 800a6bc:	07d9      	lsls	r1, r3, #31
 800a6be:	d40f      	bmi.n	800a6e0 <_dtoa_r+0x6f8>
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	4659      	mov	r1, fp
 800a6c4:	f000 fad6 	bl	800ac74 <_Bfree>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	702b      	strb	r3, [r5, #0]
 800a6cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6ce:	f10a 0001 	add.w	r0, sl, #1
 800a6d2:	6018      	str	r0, [r3, #0]
 800a6d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f43f acd8 	beq.w	800a08c <_dtoa_r+0xa4>
 800a6dc:	601d      	str	r5, [r3, #0]
 800a6de:	e4d5      	b.n	800a08c <_dtoa_r+0xa4>
 800a6e0:	f8cd a01c 	str.w	sl, [sp, #28]
 800a6e4:	462b      	mov	r3, r5
 800a6e6:	461d      	mov	r5, r3
 800a6e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6ec:	2a39      	cmp	r2, #57	; 0x39
 800a6ee:	d108      	bne.n	800a702 <_dtoa_r+0x71a>
 800a6f0:	9a00      	ldr	r2, [sp, #0]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d1f7      	bne.n	800a6e6 <_dtoa_r+0x6fe>
 800a6f6:	9a07      	ldr	r2, [sp, #28]
 800a6f8:	9900      	ldr	r1, [sp, #0]
 800a6fa:	3201      	adds	r2, #1
 800a6fc:	9207      	str	r2, [sp, #28]
 800a6fe:	2230      	movs	r2, #48	; 0x30
 800a700:	700a      	strb	r2, [r1, #0]
 800a702:	781a      	ldrb	r2, [r3, #0]
 800a704:	3201      	adds	r2, #1
 800a706:	701a      	strb	r2, [r3, #0]
 800a708:	e78c      	b.n	800a624 <_dtoa_r+0x63c>
 800a70a:	4b7f      	ldr	r3, [pc, #508]	; (800a908 <_dtoa_r+0x920>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	f7f5 ff73 	bl	80005f8 <__aeabi_dmul>
 800a712:	2200      	movs	r2, #0
 800a714:	2300      	movs	r3, #0
 800a716:	4606      	mov	r6, r0
 800a718:	460f      	mov	r7, r1
 800a71a:	f7f6 f9d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a71e:	2800      	cmp	r0, #0
 800a720:	d09b      	beq.n	800a65a <_dtoa_r+0x672>
 800a722:	e7cd      	b.n	800a6c0 <_dtoa_r+0x6d8>
 800a724:	9a08      	ldr	r2, [sp, #32]
 800a726:	2a00      	cmp	r2, #0
 800a728:	f000 80c4 	beq.w	800a8b4 <_dtoa_r+0x8cc>
 800a72c:	9a05      	ldr	r2, [sp, #20]
 800a72e:	2a01      	cmp	r2, #1
 800a730:	f300 80a8 	bgt.w	800a884 <_dtoa_r+0x89c>
 800a734:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a736:	2a00      	cmp	r2, #0
 800a738:	f000 80a0 	beq.w	800a87c <_dtoa_r+0x894>
 800a73c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a740:	9e06      	ldr	r6, [sp, #24]
 800a742:	4645      	mov	r5, r8
 800a744:	9a04      	ldr	r2, [sp, #16]
 800a746:	2101      	movs	r1, #1
 800a748:	441a      	add	r2, r3
 800a74a:	4620      	mov	r0, r4
 800a74c:	4498      	add	r8, r3
 800a74e:	9204      	str	r2, [sp, #16]
 800a750:	f000 fb4c 	bl	800adec <__i2b>
 800a754:	4607      	mov	r7, r0
 800a756:	2d00      	cmp	r5, #0
 800a758:	dd0b      	ble.n	800a772 <_dtoa_r+0x78a>
 800a75a:	9b04      	ldr	r3, [sp, #16]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	dd08      	ble.n	800a772 <_dtoa_r+0x78a>
 800a760:	42ab      	cmp	r3, r5
 800a762:	9a04      	ldr	r2, [sp, #16]
 800a764:	bfa8      	it	ge
 800a766:	462b      	movge	r3, r5
 800a768:	eba8 0803 	sub.w	r8, r8, r3
 800a76c:	1aed      	subs	r5, r5, r3
 800a76e:	1ad3      	subs	r3, r2, r3
 800a770:	9304      	str	r3, [sp, #16]
 800a772:	9b06      	ldr	r3, [sp, #24]
 800a774:	b1fb      	cbz	r3, 800a7b6 <_dtoa_r+0x7ce>
 800a776:	9b08      	ldr	r3, [sp, #32]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f000 809f 	beq.w	800a8bc <_dtoa_r+0x8d4>
 800a77e:	2e00      	cmp	r6, #0
 800a780:	dd11      	ble.n	800a7a6 <_dtoa_r+0x7be>
 800a782:	4639      	mov	r1, r7
 800a784:	4632      	mov	r2, r6
 800a786:	4620      	mov	r0, r4
 800a788:	f000 fbec 	bl	800af64 <__pow5mult>
 800a78c:	465a      	mov	r2, fp
 800a78e:	4601      	mov	r1, r0
 800a790:	4607      	mov	r7, r0
 800a792:	4620      	mov	r0, r4
 800a794:	f000 fb40 	bl	800ae18 <__multiply>
 800a798:	4659      	mov	r1, fp
 800a79a:	9007      	str	r0, [sp, #28]
 800a79c:	4620      	mov	r0, r4
 800a79e:	f000 fa69 	bl	800ac74 <_Bfree>
 800a7a2:	9b07      	ldr	r3, [sp, #28]
 800a7a4:	469b      	mov	fp, r3
 800a7a6:	9b06      	ldr	r3, [sp, #24]
 800a7a8:	1b9a      	subs	r2, r3, r6
 800a7aa:	d004      	beq.n	800a7b6 <_dtoa_r+0x7ce>
 800a7ac:	4659      	mov	r1, fp
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f000 fbd8 	bl	800af64 <__pow5mult>
 800a7b4:	4683      	mov	fp, r0
 800a7b6:	2101      	movs	r1, #1
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f000 fb17 	bl	800adec <__i2b>
 800a7be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	dd7c      	ble.n	800a8c0 <_dtoa_r+0x8d8>
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	4601      	mov	r1, r0
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f000 fbca 	bl	800af64 <__pow5mult>
 800a7d0:	9b05      	ldr	r3, [sp, #20]
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	4606      	mov	r6, r0
 800a7d6:	dd76      	ble.n	800a8c6 <_dtoa_r+0x8de>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	9306      	str	r3, [sp, #24]
 800a7dc:	6933      	ldr	r3, [r6, #16]
 800a7de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a7e2:	6918      	ldr	r0, [r3, #16]
 800a7e4:	f000 fab2 	bl	800ad4c <__hi0bits>
 800a7e8:	f1c0 0020 	rsb	r0, r0, #32
 800a7ec:	9b04      	ldr	r3, [sp, #16]
 800a7ee:	4418      	add	r0, r3
 800a7f0:	f010 001f 	ands.w	r0, r0, #31
 800a7f4:	f000 8086 	beq.w	800a904 <_dtoa_r+0x91c>
 800a7f8:	f1c0 0320 	rsb	r3, r0, #32
 800a7fc:	2b04      	cmp	r3, #4
 800a7fe:	dd7f      	ble.n	800a900 <_dtoa_r+0x918>
 800a800:	f1c0 001c 	rsb	r0, r0, #28
 800a804:	9b04      	ldr	r3, [sp, #16]
 800a806:	4403      	add	r3, r0
 800a808:	4480      	add	r8, r0
 800a80a:	4405      	add	r5, r0
 800a80c:	9304      	str	r3, [sp, #16]
 800a80e:	f1b8 0f00 	cmp.w	r8, #0
 800a812:	dd05      	ble.n	800a820 <_dtoa_r+0x838>
 800a814:	4659      	mov	r1, fp
 800a816:	4642      	mov	r2, r8
 800a818:	4620      	mov	r0, r4
 800a81a:	f000 fbfd 	bl	800b018 <__lshift>
 800a81e:	4683      	mov	fp, r0
 800a820:	9b04      	ldr	r3, [sp, #16]
 800a822:	2b00      	cmp	r3, #0
 800a824:	dd05      	ble.n	800a832 <_dtoa_r+0x84a>
 800a826:	4631      	mov	r1, r6
 800a828:	461a      	mov	r2, r3
 800a82a:	4620      	mov	r0, r4
 800a82c:	f000 fbf4 	bl	800b018 <__lshift>
 800a830:	4606      	mov	r6, r0
 800a832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a834:	2b00      	cmp	r3, #0
 800a836:	d069      	beq.n	800a90c <_dtoa_r+0x924>
 800a838:	4631      	mov	r1, r6
 800a83a:	4658      	mov	r0, fp
 800a83c:	f000 fc58 	bl	800b0f0 <__mcmp>
 800a840:	2800      	cmp	r0, #0
 800a842:	da63      	bge.n	800a90c <_dtoa_r+0x924>
 800a844:	2300      	movs	r3, #0
 800a846:	4659      	mov	r1, fp
 800a848:	220a      	movs	r2, #10
 800a84a:	4620      	mov	r0, r4
 800a84c:	f000 fa34 	bl	800acb8 <__multadd>
 800a850:	9b08      	ldr	r3, [sp, #32]
 800a852:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a856:	4683      	mov	fp, r0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	f000 818f 	beq.w	800ab7c <_dtoa_r+0xb94>
 800a85e:	4639      	mov	r1, r7
 800a860:	2300      	movs	r3, #0
 800a862:	220a      	movs	r2, #10
 800a864:	4620      	mov	r0, r4
 800a866:	f000 fa27 	bl	800acb8 <__multadd>
 800a86a:	f1b9 0f00 	cmp.w	r9, #0
 800a86e:	4607      	mov	r7, r0
 800a870:	f300 808e 	bgt.w	800a990 <_dtoa_r+0x9a8>
 800a874:	9b05      	ldr	r3, [sp, #20]
 800a876:	2b02      	cmp	r3, #2
 800a878:	dc50      	bgt.n	800a91c <_dtoa_r+0x934>
 800a87a:	e089      	b.n	800a990 <_dtoa_r+0x9a8>
 800a87c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a87e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a882:	e75d      	b.n	800a740 <_dtoa_r+0x758>
 800a884:	9b01      	ldr	r3, [sp, #4]
 800a886:	1e5e      	subs	r6, r3, #1
 800a888:	9b06      	ldr	r3, [sp, #24]
 800a88a:	42b3      	cmp	r3, r6
 800a88c:	bfbf      	itttt	lt
 800a88e:	9b06      	ldrlt	r3, [sp, #24]
 800a890:	9606      	strlt	r6, [sp, #24]
 800a892:	1af2      	sublt	r2, r6, r3
 800a894:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a896:	bfb6      	itet	lt
 800a898:	189b      	addlt	r3, r3, r2
 800a89a:	1b9e      	subge	r6, r3, r6
 800a89c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a89e:	9b01      	ldr	r3, [sp, #4]
 800a8a0:	bfb8      	it	lt
 800a8a2:	2600      	movlt	r6, #0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	bfb5      	itete	lt
 800a8a8:	eba8 0503 	sublt.w	r5, r8, r3
 800a8ac:	9b01      	ldrge	r3, [sp, #4]
 800a8ae:	2300      	movlt	r3, #0
 800a8b0:	4645      	movge	r5, r8
 800a8b2:	e747      	b.n	800a744 <_dtoa_r+0x75c>
 800a8b4:	9e06      	ldr	r6, [sp, #24]
 800a8b6:	9f08      	ldr	r7, [sp, #32]
 800a8b8:	4645      	mov	r5, r8
 800a8ba:	e74c      	b.n	800a756 <_dtoa_r+0x76e>
 800a8bc:	9a06      	ldr	r2, [sp, #24]
 800a8be:	e775      	b.n	800a7ac <_dtoa_r+0x7c4>
 800a8c0:	9b05      	ldr	r3, [sp, #20]
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	dc18      	bgt.n	800a8f8 <_dtoa_r+0x910>
 800a8c6:	9b02      	ldr	r3, [sp, #8]
 800a8c8:	b9b3      	cbnz	r3, 800a8f8 <_dtoa_r+0x910>
 800a8ca:	9b03      	ldr	r3, [sp, #12]
 800a8cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8d0:	b9a3      	cbnz	r3, 800a8fc <_dtoa_r+0x914>
 800a8d2:	9b03      	ldr	r3, [sp, #12]
 800a8d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8d8:	0d1b      	lsrs	r3, r3, #20
 800a8da:	051b      	lsls	r3, r3, #20
 800a8dc:	b12b      	cbz	r3, 800a8ea <_dtoa_r+0x902>
 800a8de:	9b04      	ldr	r3, [sp, #16]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	9304      	str	r3, [sp, #16]
 800a8e4:	f108 0801 	add.w	r8, r8, #1
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	9306      	str	r3, [sp, #24]
 800a8ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f47f af74 	bne.w	800a7dc <_dtoa_r+0x7f4>
 800a8f4:	2001      	movs	r0, #1
 800a8f6:	e779      	b.n	800a7ec <_dtoa_r+0x804>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	e7f6      	b.n	800a8ea <_dtoa_r+0x902>
 800a8fc:	9b02      	ldr	r3, [sp, #8]
 800a8fe:	e7f4      	b.n	800a8ea <_dtoa_r+0x902>
 800a900:	d085      	beq.n	800a80e <_dtoa_r+0x826>
 800a902:	4618      	mov	r0, r3
 800a904:	301c      	adds	r0, #28
 800a906:	e77d      	b.n	800a804 <_dtoa_r+0x81c>
 800a908:	40240000 	.word	0x40240000
 800a90c:	9b01      	ldr	r3, [sp, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	dc38      	bgt.n	800a984 <_dtoa_r+0x99c>
 800a912:	9b05      	ldr	r3, [sp, #20]
 800a914:	2b02      	cmp	r3, #2
 800a916:	dd35      	ble.n	800a984 <_dtoa_r+0x99c>
 800a918:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a91c:	f1b9 0f00 	cmp.w	r9, #0
 800a920:	d10d      	bne.n	800a93e <_dtoa_r+0x956>
 800a922:	4631      	mov	r1, r6
 800a924:	464b      	mov	r3, r9
 800a926:	2205      	movs	r2, #5
 800a928:	4620      	mov	r0, r4
 800a92a:	f000 f9c5 	bl	800acb8 <__multadd>
 800a92e:	4601      	mov	r1, r0
 800a930:	4606      	mov	r6, r0
 800a932:	4658      	mov	r0, fp
 800a934:	f000 fbdc 	bl	800b0f0 <__mcmp>
 800a938:	2800      	cmp	r0, #0
 800a93a:	f73f adbd 	bgt.w	800a4b8 <_dtoa_r+0x4d0>
 800a93e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a940:	9d00      	ldr	r5, [sp, #0]
 800a942:	ea6f 0a03 	mvn.w	sl, r3
 800a946:	f04f 0800 	mov.w	r8, #0
 800a94a:	4631      	mov	r1, r6
 800a94c:	4620      	mov	r0, r4
 800a94e:	f000 f991 	bl	800ac74 <_Bfree>
 800a952:	2f00      	cmp	r7, #0
 800a954:	f43f aeb4 	beq.w	800a6c0 <_dtoa_r+0x6d8>
 800a958:	f1b8 0f00 	cmp.w	r8, #0
 800a95c:	d005      	beq.n	800a96a <_dtoa_r+0x982>
 800a95e:	45b8      	cmp	r8, r7
 800a960:	d003      	beq.n	800a96a <_dtoa_r+0x982>
 800a962:	4641      	mov	r1, r8
 800a964:	4620      	mov	r0, r4
 800a966:	f000 f985 	bl	800ac74 <_Bfree>
 800a96a:	4639      	mov	r1, r7
 800a96c:	4620      	mov	r0, r4
 800a96e:	f000 f981 	bl	800ac74 <_Bfree>
 800a972:	e6a5      	b.n	800a6c0 <_dtoa_r+0x6d8>
 800a974:	2600      	movs	r6, #0
 800a976:	4637      	mov	r7, r6
 800a978:	e7e1      	b.n	800a93e <_dtoa_r+0x956>
 800a97a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a97c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a980:	4637      	mov	r7, r6
 800a982:	e599      	b.n	800a4b8 <_dtoa_r+0x4d0>
 800a984:	9b08      	ldr	r3, [sp, #32]
 800a986:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f000 80fd 	beq.w	800ab8a <_dtoa_r+0xba2>
 800a990:	2d00      	cmp	r5, #0
 800a992:	dd05      	ble.n	800a9a0 <_dtoa_r+0x9b8>
 800a994:	4639      	mov	r1, r7
 800a996:	462a      	mov	r2, r5
 800a998:	4620      	mov	r0, r4
 800a99a:	f000 fb3d 	bl	800b018 <__lshift>
 800a99e:	4607      	mov	r7, r0
 800a9a0:	9b06      	ldr	r3, [sp, #24]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d05c      	beq.n	800aa60 <_dtoa_r+0xa78>
 800a9a6:	6879      	ldr	r1, [r7, #4]
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f000 f923 	bl	800abf4 <_Balloc>
 800a9ae:	4605      	mov	r5, r0
 800a9b0:	b928      	cbnz	r0, 800a9be <_dtoa_r+0x9d6>
 800a9b2:	4b80      	ldr	r3, [pc, #512]	; (800abb4 <_dtoa_r+0xbcc>)
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a9ba:	f7ff bb2e 	b.w	800a01a <_dtoa_r+0x32>
 800a9be:	693a      	ldr	r2, [r7, #16]
 800a9c0:	3202      	adds	r2, #2
 800a9c2:	0092      	lsls	r2, r2, #2
 800a9c4:	f107 010c 	add.w	r1, r7, #12
 800a9c8:	300c      	adds	r0, #12
 800a9ca:	f000 f905 	bl	800abd8 <memcpy>
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	4629      	mov	r1, r5
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f000 fb20 	bl	800b018 <__lshift>
 800a9d8:	9b00      	ldr	r3, [sp, #0]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	9301      	str	r3, [sp, #4]
 800a9de:	9b00      	ldr	r3, [sp, #0]
 800a9e0:	444b      	add	r3, r9
 800a9e2:	9307      	str	r3, [sp, #28]
 800a9e4:	9b02      	ldr	r3, [sp, #8]
 800a9e6:	f003 0301 	and.w	r3, r3, #1
 800a9ea:	46b8      	mov	r8, r7
 800a9ec:	9306      	str	r3, [sp, #24]
 800a9ee:	4607      	mov	r7, r0
 800a9f0:	9b01      	ldr	r3, [sp, #4]
 800a9f2:	4631      	mov	r1, r6
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	4658      	mov	r0, fp
 800a9f8:	9302      	str	r3, [sp, #8]
 800a9fa:	f7ff fa67 	bl	8009ecc <quorem>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	3330      	adds	r3, #48	; 0x30
 800aa02:	9004      	str	r0, [sp, #16]
 800aa04:	4641      	mov	r1, r8
 800aa06:	4658      	mov	r0, fp
 800aa08:	9308      	str	r3, [sp, #32]
 800aa0a:	f000 fb71 	bl	800b0f0 <__mcmp>
 800aa0e:	463a      	mov	r2, r7
 800aa10:	4681      	mov	r9, r0
 800aa12:	4631      	mov	r1, r6
 800aa14:	4620      	mov	r0, r4
 800aa16:	f000 fb87 	bl	800b128 <__mdiff>
 800aa1a:	68c2      	ldr	r2, [r0, #12]
 800aa1c:	9b08      	ldr	r3, [sp, #32]
 800aa1e:	4605      	mov	r5, r0
 800aa20:	bb02      	cbnz	r2, 800aa64 <_dtoa_r+0xa7c>
 800aa22:	4601      	mov	r1, r0
 800aa24:	4658      	mov	r0, fp
 800aa26:	f000 fb63 	bl	800b0f0 <__mcmp>
 800aa2a:	9b08      	ldr	r3, [sp, #32]
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	4629      	mov	r1, r5
 800aa30:	4620      	mov	r0, r4
 800aa32:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800aa36:	f000 f91d 	bl	800ac74 <_Bfree>
 800aa3a:	9b05      	ldr	r3, [sp, #20]
 800aa3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa3e:	9d01      	ldr	r5, [sp, #4]
 800aa40:	ea43 0102 	orr.w	r1, r3, r2
 800aa44:	9b06      	ldr	r3, [sp, #24]
 800aa46:	430b      	orrs	r3, r1
 800aa48:	9b08      	ldr	r3, [sp, #32]
 800aa4a:	d10d      	bne.n	800aa68 <_dtoa_r+0xa80>
 800aa4c:	2b39      	cmp	r3, #57	; 0x39
 800aa4e:	d029      	beq.n	800aaa4 <_dtoa_r+0xabc>
 800aa50:	f1b9 0f00 	cmp.w	r9, #0
 800aa54:	dd01      	ble.n	800aa5a <_dtoa_r+0xa72>
 800aa56:	9b04      	ldr	r3, [sp, #16]
 800aa58:	3331      	adds	r3, #49	; 0x31
 800aa5a:	9a02      	ldr	r2, [sp, #8]
 800aa5c:	7013      	strb	r3, [r2, #0]
 800aa5e:	e774      	b.n	800a94a <_dtoa_r+0x962>
 800aa60:	4638      	mov	r0, r7
 800aa62:	e7b9      	b.n	800a9d8 <_dtoa_r+0x9f0>
 800aa64:	2201      	movs	r2, #1
 800aa66:	e7e2      	b.n	800aa2e <_dtoa_r+0xa46>
 800aa68:	f1b9 0f00 	cmp.w	r9, #0
 800aa6c:	db06      	blt.n	800aa7c <_dtoa_r+0xa94>
 800aa6e:	9905      	ldr	r1, [sp, #20]
 800aa70:	ea41 0909 	orr.w	r9, r1, r9
 800aa74:	9906      	ldr	r1, [sp, #24]
 800aa76:	ea59 0101 	orrs.w	r1, r9, r1
 800aa7a:	d120      	bne.n	800aabe <_dtoa_r+0xad6>
 800aa7c:	2a00      	cmp	r2, #0
 800aa7e:	ddec      	ble.n	800aa5a <_dtoa_r+0xa72>
 800aa80:	4659      	mov	r1, fp
 800aa82:	2201      	movs	r2, #1
 800aa84:	4620      	mov	r0, r4
 800aa86:	9301      	str	r3, [sp, #4]
 800aa88:	f000 fac6 	bl	800b018 <__lshift>
 800aa8c:	4631      	mov	r1, r6
 800aa8e:	4683      	mov	fp, r0
 800aa90:	f000 fb2e 	bl	800b0f0 <__mcmp>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	9b01      	ldr	r3, [sp, #4]
 800aa98:	dc02      	bgt.n	800aaa0 <_dtoa_r+0xab8>
 800aa9a:	d1de      	bne.n	800aa5a <_dtoa_r+0xa72>
 800aa9c:	07da      	lsls	r2, r3, #31
 800aa9e:	d5dc      	bpl.n	800aa5a <_dtoa_r+0xa72>
 800aaa0:	2b39      	cmp	r3, #57	; 0x39
 800aaa2:	d1d8      	bne.n	800aa56 <_dtoa_r+0xa6e>
 800aaa4:	9a02      	ldr	r2, [sp, #8]
 800aaa6:	2339      	movs	r3, #57	; 0x39
 800aaa8:	7013      	strb	r3, [r2, #0]
 800aaaa:	462b      	mov	r3, r5
 800aaac:	461d      	mov	r5, r3
 800aaae:	3b01      	subs	r3, #1
 800aab0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aab4:	2a39      	cmp	r2, #57	; 0x39
 800aab6:	d050      	beq.n	800ab5a <_dtoa_r+0xb72>
 800aab8:	3201      	adds	r2, #1
 800aaba:	701a      	strb	r2, [r3, #0]
 800aabc:	e745      	b.n	800a94a <_dtoa_r+0x962>
 800aabe:	2a00      	cmp	r2, #0
 800aac0:	dd03      	ble.n	800aaca <_dtoa_r+0xae2>
 800aac2:	2b39      	cmp	r3, #57	; 0x39
 800aac4:	d0ee      	beq.n	800aaa4 <_dtoa_r+0xabc>
 800aac6:	3301      	adds	r3, #1
 800aac8:	e7c7      	b.n	800aa5a <_dtoa_r+0xa72>
 800aaca:	9a01      	ldr	r2, [sp, #4]
 800aacc:	9907      	ldr	r1, [sp, #28]
 800aace:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aad2:	428a      	cmp	r2, r1
 800aad4:	d02a      	beq.n	800ab2c <_dtoa_r+0xb44>
 800aad6:	4659      	mov	r1, fp
 800aad8:	2300      	movs	r3, #0
 800aada:	220a      	movs	r2, #10
 800aadc:	4620      	mov	r0, r4
 800aade:	f000 f8eb 	bl	800acb8 <__multadd>
 800aae2:	45b8      	cmp	r8, r7
 800aae4:	4683      	mov	fp, r0
 800aae6:	f04f 0300 	mov.w	r3, #0
 800aaea:	f04f 020a 	mov.w	r2, #10
 800aaee:	4641      	mov	r1, r8
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	d107      	bne.n	800ab04 <_dtoa_r+0xb1c>
 800aaf4:	f000 f8e0 	bl	800acb8 <__multadd>
 800aaf8:	4680      	mov	r8, r0
 800aafa:	4607      	mov	r7, r0
 800aafc:	9b01      	ldr	r3, [sp, #4]
 800aafe:	3301      	adds	r3, #1
 800ab00:	9301      	str	r3, [sp, #4]
 800ab02:	e775      	b.n	800a9f0 <_dtoa_r+0xa08>
 800ab04:	f000 f8d8 	bl	800acb8 <__multadd>
 800ab08:	4639      	mov	r1, r7
 800ab0a:	4680      	mov	r8, r0
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	220a      	movs	r2, #10
 800ab10:	4620      	mov	r0, r4
 800ab12:	f000 f8d1 	bl	800acb8 <__multadd>
 800ab16:	4607      	mov	r7, r0
 800ab18:	e7f0      	b.n	800aafc <_dtoa_r+0xb14>
 800ab1a:	f1b9 0f00 	cmp.w	r9, #0
 800ab1e:	9a00      	ldr	r2, [sp, #0]
 800ab20:	bfcc      	ite	gt
 800ab22:	464d      	movgt	r5, r9
 800ab24:	2501      	movle	r5, #1
 800ab26:	4415      	add	r5, r2
 800ab28:	f04f 0800 	mov.w	r8, #0
 800ab2c:	4659      	mov	r1, fp
 800ab2e:	2201      	movs	r2, #1
 800ab30:	4620      	mov	r0, r4
 800ab32:	9301      	str	r3, [sp, #4]
 800ab34:	f000 fa70 	bl	800b018 <__lshift>
 800ab38:	4631      	mov	r1, r6
 800ab3a:	4683      	mov	fp, r0
 800ab3c:	f000 fad8 	bl	800b0f0 <__mcmp>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	dcb2      	bgt.n	800aaaa <_dtoa_r+0xac2>
 800ab44:	d102      	bne.n	800ab4c <_dtoa_r+0xb64>
 800ab46:	9b01      	ldr	r3, [sp, #4]
 800ab48:	07db      	lsls	r3, r3, #31
 800ab4a:	d4ae      	bmi.n	800aaaa <_dtoa_r+0xac2>
 800ab4c:	462b      	mov	r3, r5
 800ab4e:	461d      	mov	r5, r3
 800ab50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab54:	2a30      	cmp	r2, #48	; 0x30
 800ab56:	d0fa      	beq.n	800ab4e <_dtoa_r+0xb66>
 800ab58:	e6f7      	b.n	800a94a <_dtoa_r+0x962>
 800ab5a:	9a00      	ldr	r2, [sp, #0]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d1a5      	bne.n	800aaac <_dtoa_r+0xac4>
 800ab60:	f10a 0a01 	add.w	sl, sl, #1
 800ab64:	2331      	movs	r3, #49	; 0x31
 800ab66:	e779      	b.n	800aa5c <_dtoa_r+0xa74>
 800ab68:	4b13      	ldr	r3, [pc, #76]	; (800abb8 <_dtoa_r+0xbd0>)
 800ab6a:	f7ff baaf 	b.w	800a0cc <_dtoa_r+0xe4>
 800ab6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f47f aa86 	bne.w	800a082 <_dtoa_r+0x9a>
 800ab76:	4b11      	ldr	r3, [pc, #68]	; (800abbc <_dtoa_r+0xbd4>)
 800ab78:	f7ff baa8 	b.w	800a0cc <_dtoa_r+0xe4>
 800ab7c:	f1b9 0f00 	cmp.w	r9, #0
 800ab80:	dc03      	bgt.n	800ab8a <_dtoa_r+0xba2>
 800ab82:	9b05      	ldr	r3, [sp, #20]
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	f73f aec9 	bgt.w	800a91c <_dtoa_r+0x934>
 800ab8a:	9d00      	ldr	r5, [sp, #0]
 800ab8c:	4631      	mov	r1, r6
 800ab8e:	4658      	mov	r0, fp
 800ab90:	f7ff f99c 	bl	8009ecc <quorem>
 800ab94:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ab98:	f805 3b01 	strb.w	r3, [r5], #1
 800ab9c:	9a00      	ldr	r2, [sp, #0]
 800ab9e:	1aaa      	subs	r2, r5, r2
 800aba0:	4591      	cmp	r9, r2
 800aba2:	ddba      	ble.n	800ab1a <_dtoa_r+0xb32>
 800aba4:	4659      	mov	r1, fp
 800aba6:	2300      	movs	r3, #0
 800aba8:	220a      	movs	r2, #10
 800abaa:	4620      	mov	r0, r4
 800abac:	f000 f884 	bl	800acb8 <__multadd>
 800abb0:	4683      	mov	fp, r0
 800abb2:	e7eb      	b.n	800ab8c <_dtoa_r+0xba4>
 800abb4:	0800c42b 	.word	0x0800c42b
 800abb8:	0800c384 	.word	0x0800c384
 800abbc:	0800c3a8 	.word	0x0800c3a8

0800abc0 <_localeconv_r>:
 800abc0:	4800      	ldr	r0, [pc, #0]	; (800abc4 <_localeconv_r+0x4>)
 800abc2:	4770      	bx	lr
 800abc4:	20000168 	.word	0x20000168

0800abc8 <malloc>:
 800abc8:	4b02      	ldr	r3, [pc, #8]	; (800abd4 <malloc+0xc>)
 800abca:	4601      	mov	r1, r0
 800abcc:	6818      	ldr	r0, [r3, #0]
 800abce:	f000 bbef 	b.w	800b3b0 <_malloc_r>
 800abd2:	bf00      	nop
 800abd4:	20000014 	.word	0x20000014

0800abd8 <memcpy>:
 800abd8:	440a      	add	r2, r1
 800abda:	4291      	cmp	r1, r2
 800abdc:	f100 33ff 	add.w	r3, r0, #4294967295
 800abe0:	d100      	bne.n	800abe4 <memcpy+0xc>
 800abe2:	4770      	bx	lr
 800abe4:	b510      	push	{r4, lr}
 800abe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abee:	4291      	cmp	r1, r2
 800abf0:	d1f9      	bne.n	800abe6 <memcpy+0xe>
 800abf2:	bd10      	pop	{r4, pc}

0800abf4 <_Balloc>:
 800abf4:	b570      	push	{r4, r5, r6, lr}
 800abf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800abf8:	4604      	mov	r4, r0
 800abfa:	460d      	mov	r5, r1
 800abfc:	b976      	cbnz	r6, 800ac1c <_Balloc+0x28>
 800abfe:	2010      	movs	r0, #16
 800ac00:	f7ff ffe2 	bl	800abc8 <malloc>
 800ac04:	4602      	mov	r2, r0
 800ac06:	6260      	str	r0, [r4, #36]	; 0x24
 800ac08:	b920      	cbnz	r0, 800ac14 <_Balloc+0x20>
 800ac0a:	4b18      	ldr	r3, [pc, #96]	; (800ac6c <_Balloc+0x78>)
 800ac0c:	4818      	ldr	r0, [pc, #96]	; (800ac70 <_Balloc+0x7c>)
 800ac0e:	2166      	movs	r1, #102	; 0x66
 800ac10:	f000 fd94 	bl	800b73c <__assert_func>
 800ac14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac18:	6006      	str	r6, [r0, #0]
 800ac1a:	60c6      	str	r6, [r0, #12]
 800ac1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac1e:	68f3      	ldr	r3, [r6, #12]
 800ac20:	b183      	cbz	r3, 800ac44 <_Balloc+0x50>
 800ac22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac24:	68db      	ldr	r3, [r3, #12]
 800ac26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac2a:	b9b8      	cbnz	r0, 800ac5c <_Balloc+0x68>
 800ac2c:	2101      	movs	r1, #1
 800ac2e:	fa01 f605 	lsl.w	r6, r1, r5
 800ac32:	1d72      	adds	r2, r6, #5
 800ac34:	0092      	lsls	r2, r2, #2
 800ac36:	4620      	mov	r0, r4
 800ac38:	f000 fb5a 	bl	800b2f0 <_calloc_r>
 800ac3c:	b160      	cbz	r0, 800ac58 <_Balloc+0x64>
 800ac3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac42:	e00e      	b.n	800ac62 <_Balloc+0x6e>
 800ac44:	2221      	movs	r2, #33	; 0x21
 800ac46:	2104      	movs	r1, #4
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f000 fb51 	bl	800b2f0 <_calloc_r>
 800ac4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac50:	60f0      	str	r0, [r6, #12]
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d1e4      	bne.n	800ac22 <_Balloc+0x2e>
 800ac58:	2000      	movs	r0, #0
 800ac5a:	bd70      	pop	{r4, r5, r6, pc}
 800ac5c:	6802      	ldr	r2, [r0, #0]
 800ac5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac62:	2300      	movs	r3, #0
 800ac64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac68:	e7f7      	b.n	800ac5a <_Balloc+0x66>
 800ac6a:	bf00      	nop
 800ac6c:	0800c3b5 	.word	0x0800c3b5
 800ac70:	0800c43c 	.word	0x0800c43c

0800ac74 <_Bfree>:
 800ac74:	b570      	push	{r4, r5, r6, lr}
 800ac76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac78:	4605      	mov	r5, r0
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	b976      	cbnz	r6, 800ac9c <_Bfree+0x28>
 800ac7e:	2010      	movs	r0, #16
 800ac80:	f7ff ffa2 	bl	800abc8 <malloc>
 800ac84:	4602      	mov	r2, r0
 800ac86:	6268      	str	r0, [r5, #36]	; 0x24
 800ac88:	b920      	cbnz	r0, 800ac94 <_Bfree+0x20>
 800ac8a:	4b09      	ldr	r3, [pc, #36]	; (800acb0 <_Bfree+0x3c>)
 800ac8c:	4809      	ldr	r0, [pc, #36]	; (800acb4 <_Bfree+0x40>)
 800ac8e:	218a      	movs	r1, #138	; 0x8a
 800ac90:	f000 fd54 	bl	800b73c <__assert_func>
 800ac94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac98:	6006      	str	r6, [r0, #0]
 800ac9a:	60c6      	str	r6, [r0, #12]
 800ac9c:	b13c      	cbz	r4, 800acae <_Bfree+0x3a>
 800ac9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aca0:	6862      	ldr	r2, [r4, #4]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aca8:	6021      	str	r1, [r4, #0]
 800acaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800acae:	bd70      	pop	{r4, r5, r6, pc}
 800acb0:	0800c3b5 	.word	0x0800c3b5
 800acb4:	0800c43c 	.word	0x0800c43c

0800acb8 <__multadd>:
 800acb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acbc:	690e      	ldr	r6, [r1, #16]
 800acbe:	4607      	mov	r7, r0
 800acc0:	4698      	mov	r8, r3
 800acc2:	460c      	mov	r4, r1
 800acc4:	f101 0014 	add.w	r0, r1, #20
 800acc8:	2300      	movs	r3, #0
 800acca:	6805      	ldr	r5, [r0, #0]
 800accc:	b2a9      	uxth	r1, r5
 800acce:	fb02 8101 	mla	r1, r2, r1, r8
 800acd2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800acd6:	0c2d      	lsrs	r5, r5, #16
 800acd8:	fb02 c505 	mla	r5, r2, r5, ip
 800acdc:	b289      	uxth	r1, r1
 800acde:	3301      	adds	r3, #1
 800ace0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ace4:	429e      	cmp	r6, r3
 800ace6:	f840 1b04 	str.w	r1, [r0], #4
 800acea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800acee:	dcec      	bgt.n	800acca <__multadd+0x12>
 800acf0:	f1b8 0f00 	cmp.w	r8, #0
 800acf4:	d022      	beq.n	800ad3c <__multadd+0x84>
 800acf6:	68a3      	ldr	r3, [r4, #8]
 800acf8:	42b3      	cmp	r3, r6
 800acfa:	dc19      	bgt.n	800ad30 <__multadd+0x78>
 800acfc:	6861      	ldr	r1, [r4, #4]
 800acfe:	4638      	mov	r0, r7
 800ad00:	3101      	adds	r1, #1
 800ad02:	f7ff ff77 	bl	800abf4 <_Balloc>
 800ad06:	4605      	mov	r5, r0
 800ad08:	b928      	cbnz	r0, 800ad16 <__multadd+0x5e>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	4b0d      	ldr	r3, [pc, #52]	; (800ad44 <__multadd+0x8c>)
 800ad0e:	480e      	ldr	r0, [pc, #56]	; (800ad48 <__multadd+0x90>)
 800ad10:	21b5      	movs	r1, #181	; 0xb5
 800ad12:	f000 fd13 	bl	800b73c <__assert_func>
 800ad16:	6922      	ldr	r2, [r4, #16]
 800ad18:	3202      	adds	r2, #2
 800ad1a:	f104 010c 	add.w	r1, r4, #12
 800ad1e:	0092      	lsls	r2, r2, #2
 800ad20:	300c      	adds	r0, #12
 800ad22:	f7ff ff59 	bl	800abd8 <memcpy>
 800ad26:	4621      	mov	r1, r4
 800ad28:	4638      	mov	r0, r7
 800ad2a:	f7ff ffa3 	bl	800ac74 <_Bfree>
 800ad2e:	462c      	mov	r4, r5
 800ad30:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ad34:	3601      	adds	r6, #1
 800ad36:	f8c3 8014 	str.w	r8, [r3, #20]
 800ad3a:	6126      	str	r6, [r4, #16]
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad42:	bf00      	nop
 800ad44:	0800c42b 	.word	0x0800c42b
 800ad48:	0800c43c 	.word	0x0800c43c

0800ad4c <__hi0bits>:
 800ad4c:	0c03      	lsrs	r3, r0, #16
 800ad4e:	041b      	lsls	r3, r3, #16
 800ad50:	b9d3      	cbnz	r3, 800ad88 <__hi0bits+0x3c>
 800ad52:	0400      	lsls	r0, r0, #16
 800ad54:	2310      	movs	r3, #16
 800ad56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ad5a:	bf04      	itt	eq
 800ad5c:	0200      	lsleq	r0, r0, #8
 800ad5e:	3308      	addeq	r3, #8
 800ad60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad64:	bf04      	itt	eq
 800ad66:	0100      	lsleq	r0, r0, #4
 800ad68:	3304      	addeq	r3, #4
 800ad6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad6e:	bf04      	itt	eq
 800ad70:	0080      	lsleq	r0, r0, #2
 800ad72:	3302      	addeq	r3, #2
 800ad74:	2800      	cmp	r0, #0
 800ad76:	db05      	blt.n	800ad84 <__hi0bits+0x38>
 800ad78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad7c:	f103 0301 	add.w	r3, r3, #1
 800ad80:	bf08      	it	eq
 800ad82:	2320      	moveq	r3, #32
 800ad84:	4618      	mov	r0, r3
 800ad86:	4770      	bx	lr
 800ad88:	2300      	movs	r3, #0
 800ad8a:	e7e4      	b.n	800ad56 <__hi0bits+0xa>

0800ad8c <__lo0bits>:
 800ad8c:	6803      	ldr	r3, [r0, #0]
 800ad8e:	f013 0207 	ands.w	r2, r3, #7
 800ad92:	4601      	mov	r1, r0
 800ad94:	d00b      	beq.n	800adae <__lo0bits+0x22>
 800ad96:	07da      	lsls	r2, r3, #31
 800ad98:	d424      	bmi.n	800ade4 <__lo0bits+0x58>
 800ad9a:	0798      	lsls	r0, r3, #30
 800ad9c:	bf49      	itett	mi
 800ad9e:	085b      	lsrmi	r3, r3, #1
 800ada0:	089b      	lsrpl	r3, r3, #2
 800ada2:	2001      	movmi	r0, #1
 800ada4:	600b      	strmi	r3, [r1, #0]
 800ada6:	bf5c      	itt	pl
 800ada8:	600b      	strpl	r3, [r1, #0]
 800adaa:	2002      	movpl	r0, #2
 800adac:	4770      	bx	lr
 800adae:	b298      	uxth	r0, r3
 800adb0:	b9b0      	cbnz	r0, 800ade0 <__lo0bits+0x54>
 800adb2:	0c1b      	lsrs	r3, r3, #16
 800adb4:	2010      	movs	r0, #16
 800adb6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800adba:	bf04      	itt	eq
 800adbc:	0a1b      	lsreq	r3, r3, #8
 800adbe:	3008      	addeq	r0, #8
 800adc0:	071a      	lsls	r2, r3, #28
 800adc2:	bf04      	itt	eq
 800adc4:	091b      	lsreq	r3, r3, #4
 800adc6:	3004      	addeq	r0, #4
 800adc8:	079a      	lsls	r2, r3, #30
 800adca:	bf04      	itt	eq
 800adcc:	089b      	lsreq	r3, r3, #2
 800adce:	3002      	addeq	r0, #2
 800add0:	07da      	lsls	r2, r3, #31
 800add2:	d403      	bmi.n	800addc <__lo0bits+0x50>
 800add4:	085b      	lsrs	r3, r3, #1
 800add6:	f100 0001 	add.w	r0, r0, #1
 800adda:	d005      	beq.n	800ade8 <__lo0bits+0x5c>
 800addc:	600b      	str	r3, [r1, #0]
 800adde:	4770      	bx	lr
 800ade0:	4610      	mov	r0, r2
 800ade2:	e7e8      	b.n	800adb6 <__lo0bits+0x2a>
 800ade4:	2000      	movs	r0, #0
 800ade6:	4770      	bx	lr
 800ade8:	2020      	movs	r0, #32
 800adea:	4770      	bx	lr

0800adec <__i2b>:
 800adec:	b510      	push	{r4, lr}
 800adee:	460c      	mov	r4, r1
 800adf0:	2101      	movs	r1, #1
 800adf2:	f7ff feff 	bl	800abf4 <_Balloc>
 800adf6:	4602      	mov	r2, r0
 800adf8:	b928      	cbnz	r0, 800ae06 <__i2b+0x1a>
 800adfa:	4b05      	ldr	r3, [pc, #20]	; (800ae10 <__i2b+0x24>)
 800adfc:	4805      	ldr	r0, [pc, #20]	; (800ae14 <__i2b+0x28>)
 800adfe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ae02:	f000 fc9b 	bl	800b73c <__assert_func>
 800ae06:	2301      	movs	r3, #1
 800ae08:	6144      	str	r4, [r0, #20]
 800ae0a:	6103      	str	r3, [r0, #16]
 800ae0c:	bd10      	pop	{r4, pc}
 800ae0e:	bf00      	nop
 800ae10:	0800c42b 	.word	0x0800c42b
 800ae14:	0800c43c 	.word	0x0800c43c

0800ae18 <__multiply>:
 800ae18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae1c:	4614      	mov	r4, r2
 800ae1e:	690a      	ldr	r2, [r1, #16]
 800ae20:	6923      	ldr	r3, [r4, #16]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	bfb8      	it	lt
 800ae26:	460b      	movlt	r3, r1
 800ae28:	460d      	mov	r5, r1
 800ae2a:	bfbc      	itt	lt
 800ae2c:	4625      	movlt	r5, r4
 800ae2e:	461c      	movlt	r4, r3
 800ae30:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ae34:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ae38:	68ab      	ldr	r3, [r5, #8]
 800ae3a:	6869      	ldr	r1, [r5, #4]
 800ae3c:	eb0a 0709 	add.w	r7, sl, r9
 800ae40:	42bb      	cmp	r3, r7
 800ae42:	b085      	sub	sp, #20
 800ae44:	bfb8      	it	lt
 800ae46:	3101      	addlt	r1, #1
 800ae48:	f7ff fed4 	bl	800abf4 <_Balloc>
 800ae4c:	b930      	cbnz	r0, 800ae5c <__multiply+0x44>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	4b42      	ldr	r3, [pc, #264]	; (800af5c <__multiply+0x144>)
 800ae52:	4843      	ldr	r0, [pc, #268]	; (800af60 <__multiply+0x148>)
 800ae54:	f240 115d 	movw	r1, #349	; 0x15d
 800ae58:	f000 fc70 	bl	800b73c <__assert_func>
 800ae5c:	f100 0614 	add.w	r6, r0, #20
 800ae60:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ae64:	4633      	mov	r3, r6
 800ae66:	2200      	movs	r2, #0
 800ae68:	4543      	cmp	r3, r8
 800ae6a:	d31e      	bcc.n	800aeaa <__multiply+0x92>
 800ae6c:	f105 0c14 	add.w	ip, r5, #20
 800ae70:	f104 0314 	add.w	r3, r4, #20
 800ae74:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ae78:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ae7c:	9202      	str	r2, [sp, #8]
 800ae7e:	ebac 0205 	sub.w	r2, ip, r5
 800ae82:	3a15      	subs	r2, #21
 800ae84:	f022 0203 	bic.w	r2, r2, #3
 800ae88:	3204      	adds	r2, #4
 800ae8a:	f105 0115 	add.w	r1, r5, #21
 800ae8e:	458c      	cmp	ip, r1
 800ae90:	bf38      	it	cc
 800ae92:	2204      	movcc	r2, #4
 800ae94:	9201      	str	r2, [sp, #4]
 800ae96:	9a02      	ldr	r2, [sp, #8]
 800ae98:	9303      	str	r3, [sp, #12]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d808      	bhi.n	800aeb0 <__multiply+0x98>
 800ae9e:	2f00      	cmp	r7, #0
 800aea0:	dc55      	bgt.n	800af4e <__multiply+0x136>
 800aea2:	6107      	str	r7, [r0, #16]
 800aea4:	b005      	add	sp, #20
 800aea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeaa:	f843 2b04 	str.w	r2, [r3], #4
 800aeae:	e7db      	b.n	800ae68 <__multiply+0x50>
 800aeb0:	f8b3 a000 	ldrh.w	sl, [r3]
 800aeb4:	f1ba 0f00 	cmp.w	sl, #0
 800aeb8:	d020      	beq.n	800aefc <__multiply+0xe4>
 800aeba:	f105 0e14 	add.w	lr, r5, #20
 800aebe:	46b1      	mov	r9, r6
 800aec0:	2200      	movs	r2, #0
 800aec2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800aec6:	f8d9 b000 	ldr.w	fp, [r9]
 800aeca:	b2a1      	uxth	r1, r4
 800aecc:	fa1f fb8b 	uxth.w	fp, fp
 800aed0:	fb0a b101 	mla	r1, sl, r1, fp
 800aed4:	4411      	add	r1, r2
 800aed6:	f8d9 2000 	ldr.w	r2, [r9]
 800aeda:	0c24      	lsrs	r4, r4, #16
 800aedc:	0c12      	lsrs	r2, r2, #16
 800aede:	fb0a 2404 	mla	r4, sl, r4, r2
 800aee2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800aee6:	b289      	uxth	r1, r1
 800aee8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aeec:	45f4      	cmp	ip, lr
 800aeee:	f849 1b04 	str.w	r1, [r9], #4
 800aef2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800aef6:	d8e4      	bhi.n	800aec2 <__multiply+0xaa>
 800aef8:	9901      	ldr	r1, [sp, #4]
 800aefa:	5072      	str	r2, [r6, r1]
 800aefc:	9a03      	ldr	r2, [sp, #12]
 800aefe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af02:	3304      	adds	r3, #4
 800af04:	f1b9 0f00 	cmp.w	r9, #0
 800af08:	d01f      	beq.n	800af4a <__multiply+0x132>
 800af0a:	6834      	ldr	r4, [r6, #0]
 800af0c:	f105 0114 	add.w	r1, r5, #20
 800af10:	46b6      	mov	lr, r6
 800af12:	f04f 0a00 	mov.w	sl, #0
 800af16:	880a      	ldrh	r2, [r1, #0]
 800af18:	f8be b002 	ldrh.w	fp, [lr, #2]
 800af1c:	fb09 b202 	mla	r2, r9, r2, fp
 800af20:	4492      	add	sl, r2
 800af22:	b2a4      	uxth	r4, r4
 800af24:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800af28:	f84e 4b04 	str.w	r4, [lr], #4
 800af2c:	f851 4b04 	ldr.w	r4, [r1], #4
 800af30:	f8be 2000 	ldrh.w	r2, [lr]
 800af34:	0c24      	lsrs	r4, r4, #16
 800af36:	fb09 2404 	mla	r4, r9, r4, r2
 800af3a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800af3e:	458c      	cmp	ip, r1
 800af40:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800af44:	d8e7      	bhi.n	800af16 <__multiply+0xfe>
 800af46:	9a01      	ldr	r2, [sp, #4]
 800af48:	50b4      	str	r4, [r6, r2]
 800af4a:	3604      	adds	r6, #4
 800af4c:	e7a3      	b.n	800ae96 <__multiply+0x7e>
 800af4e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af52:	2b00      	cmp	r3, #0
 800af54:	d1a5      	bne.n	800aea2 <__multiply+0x8a>
 800af56:	3f01      	subs	r7, #1
 800af58:	e7a1      	b.n	800ae9e <__multiply+0x86>
 800af5a:	bf00      	nop
 800af5c:	0800c42b 	.word	0x0800c42b
 800af60:	0800c43c 	.word	0x0800c43c

0800af64 <__pow5mult>:
 800af64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af68:	4615      	mov	r5, r2
 800af6a:	f012 0203 	ands.w	r2, r2, #3
 800af6e:	4606      	mov	r6, r0
 800af70:	460f      	mov	r7, r1
 800af72:	d007      	beq.n	800af84 <__pow5mult+0x20>
 800af74:	4c25      	ldr	r4, [pc, #148]	; (800b00c <__pow5mult+0xa8>)
 800af76:	3a01      	subs	r2, #1
 800af78:	2300      	movs	r3, #0
 800af7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af7e:	f7ff fe9b 	bl	800acb8 <__multadd>
 800af82:	4607      	mov	r7, r0
 800af84:	10ad      	asrs	r5, r5, #2
 800af86:	d03d      	beq.n	800b004 <__pow5mult+0xa0>
 800af88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af8a:	b97c      	cbnz	r4, 800afac <__pow5mult+0x48>
 800af8c:	2010      	movs	r0, #16
 800af8e:	f7ff fe1b 	bl	800abc8 <malloc>
 800af92:	4602      	mov	r2, r0
 800af94:	6270      	str	r0, [r6, #36]	; 0x24
 800af96:	b928      	cbnz	r0, 800afa4 <__pow5mult+0x40>
 800af98:	4b1d      	ldr	r3, [pc, #116]	; (800b010 <__pow5mult+0xac>)
 800af9a:	481e      	ldr	r0, [pc, #120]	; (800b014 <__pow5mult+0xb0>)
 800af9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800afa0:	f000 fbcc 	bl	800b73c <__assert_func>
 800afa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afa8:	6004      	str	r4, [r0, #0]
 800afaa:	60c4      	str	r4, [r0, #12]
 800afac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800afb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800afb4:	b94c      	cbnz	r4, 800afca <__pow5mult+0x66>
 800afb6:	f240 2171 	movw	r1, #625	; 0x271
 800afba:	4630      	mov	r0, r6
 800afbc:	f7ff ff16 	bl	800adec <__i2b>
 800afc0:	2300      	movs	r3, #0
 800afc2:	f8c8 0008 	str.w	r0, [r8, #8]
 800afc6:	4604      	mov	r4, r0
 800afc8:	6003      	str	r3, [r0, #0]
 800afca:	f04f 0900 	mov.w	r9, #0
 800afce:	07eb      	lsls	r3, r5, #31
 800afd0:	d50a      	bpl.n	800afe8 <__pow5mult+0x84>
 800afd2:	4639      	mov	r1, r7
 800afd4:	4622      	mov	r2, r4
 800afd6:	4630      	mov	r0, r6
 800afd8:	f7ff ff1e 	bl	800ae18 <__multiply>
 800afdc:	4639      	mov	r1, r7
 800afde:	4680      	mov	r8, r0
 800afe0:	4630      	mov	r0, r6
 800afe2:	f7ff fe47 	bl	800ac74 <_Bfree>
 800afe6:	4647      	mov	r7, r8
 800afe8:	106d      	asrs	r5, r5, #1
 800afea:	d00b      	beq.n	800b004 <__pow5mult+0xa0>
 800afec:	6820      	ldr	r0, [r4, #0]
 800afee:	b938      	cbnz	r0, 800b000 <__pow5mult+0x9c>
 800aff0:	4622      	mov	r2, r4
 800aff2:	4621      	mov	r1, r4
 800aff4:	4630      	mov	r0, r6
 800aff6:	f7ff ff0f 	bl	800ae18 <__multiply>
 800affa:	6020      	str	r0, [r4, #0]
 800affc:	f8c0 9000 	str.w	r9, [r0]
 800b000:	4604      	mov	r4, r0
 800b002:	e7e4      	b.n	800afce <__pow5mult+0x6a>
 800b004:	4638      	mov	r0, r7
 800b006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b00a:	bf00      	nop
 800b00c:	0800c590 	.word	0x0800c590
 800b010:	0800c3b5 	.word	0x0800c3b5
 800b014:	0800c43c 	.word	0x0800c43c

0800b018 <__lshift>:
 800b018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b01c:	460c      	mov	r4, r1
 800b01e:	6849      	ldr	r1, [r1, #4]
 800b020:	6923      	ldr	r3, [r4, #16]
 800b022:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b026:	68a3      	ldr	r3, [r4, #8]
 800b028:	4607      	mov	r7, r0
 800b02a:	4691      	mov	r9, r2
 800b02c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b030:	f108 0601 	add.w	r6, r8, #1
 800b034:	42b3      	cmp	r3, r6
 800b036:	db0b      	blt.n	800b050 <__lshift+0x38>
 800b038:	4638      	mov	r0, r7
 800b03a:	f7ff fddb 	bl	800abf4 <_Balloc>
 800b03e:	4605      	mov	r5, r0
 800b040:	b948      	cbnz	r0, 800b056 <__lshift+0x3e>
 800b042:	4602      	mov	r2, r0
 800b044:	4b28      	ldr	r3, [pc, #160]	; (800b0e8 <__lshift+0xd0>)
 800b046:	4829      	ldr	r0, [pc, #164]	; (800b0ec <__lshift+0xd4>)
 800b048:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b04c:	f000 fb76 	bl	800b73c <__assert_func>
 800b050:	3101      	adds	r1, #1
 800b052:	005b      	lsls	r3, r3, #1
 800b054:	e7ee      	b.n	800b034 <__lshift+0x1c>
 800b056:	2300      	movs	r3, #0
 800b058:	f100 0114 	add.w	r1, r0, #20
 800b05c:	f100 0210 	add.w	r2, r0, #16
 800b060:	4618      	mov	r0, r3
 800b062:	4553      	cmp	r3, sl
 800b064:	db33      	blt.n	800b0ce <__lshift+0xb6>
 800b066:	6920      	ldr	r0, [r4, #16]
 800b068:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b06c:	f104 0314 	add.w	r3, r4, #20
 800b070:	f019 091f 	ands.w	r9, r9, #31
 800b074:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b078:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b07c:	d02b      	beq.n	800b0d6 <__lshift+0xbe>
 800b07e:	f1c9 0e20 	rsb	lr, r9, #32
 800b082:	468a      	mov	sl, r1
 800b084:	2200      	movs	r2, #0
 800b086:	6818      	ldr	r0, [r3, #0]
 800b088:	fa00 f009 	lsl.w	r0, r0, r9
 800b08c:	4302      	orrs	r2, r0
 800b08e:	f84a 2b04 	str.w	r2, [sl], #4
 800b092:	f853 2b04 	ldr.w	r2, [r3], #4
 800b096:	459c      	cmp	ip, r3
 800b098:	fa22 f20e 	lsr.w	r2, r2, lr
 800b09c:	d8f3      	bhi.n	800b086 <__lshift+0x6e>
 800b09e:	ebac 0304 	sub.w	r3, ip, r4
 800b0a2:	3b15      	subs	r3, #21
 800b0a4:	f023 0303 	bic.w	r3, r3, #3
 800b0a8:	3304      	adds	r3, #4
 800b0aa:	f104 0015 	add.w	r0, r4, #21
 800b0ae:	4584      	cmp	ip, r0
 800b0b0:	bf38      	it	cc
 800b0b2:	2304      	movcc	r3, #4
 800b0b4:	50ca      	str	r2, [r1, r3]
 800b0b6:	b10a      	cbz	r2, 800b0bc <__lshift+0xa4>
 800b0b8:	f108 0602 	add.w	r6, r8, #2
 800b0bc:	3e01      	subs	r6, #1
 800b0be:	4638      	mov	r0, r7
 800b0c0:	612e      	str	r6, [r5, #16]
 800b0c2:	4621      	mov	r1, r4
 800b0c4:	f7ff fdd6 	bl	800ac74 <_Bfree>
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	e7c5      	b.n	800b062 <__lshift+0x4a>
 800b0d6:	3904      	subs	r1, #4
 800b0d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0e0:	459c      	cmp	ip, r3
 800b0e2:	d8f9      	bhi.n	800b0d8 <__lshift+0xc0>
 800b0e4:	e7ea      	b.n	800b0bc <__lshift+0xa4>
 800b0e6:	bf00      	nop
 800b0e8:	0800c42b 	.word	0x0800c42b
 800b0ec:	0800c43c 	.word	0x0800c43c

0800b0f0 <__mcmp>:
 800b0f0:	b530      	push	{r4, r5, lr}
 800b0f2:	6902      	ldr	r2, [r0, #16]
 800b0f4:	690c      	ldr	r4, [r1, #16]
 800b0f6:	1b12      	subs	r2, r2, r4
 800b0f8:	d10e      	bne.n	800b118 <__mcmp+0x28>
 800b0fa:	f100 0314 	add.w	r3, r0, #20
 800b0fe:	3114      	adds	r1, #20
 800b100:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b104:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b108:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b10c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b110:	42a5      	cmp	r5, r4
 800b112:	d003      	beq.n	800b11c <__mcmp+0x2c>
 800b114:	d305      	bcc.n	800b122 <__mcmp+0x32>
 800b116:	2201      	movs	r2, #1
 800b118:	4610      	mov	r0, r2
 800b11a:	bd30      	pop	{r4, r5, pc}
 800b11c:	4283      	cmp	r3, r0
 800b11e:	d3f3      	bcc.n	800b108 <__mcmp+0x18>
 800b120:	e7fa      	b.n	800b118 <__mcmp+0x28>
 800b122:	f04f 32ff 	mov.w	r2, #4294967295
 800b126:	e7f7      	b.n	800b118 <__mcmp+0x28>

0800b128 <__mdiff>:
 800b128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b12c:	460c      	mov	r4, r1
 800b12e:	4606      	mov	r6, r0
 800b130:	4611      	mov	r1, r2
 800b132:	4620      	mov	r0, r4
 800b134:	4617      	mov	r7, r2
 800b136:	f7ff ffdb 	bl	800b0f0 <__mcmp>
 800b13a:	1e05      	subs	r5, r0, #0
 800b13c:	d110      	bne.n	800b160 <__mdiff+0x38>
 800b13e:	4629      	mov	r1, r5
 800b140:	4630      	mov	r0, r6
 800b142:	f7ff fd57 	bl	800abf4 <_Balloc>
 800b146:	b930      	cbnz	r0, 800b156 <__mdiff+0x2e>
 800b148:	4b39      	ldr	r3, [pc, #228]	; (800b230 <__mdiff+0x108>)
 800b14a:	4602      	mov	r2, r0
 800b14c:	f240 2132 	movw	r1, #562	; 0x232
 800b150:	4838      	ldr	r0, [pc, #224]	; (800b234 <__mdiff+0x10c>)
 800b152:	f000 faf3 	bl	800b73c <__assert_func>
 800b156:	2301      	movs	r3, #1
 800b158:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b15c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b160:	bfa4      	itt	ge
 800b162:	463b      	movge	r3, r7
 800b164:	4627      	movge	r7, r4
 800b166:	4630      	mov	r0, r6
 800b168:	6879      	ldr	r1, [r7, #4]
 800b16a:	bfa6      	itte	ge
 800b16c:	461c      	movge	r4, r3
 800b16e:	2500      	movge	r5, #0
 800b170:	2501      	movlt	r5, #1
 800b172:	f7ff fd3f 	bl	800abf4 <_Balloc>
 800b176:	b920      	cbnz	r0, 800b182 <__mdiff+0x5a>
 800b178:	4b2d      	ldr	r3, [pc, #180]	; (800b230 <__mdiff+0x108>)
 800b17a:	4602      	mov	r2, r0
 800b17c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b180:	e7e6      	b.n	800b150 <__mdiff+0x28>
 800b182:	693e      	ldr	r6, [r7, #16]
 800b184:	60c5      	str	r5, [r0, #12]
 800b186:	6925      	ldr	r5, [r4, #16]
 800b188:	f107 0114 	add.w	r1, r7, #20
 800b18c:	f104 0914 	add.w	r9, r4, #20
 800b190:	f100 0e14 	add.w	lr, r0, #20
 800b194:	f107 0210 	add.w	r2, r7, #16
 800b198:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b19c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b1a0:	46f2      	mov	sl, lr
 800b1a2:	2700      	movs	r7, #0
 800b1a4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b1a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b1ac:	fa1f f883 	uxth.w	r8, r3
 800b1b0:	fa17 f78b 	uxtah	r7, r7, fp
 800b1b4:	0c1b      	lsrs	r3, r3, #16
 800b1b6:	eba7 0808 	sub.w	r8, r7, r8
 800b1ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b1be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b1c2:	fa1f f888 	uxth.w	r8, r8
 800b1c6:	141f      	asrs	r7, r3, #16
 800b1c8:	454d      	cmp	r5, r9
 800b1ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b1ce:	f84a 3b04 	str.w	r3, [sl], #4
 800b1d2:	d8e7      	bhi.n	800b1a4 <__mdiff+0x7c>
 800b1d4:	1b2b      	subs	r3, r5, r4
 800b1d6:	3b15      	subs	r3, #21
 800b1d8:	f023 0303 	bic.w	r3, r3, #3
 800b1dc:	3304      	adds	r3, #4
 800b1de:	3415      	adds	r4, #21
 800b1e0:	42a5      	cmp	r5, r4
 800b1e2:	bf38      	it	cc
 800b1e4:	2304      	movcc	r3, #4
 800b1e6:	4419      	add	r1, r3
 800b1e8:	4473      	add	r3, lr
 800b1ea:	469e      	mov	lr, r3
 800b1ec:	460d      	mov	r5, r1
 800b1ee:	4565      	cmp	r5, ip
 800b1f0:	d30e      	bcc.n	800b210 <__mdiff+0xe8>
 800b1f2:	f10c 0203 	add.w	r2, ip, #3
 800b1f6:	1a52      	subs	r2, r2, r1
 800b1f8:	f022 0203 	bic.w	r2, r2, #3
 800b1fc:	3903      	subs	r1, #3
 800b1fe:	458c      	cmp	ip, r1
 800b200:	bf38      	it	cc
 800b202:	2200      	movcc	r2, #0
 800b204:	441a      	add	r2, r3
 800b206:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b20a:	b17b      	cbz	r3, 800b22c <__mdiff+0x104>
 800b20c:	6106      	str	r6, [r0, #16]
 800b20e:	e7a5      	b.n	800b15c <__mdiff+0x34>
 800b210:	f855 8b04 	ldr.w	r8, [r5], #4
 800b214:	fa17 f488 	uxtah	r4, r7, r8
 800b218:	1422      	asrs	r2, r4, #16
 800b21a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b21e:	b2a4      	uxth	r4, r4
 800b220:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b224:	f84e 4b04 	str.w	r4, [lr], #4
 800b228:	1417      	asrs	r7, r2, #16
 800b22a:	e7e0      	b.n	800b1ee <__mdiff+0xc6>
 800b22c:	3e01      	subs	r6, #1
 800b22e:	e7ea      	b.n	800b206 <__mdiff+0xde>
 800b230:	0800c42b 	.word	0x0800c42b
 800b234:	0800c43c 	.word	0x0800c43c

0800b238 <__d2b>:
 800b238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b23c:	4689      	mov	r9, r1
 800b23e:	2101      	movs	r1, #1
 800b240:	ec57 6b10 	vmov	r6, r7, d0
 800b244:	4690      	mov	r8, r2
 800b246:	f7ff fcd5 	bl	800abf4 <_Balloc>
 800b24a:	4604      	mov	r4, r0
 800b24c:	b930      	cbnz	r0, 800b25c <__d2b+0x24>
 800b24e:	4602      	mov	r2, r0
 800b250:	4b25      	ldr	r3, [pc, #148]	; (800b2e8 <__d2b+0xb0>)
 800b252:	4826      	ldr	r0, [pc, #152]	; (800b2ec <__d2b+0xb4>)
 800b254:	f240 310a 	movw	r1, #778	; 0x30a
 800b258:	f000 fa70 	bl	800b73c <__assert_func>
 800b25c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b260:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b264:	bb35      	cbnz	r5, 800b2b4 <__d2b+0x7c>
 800b266:	2e00      	cmp	r6, #0
 800b268:	9301      	str	r3, [sp, #4]
 800b26a:	d028      	beq.n	800b2be <__d2b+0x86>
 800b26c:	4668      	mov	r0, sp
 800b26e:	9600      	str	r6, [sp, #0]
 800b270:	f7ff fd8c 	bl	800ad8c <__lo0bits>
 800b274:	9900      	ldr	r1, [sp, #0]
 800b276:	b300      	cbz	r0, 800b2ba <__d2b+0x82>
 800b278:	9a01      	ldr	r2, [sp, #4]
 800b27a:	f1c0 0320 	rsb	r3, r0, #32
 800b27e:	fa02 f303 	lsl.w	r3, r2, r3
 800b282:	430b      	orrs	r3, r1
 800b284:	40c2      	lsrs	r2, r0
 800b286:	6163      	str	r3, [r4, #20]
 800b288:	9201      	str	r2, [sp, #4]
 800b28a:	9b01      	ldr	r3, [sp, #4]
 800b28c:	61a3      	str	r3, [r4, #24]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	bf14      	ite	ne
 800b292:	2202      	movne	r2, #2
 800b294:	2201      	moveq	r2, #1
 800b296:	6122      	str	r2, [r4, #16]
 800b298:	b1d5      	cbz	r5, 800b2d0 <__d2b+0x98>
 800b29a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b29e:	4405      	add	r5, r0
 800b2a0:	f8c9 5000 	str.w	r5, [r9]
 800b2a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b2a8:	f8c8 0000 	str.w	r0, [r8]
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	b003      	add	sp, #12
 800b2b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2b8:	e7d5      	b.n	800b266 <__d2b+0x2e>
 800b2ba:	6161      	str	r1, [r4, #20]
 800b2bc:	e7e5      	b.n	800b28a <__d2b+0x52>
 800b2be:	a801      	add	r0, sp, #4
 800b2c0:	f7ff fd64 	bl	800ad8c <__lo0bits>
 800b2c4:	9b01      	ldr	r3, [sp, #4]
 800b2c6:	6163      	str	r3, [r4, #20]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	6122      	str	r2, [r4, #16]
 800b2cc:	3020      	adds	r0, #32
 800b2ce:	e7e3      	b.n	800b298 <__d2b+0x60>
 800b2d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b2d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b2d8:	f8c9 0000 	str.w	r0, [r9]
 800b2dc:	6918      	ldr	r0, [r3, #16]
 800b2de:	f7ff fd35 	bl	800ad4c <__hi0bits>
 800b2e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b2e6:	e7df      	b.n	800b2a8 <__d2b+0x70>
 800b2e8:	0800c42b 	.word	0x0800c42b
 800b2ec:	0800c43c 	.word	0x0800c43c

0800b2f0 <_calloc_r>:
 800b2f0:	b513      	push	{r0, r1, r4, lr}
 800b2f2:	434a      	muls	r2, r1
 800b2f4:	4611      	mov	r1, r2
 800b2f6:	9201      	str	r2, [sp, #4]
 800b2f8:	f000 f85a 	bl	800b3b0 <_malloc_r>
 800b2fc:	4604      	mov	r4, r0
 800b2fe:	b118      	cbz	r0, 800b308 <_calloc_r+0x18>
 800b300:	9a01      	ldr	r2, [sp, #4]
 800b302:	2100      	movs	r1, #0
 800b304:	f7fe f950 	bl	80095a8 <memset>
 800b308:	4620      	mov	r0, r4
 800b30a:	b002      	add	sp, #8
 800b30c:	bd10      	pop	{r4, pc}
	...

0800b310 <_free_r>:
 800b310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b312:	2900      	cmp	r1, #0
 800b314:	d048      	beq.n	800b3a8 <_free_r+0x98>
 800b316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b31a:	9001      	str	r0, [sp, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f1a1 0404 	sub.w	r4, r1, #4
 800b322:	bfb8      	it	lt
 800b324:	18e4      	addlt	r4, r4, r3
 800b326:	f000 fa65 	bl	800b7f4 <__malloc_lock>
 800b32a:	4a20      	ldr	r2, [pc, #128]	; (800b3ac <_free_r+0x9c>)
 800b32c:	9801      	ldr	r0, [sp, #4]
 800b32e:	6813      	ldr	r3, [r2, #0]
 800b330:	4615      	mov	r5, r2
 800b332:	b933      	cbnz	r3, 800b342 <_free_r+0x32>
 800b334:	6063      	str	r3, [r4, #4]
 800b336:	6014      	str	r4, [r2, #0]
 800b338:	b003      	add	sp, #12
 800b33a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b33e:	f000 ba5f 	b.w	800b800 <__malloc_unlock>
 800b342:	42a3      	cmp	r3, r4
 800b344:	d90b      	bls.n	800b35e <_free_r+0x4e>
 800b346:	6821      	ldr	r1, [r4, #0]
 800b348:	1862      	adds	r2, r4, r1
 800b34a:	4293      	cmp	r3, r2
 800b34c:	bf04      	itt	eq
 800b34e:	681a      	ldreq	r2, [r3, #0]
 800b350:	685b      	ldreq	r3, [r3, #4]
 800b352:	6063      	str	r3, [r4, #4]
 800b354:	bf04      	itt	eq
 800b356:	1852      	addeq	r2, r2, r1
 800b358:	6022      	streq	r2, [r4, #0]
 800b35a:	602c      	str	r4, [r5, #0]
 800b35c:	e7ec      	b.n	800b338 <_free_r+0x28>
 800b35e:	461a      	mov	r2, r3
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	b10b      	cbz	r3, 800b368 <_free_r+0x58>
 800b364:	42a3      	cmp	r3, r4
 800b366:	d9fa      	bls.n	800b35e <_free_r+0x4e>
 800b368:	6811      	ldr	r1, [r2, #0]
 800b36a:	1855      	adds	r5, r2, r1
 800b36c:	42a5      	cmp	r5, r4
 800b36e:	d10b      	bne.n	800b388 <_free_r+0x78>
 800b370:	6824      	ldr	r4, [r4, #0]
 800b372:	4421      	add	r1, r4
 800b374:	1854      	adds	r4, r2, r1
 800b376:	42a3      	cmp	r3, r4
 800b378:	6011      	str	r1, [r2, #0]
 800b37a:	d1dd      	bne.n	800b338 <_free_r+0x28>
 800b37c:	681c      	ldr	r4, [r3, #0]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	6053      	str	r3, [r2, #4]
 800b382:	4421      	add	r1, r4
 800b384:	6011      	str	r1, [r2, #0]
 800b386:	e7d7      	b.n	800b338 <_free_r+0x28>
 800b388:	d902      	bls.n	800b390 <_free_r+0x80>
 800b38a:	230c      	movs	r3, #12
 800b38c:	6003      	str	r3, [r0, #0]
 800b38e:	e7d3      	b.n	800b338 <_free_r+0x28>
 800b390:	6825      	ldr	r5, [r4, #0]
 800b392:	1961      	adds	r1, r4, r5
 800b394:	428b      	cmp	r3, r1
 800b396:	bf04      	itt	eq
 800b398:	6819      	ldreq	r1, [r3, #0]
 800b39a:	685b      	ldreq	r3, [r3, #4]
 800b39c:	6063      	str	r3, [r4, #4]
 800b39e:	bf04      	itt	eq
 800b3a0:	1949      	addeq	r1, r1, r5
 800b3a2:	6021      	streq	r1, [r4, #0]
 800b3a4:	6054      	str	r4, [r2, #4]
 800b3a6:	e7c7      	b.n	800b338 <_free_r+0x28>
 800b3a8:	b003      	add	sp, #12
 800b3aa:	bd30      	pop	{r4, r5, pc}
 800b3ac:	20000234 	.word	0x20000234

0800b3b0 <_malloc_r>:
 800b3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b2:	1ccd      	adds	r5, r1, #3
 800b3b4:	f025 0503 	bic.w	r5, r5, #3
 800b3b8:	3508      	adds	r5, #8
 800b3ba:	2d0c      	cmp	r5, #12
 800b3bc:	bf38      	it	cc
 800b3be:	250c      	movcc	r5, #12
 800b3c0:	2d00      	cmp	r5, #0
 800b3c2:	4606      	mov	r6, r0
 800b3c4:	db01      	blt.n	800b3ca <_malloc_r+0x1a>
 800b3c6:	42a9      	cmp	r1, r5
 800b3c8:	d903      	bls.n	800b3d2 <_malloc_r+0x22>
 800b3ca:	230c      	movs	r3, #12
 800b3cc:	6033      	str	r3, [r6, #0]
 800b3ce:	2000      	movs	r0, #0
 800b3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3d2:	f000 fa0f 	bl	800b7f4 <__malloc_lock>
 800b3d6:	4921      	ldr	r1, [pc, #132]	; (800b45c <_malloc_r+0xac>)
 800b3d8:	680a      	ldr	r2, [r1, #0]
 800b3da:	4614      	mov	r4, r2
 800b3dc:	b99c      	cbnz	r4, 800b406 <_malloc_r+0x56>
 800b3de:	4f20      	ldr	r7, [pc, #128]	; (800b460 <_malloc_r+0xb0>)
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	b923      	cbnz	r3, 800b3ee <_malloc_r+0x3e>
 800b3e4:	4621      	mov	r1, r4
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	f000 f998 	bl	800b71c <_sbrk_r>
 800b3ec:	6038      	str	r0, [r7, #0]
 800b3ee:	4629      	mov	r1, r5
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	f000 f993 	bl	800b71c <_sbrk_r>
 800b3f6:	1c43      	adds	r3, r0, #1
 800b3f8:	d123      	bne.n	800b442 <_malloc_r+0x92>
 800b3fa:	230c      	movs	r3, #12
 800b3fc:	6033      	str	r3, [r6, #0]
 800b3fe:	4630      	mov	r0, r6
 800b400:	f000 f9fe 	bl	800b800 <__malloc_unlock>
 800b404:	e7e3      	b.n	800b3ce <_malloc_r+0x1e>
 800b406:	6823      	ldr	r3, [r4, #0]
 800b408:	1b5b      	subs	r3, r3, r5
 800b40a:	d417      	bmi.n	800b43c <_malloc_r+0x8c>
 800b40c:	2b0b      	cmp	r3, #11
 800b40e:	d903      	bls.n	800b418 <_malloc_r+0x68>
 800b410:	6023      	str	r3, [r4, #0]
 800b412:	441c      	add	r4, r3
 800b414:	6025      	str	r5, [r4, #0]
 800b416:	e004      	b.n	800b422 <_malloc_r+0x72>
 800b418:	6863      	ldr	r3, [r4, #4]
 800b41a:	42a2      	cmp	r2, r4
 800b41c:	bf0c      	ite	eq
 800b41e:	600b      	streq	r3, [r1, #0]
 800b420:	6053      	strne	r3, [r2, #4]
 800b422:	4630      	mov	r0, r6
 800b424:	f000 f9ec 	bl	800b800 <__malloc_unlock>
 800b428:	f104 000b 	add.w	r0, r4, #11
 800b42c:	1d23      	adds	r3, r4, #4
 800b42e:	f020 0007 	bic.w	r0, r0, #7
 800b432:	1ac2      	subs	r2, r0, r3
 800b434:	d0cc      	beq.n	800b3d0 <_malloc_r+0x20>
 800b436:	1a1b      	subs	r3, r3, r0
 800b438:	50a3      	str	r3, [r4, r2]
 800b43a:	e7c9      	b.n	800b3d0 <_malloc_r+0x20>
 800b43c:	4622      	mov	r2, r4
 800b43e:	6864      	ldr	r4, [r4, #4]
 800b440:	e7cc      	b.n	800b3dc <_malloc_r+0x2c>
 800b442:	1cc4      	adds	r4, r0, #3
 800b444:	f024 0403 	bic.w	r4, r4, #3
 800b448:	42a0      	cmp	r0, r4
 800b44a:	d0e3      	beq.n	800b414 <_malloc_r+0x64>
 800b44c:	1a21      	subs	r1, r4, r0
 800b44e:	4630      	mov	r0, r6
 800b450:	f000 f964 	bl	800b71c <_sbrk_r>
 800b454:	3001      	adds	r0, #1
 800b456:	d1dd      	bne.n	800b414 <_malloc_r+0x64>
 800b458:	e7cf      	b.n	800b3fa <_malloc_r+0x4a>
 800b45a:	bf00      	nop
 800b45c:	20000234 	.word	0x20000234
 800b460:	20000238 	.word	0x20000238

0800b464 <__ssputs_r>:
 800b464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b468:	688e      	ldr	r6, [r1, #8]
 800b46a:	429e      	cmp	r6, r3
 800b46c:	4682      	mov	sl, r0
 800b46e:	460c      	mov	r4, r1
 800b470:	4690      	mov	r8, r2
 800b472:	461f      	mov	r7, r3
 800b474:	d838      	bhi.n	800b4e8 <__ssputs_r+0x84>
 800b476:	898a      	ldrh	r2, [r1, #12]
 800b478:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b47c:	d032      	beq.n	800b4e4 <__ssputs_r+0x80>
 800b47e:	6825      	ldr	r5, [r4, #0]
 800b480:	6909      	ldr	r1, [r1, #16]
 800b482:	eba5 0901 	sub.w	r9, r5, r1
 800b486:	6965      	ldr	r5, [r4, #20]
 800b488:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b48c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b490:	3301      	adds	r3, #1
 800b492:	444b      	add	r3, r9
 800b494:	106d      	asrs	r5, r5, #1
 800b496:	429d      	cmp	r5, r3
 800b498:	bf38      	it	cc
 800b49a:	461d      	movcc	r5, r3
 800b49c:	0553      	lsls	r3, r2, #21
 800b49e:	d531      	bpl.n	800b504 <__ssputs_r+0xa0>
 800b4a0:	4629      	mov	r1, r5
 800b4a2:	f7ff ff85 	bl	800b3b0 <_malloc_r>
 800b4a6:	4606      	mov	r6, r0
 800b4a8:	b950      	cbnz	r0, 800b4c0 <__ssputs_r+0x5c>
 800b4aa:	230c      	movs	r3, #12
 800b4ac:	f8ca 3000 	str.w	r3, [sl]
 800b4b0:	89a3      	ldrh	r3, [r4, #12]
 800b4b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4b6:	81a3      	strh	r3, [r4, #12]
 800b4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4c0:	6921      	ldr	r1, [r4, #16]
 800b4c2:	464a      	mov	r2, r9
 800b4c4:	f7ff fb88 	bl	800abd8 <memcpy>
 800b4c8:	89a3      	ldrh	r3, [r4, #12]
 800b4ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b4ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4d2:	81a3      	strh	r3, [r4, #12]
 800b4d4:	6126      	str	r6, [r4, #16]
 800b4d6:	6165      	str	r5, [r4, #20]
 800b4d8:	444e      	add	r6, r9
 800b4da:	eba5 0509 	sub.w	r5, r5, r9
 800b4de:	6026      	str	r6, [r4, #0]
 800b4e0:	60a5      	str	r5, [r4, #8]
 800b4e2:	463e      	mov	r6, r7
 800b4e4:	42be      	cmp	r6, r7
 800b4e6:	d900      	bls.n	800b4ea <__ssputs_r+0x86>
 800b4e8:	463e      	mov	r6, r7
 800b4ea:	4632      	mov	r2, r6
 800b4ec:	6820      	ldr	r0, [r4, #0]
 800b4ee:	4641      	mov	r1, r8
 800b4f0:	f000 f966 	bl	800b7c0 <memmove>
 800b4f4:	68a3      	ldr	r3, [r4, #8]
 800b4f6:	6822      	ldr	r2, [r4, #0]
 800b4f8:	1b9b      	subs	r3, r3, r6
 800b4fa:	4432      	add	r2, r6
 800b4fc:	60a3      	str	r3, [r4, #8]
 800b4fe:	6022      	str	r2, [r4, #0]
 800b500:	2000      	movs	r0, #0
 800b502:	e7db      	b.n	800b4bc <__ssputs_r+0x58>
 800b504:	462a      	mov	r2, r5
 800b506:	f000 f981 	bl	800b80c <_realloc_r>
 800b50a:	4606      	mov	r6, r0
 800b50c:	2800      	cmp	r0, #0
 800b50e:	d1e1      	bne.n	800b4d4 <__ssputs_r+0x70>
 800b510:	6921      	ldr	r1, [r4, #16]
 800b512:	4650      	mov	r0, sl
 800b514:	f7ff fefc 	bl	800b310 <_free_r>
 800b518:	e7c7      	b.n	800b4aa <__ssputs_r+0x46>
	...

0800b51c <_svfiprintf_r>:
 800b51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b520:	4698      	mov	r8, r3
 800b522:	898b      	ldrh	r3, [r1, #12]
 800b524:	061b      	lsls	r3, r3, #24
 800b526:	b09d      	sub	sp, #116	; 0x74
 800b528:	4607      	mov	r7, r0
 800b52a:	460d      	mov	r5, r1
 800b52c:	4614      	mov	r4, r2
 800b52e:	d50e      	bpl.n	800b54e <_svfiprintf_r+0x32>
 800b530:	690b      	ldr	r3, [r1, #16]
 800b532:	b963      	cbnz	r3, 800b54e <_svfiprintf_r+0x32>
 800b534:	2140      	movs	r1, #64	; 0x40
 800b536:	f7ff ff3b 	bl	800b3b0 <_malloc_r>
 800b53a:	6028      	str	r0, [r5, #0]
 800b53c:	6128      	str	r0, [r5, #16]
 800b53e:	b920      	cbnz	r0, 800b54a <_svfiprintf_r+0x2e>
 800b540:	230c      	movs	r3, #12
 800b542:	603b      	str	r3, [r7, #0]
 800b544:	f04f 30ff 	mov.w	r0, #4294967295
 800b548:	e0d1      	b.n	800b6ee <_svfiprintf_r+0x1d2>
 800b54a:	2340      	movs	r3, #64	; 0x40
 800b54c:	616b      	str	r3, [r5, #20]
 800b54e:	2300      	movs	r3, #0
 800b550:	9309      	str	r3, [sp, #36]	; 0x24
 800b552:	2320      	movs	r3, #32
 800b554:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b558:	f8cd 800c 	str.w	r8, [sp, #12]
 800b55c:	2330      	movs	r3, #48	; 0x30
 800b55e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b708 <_svfiprintf_r+0x1ec>
 800b562:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b566:	f04f 0901 	mov.w	r9, #1
 800b56a:	4623      	mov	r3, r4
 800b56c:	469a      	mov	sl, r3
 800b56e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b572:	b10a      	cbz	r2, 800b578 <_svfiprintf_r+0x5c>
 800b574:	2a25      	cmp	r2, #37	; 0x25
 800b576:	d1f9      	bne.n	800b56c <_svfiprintf_r+0x50>
 800b578:	ebba 0b04 	subs.w	fp, sl, r4
 800b57c:	d00b      	beq.n	800b596 <_svfiprintf_r+0x7a>
 800b57e:	465b      	mov	r3, fp
 800b580:	4622      	mov	r2, r4
 800b582:	4629      	mov	r1, r5
 800b584:	4638      	mov	r0, r7
 800b586:	f7ff ff6d 	bl	800b464 <__ssputs_r>
 800b58a:	3001      	adds	r0, #1
 800b58c:	f000 80aa 	beq.w	800b6e4 <_svfiprintf_r+0x1c8>
 800b590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b592:	445a      	add	r2, fp
 800b594:	9209      	str	r2, [sp, #36]	; 0x24
 800b596:	f89a 3000 	ldrb.w	r3, [sl]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	f000 80a2 	beq.w	800b6e4 <_svfiprintf_r+0x1c8>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5aa:	f10a 0a01 	add.w	sl, sl, #1
 800b5ae:	9304      	str	r3, [sp, #16]
 800b5b0:	9307      	str	r3, [sp, #28]
 800b5b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5b6:	931a      	str	r3, [sp, #104]	; 0x68
 800b5b8:	4654      	mov	r4, sl
 800b5ba:	2205      	movs	r2, #5
 800b5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5c0:	4851      	ldr	r0, [pc, #324]	; (800b708 <_svfiprintf_r+0x1ec>)
 800b5c2:	f7f4 fe0d 	bl	80001e0 <memchr>
 800b5c6:	9a04      	ldr	r2, [sp, #16]
 800b5c8:	b9d8      	cbnz	r0, 800b602 <_svfiprintf_r+0xe6>
 800b5ca:	06d0      	lsls	r0, r2, #27
 800b5cc:	bf44      	itt	mi
 800b5ce:	2320      	movmi	r3, #32
 800b5d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5d4:	0711      	lsls	r1, r2, #28
 800b5d6:	bf44      	itt	mi
 800b5d8:	232b      	movmi	r3, #43	; 0x2b
 800b5da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5de:	f89a 3000 	ldrb.w	r3, [sl]
 800b5e2:	2b2a      	cmp	r3, #42	; 0x2a
 800b5e4:	d015      	beq.n	800b612 <_svfiprintf_r+0xf6>
 800b5e6:	9a07      	ldr	r2, [sp, #28]
 800b5e8:	4654      	mov	r4, sl
 800b5ea:	2000      	movs	r0, #0
 800b5ec:	f04f 0c0a 	mov.w	ip, #10
 800b5f0:	4621      	mov	r1, r4
 800b5f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5f6:	3b30      	subs	r3, #48	; 0x30
 800b5f8:	2b09      	cmp	r3, #9
 800b5fa:	d94e      	bls.n	800b69a <_svfiprintf_r+0x17e>
 800b5fc:	b1b0      	cbz	r0, 800b62c <_svfiprintf_r+0x110>
 800b5fe:	9207      	str	r2, [sp, #28]
 800b600:	e014      	b.n	800b62c <_svfiprintf_r+0x110>
 800b602:	eba0 0308 	sub.w	r3, r0, r8
 800b606:	fa09 f303 	lsl.w	r3, r9, r3
 800b60a:	4313      	orrs	r3, r2
 800b60c:	9304      	str	r3, [sp, #16]
 800b60e:	46a2      	mov	sl, r4
 800b610:	e7d2      	b.n	800b5b8 <_svfiprintf_r+0x9c>
 800b612:	9b03      	ldr	r3, [sp, #12]
 800b614:	1d19      	adds	r1, r3, #4
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	9103      	str	r1, [sp, #12]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	bfbb      	ittet	lt
 800b61e:	425b      	neglt	r3, r3
 800b620:	f042 0202 	orrlt.w	r2, r2, #2
 800b624:	9307      	strge	r3, [sp, #28]
 800b626:	9307      	strlt	r3, [sp, #28]
 800b628:	bfb8      	it	lt
 800b62a:	9204      	strlt	r2, [sp, #16]
 800b62c:	7823      	ldrb	r3, [r4, #0]
 800b62e:	2b2e      	cmp	r3, #46	; 0x2e
 800b630:	d10c      	bne.n	800b64c <_svfiprintf_r+0x130>
 800b632:	7863      	ldrb	r3, [r4, #1]
 800b634:	2b2a      	cmp	r3, #42	; 0x2a
 800b636:	d135      	bne.n	800b6a4 <_svfiprintf_r+0x188>
 800b638:	9b03      	ldr	r3, [sp, #12]
 800b63a:	1d1a      	adds	r2, r3, #4
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	9203      	str	r2, [sp, #12]
 800b640:	2b00      	cmp	r3, #0
 800b642:	bfb8      	it	lt
 800b644:	f04f 33ff 	movlt.w	r3, #4294967295
 800b648:	3402      	adds	r4, #2
 800b64a:	9305      	str	r3, [sp, #20]
 800b64c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b718 <_svfiprintf_r+0x1fc>
 800b650:	7821      	ldrb	r1, [r4, #0]
 800b652:	2203      	movs	r2, #3
 800b654:	4650      	mov	r0, sl
 800b656:	f7f4 fdc3 	bl	80001e0 <memchr>
 800b65a:	b140      	cbz	r0, 800b66e <_svfiprintf_r+0x152>
 800b65c:	2340      	movs	r3, #64	; 0x40
 800b65e:	eba0 000a 	sub.w	r0, r0, sl
 800b662:	fa03 f000 	lsl.w	r0, r3, r0
 800b666:	9b04      	ldr	r3, [sp, #16]
 800b668:	4303      	orrs	r3, r0
 800b66a:	3401      	adds	r4, #1
 800b66c:	9304      	str	r3, [sp, #16]
 800b66e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b672:	4826      	ldr	r0, [pc, #152]	; (800b70c <_svfiprintf_r+0x1f0>)
 800b674:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b678:	2206      	movs	r2, #6
 800b67a:	f7f4 fdb1 	bl	80001e0 <memchr>
 800b67e:	2800      	cmp	r0, #0
 800b680:	d038      	beq.n	800b6f4 <_svfiprintf_r+0x1d8>
 800b682:	4b23      	ldr	r3, [pc, #140]	; (800b710 <_svfiprintf_r+0x1f4>)
 800b684:	bb1b      	cbnz	r3, 800b6ce <_svfiprintf_r+0x1b2>
 800b686:	9b03      	ldr	r3, [sp, #12]
 800b688:	3307      	adds	r3, #7
 800b68a:	f023 0307 	bic.w	r3, r3, #7
 800b68e:	3308      	adds	r3, #8
 800b690:	9303      	str	r3, [sp, #12]
 800b692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b694:	4433      	add	r3, r6
 800b696:	9309      	str	r3, [sp, #36]	; 0x24
 800b698:	e767      	b.n	800b56a <_svfiprintf_r+0x4e>
 800b69a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b69e:	460c      	mov	r4, r1
 800b6a0:	2001      	movs	r0, #1
 800b6a2:	e7a5      	b.n	800b5f0 <_svfiprintf_r+0xd4>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	3401      	adds	r4, #1
 800b6a8:	9305      	str	r3, [sp, #20]
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	f04f 0c0a 	mov.w	ip, #10
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6b6:	3a30      	subs	r2, #48	; 0x30
 800b6b8:	2a09      	cmp	r2, #9
 800b6ba:	d903      	bls.n	800b6c4 <_svfiprintf_r+0x1a8>
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d0c5      	beq.n	800b64c <_svfiprintf_r+0x130>
 800b6c0:	9105      	str	r1, [sp, #20]
 800b6c2:	e7c3      	b.n	800b64c <_svfiprintf_r+0x130>
 800b6c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6c8:	4604      	mov	r4, r0
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	e7f0      	b.n	800b6b0 <_svfiprintf_r+0x194>
 800b6ce:	ab03      	add	r3, sp, #12
 800b6d0:	9300      	str	r3, [sp, #0]
 800b6d2:	462a      	mov	r2, r5
 800b6d4:	4b0f      	ldr	r3, [pc, #60]	; (800b714 <_svfiprintf_r+0x1f8>)
 800b6d6:	a904      	add	r1, sp, #16
 800b6d8:	4638      	mov	r0, r7
 800b6da:	f7fe f80d 	bl	80096f8 <_printf_float>
 800b6de:	1c42      	adds	r2, r0, #1
 800b6e0:	4606      	mov	r6, r0
 800b6e2:	d1d6      	bne.n	800b692 <_svfiprintf_r+0x176>
 800b6e4:	89ab      	ldrh	r3, [r5, #12]
 800b6e6:	065b      	lsls	r3, r3, #25
 800b6e8:	f53f af2c 	bmi.w	800b544 <_svfiprintf_r+0x28>
 800b6ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6ee:	b01d      	add	sp, #116	; 0x74
 800b6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f4:	ab03      	add	r3, sp, #12
 800b6f6:	9300      	str	r3, [sp, #0]
 800b6f8:	462a      	mov	r2, r5
 800b6fa:	4b06      	ldr	r3, [pc, #24]	; (800b714 <_svfiprintf_r+0x1f8>)
 800b6fc:	a904      	add	r1, sp, #16
 800b6fe:	4638      	mov	r0, r7
 800b700:	f7fe fa9e 	bl	8009c40 <_printf_i>
 800b704:	e7eb      	b.n	800b6de <_svfiprintf_r+0x1c2>
 800b706:	bf00      	nop
 800b708:	0800c59c 	.word	0x0800c59c
 800b70c:	0800c5a6 	.word	0x0800c5a6
 800b710:	080096f9 	.word	0x080096f9
 800b714:	0800b465 	.word	0x0800b465
 800b718:	0800c5a2 	.word	0x0800c5a2

0800b71c <_sbrk_r>:
 800b71c:	b538      	push	{r3, r4, r5, lr}
 800b71e:	4d06      	ldr	r5, [pc, #24]	; (800b738 <_sbrk_r+0x1c>)
 800b720:	2300      	movs	r3, #0
 800b722:	4604      	mov	r4, r0
 800b724:	4608      	mov	r0, r1
 800b726:	602b      	str	r3, [r5, #0]
 800b728:	f7f6 fffe 	bl	8002728 <_sbrk>
 800b72c:	1c43      	adds	r3, r0, #1
 800b72e:	d102      	bne.n	800b736 <_sbrk_r+0x1a>
 800b730:	682b      	ldr	r3, [r5, #0]
 800b732:	b103      	cbz	r3, 800b736 <_sbrk_r+0x1a>
 800b734:	6023      	str	r3, [r4, #0]
 800b736:	bd38      	pop	{r3, r4, r5, pc}
 800b738:	20000588 	.word	0x20000588

0800b73c <__assert_func>:
 800b73c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b73e:	4614      	mov	r4, r2
 800b740:	461a      	mov	r2, r3
 800b742:	4b09      	ldr	r3, [pc, #36]	; (800b768 <__assert_func+0x2c>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4605      	mov	r5, r0
 800b748:	68d8      	ldr	r0, [r3, #12]
 800b74a:	b14c      	cbz	r4, 800b760 <__assert_func+0x24>
 800b74c:	4b07      	ldr	r3, [pc, #28]	; (800b76c <__assert_func+0x30>)
 800b74e:	9100      	str	r1, [sp, #0]
 800b750:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b754:	4906      	ldr	r1, [pc, #24]	; (800b770 <__assert_func+0x34>)
 800b756:	462b      	mov	r3, r5
 800b758:	f000 f80e 	bl	800b778 <fiprintf>
 800b75c:	f000 faa4 	bl	800bca8 <abort>
 800b760:	4b04      	ldr	r3, [pc, #16]	; (800b774 <__assert_func+0x38>)
 800b762:	461c      	mov	r4, r3
 800b764:	e7f3      	b.n	800b74e <__assert_func+0x12>
 800b766:	bf00      	nop
 800b768:	20000014 	.word	0x20000014
 800b76c:	0800c5ad 	.word	0x0800c5ad
 800b770:	0800c5ba 	.word	0x0800c5ba
 800b774:	0800c5e8 	.word	0x0800c5e8

0800b778 <fiprintf>:
 800b778:	b40e      	push	{r1, r2, r3}
 800b77a:	b503      	push	{r0, r1, lr}
 800b77c:	4601      	mov	r1, r0
 800b77e:	ab03      	add	r3, sp, #12
 800b780:	4805      	ldr	r0, [pc, #20]	; (800b798 <fiprintf+0x20>)
 800b782:	f853 2b04 	ldr.w	r2, [r3], #4
 800b786:	6800      	ldr	r0, [r0, #0]
 800b788:	9301      	str	r3, [sp, #4]
 800b78a:	f000 f88f 	bl	800b8ac <_vfiprintf_r>
 800b78e:	b002      	add	sp, #8
 800b790:	f85d eb04 	ldr.w	lr, [sp], #4
 800b794:	b003      	add	sp, #12
 800b796:	4770      	bx	lr
 800b798:	20000014 	.word	0x20000014

0800b79c <__ascii_mbtowc>:
 800b79c:	b082      	sub	sp, #8
 800b79e:	b901      	cbnz	r1, 800b7a2 <__ascii_mbtowc+0x6>
 800b7a0:	a901      	add	r1, sp, #4
 800b7a2:	b142      	cbz	r2, 800b7b6 <__ascii_mbtowc+0x1a>
 800b7a4:	b14b      	cbz	r3, 800b7ba <__ascii_mbtowc+0x1e>
 800b7a6:	7813      	ldrb	r3, [r2, #0]
 800b7a8:	600b      	str	r3, [r1, #0]
 800b7aa:	7812      	ldrb	r2, [r2, #0]
 800b7ac:	1e10      	subs	r0, r2, #0
 800b7ae:	bf18      	it	ne
 800b7b0:	2001      	movne	r0, #1
 800b7b2:	b002      	add	sp, #8
 800b7b4:	4770      	bx	lr
 800b7b6:	4610      	mov	r0, r2
 800b7b8:	e7fb      	b.n	800b7b2 <__ascii_mbtowc+0x16>
 800b7ba:	f06f 0001 	mvn.w	r0, #1
 800b7be:	e7f8      	b.n	800b7b2 <__ascii_mbtowc+0x16>

0800b7c0 <memmove>:
 800b7c0:	4288      	cmp	r0, r1
 800b7c2:	b510      	push	{r4, lr}
 800b7c4:	eb01 0402 	add.w	r4, r1, r2
 800b7c8:	d902      	bls.n	800b7d0 <memmove+0x10>
 800b7ca:	4284      	cmp	r4, r0
 800b7cc:	4623      	mov	r3, r4
 800b7ce:	d807      	bhi.n	800b7e0 <memmove+0x20>
 800b7d0:	1e43      	subs	r3, r0, #1
 800b7d2:	42a1      	cmp	r1, r4
 800b7d4:	d008      	beq.n	800b7e8 <memmove+0x28>
 800b7d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7de:	e7f8      	b.n	800b7d2 <memmove+0x12>
 800b7e0:	4402      	add	r2, r0
 800b7e2:	4601      	mov	r1, r0
 800b7e4:	428a      	cmp	r2, r1
 800b7e6:	d100      	bne.n	800b7ea <memmove+0x2a>
 800b7e8:	bd10      	pop	{r4, pc}
 800b7ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7f2:	e7f7      	b.n	800b7e4 <memmove+0x24>

0800b7f4 <__malloc_lock>:
 800b7f4:	4801      	ldr	r0, [pc, #4]	; (800b7fc <__malloc_lock+0x8>)
 800b7f6:	f000 bc17 	b.w	800c028 <__retarget_lock_acquire_recursive>
 800b7fa:	bf00      	nop
 800b7fc:	20000590 	.word	0x20000590

0800b800 <__malloc_unlock>:
 800b800:	4801      	ldr	r0, [pc, #4]	; (800b808 <__malloc_unlock+0x8>)
 800b802:	f000 bc12 	b.w	800c02a <__retarget_lock_release_recursive>
 800b806:	bf00      	nop
 800b808:	20000590 	.word	0x20000590

0800b80c <_realloc_r>:
 800b80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b80e:	4607      	mov	r7, r0
 800b810:	4614      	mov	r4, r2
 800b812:	460e      	mov	r6, r1
 800b814:	b921      	cbnz	r1, 800b820 <_realloc_r+0x14>
 800b816:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b81a:	4611      	mov	r1, r2
 800b81c:	f7ff bdc8 	b.w	800b3b0 <_malloc_r>
 800b820:	b922      	cbnz	r2, 800b82c <_realloc_r+0x20>
 800b822:	f7ff fd75 	bl	800b310 <_free_r>
 800b826:	4625      	mov	r5, r4
 800b828:	4628      	mov	r0, r5
 800b82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b82c:	f000 fc62 	bl	800c0f4 <_malloc_usable_size_r>
 800b830:	42a0      	cmp	r0, r4
 800b832:	d20f      	bcs.n	800b854 <_realloc_r+0x48>
 800b834:	4621      	mov	r1, r4
 800b836:	4638      	mov	r0, r7
 800b838:	f7ff fdba 	bl	800b3b0 <_malloc_r>
 800b83c:	4605      	mov	r5, r0
 800b83e:	2800      	cmp	r0, #0
 800b840:	d0f2      	beq.n	800b828 <_realloc_r+0x1c>
 800b842:	4631      	mov	r1, r6
 800b844:	4622      	mov	r2, r4
 800b846:	f7ff f9c7 	bl	800abd8 <memcpy>
 800b84a:	4631      	mov	r1, r6
 800b84c:	4638      	mov	r0, r7
 800b84e:	f7ff fd5f 	bl	800b310 <_free_r>
 800b852:	e7e9      	b.n	800b828 <_realloc_r+0x1c>
 800b854:	4635      	mov	r5, r6
 800b856:	e7e7      	b.n	800b828 <_realloc_r+0x1c>

0800b858 <__sfputc_r>:
 800b858:	6893      	ldr	r3, [r2, #8]
 800b85a:	3b01      	subs	r3, #1
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	b410      	push	{r4}
 800b860:	6093      	str	r3, [r2, #8]
 800b862:	da08      	bge.n	800b876 <__sfputc_r+0x1e>
 800b864:	6994      	ldr	r4, [r2, #24]
 800b866:	42a3      	cmp	r3, r4
 800b868:	db01      	blt.n	800b86e <__sfputc_r+0x16>
 800b86a:	290a      	cmp	r1, #10
 800b86c:	d103      	bne.n	800b876 <__sfputc_r+0x1e>
 800b86e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b872:	f000 b94b 	b.w	800bb0c <__swbuf_r>
 800b876:	6813      	ldr	r3, [r2, #0]
 800b878:	1c58      	adds	r0, r3, #1
 800b87a:	6010      	str	r0, [r2, #0]
 800b87c:	7019      	strb	r1, [r3, #0]
 800b87e:	4608      	mov	r0, r1
 800b880:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b884:	4770      	bx	lr

0800b886 <__sfputs_r>:
 800b886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b888:	4606      	mov	r6, r0
 800b88a:	460f      	mov	r7, r1
 800b88c:	4614      	mov	r4, r2
 800b88e:	18d5      	adds	r5, r2, r3
 800b890:	42ac      	cmp	r4, r5
 800b892:	d101      	bne.n	800b898 <__sfputs_r+0x12>
 800b894:	2000      	movs	r0, #0
 800b896:	e007      	b.n	800b8a8 <__sfputs_r+0x22>
 800b898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b89c:	463a      	mov	r2, r7
 800b89e:	4630      	mov	r0, r6
 800b8a0:	f7ff ffda 	bl	800b858 <__sfputc_r>
 800b8a4:	1c43      	adds	r3, r0, #1
 800b8a6:	d1f3      	bne.n	800b890 <__sfputs_r+0xa>
 800b8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b8ac <_vfiprintf_r>:
 800b8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b0:	460d      	mov	r5, r1
 800b8b2:	b09d      	sub	sp, #116	; 0x74
 800b8b4:	4614      	mov	r4, r2
 800b8b6:	4698      	mov	r8, r3
 800b8b8:	4606      	mov	r6, r0
 800b8ba:	b118      	cbz	r0, 800b8c4 <_vfiprintf_r+0x18>
 800b8bc:	6983      	ldr	r3, [r0, #24]
 800b8be:	b90b      	cbnz	r3, 800b8c4 <_vfiprintf_r+0x18>
 800b8c0:	f000 fb14 	bl	800beec <__sinit>
 800b8c4:	4b89      	ldr	r3, [pc, #548]	; (800baec <_vfiprintf_r+0x240>)
 800b8c6:	429d      	cmp	r5, r3
 800b8c8:	d11b      	bne.n	800b902 <_vfiprintf_r+0x56>
 800b8ca:	6875      	ldr	r5, [r6, #4]
 800b8cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8ce:	07d9      	lsls	r1, r3, #31
 800b8d0:	d405      	bmi.n	800b8de <_vfiprintf_r+0x32>
 800b8d2:	89ab      	ldrh	r3, [r5, #12]
 800b8d4:	059a      	lsls	r2, r3, #22
 800b8d6:	d402      	bmi.n	800b8de <_vfiprintf_r+0x32>
 800b8d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8da:	f000 fba5 	bl	800c028 <__retarget_lock_acquire_recursive>
 800b8de:	89ab      	ldrh	r3, [r5, #12]
 800b8e0:	071b      	lsls	r3, r3, #28
 800b8e2:	d501      	bpl.n	800b8e8 <_vfiprintf_r+0x3c>
 800b8e4:	692b      	ldr	r3, [r5, #16]
 800b8e6:	b9eb      	cbnz	r3, 800b924 <_vfiprintf_r+0x78>
 800b8e8:	4629      	mov	r1, r5
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	f000 f96e 	bl	800bbcc <__swsetup_r>
 800b8f0:	b1c0      	cbz	r0, 800b924 <_vfiprintf_r+0x78>
 800b8f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8f4:	07dc      	lsls	r4, r3, #31
 800b8f6:	d50e      	bpl.n	800b916 <_vfiprintf_r+0x6a>
 800b8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8fc:	b01d      	add	sp, #116	; 0x74
 800b8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b902:	4b7b      	ldr	r3, [pc, #492]	; (800baf0 <_vfiprintf_r+0x244>)
 800b904:	429d      	cmp	r5, r3
 800b906:	d101      	bne.n	800b90c <_vfiprintf_r+0x60>
 800b908:	68b5      	ldr	r5, [r6, #8]
 800b90a:	e7df      	b.n	800b8cc <_vfiprintf_r+0x20>
 800b90c:	4b79      	ldr	r3, [pc, #484]	; (800baf4 <_vfiprintf_r+0x248>)
 800b90e:	429d      	cmp	r5, r3
 800b910:	bf08      	it	eq
 800b912:	68f5      	ldreq	r5, [r6, #12]
 800b914:	e7da      	b.n	800b8cc <_vfiprintf_r+0x20>
 800b916:	89ab      	ldrh	r3, [r5, #12]
 800b918:	0598      	lsls	r0, r3, #22
 800b91a:	d4ed      	bmi.n	800b8f8 <_vfiprintf_r+0x4c>
 800b91c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b91e:	f000 fb84 	bl	800c02a <__retarget_lock_release_recursive>
 800b922:	e7e9      	b.n	800b8f8 <_vfiprintf_r+0x4c>
 800b924:	2300      	movs	r3, #0
 800b926:	9309      	str	r3, [sp, #36]	; 0x24
 800b928:	2320      	movs	r3, #32
 800b92a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b92e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b932:	2330      	movs	r3, #48	; 0x30
 800b934:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800baf8 <_vfiprintf_r+0x24c>
 800b938:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b93c:	f04f 0901 	mov.w	r9, #1
 800b940:	4623      	mov	r3, r4
 800b942:	469a      	mov	sl, r3
 800b944:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b948:	b10a      	cbz	r2, 800b94e <_vfiprintf_r+0xa2>
 800b94a:	2a25      	cmp	r2, #37	; 0x25
 800b94c:	d1f9      	bne.n	800b942 <_vfiprintf_r+0x96>
 800b94e:	ebba 0b04 	subs.w	fp, sl, r4
 800b952:	d00b      	beq.n	800b96c <_vfiprintf_r+0xc0>
 800b954:	465b      	mov	r3, fp
 800b956:	4622      	mov	r2, r4
 800b958:	4629      	mov	r1, r5
 800b95a:	4630      	mov	r0, r6
 800b95c:	f7ff ff93 	bl	800b886 <__sfputs_r>
 800b960:	3001      	adds	r0, #1
 800b962:	f000 80aa 	beq.w	800baba <_vfiprintf_r+0x20e>
 800b966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b968:	445a      	add	r2, fp
 800b96a:	9209      	str	r2, [sp, #36]	; 0x24
 800b96c:	f89a 3000 	ldrb.w	r3, [sl]
 800b970:	2b00      	cmp	r3, #0
 800b972:	f000 80a2 	beq.w	800baba <_vfiprintf_r+0x20e>
 800b976:	2300      	movs	r3, #0
 800b978:	f04f 32ff 	mov.w	r2, #4294967295
 800b97c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b980:	f10a 0a01 	add.w	sl, sl, #1
 800b984:	9304      	str	r3, [sp, #16]
 800b986:	9307      	str	r3, [sp, #28]
 800b988:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b98c:	931a      	str	r3, [sp, #104]	; 0x68
 800b98e:	4654      	mov	r4, sl
 800b990:	2205      	movs	r2, #5
 800b992:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b996:	4858      	ldr	r0, [pc, #352]	; (800baf8 <_vfiprintf_r+0x24c>)
 800b998:	f7f4 fc22 	bl	80001e0 <memchr>
 800b99c:	9a04      	ldr	r2, [sp, #16]
 800b99e:	b9d8      	cbnz	r0, 800b9d8 <_vfiprintf_r+0x12c>
 800b9a0:	06d1      	lsls	r1, r2, #27
 800b9a2:	bf44      	itt	mi
 800b9a4:	2320      	movmi	r3, #32
 800b9a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9aa:	0713      	lsls	r3, r2, #28
 800b9ac:	bf44      	itt	mi
 800b9ae:	232b      	movmi	r3, #43	; 0x2b
 800b9b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b9ba:	d015      	beq.n	800b9e8 <_vfiprintf_r+0x13c>
 800b9bc:	9a07      	ldr	r2, [sp, #28]
 800b9be:	4654      	mov	r4, sl
 800b9c0:	2000      	movs	r0, #0
 800b9c2:	f04f 0c0a 	mov.w	ip, #10
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9cc:	3b30      	subs	r3, #48	; 0x30
 800b9ce:	2b09      	cmp	r3, #9
 800b9d0:	d94e      	bls.n	800ba70 <_vfiprintf_r+0x1c4>
 800b9d2:	b1b0      	cbz	r0, 800ba02 <_vfiprintf_r+0x156>
 800b9d4:	9207      	str	r2, [sp, #28]
 800b9d6:	e014      	b.n	800ba02 <_vfiprintf_r+0x156>
 800b9d8:	eba0 0308 	sub.w	r3, r0, r8
 800b9dc:	fa09 f303 	lsl.w	r3, r9, r3
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	9304      	str	r3, [sp, #16]
 800b9e4:	46a2      	mov	sl, r4
 800b9e6:	e7d2      	b.n	800b98e <_vfiprintf_r+0xe2>
 800b9e8:	9b03      	ldr	r3, [sp, #12]
 800b9ea:	1d19      	adds	r1, r3, #4
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	9103      	str	r1, [sp, #12]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	bfbb      	ittet	lt
 800b9f4:	425b      	neglt	r3, r3
 800b9f6:	f042 0202 	orrlt.w	r2, r2, #2
 800b9fa:	9307      	strge	r3, [sp, #28]
 800b9fc:	9307      	strlt	r3, [sp, #28]
 800b9fe:	bfb8      	it	lt
 800ba00:	9204      	strlt	r2, [sp, #16]
 800ba02:	7823      	ldrb	r3, [r4, #0]
 800ba04:	2b2e      	cmp	r3, #46	; 0x2e
 800ba06:	d10c      	bne.n	800ba22 <_vfiprintf_r+0x176>
 800ba08:	7863      	ldrb	r3, [r4, #1]
 800ba0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba0c:	d135      	bne.n	800ba7a <_vfiprintf_r+0x1ce>
 800ba0e:	9b03      	ldr	r3, [sp, #12]
 800ba10:	1d1a      	adds	r2, r3, #4
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	9203      	str	r2, [sp, #12]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	bfb8      	it	lt
 800ba1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba1e:	3402      	adds	r4, #2
 800ba20:	9305      	str	r3, [sp, #20]
 800ba22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb08 <_vfiprintf_r+0x25c>
 800ba26:	7821      	ldrb	r1, [r4, #0]
 800ba28:	2203      	movs	r2, #3
 800ba2a:	4650      	mov	r0, sl
 800ba2c:	f7f4 fbd8 	bl	80001e0 <memchr>
 800ba30:	b140      	cbz	r0, 800ba44 <_vfiprintf_r+0x198>
 800ba32:	2340      	movs	r3, #64	; 0x40
 800ba34:	eba0 000a 	sub.w	r0, r0, sl
 800ba38:	fa03 f000 	lsl.w	r0, r3, r0
 800ba3c:	9b04      	ldr	r3, [sp, #16]
 800ba3e:	4303      	orrs	r3, r0
 800ba40:	3401      	adds	r4, #1
 800ba42:	9304      	str	r3, [sp, #16]
 800ba44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba48:	482c      	ldr	r0, [pc, #176]	; (800bafc <_vfiprintf_r+0x250>)
 800ba4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba4e:	2206      	movs	r2, #6
 800ba50:	f7f4 fbc6 	bl	80001e0 <memchr>
 800ba54:	2800      	cmp	r0, #0
 800ba56:	d03f      	beq.n	800bad8 <_vfiprintf_r+0x22c>
 800ba58:	4b29      	ldr	r3, [pc, #164]	; (800bb00 <_vfiprintf_r+0x254>)
 800ba5a:	bb1b      	cbnz	r3, 800baa4 <_vfiprintf_r+0x1f8>
 800ba5c:	9b03      	ldr	r3, [sp, #12]
 800ba5e:	3307      	adds	r3, #7
 800ba60:	f023 0307 	bic.w	r3, r3, #7
 800ba64:	3308      	adds	r3, #8
 800ba66:	9303      	str	r3, [sp, #12]
 800ba68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba6a:	443b      	add	r3, r7
 800ba6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba6e:	e767      	b.n	800b940 <_vfiprintf_r+0x94>
 800ba70:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba74:	460c      	mov	r4, r1
 800ba76:	2001      	movs	r0, #1
 800ba78:	e7a5      	b.n	800b9c6 <_vfiprintf_r+0x11a>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	3401      	adds	r4, #1
 800ba7e:	9305      	str	r3, [sp, #20]
 800ba80:	4619      	mov	r1, r3
 800ba82:	f04f 0c0a 	mov.w	ip, #10
 800ba86:	4620      	mov	r0, r4
 800ba88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba8c:	3a30      	subs	r2, #48	; 0x30
 800ba8e:	2a09      	cmp	r2, #9
 800ba90:	d903      	bls.n	800ba9a <_vfiprintf_r+0x1ee>
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d0c5      	beq.n	800ba22 <_vfiprintf_r+0x176>
 800ba96:	9105      	str	r1, [sp, #20]
 800ba98:	e7c3      	b.n	800ba22 <_vfiprintf_r+0x176>
 800ba9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba9e:	4604      	mov	r4, r0
 800baa0:	2301      	movs	r3, #1
 800baa2:	e7f0      	b.n	800ba86 <_vfiprintf_r+0x1da>
 800baa4:	ab03      	add	r3, sp, #12
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	462a      	mov	r2, r5
 800baaa:	4b16      	ldr	r3, [pc, #88]	; (800bb04 <_vfiprintf_r+0x258>)
 800baac:	a904      	add	r1, sp, #16
 800baae:	4630      	mov	r0, r6
 800bab0:	f7fd fe22 	bl	80096f8 <_printf_float>
 800bab4:	4607      	mov	r7, r0
 800bab6:	1c78      	adds	r0, r7, #1
 800bab8:	d1d6      	bne.n	800ba68 <_vfiprintf_r+0x1bc>
 800baba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800babc:	07d9      	lsls	r1, r3, #31
 800babe:	d405      	bmi.n	800bacc <_vfiprintf_r+0x220>
 800bac0:	89ab      	ldrh	r3, [r5, #12]
 800bac2:	059a      	lsls	r2, r3, #22
 800bac4:	d402      	bmi.n	800bacc <_vfiprintf_r+0x220>
 800bac6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bac8:	f000 faaf 	bl	800c02a <__retarget_lock_release_recursive>
 800bacc:	89ab      	ldrh	r3, [r5, #12]
 800bace:	065b      	lsls	r3, r3, #25
 800bad0:	f53f af12 	bmi.w	800b8f8 <_vfiprintf_r+0x4c>
 800bad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bad6:	e711      	b.n	800b8fc <_vfiprintf_r+0x50>
 800bad8:	ab03      	add	r3, sp, #12
 800bada:	9300      	str	r3, [sp, #0]
 800badc:	462a      	mov	r2, r5
 800bade:	4b09      	ldr	r3, [pc, #36]	; (800bb04 <_vfiprintf_r+0x258>)
 800bae0:	a904      	add	r1, sp, #16
 800bae2:	4630      	mov	r0, r6
 800bae4:	f7fe f8ac 	bl	8009c40 <_printf_i>
 800bae8:	e7e4      	b.n	800bab4 <_vfiprintf_r+0x208>
 800baea:	bf00      	nop
 800baec:	0800c714 	.word	0x0800c714
 800baf0:	0800c734 	.word	0x0800c734
 800baf4:	0800c6f4 	.word	0x0800c6f4
 800baf8:	0800c59c 	.word	0x0800c59c
 800bafc:	0800c5a6 	.word	0x0800c5a6
 800bb00:	080096f9 	.word	0x080096f9
 800bb04:	0800b887 	.word	0x0800b887
 800bb08:	0800c5a2 	.word	0x0800c5a2

0800bb0c <__swbuf_r>:
 800bb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb0e:	460e      	mov	r6, r1
 800bb10:	4614      	mov	r4, r2
 800bb12:	4605      	mov	r5, r0
 800bb14:	b118      	cbz	r0, 800bb1e <__swbuf_r+0x12>
 800bb16:	6983      	ldr	r3, [r0, #24]
 800bb18:	b90b      	cbnz	r3, 800bb1e <__swbuf_r+0x12>
 800bb1a:	f000 f9e7 	bl	800beec <__sinit>
 800bb1e:	4b21      	ldr	r3, [pc, #132]	; (800bba4 <__swbuf_r+0x98>)
 800bb20:	429c      	cmp	r4, r3
 800bb22:	d12b      	bne.n	800bb7c <__swbuf_r+0x70>
 800bb24:	686c      	ldr	r4, [r5, #4]
 800bb26:	69a3      	ldr	r3, [r4, #24]
 800bb28:	60a3      	str	r3, [r4, #8]
 800bb2a:	89a3      	ldrh	r3, [r4, #12]
 800bb2c:	071a      	lsls	r2, r3, #28
 800bb2e:	d52f      	bpl.n	800bb90 <__swbuf_r+0x84>
 800bb30:	6923      	ldr	r3, [r4, #16]
 800bb32:	b36b      	cbz	r3, 800bb90 <__swbuf_r+0x84>
 800bb34:	6923      	ldr	r3, [r4, #16]
 800bb36:	6820      	ldr	r0, [r4, #0]
 800bb38:	1ac0      	subs	r0, r0, r3
 800bb3a:	6963      	ldr	r3, [r4, #20]
 800bb3c:	b2f6      	uxtb	r6, r6
 800bb3e:	4283      	cmp	r3, r0
 800bb40:	4637      	mov	r7, r6
 800bb42:	dc04      	bgt.n	800bb4e <__swbuf_r+0x42>
 800bb44:	4621      	mov	r1, r4
 800bb46:	4628      	mov	r0, r5
 800bb48:	f000 f93c 	bl	800bdc4 <_fflush_r>
 800bb4c:	bb30      	cbnz	r0, 800bb9c <__swbuf_r+0x90>
 800bb4e:	68a3      	ldr	r3, [r4, #8]
 800bb50:	3b01      	subs	r3, #1
 800bb52:	60a3      	str	r3, [r4, #8]
 800bb54:	6823      	ldr	r3, [r4, #0]
 800bb56:	1c5a      	adds	r2, r3, #1
 800bb58:	6022      	str	r2, [r4, #0]
 800bb5a:	701e      	strb	r6, [r3, #0]
 800bb5c:	6963      	ldr	r3, [r4, #20]
 800bb5e:	3001      	adds	r0, #1
 800bb60:	4283      	cmp	r3, r0
 800bb62:	d004      	beq.n	800bb6e <__swbuf_r+0x62>
 800bb64:	89a3      	ldrh	r3, [r4, #12]
 800bb66:	07db      	lsls	r3, r3, #31
 800bb68:	d506      	bpl.n	800bb78 <__swbuf_r+0x6c>
 800bb6a:	2e0a      	cmp	r6, #10
 800bb6c:	d104      	bne.n	800bb78 <__swbuf_r+0x6c>
 800bb6e:	4621      	mov	r1, r4
 800bb70:	4628      	mov	r0, r5
 800bb72:	f000 f927 	bl	800bdc4 <_fflush_r>
 800bb76:	b988      	cbnz	r0, 800bb9c <__swbuf_r+0x90>
 800bb78:	4638      	mov	r0, r7
 800bb7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb7c:	4b0a      	ldr	r3, [pc, #40]	; (800bba8 <__swbuf_r+0x9c>)
 800bb7e:	429c      	cmp	r4, r3
 800bb80:	d101      	bne.n	800bb86 <__swbuf_r+0x7a>
 800bb82:	68ac      	ldr	r4, [r5, #8]
 800bb84:	e7cf      	b.n	800bb26 <__swbuf_r+0x1a>
 800bb86:	4b09      	ldr	r3, [pc, #36]	; (800bbac <__swbuf_r+0xa0>)
 800bb88:	429c      	cmp	r4, r3
 800bb8a:	bf08      	it	eq
 800bb8c:	68ec      	ldreq	r4, [r5, #12]
 800bb8e:	e7ca      	b.n	800bb26 <__swbuf_r+0x1a>
 800bb90:	4621      	mov	r1, r4
 800bb92:	4628      	mov	r0, r5
 800bb94:	f000 f81a 	bl	800bbcc <__swsetup_r>
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d0cb      	beq.n	800bb34 <__swbuf_r+0x28>
 800bb9c:	f04f 37ff 	mov.w	r7, #4294967295
 800bba0:	e7ea      	b.n	800bb78 <__swbuf_r+0x6c>
 800bba2:	bf00      	nop
 800bba4:	0800c714 	.word	0x0800c714
 800bba8:	0800c734 	.word	0x0800c734
 800bbac:	0800c6f4 	.word	0x0800c6f4

0800bbb0 <__ascii_wctomb>:
 800bbb0:	b149      	cbz	r1, 800bbc6 <__ascii_wctomb+0x16>
 800bbb2:	2aff      	cmp	r2, #255	; 0xff
 800bbb4:	bf85      	ittet	hi
 800bbb6:	238a      	movhi	r3, #138	; 0x8a
 800bbb8:	6003      	strhi	r3, [r0, #0]
 800bbba:	700a      	strbls	r2, [r1, #0]
 800bbbc:	f04f 30ff 	movhi.w	r0, #4294967295
 800bbc0:	bf98      	it	ls
 800bbc2:	2001      	movls	r0, #1
 800bbc4:	4770      	bx	lr
 800bbc6:	4608      	mov	r0, r1
 800bbc8:	4770      	bx	lr
	...

0800bbcc <__swsetup_r>:
 800bbcc:	4b32      	ldr	r3, [pc, #200]	; (800bc98 <__swsetup_r+0xcc>)
 800bbce:	b570      	push	{r4, r5, r6, lr}
 800bbd0:	681d      	ldr	r5, [r3, #0]
 800bbd2:	4606      	mov	r6, r0
 800bbd4:	460c      	mov	r4, r1
 800bbd6:	b125      	cbz	r5, 800bbe2 <__swsetup_r+0x16>
 800bbd8:	69ab      	ldr	r3, [r5, #24]
 800bbda:	b913      	cbnz	r3, 800bbe2 <__swsetup_r+0x16>
 800bbdc:	4628      	mov	r0, r5
 800bbde:	f000 f985 	bl	800beec <__sinit>
 800bbe2:	4b2e      	ldr	r3, [pc, #184]	; (800bc9c <__swsetup_r+0xd0>)
 800bbe4:	429c      	cmp	r4, r3
 800bbe6:	d10f      	bne.n	800bc08 <__swsetup_r+0x3c>
 800bbe8:	686c      	ldr	r4, [r5, #4]
 800bbea:	89a3      	ldrh	r3, [r4, #12]
 800bbec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbf0:	0719      	lsls	r1, r3, #28
 800bbf2:	d42c      	bmi.n	800bc4e <__swsetup_r+0x82>
 800bbf4:	06dd      	lsls	r5, r3, #27
 800bbf6:	d411      	bmi.n	800bc1c <__swsetup_r+0x50>
 800bbf8:	2309      	movs	r3, #9
 800bbfa:	6033      	str	r3, [r6, #0]
 800bbfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc00:	81a3      	strh	r3, [r4, #12]
 800bc02:	f04f 30ff 	mov.w	r0, #4294967295
 800bc06:	e03e      	b.n	800bc86 <__swsetup_r+0xba>
 800bc08:	4b25      	ldr	r3, [pc, #148]	; (800bca0 <__swsetup_r+0xd4>)
 800bc0a:	429c      	cmp	r4, r3
 800bc0c:	d101      	bne.n	800bc12 <__swsetup_r+0x46>
 800bc0e:	68ac      	ldr	r4, [r5, #8]
 800bc10:	e7eb      	b.n	800bbea <__swsetup_r+0x1e>
 800bc12:	4b24      	ldr	r3, [pc, #144]	; (800bca4 <__swsetup_r+0xd8>)
 800bc14:	429c      	cmp	r4, r3
 800bc16:	bf08      	it	eq
 800bc18:	68ec      	ldreq	r4, [r5, #12]
 800bc1a:	e7e6      	b.n	800bbea <__swsetup_r+0x1e>
 800bc1c:	0758      	lsls	r0, r3, #29
 800bc1e:	d512      	bpl.n	800bc46 <__swsetup_r+0x7a>
 800bc20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc22:	b141      	cbz	r1, 800bc36 <__swsetup_r+0x6a>
 800bc24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc28:	4299      	cmp	r1, r3
 800bc2a:	d002      	beq.n	800bc32 <__swsetup_r+0x66>
 800bc2c:	4630      	mov	r0, r6
 800bc2e:	f7ff fb6f 	bl	800b310 <_free_r>
 800bc32:	2300      	movs	r3, #0
 800bc34:	6363      	str	r3, [r4, #52]	; 0x34
 800bc36:	89a3      	ldrh	r3, [r4, #12]
 800bc38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc3c:	81a3      	strh	r3, [r4, #12]
 800bc3e:	2300      	movs	r3, #0
 800bc40:	6063      	str	r3, [r4, #4]
 800bc42:	6923      	ldr	r3, [r4, #16]
 800bc44:	6023      	str	r3, [r4, #0]
 800bc46:	89a3      	ldrh	r3, [r4, #12]
 800bc48:	f043 0308 	orr.w	r3, r3, #8
 800bc4c:	81a3      	strh	r3, [r4, #12]
 800bc4e:	6923      	ldr	r3, [r4, #16]
 800bc50:	b94b      	cbnz	r3, 800bc66 <__swsetup_r+0x9a>
 800bc52:	89a3      	ldrh	r3, [r4, #12]
 800bc54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc5c:	d003      	beq.n	800bc66 <__swsetup_r+0x9a>
 800bc5e:	4621      	mov	r1, r4
 800bc60:	4630      	mov	r0, r6
 800bc62:	f000 fa07 	bl	800c074 <__smakebuf_r>
 800bc66:	89a0      	ldrh	r0, [r4, #12]
 800bc68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc6c:	f010 0301 	ands.w	r3, r0, #1
 800bc70:	d00a      	beq.n	800bc88 <__swsetup_r+0xbc>
 800bc72:	2300      	movs	r3, #0
 800bc74:	60a3      	str	r3, [r4, #8]
 800bc76:	6963      	ldr	r3, [r4, #20]
 800bc78:	425b      	negs	r3, r3
 800bc7a:	61a3      	str	r3, [r4, #24]
 800bc7c:	6923      	ldr	r3, [r4, #16]
 800bc7e:	b943      	cbnz	r3, 800bc92 <__swsetup_r+0xc6>
 800bc80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc84:	d1ba      	bne.n	800bbfc <__swsetup_r+0x30>
 800bc86:	bd70      	pop	{r4, r5, r6, pc}
 800bc88:	0781      	lsls	r1, r0, #30
 800bc8a:	bf58      	it	pl
 800bc8c:	6963      	ldrpl	r3, [r4, #20]
 800bc8e:	60a3      	str	r3, [r4, #8]
 800bc90:	e7f4      	b.n	800bc7c <__swsetup_r+0xb0>
 800bc92:	2000      	movs	r0, #0
 800bc94:	e7f7      	b.n	800bc86 <__swsetup_r+0xba>
 800bc96:	bf00      	nop
 800bc98:	20000014 	.word	0x20000014
 800bc9c:	0800c714 	.word	0x0800c714
 800bca0:	0800c734 	.word	0x0800c734
 800bca4:	0800c6f4 	.word	0x0800c6f4

0800bca8 <abort>:
 800bca8:	b508      	push	{r3, lr}
 800bcaa:	2006      	movs	r0, #6
 800bcac:	f000 fa52 	bl	800c154 <raise>
 800bcb0:	2001      	movs	r0, #1
 800bcb2:	f7f6 fcc1 	bl	8002638 <_exit>
	...

0800bcb8 <__sflush_r>:
 800bcb8:	898a      	ldrh	r2, [r1, #12]
 800bcba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcbe:	4605      	mov	r5, r0
 800bcc0:	0710      	lsls	r0, r2, #28
 800bcc2:	460c      	mov	r4, r1
 800bcc4:	d458      	bmi.n	800bd78 <__sflush_r+0xc0>
 800bcc6:	684b      	ldr	r3, [r1, #4]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	dc05      	bgt.n	800bcd8 <__sflush_r+0x20>
 800bccc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	dc02      	bgt.n	800bcd8 <__sflush_r+0x20>
 800bcd2:	2000      	movs	r0, #0
 800bcd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcda:	2e00      	cmp	r6, #0
 800bcdc:	d0f9      	beq.n	800bcd2 <__sflush_r+0x1a>
 800bcde:	2300      	movs	r3, #0
 800bce0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bce4:	682f      	ldr	r7, [r5, #0]
 800bce6:	602b      	str	r3, [r5, #0]
 800bce8:	d032      	beq.n	800bd50 <__sflush_r+0x98>
 800bcea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bcec:	89a3      	ldrh	r3, [r4, #12]
 800bcee:	075a      	lsls	r2, r3, #29
 800bcf0:	d505      	bpl.n	800bcfe <__sflush_r+0x46>
 800bcf2:	6863      	ldr	r3, [r4, #4]
 800bcf4:	1ac0      	subs	r0, r0, r3
 800bcf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcf8:	b10b      	cbz	r3, 800bcfe <__sflush_r+0x46>
 800bcfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bcfc:	1ac0      	subs	r0, r0, r3
 800bcfe:	2300      	movs	r3, #0
 800bd00:	4602      	mov	r2, r0
 800bd02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd04:	6a21      	ldr	r1, [r4, #32]
 800bd06:	4628      	mov	r0, r5
 800bd08:	47b0      	blx	r6
 800bd0a:	1c43      	adds	r3, r0, #1
 800bd0c:	89a3      	ldrh	r3, [r4, #12]
 800bd0e:	d106      	bne.n	800bd1e <__sflush_r+0x66>
 800bd10:	6829      	ldr	r1, [r5, #0]
 800bd12:	291d      	cmp	r1, #29
 800bd14:	d82c      	bhi.n	800bd70 <__sflush_r+0xb8>
 800bd16:	4a2a      	ldr	r2, [pc, #168]	; (800bdc0 <__sflush_r+0x108>)
 800bd18:	40ca      	lsrs	r2, r1
 800bd1a:	07d6      	lsls	r6, r2, #31
 800bd1c:	d528      	bpl.n	800bd70 <__sflush_r+0xb8>
 800bd1e:	2200      	movs	r2, #0
 800bd20:	6062      	str	r2, [r4, #4]
 800bd22:	04d9      	lsls	r1, r3, #19
 800bd24:	6922      	ldr	r2, [r4, #16]
 800bd26:	6022      	str	r2, [r4, #0]
 800bd28:	d504      	bpl.n	800bd34 <__sflush_r+0x7c>
 800bd2a:	1c42      	adds	r2, r0, #1
 800bd2c:	d101      	bne.n	800bd32 <__sflush_r+0x7a>
 800bd2e:	682b      	ldr	r3, [r5, #0]
 800bd30:	b903      	cbnz	r3, 800bd34 <__sflush_r+0x7c>
 800bd32:	6560      	str	r0, [r4, #84]	; 0x54
 800bd34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd36:	602f      	str	r7, [r5, #0]
 800bd38:	2900      	cmp	r1, #0
 800bd3a:	d0ca      	beq.n	800bcd2 <__sflush_r+0x1a>
 800bd3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd40:	4299      	cmp	r1, r3
 800bd42:	d002      	beq.n	800bd4a <__sflush_r+0x92>
 800bd44:	4628      	mov	r0, r5
 800bd46:	f7ff fae3 	bl	800b310 <_free_r>
 800bd4a:	2000      	movs	r0, #0
 800bd4c:	6360      	str	r0, [r4, #52]	; 0x34
 800bd4e:	e7c1      	b.n	800bcd4 <__sflush_r+0x1c>
 800bd50:	6a21      	ldr	r1, [r4, #32]
 800bd52:	2301      	movs	r3, #1
 800bd54:	4628      	mov	r0, r5
 800bd56:	47b0      	blx	r6
 800bd58:	1c41      	adds	r1, r0, #1
 800bd5a:	d1c7      	bne.n	800bcec <__sflush_r+0x34>
 800bd5c:	682b      	ldr	r3, [r5, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d0c4      	beq.n	800bcec <__sflush_r+0x34>
 800bd62:	2b1d      	cmp	r3, #29
 800bd64:	d001      	beq.n	800bd6a <__sflush_r+0xb2>
 800bd66:	2b16      	cmp	r3, #22
 800bd68:	d101      	bne.n	800bd6e <__sflush_r+0xb6>
 800bd6a:	602f      	str	r7, [r5, #0]
 800bd6c:	e7b1      	b.n	800bcd2 <__sflush_r+0x1a>
 800bd6e:	89a3      	ldrh	r3, [r4, #12]
 800bd70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd74:	81a3      	strh	r3, [r4, #12]
 800bd76:	e7ad      	b.n	800bcd4 <__sflush_r+0x1c>
 800bd78:	690f      	ldr	r7, [r1, #16]
 800bd7a:	2f00      	cmp	r7, #0
 800bd7c:	d0a9      	beq.n	800bcd2 <__sflush_r+0x1a>
 800bd7e:	0793      	lsls	r3, r2, #30
 800bd80:	680e      	ldr	r6, [r1, #0]
 800bd82:	bf08      	it	eq
 800bd84:	694b      	ldreq	r3, [r1, #20]
 800bd86:	600f      	str	r7, [r1, #0]
 800bd88:	bf18      	it	ne
 800bd8a:	2300      	movne	r3, #0
 800bd8c:	eba6 0807 	sub.w	r8, r6, r7
 800bd90:	608b      	str	r3, [r1, #8]
 800bd92:	f1b8 0f00 	cmp.w	r8, #0
 800bd96:	dd9c      	ble.n	800bcd2 <__sflush_r+0x1a>
 800bd98:	6a21      	ldr	r1, [r4, #32]
 800bd9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd9c:	4643      	mov	r3, r8
 800bd9e:	463a      	mov	r2, r7
 800bda0:	4628      	mov	r0, r5
 800bda2:	47b0      	blx	r6
 800bda4:	2800      	cmp	r0, #0
 800bda6:	dc06      	bgt.n	800bdb6 <__sflush_r+0xfe>
 800bda8:	89a3      	ldrh	r3, [r4, #12]
 800bdaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdae:	81a3      	strh	r3, [r4, #12]
 800bdb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb4:	e78e      	b.n	800bcd4 <__sflush_r+0x1c>
 800bdb6:	4407      	add	r7, r0
 800bdb8:	eba8 0800 	sub.w	r8, r8, r0
 800bdbc:	e7e9      	b.n	800bd92 <__sflush_r+0xda>
 800bdbe:	bf00      	nop
 800bdc0:	20400001 	.word	0x20400001

0800bdc4 <_fflush_r>:
 800bdc4:	b538      	push	{r3, r4, r5, lr}
 800bdc6:	690b      	ldr	r3, [r1, #16]
 800bdc8:	4605      	mov	r5, r0
 800bdca:	460c      	mov	r4, r1
 800bdcc:	b913      	cbnz	r3, 800bdd4 <_fflush_r+0x10>
 800bdce:	2500      	movs	r5, #0
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	bd38      	pop	{r3, r4, r5, pc}
 800bdd4:	b118      	cbz	r0, 800bdde <_fflush_r+0x1a>
 800bdd6:	6983      	ldr	r3, [r0, #24]
 800bdd8:	b90b      	cbnz	r3, 800bdde <_fflush_r+0x1a>
 800bdda:	f000 f887 	bl	800beec <__sinit>
 800bdde:	4b14      	ldr	r3, [pc, #80]	; (800be30 <_fflush_r+0x6c>)
 800bde0:	429c      	cmp	r4, r3
 800bde2:	d11b      	bne.n	800be1c <_fflush_r+0x58>
 800bde4:	686c      	ldr	r4, [r5, #4]
 800bde6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d0ef      	beq.n	800bdce <_fflush_r+0xa>
 800bdee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bdf0:	07d0      	lsls	r0, r2, #31
 800bdf2:	d404      	bmi.n	800bdfe <_fflush_r+0x3a>
 800bdf4:	0599      	lsls	r1, r3, #22
 800bdf6:	d402      	bmi.n	800bdfe <_fflush_r+0x3a>
 800bdf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdfa:	f000 f915 	bl	800c028 <__retarget_lock_acquire_recursive>
 800bdfe:	4628      	mov	r0, r5
 800be00:	4621      	mov	r1, r4
 800be02:	f7ff ff59 	bl	800bcb8 <__sflush_r>
 800be06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be08:	07da      	lsls	r2, r3, #31
 800be0a:	4605      	mov	r5, r0
 800be0c:	d4e0      	bmi.n	800bdd0 <_fflush_r+0xc>
 800be0e:	89a3      	ldrh	r3, [r4, #12]
 800be10:	059b      	lsls	r3, r3, #22
 800be12:	d4dd      	bmi.n	800bdd0 <_fflush_r+0xc>
 800be14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be16:	f000 f908 	bl	800c02a <__retarget_lock_release_recursive>
 800be1a:	e7d9      	b.n	800bdd0 <_fflush_r+0xc>
 800be1c:	4b05      	ldr	r3, [pc, #20]	; (800be34 <_fflush_r+0x70>)
 800be1e:	429c      	cmp	r4, r3
 800be20:	d101      	bne.n	800be26 <_fflush_r+0x62>
 800be22:	68ac      	ldr	r4, [r5, #8]
 800be24:	e7df      	b.n	800bde6 <_fflush_r+0x22>
 800be26:	4b04      	ldr	r3, [pc, #16]	; (800be38 <_fflush_r+0x74>)
 800be28:	429c      	cmp	r4, r3
 800be2a:	bf08      	it	eq
 800be2c:	68ec      	ldreq	r4, [r5, #12]
 800be2e:	e7da      	b.n	800bde6 <_fflush_r+0x22>
 800be30:	0800c714 	.word	0x0800c714
 800be34:	0800c734 	.word	0x0800c734
 800be38:	0800c6f4 	.word	0x0800c6f4

0800be3c <std>:
 800be3c:	2300      	movs	r3, #0
 800be3e:	b510      	push	{r4, lr}
 800be40:	4604      	mov	r4, r0
 800be42:	e9c0 3300 	strd	r3, r3, [r0]
 800be46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be4a:	6083      	str	r3, [r0, #8]
 800be4c:	8181      	strh	r1, [r0, #12]
 800be4e:	6643      	str	r3, [r0, #100]	; 0x64
 800be50:	81c2      	strh	r2, [r0, #14]
 800be52:	6183      	str	r3, [r0, #24]
 800be54:	4619      	mov	r1, r3
 800be56:	2208      	movs	r2, #8
 800be58:	305c      	adds	r0, #92	; 0x5c
 800be5a:	f7fd fba5 	bl	80095a8 <memset>
 800be5e:	4b05      	ldr	r3, [pc, #20]	; (800be74 <std+0x38>)
 800be60:	6263      	str	r3, [r4, #36]	; 0x24
 800be62:	4b05      	ldr	r3, [pc, #20]	; (800be78 <std+0x3c>)
 800be64:	62a3      	str	r3, [r4, #40]	; 0x28
 800be66:	4b05      	ldr	r3, [pc, #20]	; (800be7c <std+0x40>)
 800be68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be6a:	4b05      	ldr	r3, [pc, #20]	; (800be80 <std+0x44>)
 800be6c:	6224      	str	r4, [r4, #32]
 800be6e:	6323      	str	r3, [r4, #48]	; 0x30
 800be70:	bd10      	pop	{r4, pc}
 800be72:	bf00      	nop
 800be74:	0800c18d 	.word	0x0800c18d
 800be78:	0800c1af 	.word	0x0800c1af
 800be7c:	0800c1e7 	.word	0x0800c1e7
 800be80:	0800c20b 	.word	0x0800c20b

0800be84 <_cleanup_r>:
 800be84:	4901      	ldr	r1, [pc, #4]	; (800be8c <_cleanup_r+0x8>)
 800be86:	f000 b8af 	b.w	800bfe8 <_fwalk_reent>
 800be8a:	bf00      	nop
 800be8c:	0800bdc5 	.word	0x0800bdc5

0800be90 <__sfmoreglue>:
 800be90:	b570      	push	{r4, r5, r6, lr}
 800be92:	1e4a      	subs	r2, r1, #1
 800be94:	2568      	movs	r5, #104	; 0x68
 800be96:	4355      	muls	r5, r2
 800be98:	460e      	mov	r6, r1
 800be9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be9e:	f7ff fa87 	bl	800b3b0 <_malloc_r>
 800bea2:	4604      	mov	r4, r0
 800bea4:	b140      	cbz	r0, 800beb8 <__sfmoreglue+0x28>
 800bea6:	2100      	movs	r1, #0
 800bea8:	e9c0 1600 	strd	r1, r6, [r0]
 800beac:	300c      	adds	r0, #12
 800beae:	60a0      	str	r0, [r4, #8]
 800beb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800beb4:	f7fd fb78 	bl	80095a8 <memset>
 800beb8:	4620      	mov	r0, r4
 800beba:	bd70      	pop	{r4, r5, r6, pc}

0800bebc <__sfp_lock_acquire>:
 800bebc:	4801      	ldr	r0, [pc, #4]	; (800bec4 <__sfp_lock_acquire+0x8>)
 800bebe:	f000 b8b3 	b.w	800c028 <__retarget_lock_acquire_recursive>
 800bec2:	bf00      	nop
 800bec4:	20000594 	.word	0x20000594

0800bec8 <__sfp_lock_release>:
 800bec8:	4801      	ldr	r0, [pc, #4]	; (800bed0 <__sfp_lock_release+0x8>)
 800beca:	f000 b8ae 	b.w	800c02a <__retarget_lock_release_recursive>
 800bece:	bf00      	nop
 800bed0:	20000594 	.word	0x20000594

0800bed4 <__sinit_lock_acquire>:
 800bed4:	4801      	ldr	r0, [pc, #4]	; (800bedc <__sinit_lock_acquire+0x8>)
 800bed6:	f000 b8a7 	b.w	800c028 <__retarget_lock_acquire_recursive>
 800beda:	bf00      	nop
 800bedc:	2000058f 	.word	0x2000058f

0800bee0 <__sinit_lock_release>:
 800bee0:	4801      	ldr	r0, [pc, #4]	; (800bee8 <__sinit_lock_release+0x8>)
 800bee2:	f000 b8a2 	b.w	800c02a <__retarget_lock_release_recursive>
 800bee6:	bf00      	nop
 800bee8:	2000058f 	.word	0x2000058f

0800beec <__sinit>:
 800beec:	b510      	push	{r4, lr}
 800beee:	4604      	mov	r4, r0
 800bef0:	f7ff fff0 	bl	800bed4 <__sinit_lock_acquire>
 800bef4:	69a3      	ldr	r3, [r4, #24]
 800bef6:	b11b      	cbz	r3, 800bf00 <__sinit+0x14>
 800bef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800befc:	f7ff bff0 	b.w	800bee0 <__sinit_lock_release>
 800bf00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf04:	6523      	str	r3, [r4, #80]	; 0x50
 800bf06:	4b13      	ldr	r3, [pc, #76]	; (800bf54 <__sinit+0x68>)
 800bf08:	4a13      	ldr	r2, [pc, #76]	; (800bf58 <__sinit+0x6c>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	62a2      	str	r2, [r4, #40]	; 0x28
 800bf0e:	42a3      	cmp	r3, r4
 800bf10:	bf04      	itt	eq
 800bf12:	2301      	moveq	r3, #1
 800bf14:	61a3      	streq	r3, [r4, #24]
 800bf16:	4620      	mov	r0, r4
 800bf18:	f000 f820 	bl	800bf5c <__sfp>
 800bf1c:	6060      	str	r0, [r4, #4]
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f000 f81c 	bl	800bf5c <__sfp>
 800bf24:	60a0      	str	r0, [r4, #8]
 800bf26:	4620      	mov	r0, r4
 800bf28:	f000 f818 	bl	800bf5c <__sfp>
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	60e0      	str	r0, [r4, #12]
 800bf30:	2104      	movs	r1, #4
 800bf32:	6860      	ldr	r0, [r4, #4]
 800bf34:	f7ff ff82 	bl	800be3c <std>
 800bf38:	68a0      	ldr	r0, [r4, #8]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	2109      	movs	r1, #9
 800bf3e:	f7ff ff7d 	bl	800be3c <std>
 800bf42:	68e0      	ldr	r0, [r4, #12]
 800bf44:	2202      	movs	r2, #2
 800bf46:	2112      	movs	r1, #18
 800bf48:	f7ff ff78 	bl	800be3c <std>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	61a3      	str	r3, [r4, #24]
 800bf50:	e7d2      	b.n	800bef8 <__sinit+0xc>
 800bf52:	bf00      	nop
 800bf54:	0800c370 	.word	0x0800c370
 800bf58:	0800be85 	.word	0x0800be85

0800bf5c <__sfp>:
 800bf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf5e:	4607      	mov	r7, r0
 800bf60:	f7ff ffac 	bl	800bebc <__sfp_lock_acquire>
 800bf64:	4b1e      	ldr	r3, [pc, #120]	; (800bfe0 <__sfp+0x84>)
 800bf66:	681e      	ldr	r6, [r3, #0]
 800bf68:	69b3      	ldr	r3, [r6, #24]
 800bf6a:	b913      	cbnz	r3, 800bf72 <__sfp+0x16>
 800bf6c:	4630      	mov	r0, r6
 800bf6e:	f7ff ffbd 	bl	800beec <__sinit>
 800bf72:	3648      	adds	r6, #72	; 0x48
 800bf74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf78:	3b01      	subs	r3, #1
 800bf7a:	d503      	bpl.n	800bf84 <__sfp+0x28>
 800bf7c:	6833      	ldr	r3, [r6, #0]
 800bf7e:	b30b      	cbz	r3, 800bfc4 <__sfp+0x68>
 800bf80:	6836      	ldr	r6, [r6, #0]
 800bf82:	e7f7      	b.n	800bf74 <__sfp+0x18>
 800bf84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf88:	b9d5      	cbnz	r5, 800bfc0 <__sfp+0x64>
 800bf8a:	4b16      	ldr	r3, [pc, #88]	; (800bfe4 <__sfp+0x88>)
 800bf8c:	60e3      	str	r3, [r4, #12]
 800bf8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf92:	6665      	str	r5, [r4, #100]	; 0x64
 800bf94:	f000 f847 	bl	800c026 <__retarget_lock_init_recursive>
 800bf98:	f7ff ff96 	bl	800bec8 <__sfp_lock_release>
 800bf9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bfa0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bfa4:	6025      	str	r5, [r4, #0]
 800bfa6:	61a5      	str	r5, [r4, #24]
 800bfa8:	2208      	movs	r2, #8
 800bfaa:	4629      	mov	r1, r5
 800bfac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bfb0:	f7fd fafa 	bl	80095a8 <memset>
 800bfb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bfb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfc0:	3468      	adds	r4, #104	; 0x68
 800bfc2:	e7d9      	b.n	800bf78 <__sfp+0x1c>
 800bfc4:	2104      	movs	r1, #4
 800bfc6:	4638      	mov	r0, r7
 800bfc8:	f7ff ff62 	bl	800be90 <__sfmoreglue>
 800bfcc:	4604      	mov	r4, r0
 800bfce:	6030      	str	r0, [r6, #0]
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	d1d5      	bne.n	800bf80 <__sfp+0x24>
 800bfd4:	f7ff ff78 	bl	800bec8 <__sfp_lock_release>
 800bfd8:	230c      	movs	r3, #12
 800bfda:	603b      	str	r3, [r7, #0]
 800bfdc:	e7ee      	b.n	800bfbc <__sfp+0x60>
 800bfde:	bf00      	nop
 800bfe0:	0800c370 	.word	0x0800c370
 800bfe4:	ffff0001 	.word	0xffff0001

0800bfe8 <_fwalk_reent>:
 800bfe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfec:	4606      	mov	r6, r0
 800bfee:	4688      	mov	r8, r1
 800bff0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bff4:	2700      	movs	r7, #0
 800bff6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bffa:	f1b9 0901 	subs.w	r9, r9, #1
 800bffe:	d505      	bpl.n	800c00c <_fwalk_reent+0x24>
 800c000:	6824      	ldr	r4, [r4, #0]
 800c002:	2c00      	cmp	r4, #0
 800c004:	d1f7      	bne.n	800bff6 <_fwalk_reent+0xe>
 800c006:	4638      	mov	r0, r7
 800c008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c00c:	89ab      	ldrh	r3, [r5, #12]
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d907      	bls.n	800c022 <_fwalk_reent+0x3a>
 800c012:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c016:	3301      	adds	r3, #1
 800c018:	d003      	beq.n	800c022 <_fwalk_reent+0x3a>
 800c01a:	4629      	mov	r1, r5
 800c01c:	4630      	mov	r0, r6
 800c01e:	47c0      	blx	r8
 800c020:	4307      	orrs	r7, r0
 800c022:	3568      	adds	r5, #104	; 0x68
 800c024:	e7e9      	b.n	800bffa <_fwalk_reent+0x12>

0800c026 <__retarget_lock_init_recursive>:
 800c026:	4770      	bx	lr

0800c028 <__retarget_lock_acquire_recursive>:
 800c028:	4770      	bx	lr

0800c02a <__retarget_lock_release_recursive>:
 800c02a:	4770      	bx	lr

0800c02c <__swhatbuf_r>:
 800c02c:	b570      	push	{r4, r5, r6, lr}
 800c02e:	460e      	mov	r6, r1
 800c030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c034:	2900      	cmp	r1, #0
 800c036:	b096      	sub	sp, #88	; 0x58
 800c038:	4614      	mov	r4, r2
 800c03a:	461d      	mov	r5, r3
 800c03c:	da07      	bge.n	800c04e <__swhatbuf_r+0x22>
 800c03e:	2300      	movs	r3, #0
 800c040:	602b      	str	r3, [r5, #0]
 800c042:	89b3      	ldrh	r3, [r6, #12]
 800c044:	061a      	lsls	r2, r3, #24
 800c046:	d410      	bmi.n	800c06a <__swhatbuf_r+0x3e>
 800c048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c04c:	e00e      	b.n	800c06c <__swhatbuf_r+0x40>
 800c04e:	466a      	mov	r2, sp
 800c050:	f000 f902 	bl	800c258 <_fstat_r>
 800c054:	2800      	cmp	r0, #0
 800c056:	dbf2      	blt.n	800c03e <__swhatbuf_r+0x12>
 800c058:	9a01      	ldr	r2, [sp, #4]
 800c05a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c05e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c062:	425a      	negs	r2, r3
 800c064:	415a      	adcs	r2, r3
 800c066:	602a      	str	r2, [r5, #0]
 800c068:	e7ee      	b.n	800c048 <__swhatbuf_r+0x1c>
 800c06a:	2340      	movs	r3, #64	; 0x40
 800c06c:	2000      	movs	r0, #0
 800c06e:	6023      	str	r3, [r4, #0]
 800c070:	b016      	add	sp, #88	; 0x58
 800c072:	bd70      	pop	{r4, r5, r6, pc}

0800c074 <__smakebuf_r>:
 800c074:	898b      	ldrh	r3, [r1, #12]
 800c076:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c078:	079d      	lsls	r5, r3, #30
 800c07a:	4606      	mov	r6, r0
 800c07c:	460c      	mov	r4, r1
 800c07e:	d507      	bpl.n	800c090 <__smakebuf_r+0x1c>
 800c080:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c084:	6023      	str	r3, [r4, #0]
 800c086:	6123      	str	r3, [r4, #16]
 800c088:	2301      	movs	r3, #1
 800c08a:	6163      	str	r3, [r4, #20]
 800c08c:	b002      	add	sp, #8
 800c08e:	bd70      	pop	{r4, r5, r6, pc}
 800c090:	ab01      	add	r3, sp, #4
 800c092:	466a      	mov	r2, sp
 800c094:	f7ff ffca 	bl	800c02c <__swhatbuf_r>
 800c098:	9900      	ldr	r1, [sp, #0]
 800c09a:	4605      	mov	r5, r0
 800c09c:	4630      	mov	r0, r6
 800c09e:	f7ff f987 	bl	800b3b0 <_malloc_r>
 800c0a2:	b948      	cbnz	r0, 800c0b8 <__smakebuf_r+0x44>
 800c0a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0a8:	059a      	lsls	r2, r3, #22
 800c0aa:	d4ef      	bmi.n	800c08c <__smakebuf_r+0x18>
 800c0ac:	f023 0303 	bic.w	r3, r3, #3
 800c0b0:	f043 0302 	orr.w	r3, r3, #2
 800c0b4:	81a3      	strh	r3, [r4, #12]
 800c0b6:	e7e3      	b.n	800c080 <__smakebuf_r+0xc>
 800c0b8:	4b0d      	ldr	r3, [pc, #52]	; (800c0f0 <__smakebuf_r+0x7c>)
 800c0ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800c0bc:	89a3      	ldrh	r3, [r4, #12]
 800c0be:	6020      	str	r0, [r4, #0]
 800c0c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0c4:	81a3      	strh	r3, [r4, #12]
 800c0c6:	9b00      	ldr	r3, [sp, #0]
 800c0c8:	6163      	str	r3, [r4, #20]
 800c0ca:	9b01      	ldr	r3, [sp, #4]
 800c0cc:	6120      	str	r0, [r4, #16]
 800c0ce:	b15b      	cbz	r3, 800c0e8 <__smakebuf_r+0x74>
 800c0d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	f000 f8d1 	bl	800c27c <_isatty_r>
 800c0da:	b128      	cbz	r0, 800c0e8 <__smakebuf_r+0x74>
 800c0dc:	89a3      	ldrh	r3, [r4, #12]
 800c0de:	f023 0303 	bic.w	r3, r3, #3
 800c0e2:	f043 0301 	orr.w	r3, r3, #1
 800c0e6:	81a3      	strh	r3, [r4, #12]
 800c0e8:	89a0      	ldrh	r0, [r4, #12]
 800c0ea:	4305      	orrs	r5, r0
 800c0ec:	81a5      	strh	r5, [r4, #12]
 800c0ee:	e7cd      	b.n	800c08c <__smakebuf_r+0x18>
 800c0f0:	0800be85 	.word	0x0800be85

0800c0f4 <_malloc_usable_size_r>:
 800c0f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0f8:	1f18      	subs	r0, r3, #4
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	bfbc      	itt	lt
 800c0fe:	580b      	ldrlt	r3, [r1, r0]
 800c100:	18c0      	addlt	r0, r0, r3
 800c102:	4770      	bx	lr

0800c104 <_raise_r>:
 800c104:	291f      	cmp	r1, #31
 800c106:	b538      	push	{r3, r4, r5, lr}
 800c108:	4604      	mov	r4, r0
 800c10a:	460d      	mov	r5, r1
 800c10c:	d904      	bls.n	800c118 <_raise_r+0x14>
 800c10e:	2316      	movs	r3, #22
 800c110:	6003      	str	r3, [r0, #0]
 800c112:	f04f 30ff 	mov.w	r0, #4294967295
 800c116:	bd38      	pop	{r3, r4, r5, pc}
 800c118:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c11a:	b112      	cbz	r2, 800c122 <_raise_r+0x1e>
 800c11c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c120:	b94b      	cbnz	r3, 800c136 <_raise_r+0x32>
 800c122:	4620      	mov	r0, r4
 800c124:	f000 f830 	bl	800c188 <_getpid_r>
 800c128:	462a      	mov	r2, r5
 800c12a:	4601      	mov	r1, r0
 800c12c:	4620      	mov	r0, r4
 800c12e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c132:	f000 b817 	b.w	800c164 <_kill_r>
 800c136:	2b01      	cmp	r3, #1
 800c138:	d00a      	beq.n	800c150 <_raise_r+0x4c>
 800c13a:	1c59      	adds	r1, r3, #1
 800c13c:	d103      	bne.n	800c146 <_raise_r+0x42>
 800c13e:	2316      	movs	r3, #22
 800c140:	6003      	str	r3, [r0, #0]
 800c142:	2001      	movs	r0, #1
 800c144:	e7e7      	b.n	800c116 <_raise_r+0x12>
 800c146:	2400      	movs	r4, #0
 800c148:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c14c:	4628      	mov	r0, r5
 800c14e:	4798      	blx	r3
 800c150:	2000      	movs	r0, #0
 800c152:	e7e0      	b.n	800c116 <_raise_r+0x12>

0800c154 <raise>:
 800c154:	4b02      	ldr	r3, [pc, #8]	; (800c160 <raise+0xc>)
 800c156:	4601      	mov	r1, r0
 800c158:	6818      	ldr	r0, [r3, #0]
 800c15a:	f7ff bfd3 	b.w	800c104 <_raise_r>
 800c15e:	bf00      	nop
 800c160:	20000014 	.word	0x20000014

0800c164 <_kill_r>:
 800c164:	b538      	push	{r3, r4, r5, lr}
 800c166:	4d07      	ldr	r5, [pc, #28]	; (800c184 <_kill_r+0x20>)
 800c168:	2300      	movs	r3, #0
 800c16a:	4604      	mov	r4, r0
 800c16c:	4608      	mov	r0, r1
 800c16e:	4611      	mov	r1, r2
 800c170:	602b      	str	r3, [r5, #0]
 800c172:	f7f6 fa51 	bl	8002618 <_kill>
 800c176:	1c43      	adds	r3, r0, #1
 800c178:	d102      	bne.n	800c180 <_kill_r+0x1c>
 800c17a:	682b      	ldr	r3, [r5, #0]
 800c17c:	b103      	cbz	r3, 800c180 <_kill_r+0x1c>
 800c17e:	6023      	str	r3, [r4, #0]
 800c180:	bd38      	pop	{r3, r4, r5, pc}
 800c182:	bf00      	nop
 800c184:	20000588 	.word	0x20000588

0800c188 <_getpid_r>:
 800c188:	f7f6 ba3e 	b.w	8002608 <_getpid>

0800c18c <__sread>:
 800c18c:	b510      	push	{r4, lr}
 800c18e:	460c      	mov	r4, r1
 800c190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c194:	f000 f894 	bl	800c2c0 <_read_r>
 800c198:	2800      	cmp	r0, #0
 800c19a:	bfab      	itete	ge
 800c19c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c19e:	89a3      	ldrhlt	r3, [r4, #12]
 800c1a0:	181b      	addge	r3, r3, r0
 800c1a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1a6:	bfac      	ite	ge
 800c1a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1aa:	81a3      	strhlt	r3, [r4, #12]
 800c1ac:	bd10      	pop	{r4, pc}

0800c1ae <__swrite>:
 800c1ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b2:	461f      	mov	r7, r3
 800c1b4:	898b      	ldrh	r3, [r1, #12]
 800c1b6:	05db      	lsls	r3, r3, #23
 800c1b8:	4605      	mov	r5, r0
 800c1ba:	460c      	mov	r4, r1
 800c1bc:	4616      	mov	r6, r2
 800c1be:	d505      	bpl.n	800c1cc <__swrite+0x1e>
 800c1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1c4:	2302      	movs	r3, #2
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	f000 f868 	bl	800c29c <_lseek_r>
 800c1cc:	89a3      	ldrh	r3, [r4, #12]
 800c1ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1d6:	81a3      	strh	r3, [r4, #12]
 800c1d8:	4632      	mov	r2, r6
 800c1da:	463b      	mov	r3, r7
 800c1dc:	4628      	mov	r0, r5
 800c1de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e2:	f000 b817 	b.w	800c214 <_write_r>

0800c1e6 <__sseek>:
 800c1e6:	b510      	push	{r4, lr}
 800c1e8:	460c      	mov	r4, r1
 800c1ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1ee:	f000 f855 	bl	800c29c <_lseek_r>
 800c1f2:	1c43      	adds	r3, r0, #1
 800c1f4:	89a3      	ldrh	r3, [r4, #12]
 800c1f6:	bf15      	itete	ne
 800c1f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c1fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c1fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c202:	81a3      	strheq	r3, [r4, #12]
 800c204:	bf18      	it	ne
 800c206:	81a3      	strhne	r3, [r4, #12]
 800c208:	bd10      	pop	{r4, pc}

0800c20a <__sclose>:
 800c20a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c20e:	f000 b813 	b.w	800c238 <_close_r>
	...

0800c214 <_write_r>:
 800c214:	b538      	push	{r3, r4, r5, lr}
 800c216:	4d07      	ldr	r5, [pc, #28]	; (800c234 <_write_r+0x20>)
 800c218:	4604      	mov	r4, r0
 800c21a:	4608      	mov	r0, r1
 800c21c:	4611      	mov	r1, r2
 800c21e:	2200      	movs	r2, #0
 800c220:	602a      	str	r2, [r5, #0]
 800c222:	461a      	mov	r2, r3
 800c224:	f7f6 fa2f 	bl	8002686 <_write>
 800c228:	1c43      	adds	r3, r0, #1
 800c22a:	d102      	bne.n	800c232 <_write_r+0x1e>
 800c22c:	682b      	ldr	r3, [r5, #0]
 800c22e:	b103      	cbz	r3, 800c232 <_write_r+0x1e>
 800c230:	6023      	str	r3, [r4, #0]
 800c232:	bd38      	pop	{r3, r4, r5, pc}
 800c234:	20000588 	.word	0x20000588

0800c238 <_close_r>:
 800c238:	b538      	push	{r3, r4, r5, lr}
 800c23a:	4d06      	ldr	r5, [pc, #24]	; (800c254 <_close_r+0x1c>)
 800c23c:	2300      	movs	r3, #0
 800c23e:	4604      	mov	r4, r0
 800c240:	4608      	mov	r0, r1
 800c242:	602b      	str	r3, [r5, #0]
 800c244:	f7f6 fa3b 	bl	80026be <_close>
 800c248:	1c43      	adds	r3, r0, #1
 800c24a:	d102      	bne.n	800c252 <_close_r+0x1a>
 800c24c:	682b      	ldr	r3, [r5, #0]
 800c24e:	b103      	cbz	r3, 800c252 <_close_r+0x1a>
 800c250:	6023      	str	r3, [r4, #0]
 800c252:	bd38      	pop	{r3, r4, r5, pc}
 800c254:	20000588 	.word	0x20000588

0800c258 <_fstat_r>:
 800c258:	b538      	push	{r3, r4, r5, lr}
 800c25a:	4d07      	ldr	r5, [pc, #28]	; (800c278 <_fstat_r+0x20>)
 800c25c:	2300      	movs	r3, #0
 800c25e:	4604      	mov	r4, r0
 800c260:	4608      	mov	r0, r1
 800c262:	4611      	mov	r1, r2
 800c264:	602b      	str	r3, [r5, #0]
 800c266:	f7f6 fa36 	bl	80026d6 <_fstat>
 800c26a:	1c43      	adds	r3, r0, #1
 800c26c:	d102      	bne.n	800c274 <_fstat_r+0x1c>
 800c26e:	682b      	ldr	r3, [r5, #0]
 800c270:	b103      	cbz	r3, 800c274 <_fstat_r+0x1c>
 800c272:	6023      	str	r3, [r4, #0]
 800c274:	bd38      	pop	{r3, r4, r5, pc}
 800c276:	bf00      	nop
 800c278:	20000588 	.word	0x20000588

0800c27c <_isatty_r>:
 800c27c:	b538      	push	{r3, r4, r5, lr}
 800c27e:	4d06      	ldr	r5, [pc, #24]	; (800c298 <_isatty_r+0x1c>)
 800c280:	2300      	movs	r3, #0
 800c282:	4604      	mov	r4, r0
 800c284:	4608      	mov	r0, r1
 800c286:	602b      	str	r3, [r5, #0]
 800c288:	f7f6 fa35 	bl	80026f6 <_isatty>
 800c28c:	1c43      	adds	r3, r0, #1
 800c28e:	d102      	bne.n	800c296 <_isatty_r+0x1a>
 800c290:	682b      	ldr	r3, [r5, #0]
 800c292:	b103      	cbz	r3, 800c296 <_isatty_r+0x1a>
 800c294:	6023      	str	r3, [r4, #0]
 800c296:	bd38      	pop	{r3, r4, r5, pc}
 800c298:	20000588 	.word	0x20000588

0800c29c <_lseek_r>:
 800c29c:	b538      	push	{r3, r4, r5, lr}
 800c29e:	4d07      	ldr	r5, [pc, #28]	; (800c2bc <_lseek_r+0x20>)
 800c2a0:	4604      	mov	r4, r0
 800c2a2:	4608      	mov	r0, r1
 800c2a4:	4611      	mov	r1, r2
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	602a      	str	r2, [r5, #0]
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	f7f6 fa2e 	bl	800270c <_lseek>
 800c2b0:	1c43      	adds	r3, r0, #1
 800c2b2:	d102      	bne.n	800c2ba <_lseek_r+0x1e>
 800c2b4:	682b      	ldr	r3, [r5, #0]
 800c2b6:	b103      	cbz	r3, 800c2ba <_lseek_r+0x1e>
 800c2b8:	6023      	str	r3, [r4, #0]
 800c2ba:	bd38      	pop	{r3, r4, r5, pc}
 800c2bc:	20000588 	.word	0x20000588

0800c2c0 <_read_r>:
 800c2c0:	b538      	push	{r3, r4, r5, lr}
 800c2c2:	4d07      	ldr	r5, [pc, #28]	; (800c2e0 <_read_r+0x20>)
 800c2c4:	4604      	mov	r4, r0
 800c2c6:	4608      	mov	r0, r1
 800c2c8:	4611      	mov	r1, r2
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	602a      	str	r2, [r5, #0]
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	f7f6 f9bc 	bl	800264c <_read>
 800c2d4:	1c43      	adds	r3, r0, #1
 800c2d6:	d102      	bne.n	800c2de <_read_r+0x1e>
 800c2d8:	682b      	ldr	r3, [r5, #0]
 800c2da:	b103      	cbz	r3, 800c2de <_read_r+0x1e>
 800c2dc:	6023      	str	r3, [r4, #0]
 800c2de:	bd38      	pop	{r3, r4, r5, pc}
 800c2e0:	20000588 	.word	0x20000588

0800c2e4 <_init>:
 800c2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2e6:	bf00      	nop
 800c2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ea:	bc08      	pop	{r3}
 800c2ec:	469e      	mov	lr, r3
 800c2ee:	4770      	bx	lr

0800c2f0 <_fini>:
 800c2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f2:	bf00      	nop
 800c2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2f6:	bc08      	pop	{r3}
 800c2f8:	469e      	mov	lr, r3
 800c2fa:	4770      	bx	lr
