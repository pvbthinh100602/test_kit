
test_kit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006148  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080062d8  080062d8  000162d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006344  08006344  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006344  08006344  00016344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800634c  0800634c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800634c  0800634c  0001634c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006350  08006350  00016350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000260  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002d4  200002d4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013fd1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000265a  00000000  00000000  00034075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  000366d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb0  00000000  00000000  00037678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f9c  00000000  00000000  00038528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000123fe  00000000  00000000  0005b4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9b4f  00000000  00000000  0006d8c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00147411  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004584  00000000  00000000  00147464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080062c0 	.word	0x080062c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080062c0 	.word	0x080062c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <button_scan>:
#include "button.h"

unsigned char button_count[8] = {0, 0, 0, 0, 0, 0, 0, 0};
unsigned char spi_button = 0x00;

void button_scan(){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	2108      	movs	r1, #8
 8000572:	482a      	ldr	r0, [pc, #168]	; (800061c <button_scan+0xb4>)
 8000574:	f002 fa8c 	bl	8002a90 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000578:	2201      	movs	r2, #1
 800057a:	2108      	movs	r1, #8
 800057c:	4827      	ldr	r0, [pc, #156]	; (800061c <button_scan+0xb4>)
 800057e:	f002 fa87 	bl	8002a90 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, &spi_button, 1, 1);
 8000582:	2301      	movs	r3, #1
 8000584:	2201      	movs	r2, #1
 8000586:	4926      	ldr	r1, [pc, #152]	; (8000620 <button_scan+0xb8>)
 8000588:	4826      	ldr	r0, [pc, #152]	; (8000624 <button_scan+0xbc>)
 800058a:	f003 f8ee 	bl	800376a <HAL_SPI_Receive>
	  unsigned char mask = 0x80;
 800058e:	2380      	movs	r3, #128	; 0x80
 8000590:	71fb      	strb	r3, [r7, #7]
	  for(int i = 0; i < 8; i++){
 8000592:	2300      	movs	r3, #0
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	e038      	b.n	800060a <button_scan+0xa2>
		  if(mask > 0x0f){
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2b0f      	cmp	r3, #15
 800059c:	d917      	bls.n	80005ce <button_scan+0x66>
			  if(spi_button & mask) button_count[3-i] = 0;
 800059e:	4b20      	ldr	r3, [pc, #128]	; (8000620 <button_scan+0xb8>)
 80005a0:	781a      	ldrb	r2, [r3, #0]
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	4013      	ands	r3, r2
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d006      	beq.n	80005ba <button_scan+0x52>
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	f1c3 0303 	rsb	r3, r3, #3
 80005b2:	4a1d      	ldr	r2, [pc, #116]	; (8000628 <button_scan+0xc0>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	54d1      	strb	r1, [r2, r3]
 80005b8:	e021      	b.n	80005fe <button_scan+0x96>
			  else button_count[3-i]++;
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	f1c3 0303 	rsb	r3, r3, #3
 80005c0:	4a19      	ldr	r2, [pc, #100]	; (8000628 <button_scan+0xc0>)
 80005c2:	5cd2      	ldrb	r2, [r2, r3]
 80005c4:	3201      	adds	r2, #1
 80005c6:	b2d1      	uxtb	r1, r2
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <button_scan+0xc0>)
 80005ca:	54d1      	strb	r1, [r2, r3]
 80005cc:	e017      	b.n	80005fe <button_scan+0x96>
		  } else {
			  if(spi_button & mask) button_count[i] = 0;
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <button_scan+0xb8>)
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	4013      	ands	r3, r2
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d005      	beq.n	80005e8 <button_scan+0x80>
 80005dc:	4a12      	ldr	r2, [pc, #72]	; (8000628 <button_scan+0xc0>)
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	4413      	add	r3, r2
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	e00a      	b.n	80005fe <button_scan+0x96>
			  else button_count[i]++;
 80005e8:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <button_scan+0xc0>)
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	4413      	add	r3, r2
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	b2d9      	uxtb	r1, r3
 80005f4:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <button_scan+0xc0>)
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	4413      	add	r3, r2
 80005fa:	460a      	mov	r2, r1
 80005fc:	701a      	strb	r2, [r3, #0]
		  }
		  mask = mask >> 1;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	085b      	lsrs	r3, r3, #1
 8000602:	71fb      	strb	r3, [r7, #7]
	  for(int i = 0; i < 8; i++){
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2b07      	cmp	r3, #7
 800060e:	ddc3      	ble.n	8000598 <button_scan+0x30>
	  }
}
 8000610:	bf00      	nop
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40020c00 	.word	0x40020c00
 8000620:	20000098 	.word	0x20000098
 8000624:	2000010c 	.word	0x2000010c
 8000628:	20000090 	.word	0x20000090

0800062c <led7Scan>:

unsigned char led7[4] = {0x00, 0xf1, 0x0e, 0x6a};

int led7_index = 0;

void led7Scan(){
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	2140      	movs	r1, #64	; 0x40
 8000634:	4847      	ldr	r0, [pc, #284]	; (8000754 <led7Scan+0x128>)
 8000636:	f002 fa2b 	bl	8002a90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, led7 + led7_index, 1, 1);
 800063a:	4b47      	ldr	r3, [pc, #284]	; (8000758 <led7Scan+0x12c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	461a      	mov	r2, r3
 8000640:	4b46      	ldr	r3, [pc, #280]	; (800075c <led7Scan+0x130>)
 8000642:	18d1      	adds	r1, r2, r3
 8000644:	2301      	movs	r3, #1
 8000646:	2201      	movs	r2, #1
 8000648:	4845      	ldr	r0, [pc, #276]	; (8000760 <led7Scan+0x134>)
 800064a:	f002 ff52 	bl	80034f2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800064e:	2201      	movs	r2, #1
 8000650:	2140      	movs	r1, #64	; 0x40
 8000652:	4840      	ldr	r0, [pc, #256]	; (8000754 <led7Scan+0x128>)
 8000654:	f002 fa1c 	bl	8002a90 <HAL_GPIO_WritePin>
	switch(led7_index){
 8000658:	4b3f      	ldr	r3, [pc, #252]	; (8000758 <led7Scan+0x12c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b03      	cmp	r3, #3
 800065e:	d86b      	bhi.n	8000738 <led7Scan+0x10c>
 8000660:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <led7Scan+0x3c>)
 8000662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000666:	bf00      	nop
 8000668:	08000679 	.word	0x08000679
 800066c:	080006a9 	.word	0x080006a9
 8000670:	080006d9 	.word	0x080006d9
 8000674:	08000709 	.word	0x08000709
	case 0:
		  HAL_GPIO_WritePin(LD_LED1_GPIO_Port, LD_LED1_Pin, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067e:	4839      	ldr	r0, [pc, #228]	; (8000764 <led7Scan+0x138>)
 8000680:	f002 fa06 	bl	8002a90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, 1);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800068a:	4837      	ldr	r0, [pc, #220]	; (8000768 <led7Scan+0x13c>)
 800068c:	f002 fa00 	bl	8002a90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED3_GPIO_Port, LD_LED3_Pin, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	2104      	movs	r1, #4
 8000694:	4833      	ldr	r0, [pc, #204]	; (8000764 <led7Scan+0x138>)
 8000696:	f002 f9fb 	bl	8002a90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED4_GPIO_Port, LD_LED4_Pin, 1);
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a0:	4830      	ldr	r0, [pc, #192]	; (8000764 <led7Scan+0x138>)
 80006a2:	f002 f9f5 	bl	8002a90 <HAL_GPIO_WritePin>
		  break;
 80006a6:	e047      	b.n	8000738 <led7Scan+0x10c>
	case 1:
		  HAL_GPIO_WritePin(LD_LED1_GPIO_Port, LD_LED1_Pin, 1);
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ae:	482d      	ldr	r0, [pc, #180]	; (8000764 <led7Scan+0x138>)
 80006b0:	f002 f9ee 	bl	8002a90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ba:	482b      	ldr	r0, [pc, #172]	; (8000768 <led7Scan+0x13c>)
 80006bc:	f002 f9e8 	bl	8002a90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED3_GPIO_Port, LD_LED3_Pin, 1);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2104      	movs	r1, #4
 80006c4:	4827      	ldr	r0, [pc, #156]	; (8000764 <led7Scan+0x138>)
 80006c6:	f002 f9e3 	bl	8002a90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED4_GPIO_Port, LD_LED4_Pin, 1);
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d0:	4824      	ldr	r0, [pc, #144]	; (8000764 <led7Scan+0x138>)
 80006d2:	f002 f9dd 	bl	8002a90 <HAL_GPIO_WritePin>
		  break;
 80006d6:	e02f      	b.n	8000738 <led7Scan+0x10c>
	case 2:
		  HAL_GPIO_WritePin(LD_LED1_GPIO_Port, LD_LED1_Pin, 1);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006de:	4821      	ldr	r0, [pc, #132]	; (8000764 <led7Scan+0x138>)
 80006e0:	f002 f9d6 	bl	8002a90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, 1);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ea:	481f      	ldr	r0, [pc, #124]	; (8000768 <led7Scan+0x13c>)
 80006ec:	f002 f9d0 	bl	8002a90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED3_GPIO_Port, LD_LED3_Pin, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2104      	movs	r1, #4
 80006f4:	481b      	ldr	r0, [pc, #108]	; (8000764 <led7Scan+0x138>)
 80006f6:	f002 f9cb 	bl	8002a90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED4_GPIO_Port, LD_LED4_Pin, 1);
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000700:	4818      	ldr	r0, [pc, #96]	; (8000764 <led7Scan+0x138>)
 8000702:	f002 f9c5 	bl	8002a90 <HAL_GPIO_WritePin>
		  break;
 8000706:	e017      	b.n	8000738 <led7Scan+0x10c>
	case 3:
		  HAL_GPIO_WritePin(LD_LED1_GPIO_Port, LD_LED1_Pin, 1);
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800070e:	4815      	ldr	r0, [pc, #84]	; (8000764 <led7Scan+0x138>)
 8000710:	f002 f9be 	bl	8002a90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, 1);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800071a:	4813      	ldr	r0, [pc, #76]	; (8000768 <led7Scan+0x13c>)
 800071c:	f002 f9b8 	bl	8002a90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED3_GPIO_Port, LD_LED3_Pin, 1);
 8000720:	2201      	movs	r2, #1
 8000722:	2104      	movs	r1, #4
 8000724:	480f      	ldr	r0, [pc, #60]	; (8000764 <led7Scan+0x138>)
 8000726:	f002 f9b3 	bl	8002a90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED4_GPIO_Port, LD_LED4_Pin, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000730:	480c      	ldr	r0, [pc, #48]	; (8000764 <led7Scan+0x138>)
 8000732:	f002 f9ad 	bl	8002a90 <HAL_GPIO_WritePin>
		  break;
 8000736:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <led7Scan+0x12c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	3301      	adds	r3, #1
 800073e:	425a      	negs	r2, r3
 8000740:	f003 0303 	and.w	r3, r3, #3
 8000744:	f002 0203 	and.w	r2, r2, #3
 8000748:	bf58      	it	pl
 800074a:	4253      	negpl	r3, r2
 800074c:	4a02      	ldr	r2, [pc, #8]	; (8000758 <led7Scan+0x12c>)
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40021800 	.word	0x40021800
 8000758:	2000009c 	.word	0x2000009c
 800075c:	20000000 	.word	0x20000000
 8000760:	2000010c 	.word	0x2000010c
 8000764:	40020400 	.word	0x40020400
 8000768:	40021400 	.word	0x40021400

0800076c <led7Set1Digit>:

void led7Set1Digit(int num, int position){
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
	if(num > 9 || num < 0) return;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b09      	cmp	r3, #9
 800077a:	dc43      	bgt.n	8000804 <led7Set1Digit+0x98>
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b00      	cmp	r3, #0
 8000780:	db40      	blt.n	8000804 <led7Set1Digit+0x98>
	unsigned char digit = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	73fb      	strb	r3, [r7, #15]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b09      	cmp	r3, #9
 800078a:	d835      	bhi.n	80007f8 <led7Set1Digit+0x8c>
 800078c:	a201      	add	r2, pc, #4	; (adr r2, 8000794 <led7Set1Digit+0x28>)
 800078e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000792:	bf00      	nop
 8000794:	080007bd 	.word	0x080007bd
 8000798:	080007c3 	.word	0x080007c3
 800079c:	080007c9 	.word	0x080007c9
 80007a0:	080007cf 	.word	0x080007cf
 80007a4:	080007d5 	.word	0x080007d5
 80007a8:	080007db 	.word	0x080007db
 80007ac:	080007e1 	.word	0x080007e1
 80007b0:	080007e7 	.word	0x080007e7
 80007b4:	080007ed 	.word	0x080007ed
 80007b8:	080007f3 	.word	0x080007f3
	switch(num){
	case 0:
		digit = 0x03;
 80007bc:	2303      	movs	r3, #3
 80007be:	73fb      	strb	r3, [r7, #15]
		break;
 80007c0:	e01a      	b.n	80007f8 <led7Set1Digit+0x8c>
	case 1:
		digit = 0x9e;
 80007c2:	239e      	movs	r3, #158	; 0x9e
 80007c4:	73fb      	strb	r3, [r7, #15]
		break;
 80007c6:	e017      	b.n	80007f8 <led7Set1Digit+0x8c>
	case 2:
		digit = 0x25;
 80007c8:	2325      	movs	r3, #37	; 0x25
 80007ca:	73fb      	strb	r3, [r7, #15]
		break;
 80007cc:	e014      	b.n	80007f8 <led7Set1Digit+0x8c>
	case 3:
		digit = 0x0d;
 80007ce:	230d      	movs	r3, #13
 80007d0:	73fb      	strb	r3, [r7, #15]
		break;
 80007d2:	e011      	b.n	80007f8 <led7Set1Digit+0x8c>
	case 4:
		digit = 0x99;
 80007d4:	2399      	movs	r3, #153	; 0x99
 80007d6:	73fb      	strb	r3, [r7, #15]
		break;
 80007d8:	e00e      	b.n	80007f8 <led7Set1Digit+0x8c>
	case 5:
		digit = 0x49;
 80007da:	2349      	movs	r3, #73	; 0x49
 80007dc:	73fb      	strb	r3, [r7, #15]
		break;
 80007de:	e00b      	b.n	80007f8 <led7Set1Digit+0x8c>
	case 6:
		digit = 0x41;
 80007e0:	2341      	movs	r3, #65	; 0x41
 80007e2:	73fb      	strb	r3, [r7, #15]
		break;
 80007e4:	e008      	b.n	80007f8 <led7Set1Digit+0x8c>
	case 7:
		digit = 0x1f;
 80007e6:	231f      	movs	r3, #31
 80007e8:	73fb      	strb	r3, [r7, #15]
		break;
 80007ea:	e005      	b.n	80007f8 <led7Set1Digit+0x8c>
	case 8:
		digit = 0x01;
 80007ec:	2301      	movs	r3, #1
 80007ee:	73fb      	strb	r3, [r7, #15]
		break;
 80007f0:	e002      	b.n	80007f8 <led7Set1Digit+0x8c>
	case 9:
		digit = 0x09;
 80007f2:	2309      	movs	r3, #9
 80007f4:	73fb      	strb	r3, [r7, #15]
		break;
 80007f6:	bf00      	nop
	}
	led7[position - 1] = digit;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	4904      	ldr	r1, [pc, #16]	; (8000810 <led7Set1Digit+0xa4>)
 80007fe:	7bfa      	ldrb	r2, [r7, #15]
 8000800:	54ca      	strb	r2, [r1, r3]
 8000802:	e000      	b.n	8000806 <led7Set1Digit+0x9a>
	if(num > 9 || num < 0) return;
 8000804:	bf00      	nop
}
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	20000000 	.word	0x20000000

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000818:	f000 fe06 	bl	8001428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081c:	f000 f8ac 	bl	8000978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000820:	f000 fa32 	bl	8000c88 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000824:	f000 f99a 	bl	8000b5c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000828:	f000 f9e4 	bl	8000bf4 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800082c:	f000 f960 	bl	8000af0 <MX_SPI1_Init>
  MX_DMA_Init();
 8000830:	f000 fa0a 	bl	8000c48 <MX_DMA_Init>
  MX_ADC1_Init();
 8000834:	f000 f8fc 	bl	8000a30 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000838:	4840      	ldr	r0, [pc, #256]	; (800093c <main+0x128>)
 800083a:	f003 fce7 	bl	800420c <HAL_TIM_Base_Start_IT>
  HAL_SPI_Init(&hspi1);
 800083e:	4840      	ldr	r0, [pc, #256]	; (8000940 <main+0x12c>)
 8000840:	f002 fdce 	bl	80033e0 <HAL_SPI_Init>
  HAL_ADC_Init(&hadc1);
 8000844:	483f      	ldr	r0, [pc, #252]	; (8000944 <main+0x130>)
 8000846:	f000 fe61 	bl	800150c <HAL_ADC_Init>
//  HAL_ADC_Start_DMA(&hadc1, adcReceive, 2);
  HAL_UART_Receive_IT(&huart1, &temp, 1);
 800084a:	2201      	movs	r2, #1
 800084c:	493e      	ldr	r1, [pc, #248]	; (8000948 <main+0x134>)
 800084e:	483f      	ldr	r0, [pc, #252]	; (800094c <main+0x138>)
 8000850:	f004 f9ed 	bl	8004c2e <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000854:	2201      	movs	r2, #1
 8000856:	2108      	movs	r1, #8
 8000858:	483d      	ldr	r0, [pc, #244]	; (8000950 <main+0x13c>)
 800085a:	f002 f919 	bl	8002a90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD_LED1_GPIO_Port, LD_LED1_Pin, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000864:	483b      	ldr	r0, [pc, #236]	; (8000954 <main+0x140>)
 8000866:	f002 f913 	bl	8002a90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000870:	4839      	ldr	r0, [pc, #228]	; (8000958 <main+0x144>)
 8000872:	f002 f90d 	bl	8002a90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD_LED3_GPIO_Port, LD_LED3_Pin, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2104      	movs	r1, #4
 800087a:	4836      	ldr	r0, [pc, #216]	; (8000954 <main+0x140>)
 800087c:	f002 f908 	bl	8002a90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD_LED4_GPIO_Port, LD_LED4_Pin, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000886:	4833      	ldr	r0, [pc, #204]	; (8000954 <main+0x140>)
 8000888:	f002 f902 	bl	8002a90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800088c:	2201      	movs	r2, #1
 800088e:	2140      	movs	r1, #64	; 0x40
 8000890:	4832      	ldr	r0, [pc, #200]	; (800095c <main+0x148>)
 8000892:	f002 f8fd 	bl	8002a90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 8000896:	2201      	movs	r2, #1
 8000898:	2110      	movs	r1, #16
 800089a:	4831      	ldr	r0, [pc, #196]	; (8000960 <main+0x14c>)
 800089c:	f002 f8f8 	bl	8002a90 <HAL_GPIO_WritePin>
  led7Set1Digit(9, 1);
 80008a0:	2101      	movs	r1, #1
 80008a2:	2009      	movs	r0, #9
 80008a4:	f7ff ff62 	bl	800076c <led7Set1Digit>
  led7Set1Digit(2, 2);
 80008a8:	2102      	movs	r1, #2
 80008aa:	2002      	movs	r0, #2
 80008ac:	f7ff ff5e 	bl	800076c <led7Set1Digit>
  led7Set1Digit(3, 3);
 80008b0:	2103      	movs	r1, #3
 80008b2:	2003      	movs	r0, #3
 80008b4:	f7ff ff5a 	bl	800076c <led7Set1Digit>
  led7Set1Digit(4, 4);
 80008b8:	2104      	movs	r1, #4
 80008ba:	2004      	movs	r0, #4
 80008bc:	f7ff ff56 	bl	800076c <led7Set1Digit>
  setTimer1(1000);
 80008c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c4:	f000 fd04 	bl	80012d0 <setTimer1>
  setTimer2(50);
 80008c8:	2032      	movs	r0, #50	; 0x32
 80008ca:	f000 fd17 	bl	80012fc <setTimer2>
  setTimer3(2);
 80008ce:	2002      	movs	r0, #2
 80008d0:	f000 fd28 	bl	8001324 <setTimer3>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(flag_timer1 == 1){
 80008d4:	4b23      	ldr	r3, [pc, #140]	; (8000964 <main+0x150>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d124      	bne.n	8000926 <main+0x112>
		  setTimer1(1000);
 80008dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e0:	f000 fcf6 	bl	80012d0 <setTimer1>
		  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80008e4:	2110      	movs	r1, #16
 80008e6:	481e      	ldr	r0, [pc, #120]	; (8000960 <main+0x14c>)
 80008e8:	f002 f8eb 	bl	8002ac2 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin);
 80008ec:	2120      	movs	r1, #32
 80008ee:	481c      	ldr	r0, [pc, #112]	; (8000960 <main+0x14c>)
 80008f0:	f002 f8e7 	bl	8002ac2 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin);
 80008f4:	2140      	movs	r1, #64	; 0x40
 80008f6:	481a      	ldr	r0, [pc, #104]	; (8000960 <main+0x14c>)
 80008f8:	f002 f8e3 	bl	8002ac2 <HAL_GPIO_TogglePin>
		  HAL_ADC_Start_DMA(&hadc1, adcReceive, 2);
 80008fc:	2202      	movs	r2, #2
 80008fe:	491a      	ldr	r1, [pc, #104]	; (8000968 <main+0x154>)
 8000900:	4810      	ldr	r0, [pc, #64]	; (8000944 <main+0x130>)
 8000902:	f000 fe47 	bl	8001594 <HAL_ADC_Start_DMA>
		  HAL_UART_Transmit(&huart1, (void*)str, sprintf(str, "ADC1: %ld, ADC2: %ld\n", adcReceive[0], adcReceive[1]), 1000);
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <main+0x154>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <main+0x154>)
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	4917      	ldr	r1, [pc, #92]	; (800096c <main+0x158>)
 8000910:	4817      	ldr	r0, [pc, #92]	; (8000970 <main+0x15c>)
 8000912:	f005 f8a7 	bl	8005a64 <siprintf>
 8000916:	4603      	mov	r3, r0
 8000918:	b29a      	uxth	r2, r3
 800091a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091e:	4914      	ldr	r1, [pc, #80]	; (8000970 <main+0x15c>)
 8000920:	480a      	ldr	r0, [pc, #40]	; (800094c <main+0x138>)
 8000922:	f004 f8f2 	bl	8004b0a <HAL_UART_Transmit>
//		  HAL_ADC_Start_DMA(&hadc1, adcReceive, 2);
	  }

	  if(flag_timer2){
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <main+0x160>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d0d2      	beq.n	80008d4 <main+0xc0>
		  button_scan();
 800092e:	f7ff fe1b 	bl	8000568 <button_scan>
		  setTimer2(50);
 8000932:	2032      	movs	r0, #50	; 0x32
 8000934:	f000 fce2 	bl	80012fc <setTimer2>
	  if(flag_timer1 == 1){
 8000938:	e7cc      	b.n	80008d4 <main+0xc0>
 800093a:	bf00      	nop
 800093c:	20000164 	.word	0x20000164
 8000940:	2000010c 	.word	0x2000010c
 8000944:	200001ac 	.word	0x200001ac
 8000948:	200000a0 	.word	0x200000a0
 800094c:	200000c8 	.word	0x200000c8
 8000950:	40020c00 	.word	0x40020c00
 8000954:	40020400 	.word	0x40020400
 8000958:	40021400 	.word	0x40021400
 800095c:	40021800 	.word	0x40021800
 8000960:	40021000 	.word	0x40021000
 8000964:	200000a8 	.word	0x200000a8
 8000968:	200001f4 	.word	0x200001f4
 800096c:	080062d8 	.word	0x080062d8
 8000970:	2000025c 	.word	0x2000025c
 8000974:	200000ac 	.word	0x200000ac

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b094      	sub	sp, #80	; 0x50
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	f107 0320 	add.w	r3, r7, #32
 8000982:	2230      	movs	r2, #48	; 0x30
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f005 f864 	bl	8005a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <SystemClock_Config+0xb0>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	4a20      	ldr	r2, [pc, #128]	; (8000a28 <SystemClock_Config+0xb0>)
 80009a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009aa:	6413      	str	r3, [r2, #64]	; 0x40
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <SystemClock_Config+0xb0>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b8:	2300      	movs	r3, #0
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <SystemClock_Config+0xb4>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a1a      	ldr	r2, [pc, #104]	; (8000a2c <SystemClock_Config+0xb4>)
 80009c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <SystemClock_Config+0xb4>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d4:	2301      	movs	r3, #1
 80009d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009de:	2300      	movs	r3, #0
 80009e0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e2:	f107 0320 	add.w	r3, r7, #32
 80009e6:	4618      	mov	r0, r3
 80009e8:	f002 f886 	bl	8002af8 <HAL_RCC_OscConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80009f2:	f000 fa67 	bl	8000ec4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f6:	230f      	movs	r3, #15
 80009f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80009fa:	2301      	movs	r3, #1
 80009fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f002 fae9 	bl	8002fe8 <HAL_RCC_ClockConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000a1c:	f000 fa52 	bl	8000ec4 <Error_Handler>
  }
}
 8000a20:	bf00      	nop
 8000a22:	3750      	adds	r7, #80	; 0x50
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40007000 	.word	0x40007000

08000a30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a36:	463b      	mov	r3, r7
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a42:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <MX_ADC1_Init+0xb4>)
 8000a44:	4a28      	ldr	r2, [pc, #160]	; (8000ae8 <MX_ADC1_Init+0xb8>)
 8000a46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a48:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <MX_ADC1_Init+0xb4>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a4e:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <MX_ADC1_Init+0xb4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a54:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <MX_ADC1_Init+0xb4>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a5a:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_ADC1_Init+0xb4>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <MX_ADC1_Init+0xb4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_ADC1_Init+0xb4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_ADC1_Init+0xb4>)
 8000a70:	4a1e      	ldr	r2, [pc, #120]	; (8000aec <MX_ADC1_Init+0xbc>)
 8000a72:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_ADC1_Init+0xb4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_ADC1_Init+0xb4>)
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_ADC1_Init+0xb4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_ADC1_Init+0xb4>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a8e:	4815      	ldr	r0, [pc, #84]	; (8000ae4 <MX_ADC1_Init+0xb4>)
 8000a90:	f000 fd3c 	bl	800150c <HAL_ADC_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a9a:	f000 fa13 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4619      	mov	r1, r3
 8000aae:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <MX_ADC1_Init+0xb4>)
 8000ab0:	f000 fe9e 	bl	80017f0 <HAL_ADC_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000aba:	f000 fa03 	bl	8000ec4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000abe:	230b      	movs	r3, #11
 8000ac0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <MX_ADC1_Init+0xb4>)
 8000acc:	f000 fe90 	bl	80017f0 <HAL_ADC_ConfigChannel>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000ad6:	f000 f9f5 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200001ac 	.word	0x200001ac
 8000ae8:	40012000 	.word	0x40012000
 8000aec:	0f000001 	.word	0x0f000001

08000af0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000af6:	4a18      	ldr	r2, [pc, #96]	; (8000b58 <MX_SPI1_Init+0x68>)
 8000af8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000afc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b3c:	220a      	movs	r2, #10
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b42:	f002 fc4d 	bl	80033e0 <HAL_SPI_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b4c:	f000 f9ba 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2000010c 	.word	0x2000010c
 8000b58:	40013000 	.word	0x40013000

08000b5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b70:	463b      	mov	r3, r7
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <MX_TIM2_Init+0x94>)
 8000b7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <MX_TIM2_Init+0x94>)
 8000b82:	f240 321f 	movw	r2, #799	; 0x31f
 8000b86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b88:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <MX_TIM2_Init+0x94>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <MX_TIM2_Init+0x94>)
 8000b90:	2209      	movs	r2, #9
 8000b92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MX_TIM2_Init+0x94>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_TIM2_Init+0x94>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ba0:	4813      	ldr	r0, [pc, #76]	; (8000bf0 <MX_TIM2_Init+0x94>)
 8000ba2:	f003 fae3 	bl	800416c <HAL_TIM_Base_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bac:	f000 f98a 	bl	8000ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <MX_TIM2_Init+0x94>)
 8000bbe:	f003 fc9d 	bl	80044fc <HAL_TIM_ConfigClockSource>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bc8:	f000 f97c 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_TIM2_Init+0x94>)
 8000bda:	f003 feb9 	bl	8004950 <HAL_TIMEx_MasterConfigSynchronization>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000be4:	f000 f96e 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000164 	.word	0x20000164

08000bf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <MX_USART1_UART_Init+0x50>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c2c:	f003 ff20 	bl	8004a70 <HAL_UART_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c36:	f000 f945 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000c8 	.word	0x200000c8
 8000c44:	40011000 	.word	0x40011000

08000c48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_DMA_Init+0x3c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <MX_DMA_Init+0x3c>)
 8000c58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_DMA_Init+0x3c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2038      	movs	r0, #56	; 0x38
 8000c70:	f001 f939 	bl	8001ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c74:	2038      	movs	r0, #56	; 0x38
 8000c76:	f001 f952 	bl	8001f1e <HAL_NVIC_EnableIRQ>

}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08e      	sub	sp, #56	; 0x38
 8000c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
 8000ca2:	4b6a      	ldr	r3, [pc, #424]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a69      	ldr	r2, [pc, #420]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000ca8:	f043 0310 	orr.w	r3, r3, #16
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b67      	ldr	r3, [pc, #412]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	623b      	str	r3, [r7, #32]
 8000cb8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
 8000cbe:	4b63      	ldr	r3, [pc, #396]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a62      	ldr	r2, [pc, #392]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b60      	ldr	r3, [pc, #384]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd2:	61fb      	str	r3, [r7, #28]
 8000cd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
 8000cda:	4b5c      	ldr	r3, [pc, #368]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a5b      	ldr	r2, [pc, #364]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b59      	ldr	r3, [pc, #356]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	61bb      	str	r3, [r7, #24]
 8000cf0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	4b55      	ldr	r3, [pc, #340]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a54      	ldr	r2, [pc, #336]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b52      	ldr	r3, [pc, #328]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	4b4e      	ldr	r3, [pc, #312]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a4d      	ldr	r2, [pc, #308]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000d18:	f043 0320 	orr.w	r3, r3, #32
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b4b      	ldr	r3, [pc, #300]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0320 	and.w	r3, r3, #32
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	4b47      	ldr	r3, [pc, #284]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a46      	ldr	r2, [pc, #280]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b44      	ldr	r3, [pc, #272]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	4b40      	ldr	r3, [pc, #256]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a3f      	ldr	r2, [pc, #252]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b3d      	ldr	r3, [pc, #244]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	4b39      	ldr	r3, [pc, #228]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a38      	ldr	r2, [pc, #224]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b36      	ldr	r3, [pc, #216]	; (8000e4c <MX_GPIO_Init+0x1c4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2170      	movs	r1, #112	; 0x70
 8000d82:	4833      	ldr	r0, [pc, #204]	; (8000e50 <MX_GPIO_Init+0x1c8>)
 8000d84:	f001 fe84 	bl	8002a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_LED3_Pin|LD_LED1_Pin|LD_LED4_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f640 4104 	movw	r1, #3076	; 0xc04
 8000d8e:	4831      	ldr	r0, [pc, #196]	; (8000e54 <MX_GPIO_Init+0x1cc>)
 8000d90:	f001 fe7e 	bl	8002a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d9a:	482f      	ldr	r0, [pc, #188]	; (8000e58 <MX_GPIO_Init+0x1d0>)
 8000d9c:	f001 fe78 	bl	8002a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2140      	movs	r1, #64	; 0x40
 8000da4:	482d      	ldr	r0, [pc, #180]	; (8000e5c <MX_GPIO_Init+0x1d4>)
 8000da6:	f001 fe73 	bl	8002a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BTN_LOAD_Pin|LD_COLON_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2148      	movs	r1, #72	; 0x48
 8000dae:	482c      	ldr	r0, [pc, #176]	; (8000e60 <MX_GPIO_Init+0x1d8>)
 8000db0:	f001 fe6e 	bl	8002a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin OUTPUT_Y0_Pin OUTPUT_Y1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000db4:	2370      	movs	r3, #112	; 0x70
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4821      	ldr	r0, [pc, #132]	; (8000e50 <MX_GPIO_Init+0x1c8>)
 8000dcc:	f001 fcc4 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_LED3_Pin LD_LED1_Pin LD_LED4_Pin */
  GPIO_InitStruct.Pin = LD_LED3_Pin|LD_LED1_Pin|LD_LED4_Pin;
 8000dd0:	f640 4304 	movw	r3, #3076	; 0xc04
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de6:	4619      	mov	r1, r3
 8000de8:	481a      	ldr	r0, [pc, #104]	; (8000e54 <MX_GPIO_Init+0x1cc>)
 8000dea:	f001 fcb5 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_LED2_Pin */
  GPIO_InitStruct.Pin = LD_LED2_Pin;
 8000dee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LED2_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	4814      	ldr	r0, [pc, #80]	; (8000e58 <MX_GPIO_Init+0x1d0>)
 8000e08:	f001 fca6 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_LATCH_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000e0c:	2340      	movs	r3, #64	; 0x40
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e20:	4619      	mov	r1, r3
 8000e22:	480e      	ldr	r0, [pc, #56]	; (8000e5c <MX_GPIO_Init+0x1d4>)
 8000e24:	f001 fc98 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_LOAD_Pin LD_COLON_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin|LD_COLON_Pin;
 8000e28:	2348      	movs	r3, #72	; 0x48
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4808      	ldr	r0, [pc, #32]	; (8000e60 <MX_GPIO_Init+0x1d8>)
 8000e40:	f001 fc8a 	bl	8002758 <HAL_GPIO_Init>

}
 8000e44:	bf00      	nop
 8000e46:	3738      	adds	r7, #56	; 0x38
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40020400 	.word	0x40020400
 8000e58:	40021400 	.word	0x40021400
 8000e5c:	40021800 	.word	0x40021800
 8000e60:	40020c00 	.word	0x40020c00

08000e64 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e74:	d103      	bne.n	8000e7e <HAL_TIM_PeriodElapsedCallback+0x1a>
		timerRun();
 8000e76:	f000 fa69 	bl	800134c <timerRun>
		led7Scan();
 8000e7a:	f7ff fbd7 	bl	800062c <led7Scan>
	}
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <HAL_UART_RxCpltCallback+0x30>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d10a      	bne.n	8000eb0 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart1, &temp, 1, 50) ;
 8000e9a:	2332      	movs	r3, #50	; 0x32
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4907      	ldr	r1, [pc, #28]	; (8000ebc <HAL_UART_RxCpltCallback+0x34>)
 8000ea0:	4807      	ldr	r0, [pc, #28]	; (8000ec0 <HAL_UART_RxCpltCallback+0x38>)
 8000ea2:	f003 fe32 	bl	8004b0a <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &temp, 1);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4904      	ldr	r1, [pc, #16]	; (8000ebc <HAL_UART_RxCpltCallback+0x34>)
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <HAL_UART_RxCpltCallback+0x38>)
 8000eac:	f003 febf 	bl	8004c2e <HAL_UART_Receive_IT>
	}
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40011000 	.word	0x40011000
 8000ebc:	200000a0 	.word	0x200000a0
 8000ec0:	200000c8 	.word	0x200000c8

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
}
 8000eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <Error_Handler+0x8>
	...

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <HAL_MspInit+0x4c>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	4a0f      	ldr	r2, [pc, #60]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_MspInit+0x4c>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_MspInit+0x4c>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800

08000f20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a2f      	ldr	r2, [pc, #188]	; (8000ffc <HAL_ADC_MspInit+0xdc>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d157      	bne.n	8000ff2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <HAL_ADC_MspInit+0xe0>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	4a2d      	ldr	r2, [pc, #180]	; (8001000 <HAL_ADC_MspInit+0xe0>)
 8000f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f50:	6453      	str	r3, [r2, #68]	; 0x44
 8000f52:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <HAL_ADC_MspInit+0xe0>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b27      	ldr	r3, [pc, #156]	; (8001000 <HAL_ADC_MspInit+0xe0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a26      	ldr	r2, [pc, #152]	; (8001000 <HAL_ADC_MspInit+0xe0>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b24      	ldr	r3, [pc, #144]	; (8001000 <HAL_ADC_MspInit+0xe0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	481d      	ldr	r0, [pc, #116]	; (8001004 <HAL_ADC_MspInit+0xe4>)
 8000f8e:	f001 fbe3 	bl	8002758 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f92:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <HAL_ADC_MspInit+0xe8>)
 8000f94:	4a1d      	ldr	r2, [pc, #116]	; (800100c <HAL_ADC_MspInit+0xec>)
 8000f96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <HAL_ADC_MspInit+0xe8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <HAL_ADC_MspInit+0xe8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <HAL_ADC_MspInit+0xe8>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000faa:	4b17      	ldr	r3, [pc, #92]	; (8001008 <HAL_ADC_MspInit+0xe8>)
 8000fac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_ADC_MspInit+0xe8>)
 8000fb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fb8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_ADC_MspInit+0xe8>)
 8000fbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fc0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <HAL_ADC_MspInit+0xe8>)
 8000fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_ADC_MspInit+0xe8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_ADC_MspInit+0xe8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fd6:	480c      	ldr	r0, [pc, #48]	; (8001008 <HAL_ADC_MspInit+0xe8>)
 8000fd8:	f000 ffbc 	bl	8001f54 <HAL_DMA_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000fe2:	f7ff ff6f 	bl	8000ec4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_ADC_MspInit+0xe8>)
 8000fea:	639a      	str	r2, [r3, #56]	; 0x38
 8000fec:	4a06      	ldr	r2, [pc, #24]	; (8001008 <HAL_ADC_MspInit+0xe8>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	; 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40012000 	.word	0x40012000
 8001000:	40023800 	.word	0x40023800
 8001004:	40020800 	.word	0x40020800
 8001008:	200001fc 	.word	0x200001fc
 800100c:	40026410 	.word	0x40026410

08001010 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a1d      	ldr	r2, [pc, #116]	; (80010a4 <HAL_SPI_MspInit+0x94>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d133      	bne.n	800109a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <HAL_SPI_MspInit+0x98>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	4a1b      	ldr	r2, [pc, #108]	; (80010a8 <HAL_SPI_MspInit+0x98>)
 800103c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001040:	6453      	str	r3, [r2, #68]	; 0x44
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <HAL_SPI_MspInit+0x98>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_SPI_MspInit+0x98>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <HAL_SPI_MspInit+0x98>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_SPI_MspInit+0x98>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800106a:	2338      	movs	r3, #56	; 0x38
 800106c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800107a:	2305      	movs	r3, #5
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	4809      	ldr	r0, [pc, #36]	; (80010ac <HAL_SPI_MspInit+0x9c>)
 8001086:	f001 fb67 	bl	8002758 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2023      	movs	r0, #35	; 0x23
 8001090:	f000 ff29 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001094:	2023      	movs	r0, #35	; 0x23
 8001096:	f000 ff42 	bl	8001f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	; 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40013000 	.word	0x40013000
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020400 	.word	0x40020400

080010b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010c0:	d115      	bne.n	80010ee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <HAL_TIM_Base_MspInit+0x48>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <HAL_TIM_Base_MspInit+0x48>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6413      	str	r3, [r2, #64]	; 0x40
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <HAL_TIM_Base_MspInit+0x48>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	201c      	movs	r0, #28
 80010e4:	f000 feff 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010e8:	201c      	movs	r0, #28
 80010ea:	f000 ff18 	bl	8001f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800

080010fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a1d      	ldr	r2, [pc, #116]	; (8001190 <HAL_UART_MspInit+0x94>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d134      	bne.n	8001188 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <HAL_UART_MspInit+0x98>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a1b      	ldr	r2, [pc, #108]	; (8001194 <HAL_UART_MspInit+0x98>)
 8001128:	f043 0310 	orr.w	r3, r3, #16
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <HAL_UART_MspInit+0x98>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f003 0310 	and.w	r3, r3, #16
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_UART_MspInit+0x98>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a14      	ldr	r2, [pc, #80]	; (8001194 <HAL_UART_MspInit+0x98>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_UART_MspInit+0x98>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001156:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800115a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001168:	2307      	movs	r3, #7
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	4809      	ldr	r0, [pc, #36]	; (8001198 <HAL_UART_MspInit+0x9c>)
 8001174:	f001 faf0 	bl	8002758 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	2025      	movs	r0, #37	; 0x25
 800117e:	f000 feb2 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001182:	2025      	movs	r0, #37	; 0x25
 8001184:	f000 fecb 	bl	8001f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	; 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40011000 	.word	0x40011000
 8001194:	40023800 	.word	0x40023800
 8001198:	40020000 	.word	0x40020000

0800119c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <NMI_Handler+0x4>

080011a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <HardFault_Handler+0x4>

080011a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <MemManage_Handler+0x4>

080011ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <BusFault_Handler+0x4>

080011b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <UsageFault_Handler+0x4>

080011ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e8:	f000 f970 	bl	80014cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <TIM2_IRQHandler+0x10>)
 80011f6:	f003 f879 	bl	80042ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000164 	.word	0x20000164

08001204 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <SPI1_IRQHandler+0x10>)
 800120a:	f002 fd61 	bl	8003cd0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000010c 	.word	0x2000010c

08001218 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <USART1_IRQHandler+0x10>)
 800121e:	f003 fd37 	bl	8004c90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200000c8 	.word	0x200000c8

0800122c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <DMA2_Stream0_IRQHandler+0x10>)
 8001232:	f001 f827 	bl	8002284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200001fc 	.word	0x200001fc

08001240 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001248:	4a14      	ldr	r2, [pc, #80]	; (800129c <_sbrk+0x5c>)
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <_sbrk+0x60>)
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <_sbrk+0x64>)
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <_sbrk+0x68>)
 8001260:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	429a      	cmp	r2, r3
 800126e:	d207      	bcs.n	8001280 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001270:	f004 fbc6 	bl	8005a00 <__errno>
 8001274:	4603      	mov	r3, r0
 8001276:	220c      	movs	r2, #12
 8001278:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	e009      	b.n	8001294 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <_sbrk+0x64>)
 8001290:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001292:	68fb      	ldr	r3, [r7, #12]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20020000 	.word	0x20020000
 80012a0:	00000400 	.word	0x00000400
 80012a4:	200000a4 	.word	0x200000a4
 80012a8:	200002d8 	.word	0x200002d8

080012ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <SystemInit+0x20>)
 80012b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <SystemInit+0x20>)
 80012b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <setTimer1>:
#include "timer.h"

int flag_timer1 = 0, flag_timer2 = 0, flag_timer3 = 0;
int timer1_counter = 0, timer2_counter = 0, timer3_counter = 0;

void setTimer1(int duration){
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	timer1_counter = 1000;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <setTimer1+0x24>)
 80012da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012de:	601a      	str	r2, [r3, #0]
	flag_timer1 = 0;
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <setTimer1+0x28>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	200000b4 	.word	0x200000b4
 80012f8:	200000a8 	.word	0x200000a8

080012fc <setTimer2>:

void setTimer2(int duration){
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8001304:	4a05      	ldr	r2, [pc, #20]	; (800131c <setTimer2+0x20>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
	flag_timer2 = 0;
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <setTimer2+0x24>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	200000b8 	.word	0x200000b8
 8001320:	200000ac 	.word	0x200000ac

08001324 <setTimer3>:

void setTimer3(int duration){
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 800132c:	4a05      	ldr	r2, [pc, #20]	; (8001344 <setTimer3+0x20>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
	flag_timer3 = 0;
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <setTimer3+0x24>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	200000bc 	.word	0x200000bc
 8001348:	200000b0 	.word	0x200000b0

0800134c <timerRun>:


void timerRun(){
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <timerRun+0x70>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	dd0b      	ble.n	8001370 <timerRun+0x24>
		timer1_counter--;
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <timerRun+0x70>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3b01      	subs	r3, #1
 800135e:	4a17      	ldr	r2, [pc, #92]	; (80013bc <timerRun+0x70>)
 8001360:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) flag_timer1 = 1;
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <timerRun+0x70>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d102      	bne.n	8001370 <timerRun+0x24>
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <timerRun+0x74>)
 800136c:	2201      	movs	r2, #1
 800136e:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0){
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <timerRun+0x78>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	dd0b      	ble.n	8001390 <timerRun+0x44>
		timer2_counter--;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <timerRun+0x78>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3b01      	subs	r3, #1
 800137e:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <timerRun+0x78>)
 8001380:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) flag_timer2 = 1;
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <timerRun+0x78>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d102      	bne.n	8001390 <timerRun+0x44>
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <timerRun+0x7c>)
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter > 0){
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <timerRun+0x80>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	dd0b      	ble.n	80013b0 <timerRun+0x64>
		timer3_counter--;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <timerRun+0x80>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	3b01      	subs	r3, #1
 800139e:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <timerRun+0x80>)
 80013a0:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) flag_timer3 = 1;
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <timerRun+0x80>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d102      	bne.n	80013b0 <timerRun+0x64>
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <timerRun+0x84>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	601a      	str	r2, [r3, #0]
	}
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	200000b4 	.word	0x200000b4
 80013c0:	200000a8 	.word	0x200000a8
 80013c4:	200000b8 	.word	0x200000b8
 80013c8:	200000ac 	.word	0x200000ac
 80013cc:	200000bc 	.word	0x200000bc
 80013d0:	200000b0 	.word	0x200000b0

080013d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800140c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013da:	490e      	ldr	r1, [pc, #56]	; (8001414 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013dc:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e0:	e002      	b.n	80013e8 <LoopCopyDataInit>

080013e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e6:	3304      	adds	r3, #4

080013e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ec:	d3f9      	bcc.n	80013e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ee:	4a0b      	ldr	r2, [pc, #44]	; (800141c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013f0:	4c0b      	ldr	r4, [pc, #44]	; (8001420 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f4:	e001      	b.n	80013fa <LoopFillZerobss>

080013f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f8:	3204      	adds	r2, #4

080013fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013fc:	d3fb      	bcc.n	80013f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013fe:	f7ff ff55 	bl	80012ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001402:	f004 fb03 	bl	8005a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001406:	f7ff fa05 	bl	8000814 <main>
  bx  lr    
 800140a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800140c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001418:	08006354 	.word	0x08006354
  ldr r2, =_sbss
 800141c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001420:	200002d4 	.word	0x200002d4

08001424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC_IRQHandler>
	...

08001428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800142c:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <HAL_Init+0x40>)
 8001432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001436:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <HAL_Init+0x40>)
 800143e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001442:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_Init+0x40>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a07      	ldr	r2, [pc, #28]	; (8001468 <HAL_Init+0x40>)
 800144a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001450:	2003      	movs	r0, #3
 8001452:	f000 fd3d 	bl	8001ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001456:	200f      	movs	r0, #15
 8001458:	f000 f808 	bl	800146c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800145c:	f7ff fd38 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023c00 	.word	0x40023c00

0800146c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_InitTick+0x54>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_InitTick+0x58>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001482:	fbb3 f3f1 	udiv	r3, r3, r1
 8001486:	fbb2 f3f3 	udiv	r3, r2, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fd55 	bl	8001f3a <HAL_SYSTICK_Config>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e00e      	b.n	80014b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d80a      	bhi.n	80014b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a0:	2200      	movs	r2, #0
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f000 fd1d 	bl	8001ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ac:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <HAL_InitTick+0x5c>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e000      	b.n	80014b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000004 	.word	0x20000004
 80014c4:	2000000c 	.word	0x2000000c
 80014c8:	20000008 	.word	0x20000008

080014cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_IncTick+0x20>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x24>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <HAL_IncTick+0x24>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	2000000c 	.word	0x2000000c
 80014f0:	200002c0 	.word	0x200002c0

080014f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return uwTick;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <HAL_GetTick+0x14>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	200002c0 	.word	0x200002c0

0800150c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e033      	b.n	800158a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	2b00      	cmp	r3, #0
 8001528:	d109      	bne.n	800153e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff fcf8 	bl	8000f20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 0310 	and.w	r3, r3, #16
 8001546:	2b00      	cmp	r3, #0
 8001548:	d118      	bne.n	800157c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001552:	f023 0302 	bic.w	r3, r3, #2
 8001556:	f043 0202 	orr.w	r2, r3, #2
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 fa68 	bl	8001a34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f023 0303 	bic.w	r3, r3, #3
 8001572:	f043 0201 	orr.w	r2, r3, #1
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	641a      	str	r2, [r3, #64]	; 0x40
 800157a:	e001      	b.n	8001580 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001588:	7bfb      	ldrb	r3, [r7, #15]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d101      	bne.n	80015b2 <HAL_ADC_Start_DMA+0x1e>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e0e9      	b.n	8001786 <HAL_ADC_Start_DMA+0x1f2>
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d018      	beq.n	80015fa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0201 	orr.w	r2, r2, #1
 80015d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015d8:	4b6d      	ldr	r3, [pc, #436]	; (8001790 <HAL_ADC_Start_DMA+0x1fc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a6d      	ldr	r2, [pc, #436]	; (8001794 <HAL_ADC_Start_DMA+0x200>)
 80015de:	fba2 2303 	umull	r2, r3, r2, r3
 80015e2:	0c9a      	lsrs	r2, r3, #18
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80015ec:	e002      	b.n	80015f4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f9      	bne.n	80015ee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001608:	d107      	bne.n	800161a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001618:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b01      	cmp	r3, #1
 8001626:	f040 80a1 	bne.w	800176c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001632:	f023 0301 	bic.w	r3, r3, #1
 8001636:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001648:	2b00      	cmp	r3, #0
 800164a:	d007      	beq.n	800165c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001654:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001668:	d106      	bne.n	8001678 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f023 0206 	bic.w	r2, r3, #6
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	645a      	str	r2, [r3, #68]	; 0x44
 8001676:	e002      	b.n	800167e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001686:	4b44      	ldr	r3, [pc, #272]	; (8001798 <HAL_ADC_Start_DMA+0x204>)
 8001688:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168e:	4a43      	ldr	r2, [pc, #268]	; (800179c <HAL_ADC_Start_DMA+0x208>)
 8001690:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001696:	4a42      	ldr	r2, [pc, #264]	; (80017a0 <HAL_ADC_Start_DMA+0x20c>)
 8001698:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169e:	4a41      	ldr	r2, [pc, #260]	; (80017a4 <HAL_ADC_Start_DMA+0x210>)
 80016a0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80016aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80016ba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016ca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	334c      	adds	r3, #76	; 0x4c
 80016d6:	4619      	mov	r1, r3
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f000 fce8 	bl	80020b0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 031f 	and.w	r3, r3, #31
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d12a      	bne.n	8001742 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a2d      	ldr	r2, [pc, #180]	; (80017a8 <HAL_ADC_Start_DMA+0x214>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d015      	beq.n	8001722 <HAL_ADC_Start_DMA+0x18e>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a2c      	ldr	r2, [pc, #176]	; (80017ac <HAL_ADC_Start_DMA+0x218>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d105      	bne.n	800170c <HAL_ADC_Start_DMA+0x178>
 8001700:	4b25      	ldr	r3, [pc, #148]	; (8001798 <HAL_ADC_Start_DMA+0x204>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00a      	beq.n	8001722 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a27      	ldr	r2, [pc, #156]	; (80017b0 <HAL_ADC_Start_DMA+0x21c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d136      	bne.n	8001784 <HAL_ADC_Start_DMA+0x1f0>
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_ADC_Start_DMA+0x204>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0310 	and.w	r3, r3, #16
 800171e:	2b00      	cmp	r3, #0
 8001720:	d130      	bne.n	8001784 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d129      	bne.n	8001784 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	e020      	b.n	8001784 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a18      	ldr	r2, [pc, #96]	; (80017a8 <HAL_ADC_Start_DMA+0x214>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d11b      	bne.n	8001784 <HAL_ADC_Start_DMA+0x1f0>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d114      	bne.n	8001784 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	e00b      	b.n	8001784 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	f043 0210 	orr.w	r2, r3, #16
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177c:	f043 0201 	orr.w	r2, r3, #1
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000004 	.word	0x20000004
 8001794:	431bde83 	.word	0x431bde83
 8001798:	40012300 	.word	0x40012300
 800179c:	08001c2d 	.word	0x08001c2d
 80017a0:	08001ce7 	.word	0x08001ce7
 80017a4:	08001d03 	.word	0x08001d03
 80017a8:	40012000 	.word	0x40012000
 80017ac:	40012100 	.word	0x40012100
 80017b0:	40012200 	.word	0x40012200

080017b4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <HAL_ADC_ConfigChannel+0x1c>
 8001808:	2302      	movs	r3, #2
 800180a:	e105      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x228>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b09      	cmp	r3, #9
 800181a:	d925      	bls.n	8001868 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68d9      	ldr	r1, [r3, #12]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	b29b      	uxth	r3, r3
 8001828:	461a      	mov	r2, r3
 800182a:	4613      	mov	r3, r2
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4413      	add	r3, r2
 8001830:	3b1e      	subs	r3, #30
 8001832:	2207      	movs	r2, #7
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43da      	mvns	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	400a      	ands	r2, r1
 8001840:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68d9      	ldr	r1, [r3, #12]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	b29b      	uxth	r3, r3
 8001852:	4618      	mov	r0, r3
 8001854:	4603      	mov	r3, r0
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4403      	add	r3, r0
 800185a:	3b1e      	subs	r3, #30
 800185c:	409a      	lsls	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	e022      	b.n	80018ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6919      	ldr	r1, [r3, #16]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	b29b      	uxth	r3, r3
 8001874:	461a      	mov	r2, r3
 8001876:	4613      	mov	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	2207      	movs	r2, #7
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	400a      	ands	r2, r1
 800188a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6919      	ldr	r1, [r3, #16]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	4618      	mov	r0, r3
 800189e:	4603      	mov	r3, r0
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4403      	add	r3, r0
 80018a4:	409a      	lsls	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	d824      	bhi.n	8001900 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	3b05      	subs	r3, #5
 80018c8:	221f      	movs	r2, #31
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	400a      	ands	r2, r1
 80018d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	4618      	mov	r0, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	3b05      	subs	r3, #5
 80018f2:	fa00 f203 	lsl.w	r2, r0, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	635a      	str	r2, [r3, #52]	; 0x34
 80018fe:	e04c      	b.n	800199a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b0c      	cmp	r3, #12
 8001906:	d824      	bhi.n	8001952 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	3b23      	subs	r3, #35	; 0x23
 800191a:	221f      	movs	r2, #31
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43da      	mvns	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	400a      	ands	r2, r1
 8001928:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	b29b      	uxth	r3, r3
 8001936:	4618      	mov	r0, r3
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	3b23      	subs	r3, #35	; 0x23
 8001944:	fa00 f203 	lsl.w	r2, r0, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	631a      	str	r2, [r3, #48]	; 0x30
 8001950:	e023      	b.n	800199a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	3b41      	subs	r3, #65	; 0x41
 8001964:	221f      	movs	r2, #31
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	400a      	ands	r2, r1
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	b29b      	uxth	r3, r3
 8001980:	4618      	mov	r0, r3
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	3b41      	subs	r3, #65	; 0x41
 800198e:	fa00 f203 	lsl.w	r2, r0, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800199a:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <HAL_ADC_ConfigChannel+0x234>)
 800199c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a21      	ldr	r2, [pc, #132]	; (8001a28 <HAL_ADC_ConfigChannel+0x238>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d109      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x1cc>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b12      	cmp	r3, #18
 80019ae:	d105      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <HAL_ADC_ConfigChannel+0x238>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d123      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x21e>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b10      	cmp	r3, #16
 80019cc:	d003      	beq.n	80019d6 <HAL_ADC_ConfigChannel+0x1e6>
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b11      	cmp	r3, #17
 80019d4:	d11b      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b10      	cmp	r3, #16
 80019e8:	d111      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <HAL_ADC_ConfigChannel+0x23c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <HAL_ADC_ConfigChannel+0x240>)
 80019f0:	fba2 2303 	umull	r2, r3, r2, r3
 80019f4:	0c9a      	lsrs	r2, r3, #18
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a00:	e002      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f9      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40012300 	.word	0x40012300
 8001a28:	40012000 	.word	0x40012000
 8001a2c:	20000004 	.word	0x20000004
 8001a30:	431bde83 	.word	0x431bde83

08001a34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a3c:	4b79      	ldr	r3, [pc, #484]	; (8001c24 <ADC_Init+0x1f0>)
 8001a3e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	431a      	orrs	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6859      	ldr	r1, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	021a      	lsls	r2, r3, #8
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6859      	ldr	r1, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6899      	ldr	r1, [r3, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	4a58      	ldr	r2, [pc, #352]	; (8001c28 <ADC_Init+0x1f4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d022      	beq.n	8001b12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ada:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6899      	ldr	r1, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001afc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6899      	ldr	r1, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	e00f      	b.n	8001b32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0202 	bic.w	r2, r2, #2
 8001b40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6899      	ldr	r1, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	7e1b      	ldrb	r3, [r3, #24]
 8001b4c:	005a      	lsls	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01b      	beq.n	8001b98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6859      	ldr	r1, [r3, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	035a      	lsls	r2, r3, #13
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	e007      	b.n	8001ba8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ba6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	051a      	lsls	r2, r3, #20
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6899      	ldr	r1, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bea:	025a      	lsls	r2, r3, #9
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6899      	ldr	r1, [r3, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	029a      	lsls	r2, r3, #10
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	609a      	str	r2, [r3, #8]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	40012300 	.word	0x40012300
 8001c28:	0f000001 	.word	0x0f000001

08001c2c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c38:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d13c      	bne.n	8001cc0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d12b      	bne.n	8001cb8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d127      	bne.n	8001cb8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d119      	bne.n	8001cb8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0220 	bic.w	r2, r2, #32
 8001c92:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d105      	bne.n	8001cb8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	f043 0201 	orr.w	r2, r3, #1
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f7ff fd7b 	bl	80017b4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001cbe:	e00e      	b.n	8001cde <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f7ff fd85 	bl	80017dc <HAL_ADC_ErrorCallback>
}
 8001cd2:	e004      	b.n	8001cde <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	4798      	blx	r3
}
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f7ff fd67 	bl	80017c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b084      	sub	sp, #16
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2240      	movs	r2, #64	; 0x40
 8001d14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	f043 0204 	orr.w	r2, r3, #4
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7ff fd5a 	bl	80017dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d28:	bf00      	nop
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d62:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	60d3      	str	r3, [r2, #12]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <__NVIC_GetPriorityGrouping+0x18>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	f003 0307 	and.w	r3, r3, #7
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	db0b      	blt.n	8001dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	f003 021f 	and.w	r2, r3, #31
 8001dac:	4907      	ldr	r1, [pc, #28]	; (8001dcc <__NVIC_EnableIRQ+0x38>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	2001      	movs	r0, #1
 8001db6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000e100 	.word	0xe000e100

08001dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	db0a      	blt.n	8001dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	490c      	ldr	r1, [pc, #48]	; (8001e1c <__NVIC_SetPriority+0x4c>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	0112      	lsls	r2, r2, #4
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	440b      	add	r3, r1
 8001df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df8:	e00a      	b.n	8001e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4908      	ldr	r1, [pc, #32]	; (8001e20 <__NVIC_SetPriority+0x50>)
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	3b04      	subs	r3, #4
 8001e08:	0112      	lsls	r2, r2, #4
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	761a      	strb	r2, [r3, #24]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000e100 	.word	0xe000e100
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	; 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f1c3 0307 	rsb	r3, r3, #7
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	bf28      	it	cs
 8001e42:	2304      	movcs	r3, #4
 8001e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	2b06      	cmp	r3, #6
 8001e4c:	d902      	bls.n	8001e54 <NVIC_EncodePriority+0x30>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3b03      	subs	r3, #3
 8001e52:	e000      	b.n	8001e56 <NVIC_EncodePriority+0x32>
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	401a      	ands	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	43d9      	mvns	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	4313      	orrs	r3, r2
         );
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3724      	adds	r7, #36	; 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e9c:	d301      	bcc.n	8001ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00f      	b.n	8001ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <SysTick_Config+0x40>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eaa:	210f      	movs	r1, #15
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f7ff ff8e 	bl	8001dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <SysTick_Config+0x40>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eba:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <SysTick_Config+0x40>)
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	e000e010 	.word	0xe000e010

08001ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff29 	bl	8001d30 <__NVIC_SetPriorityGrouping>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b086      	sub	sp, #24
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef8:	f7ff ff3e 	bl	8001d78 <__NVIC_GetPriorityGrouping>
 8001efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	6978      	ldr	r0, [r7, #20]
 8001f04:	f7ff ff8e 	bl	8001e24 <NVIC_EncodePriority>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff5d 	bl	8001dd0 <__NVIC_SetPriority>
}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff31 	bl	8001d94 <__NVIC_EnableIRQ>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ffa2 	bl	8001e8c <SysTick_Config>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff fac8 	bl	80014f4 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e099      	b.n	80020a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2202      	movs	r2, #2
 8001f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0201 	bic.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f90:	e00f      	b.n	8001fb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f92:	f7ff faaf 	bl	80014f4 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b05      	cmp	r3, #5
 8001f9e:	d908      	bls.n	8001fb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2203      	movs	r2, #3
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e078      	b.n	80020a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1e8      	bne.n	8001f92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	4b38      	ldr	r3, [pc, #224]	; (80020ac <HAL_DMA_Init+0x158>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	4313      	orrs	r3, r2
 8002002:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	2b04      	cmp	r3, #4
 800200a:	d107      	bne.n	800201c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	4313      	orrs	r3, r2
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4313      	orrs	r3, r2
 800201a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f023 0307 	bic.w	r3, r3, #7
 8002032:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	4313      	orrs	r3, r2
 800203c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	2b04      	cmp	r3, #4
 8002044:	d117      	bne.n	8002076 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	4313      	orrs	r3, r2
 800204e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00e      	beq.n	8002076 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 fb01 	bl	8002660 <DMA_CheckFifoParam>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d008      	beq.n	8002076 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2240      	movs	r2, #64	; 0x40
 8002068:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002072:	2301      	movs	r3, #1
 8002074:	e016      	b.n	80020a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fab8 	bl	80025f4 <DMA_CalcBaseAndBitshift>
 8002084:	4603      	mov	r3, r0
 8002086:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208c:	223f      	movs	r2, #63	; 0x3f
 800208e:	409a      	lsls	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	f010803f 	.word	0xf010803f

080020b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_DMA_Start_IT+0x26>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e040      	b.n	8002158 <HAL_DMA_Start_IT+0xa8>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d12f      	bne.n	800214a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2202      	movs	r2, #2
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 fa4a 	bl	8002598 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002108:	223f      	movs	r2, #63	; 0x3f
 800210a:	409a      	lsls	r2, r3
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0216 	orr.w	r2, r2, #22
 800211e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0208 	orr.w	r2, r2, #8
 8002136:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	e005      	b.n	8002156 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002152:	2302      	movs	r3, #2
 8002154:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002156:	7dfb      	ldrb	r3, [r7, #23]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800216e:	f7ff f9c1 	bl	80014f4 <HAL_GetTick>
 8002172:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d008      	beq.n	8002192 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2280      	movs	r2, #128	; 0x80
 8002184:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e052      	b.n	8002238 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0216 	bic.w	r2, r2, #22
 80021a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d103      	bne.n	80021c2 <HAL_DMA_Abort+0x62>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0208 	bic.w	r2, r2, #8
 80021d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0201 	bic.w	r2, r2, #1
 80021e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021e2:	e013      	b.n	800220c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021e4:	f7ff f986 	bl	80014f4 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b05      	cmp	r3, #5
 80021f0:	d90c      	bls.n	800220c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2220      	movs	r2, #32
 80021f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2203      	movs	r2, #3
 80021fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e015      	b.n	8002238 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1e4      	bne.n	80021e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221e:	223f      	movs	r2, #63	; 0x3f
 8002220:	409a      	lsls	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d004      	beq.n	800225e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2280      	movs	r2, #128	; 0x80
 8002258:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e00c      	b.n	8002278 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2205      	movs	r2, #5
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0201 	bic.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002290:	4b92      	ldr	r3, [pc, #584]	; (80024dc <HAL_DMA_IRQHandler+0x258>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a92      	ldr	r2, [pc, #584]	; (80024e0 <HAL_DMA_IRQHandler+0x25c>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	0a9b      	lsrs	r3, r3, #10
 800229c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ae:	2208      	movs	r2, #8
 80022b0:	409a      	lsls	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d01a      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d013      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0204 	bic.w	r2, r2, #4
 80022d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022dc:	2208      	movs	r2, #8
 80022de:	409a      	lsls	r2, r3
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e8:	f043 0201 	orr.w	r2, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f4:	2201      	movs	r2, #1
 80022f6:	409a      	lsls	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d012      	beq.n	8002326 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00b      	beq.n	8002326 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002312:	2201      	movs	r2, #1
 8002314:	409a      	lsls	r2, r3
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231e:	f043 0202 	orr.w	r2, r3, #2
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232a:	2204      	movs	r2, #4
 800232c:	409a      	lsls	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4013      	ands	r3, r2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d012      	beq.n	800235c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00b      	beq.n	800235c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002348:	2204      	movs	r2, #4
 800234a:	409a      	lsls	r2, r3
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002354:	f043 0204 	orr.w	r2, r3, #4
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	2210      	movs	r2, #16
 8002362:	409a      	lsls	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d043      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d03c      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237e:	2210      	movs	r2, #16
 8002380:	409a      	lsls	r2, r3
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d018      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d108      	bne.n	80023b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d024      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	4798      	blx	r3
 80023b2:	e01f      	b.n	80023f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01b      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	4798      	blx	r3
 80023c4:	e016      	b.n	80023f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d107      	bne.n	80023e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0208 	bic.w	r2, r2, #8
 80023e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f8:	2220      	movs	r2, #32
 80023fa:	409a      	lsls	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 808e 	beq.w	8002522 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 8086 	beq.w	8002522 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241a:	2220      	movs	r2, #32
 800241c:	409a      	lsls	r2, r3
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b05      	cmp	r3, #5
 800242c:	d136      	bne.n	800249c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0216 	bic.w	r2, r2, #22
 800243c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695a      	ldr	r2, [r3, #20]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800244c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d103      	bne.n	800245e <HAL_DMA_IRQHandler+0x1da>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800245a:	2b00      	cmp	r3, #0
 800245c:	d007      	beq.n	800246e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0208 	bic.w	r2, r2, #8
 800246c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002472:	223f      	movs	r2, #63	; 0x3f
 8002474:	409a      	lsls	r2, r3
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800248e:	2b00      	cmp	r3, #0
 8002490:	d07d      	beq.n	800258e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	4798      	blx	r3
        }
        return;
 800249a:	e078      	b.n	800258e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d01c      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d108      	bne.n	80024ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d030      	beq.n	8002522 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	4798      	blx	r3
 80024c8:	e02b      	b.n	8002522 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d027      	beq.n	8002522 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	4798      	blx	r3
 80024da:	e022      	b.n	8002522 <HAL_DMA_IRQHandler+0x29e>
 80024dc:	20000004 	.word	0x20000004
 80024e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10f      	bne.n	8002512 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0210 	bic.w	r2, r2, #16
 8002500:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002526:	2b00      	cmp	r3, #0
 8002528:	d032      	beq.n	8002590 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d022      	beq.n	800257c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2205      	movs	r2, #5
 800253a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0201 	bic.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	3301      	adds	r3, #1
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	429a      	cmp	r2, r3
 8002558:	d307      	bcc.n	800256a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f2      	bne.n	800254e <HAL_DMA_IRQHandler+0x2ca>
 8002568:	e000      	b.n	800256c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800256a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	4798      	blx	r3
 800258c:	e000      	b.n	8002590 <HAL_DMA_IRQHandler+0x30c>
        return;
 800258e:	bf00      	nop
    }
  }
}
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop

08002598 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
 80025a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	d108      	bne.n	80025d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025d6:	e007      	b.n	80025e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	60da      	str	r2, [r3, #12]
}
 80025e8:	bf00      	nop
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	3b10      	subs	r3, #16
 8002604:	4a14      	ldr	r2, [pc, #80]	; (8002658 <DMA_CalcBaseAndBitshift+0x64>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	091b      	lsrs	r3, r3, #4
 800260c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800260e:	4a13      	ldr	r2, [pc, #76]	; (800265c <DMA_CalcBaseAndBitshift+0x68>)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4413      	add	r3, r2
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b03      	cmp	r3, #3
 8002620:	d909      	bls.n	8002636 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800262a:	f023 0303 	bic.w	r3, r3, #3
 800262e:	1d1a      	adds	r2, r3, #4
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	659a      	str	r2, [r3, #88]	; 0x58
 8002634:	e007      	b.n	8002646 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800263e:	f023 0303 	bic.w	r3, r3, #3
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800264a:	4618      	mov	r0, r3
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	aaaaaaab 	.word	0xaaaaaaab
 800265c:	08006308 	.word	0x08006308

08002660 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002670:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d11f      	bne.n	80026ba <DMA_CheckFifoParam+0x5a>
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b03      	cmp	r3, #3
 800267e:	d856      	bhi.n	800272e <DMA_CheckFifoParam+0xce>
 8002680:	a201      	add	r2, pc, #4	; (adr r2, 8002688 <DMA_CheckFifoParam+0x28>)
 8002682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002686:	bf00      	nop
 8002688:	08002699 	.word	0x08002699
 800268c:	080026ab 	.word	0x080026ab
 8002690:	08002699 	.word	0x08002699
 8002694:	0800272f 	.word	0x0800272f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d046      	beq.n	8002732 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a8:	e043      	b.n	8002732 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026b2:	d140      	bne.n	8002736 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b8:	e03d      	b.n	8002736 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026c2:	d121      	bne.n	8002708 <DMA_CheckFifoParam+0xa8>
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d837      	bhi.n	800273a <DMA_CheckFifoParam+0xda>
 80026ca:	a201      	add	r2, pc, #4	; (adr r2, 80026d0 <DMA_CheckFifoParam+0x70>)
 80026cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d0:	080026e1 	.word	0x080026e1
 80026d4:	080026e7 	.word	0x080026e7
 80026d8:	080026e1 	.word	0x080026e1
 80026dc:	080026f9 	.word	0x080026f9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
      break;
 80026e4:	e030      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d025      	beq.n	800273e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f6:	e022      	b.n	800273e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002700:	d11f      	bne.n	8002742 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002706:	e01c      	b.n	8002742 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d903      	bls.n	8002716 <DMA_CheckFifoParam+0xb6>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b03      	cmp	r3, #3
 8002712:	d003      	beq.n	800271c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002714:	e018      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
      break;
 800271a:	e015      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00e      	beq.n	8002746 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
      break;
 800272c:	e00b      	b.n	8002746 <DMA_CheckFifoParam+0xe6>
      break;
 800272e:	bf00      	nop
 8002730:	e00a      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      break;
 8002732:	bf00      	nop
 8002734:	e008      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      break;
 8002736:	bf00      	nop
 8002738:	e006      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      break;
 800273a:	bf00      	nop
 800273c:	e004      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      break;
 800273e:	bf00      	nop
 8002740:	e002      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      break;   
 8002742:	bf00      	nop
 8002744:	e000      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      break;
 8002746:	bf00      	nop
    }
  } 
  
  return status; 
 8002748:	7bfb      	ldrb	r3, [r7, #15]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop

08002758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	e16b      	b.n	8002a4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002774:	2201      	movs	r2, #1
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	429a      	cmp	r2, r3
 800278e:	f040 815a 	bne.w	8002a46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d005      	beq.n	80027aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d130      	bne.n	800280c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	2203      	movs	r2, #3
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027e0:	2201      	movs	r2, #1
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 0201 	and.w	r2, r3, #1
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b03      	cmp	r3, #3
 8002816:	d017      	beq.n	8002848 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	2203      	movs	r2, #3
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d123      	bne.n	800289c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	08da      	lsrs	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3208      	adds	r2, #8
 800285c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	220f      	movs	r2, #15
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	08da      	lsrs	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3208      	adds	r2, #8
 8002896:	69b9      	ldr	r1, [r7, #24]
 8002898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	2203      	movs	r2, #3
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0203 	and.w	r2, r3, #3
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80b4 	beq.w	8002a46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	4b60      	ldr	r3, [pc, #384]	; (8002a64 <HAL_GPIO_Init+0x30c>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	4a5f      	ldr	r2, [pc, #380]	; (8002a64 <HAL_GPIO_Init+0x30c>)
 80028e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ec:	6453      	str	r3, [r2, #68]	; 0x44
 80028ee:	4b5d      	ldr	r3, [pc, #372]	; (8002a64 <HAL_GPIO_Init+0x30c>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028fa:	4a5b      	ldr	r2, [pc, #364]	; (8002a68 <HAL_GPIO_Init+0x310>)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	089b      	lsrs	r3, r3, #2
 8002900:	3302      	adds	r3, #2
 8002902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	220f      	movs	r2, #15
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a52      	ldr	r2, [pc, #328]	; (8002a6c <HAL_GPIO_Init+0x314>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d02b      	beq.n	800297e <HAL_GPIO_Init+0x226>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a51      	ldr	r2, [pc, #324]	; (8002a70 <HAL_GPIO_Init+0x318>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d025      	beq.n	800297a <HAL_GPIO_Init+0x222>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a50      	ldr	r2, [pc, #320]	; (8002a74 <HAL_GPIO_Init+0x31c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d01f      	beq.n	8002976 <HAL_GPIO_Init+0x21e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4f      	ldr	r2, [pc, #316]	; (8002a78 <HAL_GPIO_Init+0x320>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d019      	beq.n	8002972 <HAL_GPIO_Init+0x21a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a4e      	ldr	r2, [pc, #312]	; (8002a7c <HAL_GPIO_Init+0x324>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d013      	beq.n	800296e <HAL_GPIO_Init+0x216>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a4d      	ldr	r2, [pc, #308]	; (8002a80 <HAL_GPIO_Init+0x328>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00d      	beq.n	800296a <HAL_GPIO_Init+0x212>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a4c      	ldr	r2, [pc, #304]	; (8002a84 <HAL_GPIO_Init+0x32c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d007      	beq.n	8002966 <HAL_GPIO_Init+0x20e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a4b      	ldr	r2, [pc, #300]	; (8002a88 <HAL_GPIO_Init+0x330>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <HAL_GPIO_Init+0x20a>
 800295e:	2307      	movs	r3, #7
 8002960:	e00e      	b.n	8002980 <HAL_GPIO_Init+0x228>
 8002962:	2308      	movs	r3, #8
 8002964:	e00c      	b.n	8002980 <HAL_GPIO_Init+0x228>
 8002966:	2306      	movs	r3, #6
 8002968:	e00a      	b.n	8002980 <HAL_GPIO_Init+0x228>
 800296a:	2305      	movs	r3, #5
 800296c:	e008      	b.n	8002980 <HAL_GPIO_Init+0x228>
 800296e:	2304      	movs	r3, #4
 8002970:	e006      	b.n	8002980 <HAL_GPIO_Init+0x228>
 8002972:	2303      	movs	r3, #3
 8002974:	e004      	b.n	8002980 <HAL_GPIO_Init+0x228>
 8002976:	2302      	movs	r3, #2
 8002978:	e002      	b.n	8002980 <HAL_GPIO_Init+0x228>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_GPIO_Init+0x228>
 800297e:	2300      	movs	r3, #0
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	f002 0203 	and.w	r2, r2, #3
 8002986:	0092      	lsls	r2, r2, #2
 8002988:	4093      	lsls	r3, r2
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002990:	4935      	ldr	r1, [pc, #212]	; (8002a68 <HAL_GPIO_Init+0x310>)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	089b      	lsrs	r3, r3, #2
 8002996:	3302      	adds	r3, #2
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800299e:	4b3b      	ldr	r3, [pc, #236]	; (8002a8c <HAL_GPIO_Init+0x334>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029c2:	4a32      	ldr	r2, [pc, #200]	; (8002a8c <HAL_GPIO_Init+0x334>)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029c8:	4b30      	ldr	r3, [pc, #192]	; (8002a8c <HAL_GPIO_Init+0x334>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ec:	4a27      	ldr	r2, [pc, #156]	; (8002a8c <HAL_GPIO_Init+0x334>)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029f2:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <HAL_GPIO_Init+0x334>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a16:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <HAL_GPIO_Init+0x334>)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <HAL_GPIO_Init+0x334>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a40:	4a12      	ldr	r2, [pc, #72]	; (8002a8c <HAL_GPIO_Init+0x334>)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2b0f      	cmp	r3, #15
 8002a50:	f67f ae90 	bls.w	8002774 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	3724      	adds	r7, #36	; 0x24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40013800 	.word	0x40013800
 8002a6c:	40020000 	.word	0x40020000
 8002a70:	40020400 	.word	0x40020400
 8002a74:	40020800 	.word	0x40020800
 8002a78:	40020c00 	.word	0x40020c00
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40021400 	.word	0x40021400
 8002a84:	40021800 	.word	0x40021800
 8002a88:	40021c00 	.word	0x40021c00
 8002a8c:	40013c00 	.word	0x40013c00

08002a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	807b      	strh	r3, [r7, #2]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aa0:	787b      	ldrb	r3, [r7, #1]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aa6:	887a      	ldrh	r2, [r7, #2]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002aac:	e003      	b.n	8002ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aae:	887b      	ldrh	r3, [r7, #2]
 8002ab0:	041a      	lsls	r2, r3, #16
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	619a      	str	r2, [r3, #24]
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b085      	sub	sp, #20
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ad4:	887a      	ldrh	r2, [r7, #2]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	041a      	lsls	r2, r3, #16
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	43d9      	mvns	r1, r3
 8002ae0:	887b      	ldrh	r3, [r7, #2]
 8002ae2:	400b      	ands	r3, r1
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	619a      	str	r2, [r3, #24]
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e264      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d075      	beq.n	8002c02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b16:	4ba3      	ldr	r3, [pc, #652]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d00c      	beq.n	8002b3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b22:	4ba0      	ldr	r3, [pc, #640]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d112      	bne.n	8002b54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b2e:	4b9d      	ldr	r3, [pc, #628]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b3a:	d10b      	bne.n	8002b54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3c:	4b99      	ldr	r3, [pc, #612]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d05b      	beq.n	8002c00 <HAL_RCC_OscConfig+0x108>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d157      	bne.n	8002c00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e23f      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5c:	d106      	bne.n	8002b6c <HAL_RCC_OscConfig+0x74>
 8002b5e:	4b91      	ldr	r3, [pc, #580]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a90      	ldr	r2, [pc, #576]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e01d      	b.n	8002ba8 <HAL_RCC_OscConfig+0xb0>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x98>
 8002b76:	4b8b      	ldr	r3, [pc, #556]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a8a      	ldr	r2, [pc, #552]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	4b88      	ldr	r3, [pc, #544]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a87      	ldr	r2, [pc, #540]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	e00b      	b.n	8002ba8 <HAL_RCC_OscConfig+0xb0>
 8002b90:	4b84      	ldr	r3, [pc, #528]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a83      	ldr	r2, [pc, #524]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	4b81      	ldr	r3, [pc, #516]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a80      	ldr	r2, [pc, #512]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d013      	beq.n	8002bd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fca0 	bl	80014f4 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb8:	f7fe fc9c 	bl	80014f4 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	; 0x64
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e204      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	4b76      	ldr	r3, [pc, #472]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0xc0>
 8002bd6:	e014      	b.n	8002c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fc8c 	bl	80014f4 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be0:	f7fe fc88 	bl	80014f4 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b64      	cmp	r3, #100	; 0x64
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e1f0      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf2:	4b6c      	ldr	r3, [pc, #432]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0xe8>
 8002bfe:	e000      	b.n	8002c02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d063      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c0e:	4b65      	ldr	r3, [pc, #404]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00b      	beq.n	8002c32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c1a:	4b62      	ldr	r3, [pc, #392]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d11c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c26:	4b5f      	ldr	r3, [pc, #380]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d116      	bne.n	8002c60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c32:	4b5c      	ldr	r3, [pc, #368]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_RCC_OscConfig+0x152>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d001      	beq.n	8002c4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e1c4      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4a:	4b56      	ldr	r3, [pc, #344]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4952      	ldr	r1, [pc, #328]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5e:	e03a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d020      	beq.n	8002caa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c68:	4b4f      	ldr	r3, [pc, #316]	; (8002da8 <HAL_RCC_OscConfig+0x2b0>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6e:	f7fe fc41 	bl	80014f4 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c76:	f7fe fc3d 	bl	80014f4 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e1a5      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c88:	4b46      	ldr	r3, [pc, #280]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c94:	4b43      	ldr	r3, [pc, #268]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4940      	ldr	r1, [pc, #256]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	600b      	str	r3, [r1, #0]
 8002ca8:	e015      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002caa:	4b3f      	ldr	r3, [pc, #252]	; (8002da8 <HAL_RCC_OscConfig+0x2b0>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fc20 	bl	80014f4 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb8:	f7fe fc1c 	bl	80014f4 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e184      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cca:	4b36      	ldr	r3, [pc, #216]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d030      	beq.n	8002d44 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d016      	beq.n	8002d18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cea:	4b30      	ldr	r3, [pc, #192]	; (8002dac <HAL_RCC_OscConfig+0x2b4>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7fe fc00 	bl	80014f4 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7fe fbfc 	bl	80014f4 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e164      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0a:	4b26      	ldr	r3, [pc, #152]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x200>
 8002d16:	e015      	b.n	8002d44 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d18:	4b24      	ldr	r3, [pc, #144]	; (8002dac <HAL_RCC_OscConfig+0x2b4>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1e:	f7fe fbe9 	bl	80014f4 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d26:	f7fe fbe5 	bl	80014f4 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e14d      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d38:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f0      	bne.n	8002d26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80a0 	beq.w	8002e92 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d52:	2300      	movs	r3, #0
 8002d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d56:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10f      	bne.n	8002d82 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	4a0e      	ldr	r2, [pc, #56]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d70:	6413      	str	r3, [r2, #64]	; 0x40
 8002d72:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d82:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_RCC_OscConfig+0x2b8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d121      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d8e:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <HAL_RCC_OscConfig+0x2b8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a07      	ldr	r2, [pc, #28]	; (8002db0 <HAL_RCC_OscConfig+0x2b8>)
 8002d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9a:	f7fe fbab 	bl	80014f4 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	e011      	b.n	8002dc6 <HAL_RCC_OscConfig+0x2ce>
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800
 8002da8:	42470000 	.word	0x42470000
 8002dac:	42470e80 	.word	0x42470e80
 8002db0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db4:	f7fe fb9e 	bl	80014f4 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e106      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc6:	4b85      	ldr	r3, [pc, #532]	; (8002fdc <HAL_RCC_OscConfig+0x4e4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d106      	bne.n	8002de8 <HAL_RCC_OscConfig+0x2f0>
 8002dda:	4b81      	ldr	r3, [pc, #516]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	4a80      	ldr	r2, [pc, #512]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6713      	str	r3, [r2, #112]	; 0x70
 8002de6:	e01c      	b.n	8002e22 <HAL_RCC_OscConfig+0x32a>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b05      	cmp	r3, #5
 8002dee:	d10c      	bne.n	8002e0a <HAL_RCC_OscConfig+0x312>
 8002df0:	4b7b      	ldr	r3, [pc, #492]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	4a7a      	ldr	r2, [pc, #488]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002df6:	f043 0304 	orr.w	r3, r3, #4
 8002dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfc:	4b78      	ldr	r3, [pc, #480]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e00:	4a77      	ldr	r2, [pc, #476]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	6713      	str	r3, [r2, #112]	; 0x70
 8002e08:	e00b      	b.n	8002e22 <HAL_RCC_OscConfig+0x32a>
 8002e0a:	4b75      	ldr	r3, [pc, #468]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	4a74      	ldr	r2, [pc, #464]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002e10:	f023 0301 	bic.w	r3, r3, #1
 8002e14:	6713      	str	r3, [r2, #112]	; 0x70
 8002e16:	4b72      	ldr	r3, [pc, #456]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	4a71      	ldr	r2, [pc, #452]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002e1c:	f023 0304 	bic.w	r3, r3, #4
 8002e20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d015      	beq.n	8002e56 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2a:	f7fe fb63 	bl	80014f4 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7fe fb5f 	bl	80014f4 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e0c5      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e48:	4b65      	ldr	r3, [pc, #404]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0ee      	beq.n	8002e32 <HAL_RCC_OscConfig+0x33a>
 8002e54:	e014      	b.n	8002e80 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e56:	f7fe fb4d 	bl	80014f4 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e5c:	e00a      	b.n	8002e74 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e5e:	f7fe fb49 	bl	80014f4 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e0af      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e74:	4b5a      	ldr	r3, [pc, #360]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1ee      	bne.n	8002e5e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e80:	7dfb      	ldrb	r3, [r7, #23]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d105      	bne.n	8002e92 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e86:	4b56      	ldr	r3, [pc, #344]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	4a55      	ldr	r2, [pc, #340]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 809b 	beq.w	8002fd2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e9c:	4b50      	ldr	r3, [pc, #320]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d05c      	beq.n	8002f62 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d141      	bne.n	8002f34 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb0:	4b4c      	ldr	r3, [pc, #304]	; (8002fe4 <HAL_RCC_OscConfig+0x4ec>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb6:	f7fe fb1d 	bl	80014f4 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ebe:	f7fe fb19 	bl	80014f4 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e081      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed0:	4b43      	ldr	r3, [pc, #268]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1f0      	bne.n	8002ebe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69da      	ldr	r2, [r3, #28]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	019b      	lsls	r3, r3, #6
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef2:	085b      	lsrs	r3, r3, #1
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	041b      	lsls	r3, r3, #16
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	061b      	lsls	r3, r3, #24
 8002f00:	4937      	ldr	r1, [pc, #220]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f06:	4b37      	ldr	r3, [pc, #220]	; (8002fe4 <HAL_RCC_OscConfig+0x4ec>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fe faf2 	bl	80014f4 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f14:	f7fe faee 	bl	80014f4 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e056      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f26:	4b2e      	ldr	r3, [pc, #184]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x41c>
 8002f32:	e04e      	b.n	8002fd2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f34:	4b2b      	ldr	r3, [pc, #172]	; (8002fe4 <HAL_RCC_OscConfig+0x4ec>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3a:	f7fe fadb 	bl	80014f4 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f42:	f7fe fad7 	bl	80014f4 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e03f      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f54:	4b22      	ldr	r3, [pc, #136]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f0      	bne.n	8002f42 <HAL_RCC_OscConfig+0x44a>
 8002f60:	e037      	b.n	8002fd2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e032      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f6e:	4b1c      	ldr	r3, [pc, #112]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d028      	beq.n	8002fce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d121      	bne.n	8002fce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d11a      	bne.n	8002fce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fa4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d111      	bne.n	8002fce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	085b      	lsrs	r3, r3, #1
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d107      	bne.n	8002fce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40007000 	.word	0x40007000
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	42470060 	.word	0x42470060

08002fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0cc      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b68      	ldr	r3, [pc, #416]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d90c      	bls.n	8003024 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b65      	ldr	r3, [pc, #404]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003012:	4b63      	ldr	r3, [pc, #396]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d001      	beq.n	8003024 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0b8      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d020      	beq.n	8003072 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800303c:	4b59      	ldr	r3, [pc, #356]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	4a58      	ldr	r2, [pc, #352]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003046:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003054:	4b53      	ldr	r3, [pc, #332]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4a52      	ldr	r2, [pc, #328]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800305e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003060:	4b50      	ldr	r3, [pc, #320]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	494d      	ldr	r1, [pc, #308]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d044      	beq.n	8003108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	4b47      	ldr	r3, [pc, #284]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d119      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e07f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d003      	beq.n	80030a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a6:	4b3f      	ldr	r3, [pc, #252]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e06f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b6:	4b3b      	ldr	r3, [pc, #236]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e067      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030c6:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f023 0203 	bic.w	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4934      	ldr	r1, [pc, #208]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d8:	f7fe fa0c 	bl	80014f4 <HAL_GetTick>
 80030dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e0:	f7fe fa08 	bl	80014f4 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e04f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 020c 	and.w	r2, r3, #12
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	429a      	cmp	r2, r3
 8003106:	d1eb      	bne.n	80030e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003108:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d20c      	bcs.n	8003130 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311e:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d001      	beq.n	8003130 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e032      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800313c:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4916      	ldr	r1, [pc, #88]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d009      	beq.n	800316e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	490e      	ldr	r1, [pc, #56]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800316e:	f000 f821 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8003172:	4602      	mov	r2, r0
 8003174:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	490a      	ldr	r1, [pc, #40]	; (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	5ccb      	ldrb	r3, [r1, r3]
 8003182:	fa22 f303 	lsr.w	r3, r2, r3
 8003186:	4a09      	ldr	r2, [pc, #36]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800318a:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe f96c 	bl	800146c <HAL_InitTick>

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40023c00 	.word	0x40023c00
 80031a4:	40023800 	.word	0x40023800
 80031a8:	080062f0 	.word	0x080062f0
 80031ac:	20000004 	.word	0x20000004
 80031b0:	20000008 	.word	0x20000008

080031b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	607b      	str	r3, [r7, #4]
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	2300      	movs	r3, #0
 80031c6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031cc:	4b67      	ldr	r3, [pc, #412]	; (800336c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d00d      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x40>
 80031d8:	2b08      	cmp	r3, #8
 80031da:	f200 80bd 	bhi.w	8003358 <HAL_RCC_GetSysClockFreq+0x1a4>
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0x34>
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d003      	beq.n	80031ee <HAL_RCC_GetSysClockFreq+0x3a>
 80031e6:	e0b7      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031e8:	4b61      	ldr	r3, [pc, #388]	; (8003370 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031ea:	60bb      	str	r3, [r7, #8]
       break;
 80031ec:	e0b7      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ee:	4b61      	ldr	r3, [pc, #388]	; (8003374 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80031f0:	60bb      	str	r3, [r7, #8]
      break;
 80031f2:	e0b4      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f4:	4b5d      	ldr	r3, [pc, #372]	; (800336c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031fe:	4b5b      	ldr	r3, [pc, #364]	; (800336c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d04d      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320a:	4b58      	ldr	r3, [pc, #352]	; (800336c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	099b      	lsrs	r3, r3, #6
 8003210:	461a      	mov	r2, r3
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	f240 10ff 	movw	r0, #511	; 0x1ff
 800321a:	f04f 0100 	mov.w	r1, #0
 800321e:	ea02 0800 	and.w	r8, r2, r0
 8003222:	ea03 0901 	and.w	r9, r3, r1
 8003226:	4640      	mov	r0, r8
 8003228:	4649      	mov	r1, r9
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	014b      	lsls	r3, r1, #5
 8003234:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003238:	0142      	lsls	r2, r0, #5
 800323a:	4610      	mov	r0, r2
 800323c:	4619      	mov	r1, r3
 800323e:	ebb0 0008 	subs.w	r0, r0, r8
 8003242:	eb61 0109 	sbc.w	r1, r1, r9
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	018b      	lsls	r3, r1, #6
 8003250:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003254:	0182      	lsls	r2, r0, #6
 8003256:	1a12      	subs	r2, r2, r0
 8003258:	eb63 0301 	sbc.w	r3, r3, r1
 800325c:	f04f 0000 	mov.w	r0, #0
 8003260:	f04f 0100 	mov.w	r1, #0
 8003264:	00d9      	lsls	r1, r3, #3
 8003266:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800326a:	00d0      	lsls	r0, r2, #3
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	eb12 0208 	adds.w	r2, r2, r8
 8003274:	eb43 0309 	adc.w	r3, r3, r9
 8003278:	f04f 0000 	mov.w	r0, #0
 800327c:	f04f 0100 	mov.w	r1, #0
 8003280:	0259      	lsls	r1, r3, #9
 8003282:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003286:	0250      	lsls	r0, r2, #9
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4610      	mov	r0, r2
 800328e:	4619      	mov	r1, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	461a      	mov	r2, r3
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	f7fc ffea 	bl	8000270 <__aeabi_uldivmod>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4613      	mov	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	e04a      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a6:	4b31      	ldr	r3, [pc, #196]	; (800336c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	099b      	lsrs	r3, r3, #6
 80032ac:	461a      	mov	r2, r3
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032b6:	f04f 0100 	mov.w	r1, #0
 80032ba:	ea02 0400 	and.w	r4, r2, r0
 80032be:	ea03 0501 	and.w	r5, r3, r1
 80032c2:	4620      	mov	r0, r4
 80032c4:	4629      	mov	r1, r5
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	014b      	lsls	r3, r1, #5
 80032d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032d4:	0142      	lsls	r2, r0, #5
 80032d6:	4610      	mov	r0, r2
 80032d8:	4619      	mov	r1, r3
 80032da:	1b00      	subs	r0, r0, r4
 80032dc:	eb61 0105 	sbc.w	r1, r1, r5
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	018b      	lsls	r3, r1, #6
 80032ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032ee:	0182      	lsls	r2, r0, #6
 80032f0:	1a12      	subs	r2, r2, r0
 80032f2:	eb63 0301 	sbc.w	r3, r3, r1
 80032f6:	f04f 0000 	mov.w	r0, #0
 80032fa:	f04f 0100 	mov.w	r1, #0
 80032fe:	00d9      	lsls	r1, r3, #3
 8003300:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003304:	00d0      	lsls	r0, r2, #3
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	1912      	adds	r2, r2, r4
 800330c:	eb45 0303 	adc.w	r3, r5, r3
 8003310:	f04f 0000 	mov.w	r0, #0
 8003314:	f04f 0100 	mov.w	r1, #0
 8003318:	0299      	lsls	r1, r3, #10
 800331a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800331e:	0290      	lsls	r0, r2, #10
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4610      	mov	r0, r2
 8003326:	4619      	mov	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	461a      	mov	r2, r3
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	f7fc ff9e 	bl	8000270 <__aeabi_uldivmod>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4613      	mov	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	0c1b      	lsrs	r3, r3, #16
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	3301      	adds	r3, #1
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	60bb      	str	r3, [r7, #8]
      break;
 8003356:	e002      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800335a:	60bb      	str	r3, [r7, #8]
      break;
 800335c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800335e:	68bb      	ldr	r3, [r7, #8]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800336a:	bf00      	nop
 800336c:	40023800 	.word	0x40023800
 8003370:	00f42400 	.word	0x00f42400
 8003374:	007a1200 	.word	0x007a1200

08003378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800337c:	4b03      	ldr	r3, [pc, #12]	; (800338c <HAL_RCC_GetHCLKFreq+0x14>)
 800337e:	681b      	ldr	r3, [r3, #0]
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	20000004 	.word	0x20000004

08003390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003394:	f7ff fff0 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 8003398:	4602      	mov	r2, r0
 800339a:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	0a9b      	lsrs	r3, r3, #10
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	4903      	ldr	r1, [pc, #12]	; (80033b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a6:	5ccb      	ldrb	r3, [r1, r3]
 80033a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40023800 	.word	0x40023800
 80033b4:	08006300 	.word	0x08006300

080033b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033bc:	f7ff ffdc 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	0b5b      	lsrs	r3, r3, #13
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	4903      	ldr	r1, [pc, #12]	; (80033dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ce:	5ccb      	ldrb	r3, [r1, r3]
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40023800 	.word	0x40023800
 80033dc:	08006300 	.word	0x08006300

080033e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e07b      	b.n	80034ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d108      	bne.n	800340c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003402:	d009      	beq.n	8003418 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	61da      	str	r2, [r3, #28]
 800340a:	e005      	b.n	8003418 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fd fdec 	bl	8001010 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800344e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349c:	ea42 0103 	orr.w	r1, r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	0c1b      	lsrs	r3, r3, #16
 80034b6:	f003 0104 	and.w	r1, r3, #4
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	f003 0210 	and.w	r2, r3, #16
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69da      	ldr	r2, [r3, #28]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b088      	sub	sp, #32
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	603b      	str	r3, [r7, #0]
 80034fe:	4613      	mov	r3, r2
 8003500:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_SPI_Transmit+0x22>
 8003510:	2302      	movs	r3, #2
 8003512:	e126      	b.n	8003762 <HAL_SPI_Transmit+0x270>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800351c:	f7fd ffea 	bl	80014f4 <HAL_GetTick>
 8003520:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b01      	cmp	r3, #1
 8003530:	d002      	beq.n	8003538 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003532:	2302      	movs	r3, #2
 8003534:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003536:	e10b      	b.n	8003750 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_SPI_Transmit+0x52>
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d102      	bne.n	800354a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003548:	e102      	b.n	8003750 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2203      	movs	r2, #3
 800354e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	88fa      	ldrh	r2, [r7, #6]
 8003562:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	88fa      	ldrh	r2, [r7, #6]
 8003568:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003590:	d10f      	bne.n	80035b2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035bc:	2b40      	cmp	r3, #64	; 0x40
 80035be:	d007      	beq.n	80035d0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d8:	d14b      	bne.n	8003672 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_SPI_Transmit+0xf6>
 80035e2:	8afb      	ldrh	r3, [r7, #22]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d13e      	bne.n	8003666 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	881a      	ldrh	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	1c9a      	adds	r2, r3, #2
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800360c:	e02b      	b.n	8003666 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b02      	cmp	r3, #2
 800361a:	d112      	bne.n	8003642 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003620:	881a      	ldrh	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	1c9a      	adds	r2, r3, #2
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003640:	e011      	b.n	8003666 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003642:	f7fd ff57 	bl	80014f4 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d803      	bhi.n	800365a <HAL_SPI_Transmit+0x168>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003658:	d102      	bne.n	8003660 <HAL_SPI_Transmit+0x16e>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003664:	e074      	b.n	8003750 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800366a:	b29b      	uxth	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1ce      	bne.n	800360e <HAL_SPI_Transmit+0x11c>
 8003670:	e04c      	b.n	800370c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <HAL_SPI_Transmit+0x18e>
 800367a:	8afb      	ldrh	r3, [r7, #22]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d140      	bne.n	8003702 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	330c      	adds	r3, #12
 800368a:	7812      	ldrb	r2, [r2, #0]
 800368c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036a6:	e02c      	b.n	8003702 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d113      	bne.n	80036de <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	330c      	adds	r3, #12
 80036c0:	7812      	ldrb	r2, [r2, #0]
 80036c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	86da      	strh	r2, [r3, #54]	; 0x36
 80036dc:	e011      	b.n	8003702 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036de:	f7fd ff09 	bl	80014f4 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d803      	bhi.n	80036f6 <HAL_SPI_Transmit+0x204>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f4:	d102      	bne.n	80036fc <HAL_SPI_Transmit+0x20a>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d102      	bne.n	8003702 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003700:	e026      	b.n	8003750 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1cd      	bne.n	80036a8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	6839      	ldr	r1, [r7, #0]
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 fce9 	bl	80040e8 <SPI_EndRxTxTransaction>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10a      	bne.n	8003740 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	77fb      	strb	r3, [r7, #31]
 800374c:	e000      	b.n	8003750 <HAL_SPI_Transmit+0x25e>
  }

error:
 800374e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003760:	7ffb      	ldrb	r3, [r7, #31]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3720      	adds	r7, #32
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b088      	sub	sp, #32
 800376e:	af02      	add	r7, sp, #8
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	603b      	str	r3, [r7, #0]
 8003776:	4613      	mov	r3, r2
 8003778:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003786:	d112      	bne.n	80037ae <HAL_SPI_Receive+0x44>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10e      	bne.n	80037ae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2204      	movs	r2, #4
 8003794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003798:	88fa      	ldrh	r2, [r7, #6]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	4613      	mov	r3, r2
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 f8f1 	bl	800398c <HAL_SPI_TransmitReceive>
 80037aa:	4603      	mov	r3, r0
 80037ac:	e0ea      	b.n	8003984 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_SPI_Receive+0x52>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e0e3      	b.n	8003984 <HAL_SPI_Receive+0x21a>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037c4:	f7fd fe96 	bl	80014f4 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d002      	beq.n	80037dc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80037d6:	2302      	movs	r3, #2
 80037d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037da:	e0ca      	b.n	8003972 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <HAL_SPI_Receive+0x7e>
 80037e2:	88fb      	ldrh	r3, [r7, #6]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d102      	bne.n	80037ee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037ec:	e0c1      	b.n	8003972 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2204      	movs	r2, #4
 80037f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	88fa      	ldrh	r2, [r7, #6]
 8003806:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	88fa      	ldrh	r2, [r7, #6]
 800380c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003834:	d10f      	bne.n	8003856 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003844:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003854:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003860:	2b40      	cmp	r3, #64	; 0x40
 8003862:	d007      	beq.n	8003874 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003872:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d162      	bne.n	8003942 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800387c:	e02e      	b.n	80038dc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b01      	cmp	r3, #1
 800388a:	d115      	bne.n	80038b8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f103 020c 	add.w	r2, r3, #12
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003898:	7812      	ldrb	r2, [r2, #0]
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038b6:	e011      	b.n	80038dc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038b8:	f7fd fe1c 	bl	80014f4 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d803      	bhi.n	80038d0 <HAL_SPI_Receive+0x166>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ce:	d102      	bne.n	80038d6 <HAL_SPI_Receive+0x16c>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d102      	bne.n	80038dc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038da:	e04a      	b.n	8003972 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1cb      	bne.n	800387e <HAL_SPI_Receive+0x114>
 80038e6:	e031      	b.n	800394c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d113      	bne.n	800391e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	b292      	uxth	r2, r2
 8003902:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	1c9a      	adds	r2, r3, #2
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800391c:	e011      	b.n	8003942 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800391e:	f7fd fde9 	bl	80014f4 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d803      	bhi.n	8003936 <HAL_SPI_Receive+0x1cc>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d102      	bne.n	800393c <HAL_SPI_Receive+0x1d2>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d102      	bne.n	8003942 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003940:	e017      	b.n	8003972 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1cd      	bne.n	80038e8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	6839      	ldr	r1, [r7, #0]
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 fb63 	bl	800401c <SPI_EndRxTransaction>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	75fb      	strb	r3, [r7, #23]
 800396e:	e000      	b.n	8003972 <HAL_SPI_Receive+0x208>
  }

error :
 8003970:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003982:	7dfb      	ldrb	r3, [r7, #23]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08c      	sub	sp, #48	; 0x30
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800399a:	2301      	movs	r3, #1
 800399c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_SPI_TransmitReceive+0x26>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e18a      	b.n	8003cc8 <HAL_SPI_TransmitReceive+0x33c>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039ba:	f7fd fd9b 	bl	80014f4 <HAL_GetTick>
 80039be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80039d0:	887b      	ldrh	r3, [r7, #2]
 80039d2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d00f      	beq.n	80039fc <HAL_SPI_TransmitReceive+0x70>
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039e2:	d107      	bne.n	80039f4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d103      	bne.n	80039f4 <HAL_SPI_TransmitReceive+0x68>
 80039ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d003      	beq.n	80039fc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80039f4:	2302      	movs	r3, #2
 80039f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039fa:	e15b      	b.n	8003cb4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <HAL_SPI_TransmitReceive+0x82>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_SPI_TransmitReceive+0x82>
 8003a08:	887b      	ldrh	r3, [r7, #2]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d103      	bne.n	8003a16 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a14:	e14e      	b.n	8003cb4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d003      	beq.n	8003a2a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2205      	movs	r2, #5
 8003a26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	887a      	ldrh	r2, [r7, #2]
 8003a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	887a      	ldrh	r2, [r7, #2]
 8003a40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	887a      	ldrh	r2, [r7, #2]
 8003a4c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	887a      	ldrh	r2, [r7, #2]
 8003a52:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6a:	2b40      	cmp	r3, #64	; 0x40
 8003a6c:	d007      	beq.n	8003a7e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a86:	d178      	bne.n	8003b7a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <HAL_SPI_TransmitReceive+0x10a>
 8003a90:	8b7b      	ldrh	r3, [r7, #26]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d166      	bne.n	8003b64 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	881a      	ldrh	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	1c9a      	adds	r2, r3, #2
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aba:	e053      	b.n	8003b64 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d11b      	bne.n	8003b02 <HAL_SPI_TransmitReceive+0x176>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d016      	beq.n	8003b02 <HAL_SPI_TransmitReceive+0x176>
 8003ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d113      	bne.n	8003b02 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	881a      	ldrh	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	1c9a      	adds	r2, r3, #2
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d119      	bne.n	8003b44 <HAL_SPI_TransmitReceive+0x1b8>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d014      	beq.n	8003b44 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b24:	b292      	uxth	r2, r2
 8003b26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2c:	1c9a      	adds	r2, r3, #2
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b40:	2301      	movs	r3, #1
 8003b42:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b44:	f7fd fcd6 	bl	80014f4 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d807      	bhi.n	8003b64 <HAL_SPI_TransmitReceive+0x1d8>
 8003b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5a:	d003      	beq.n	8003b64 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b62:	e0a7      	b.n	8003cb4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1a6      	bne.n	8003abc <HAL_SPI_TransmitReceive+0x130>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1a1      	bne.n	8003abc <HAL_SPI_TransmitReceive+0x130>
 8003b78:	e07c      	b.n	8003c74 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_SPI_TransmitReceive+0x1fc>
 8003b82:	8b7b      	ldrh	r3, [r7, #26]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d16b      	bne.n	8003c60 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	330c      	adds	r3, #12
 8003b92:	7812      	ldrb	r2, [r2, #0]
 8003b94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bae:	e057      	b.n	8003c60 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d11c      	bne.n	8003bf8 <HAL_SPI_TransmitReceive+0x26c>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d017      	beq.n	8003bf8 <HAL_SPI_TransmitReceive+0x26c>
 8003bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d114      	bne.n	8003bf8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	7812      	ldrb	r2, [r2, #0]
 8003bda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d119      	bne.n	8003c3a <HAL_SPI_TransmitReceive+0x2ae>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d014      	beq.n	8003c3a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c36:	2301      	movs	r3, #1
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c3a:	f7fd fc5b 	bl	80014f4 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d803      	bhi.n	8003c52 <HAL_SPI_TransmitReceive+0x2c6>
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d102      	bne.n	8003c58 <HAL_SPI_TransmitReceive+0x2cc>
 8003c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d103      	bne.n	8003c60 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c5e:	e029      	b.n	8003cb4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1a2      	bne.n	8003bb0 <HAL_SPI_TransmitReceive+0x224>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d19d      	bne.n	8003bb0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 fa35 	bl	80040e8 <SPI_EndRxTxTransaction>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d006      	beq.n	8003c92 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c90:	e010      	b.n	8003cb4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10b      	bne.n	8003cb2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	e000      	b.n	8003cb4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003cb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3730      	adds	r7, #48	; 0x30
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	099b      	lsrs	r3, r3, #6
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10f      	bne.n	8003d14 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	099b      	lsrs	r3, r3, #6
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d004      	beq.n	8003d14 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	4798      	blx	r3
    return;
 8003d12:	e0d7      	b.n	8003ec4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	085b      	lsrs	r3, r3, #1
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <HAL_SPI_IRQHandler+0x66>
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	09db      	lsrs	r3, r3, #7
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d004      	beq.n	8003d36 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	4798      	blx	r3
    return;
 8003d34:	e0c6      	b.n	8003ec4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	095b      	lsrs	r3, r3, #5
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10c      	bne.n	8003d5c <HAL_SPI_IRQHandler+0x8c>
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	099b      	lsrs	r3, r3, #6
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	0a1b      	lsrs	r3, r3, #8
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 80b4 	beq.w	8003ec4 <HAL_SPI_IRQHandler+0x1f4>
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80ad 	beq.w	8003ec4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	099b      	lsrs	r3, r3, #6
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d023      	beq.n	8003dbe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d011      	beq.n	8003da6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d86:	f043 0204 	orr.w	r2, r3, #4
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	e00b      	b.n	8003dbe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003da6:	2300      	movs	r3, #0
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	693b      	ldr	r3, [r7, #16]
        return;
 8003dbc:	e082      	b.n	8003ec4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d014      	beq.n	8003df4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dce:	f043 0201 	orr.w	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	0a1b      	lsrs	r3, r3, #8
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00c      	beq.n	8003e1a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e04:	f043 0208 	orr.w	r2, r3, #8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60bb      	str	r3, [r7, #8]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d04f      	beq.n	8003ec2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e30:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d104      	bne.n	8003e4e <HAL_SPI_IRQHandler+0x17e>
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d034      	beq.n	8003eb8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0203 	bic.w	r2, r2, #3
 8003e5c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d011      	beq.n	8003e8a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6a:	4a18      	ldr	r2, [pc, #96]	; (8003ecc <HAL_SPI_IRQHandler+0x1fc>)
 8003e6c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fe f9e4 	bl	8002240 <HAL_DMA_Abort_IT>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d016      	beq.n	8003ec0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e96:	4a0d      	ldr	r2, [pc, #52]	; (8003ecc <HAL_SPI_IRQHandler+0x1fc>)
 8003e98:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fe f9ce 	bl	8002240 <HAL_DMA_Abort_IT>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003eb6:	e003      	b.n	8003ec0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f809 	bl	8003ed0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003ebe:	e000      	b.n	8003ec2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003ec0:	bf00      	nop
    return;
 8003ec2:	bf00      	nop
  }
}
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	08003ee5 	.word	0x08003ee5

08003ed0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f7ff ffe6 	bl	8003ed0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f04:	bf00      	nop
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	603b      	str	r3, [r7, #0]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f1c:	f7fd faea 	bl	80014f4 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f24:	1a9b      	subs	r3, r3, r2
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	4413      	add	r3, r2
 8003f2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f2c:	f7fd fae2 	bl	80014f4 <HAL_GetTick>
 8003f30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f32:	4b39      	ldr	r3, [pc, #228]	; (8004018 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	015b      	lsls	r3, r3, #5
 8003f38:	0d1b      	lsrs	r3, r3, #20
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	fb02 f303 	mul.w	r3, r2, r3
 8003f40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f42:	e054      	b.n	8003fee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4a:	d050      	beq.n	8003fee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f4c:	f7fd fad2 	bl	80014f4 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d902      	bls.n	8003f62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d13d      	bne.n	8003fde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f7a:	d111      	bne.n	8003fa0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f84:	d004      	beq.n	8003f90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f8e:	d107      	bne.n	8003fa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa8:	d10f      	bne.n	8003fca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e017      	b.n	800400e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	bf0c      	ite	eq
 8003ffe:	2301      	moveq	r3, #1
 8004000:	2300      	movne	r3, #0
 8004002:	b2db      	uxtb	r3, r3
 8004004:	461a      	mov	r2, r3
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	429a      	cmp	r2, r3
 800400a:	d19b      	bne.n	8003f44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3720      	adds	r7, #32
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	20000004 	.word	0x20000004

0800401c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004030:	d111      	bne.n	8004056 <SPI_EndRxTransaction+0x3a>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800403a:	d004      	beq.n	8004046 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004044:	d107      	bne.n	8004056 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004054:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800405e:	d12a      	bne.n	80040b6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004068:	d012      	beq.n	8004090 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2200      	movs	r2, #0
 8004072:	2180      	movs	r1, #128	; 0x80
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f7ff ff49 	bl	8003f0c <SPI_WaitFlagStateUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d02d      	beq.n	80040dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004084:	f043 0220 	orr.w	r2, r3, #32
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e026      	b.n	80040de <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2200      	movs	r2, #0
 8004098:	2101      	movs	r1, #1
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f7ff ff36 	bl	8003f0c <SPI_WaitFlagStateUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d01a      	beq.n	80040dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040aa:	f043 0220 	orr.w	r2, r3, #32
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e013      	b.n	80040de <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2200      	movs	r2, #0
 80040be:	2101      	movs	r1, #1
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f7ff ff23 	bl	8003f0c <SPI_WaitFlagStateUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d0:	f043 0220 	orr.w	r2, r3, #32
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e000      	b.n	80040de <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040f4:	4b1b      	ldr	r3, [pc, #108]	; (8004164 <SPI_EndRxTxTransaction+0x7c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a1b      	ldr	r2, [pc, #108]	; (8004168 <SPI_EndRxTxTransaction+0x80>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	0d5b      	lsrs	r3, r3, #21
 8004100:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004104:	fb02 f303 	mul.w	r3, r2, r3
 8004108:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004112:	d112      	bne.n	800413a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2200      	movs	r2, #0
 800411c:	2180      	movs	r1, #128	; 0x80
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f7ff fef4 	bl	8003f0c <SPI_WaitFlagStateUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d016      	beq.n	8004158 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412e:	f043 0220 	orr.w	r2, r3, #32
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e00f      	b.n	800415a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	3b01      	subs	r3, #1
 8004144:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004150:	2b80      	cmp	r3, #128	; 0x80
 8004152:	d0f2      	beq.n	800413a <SPI_EndRxTxTransaction+0x52>
 8004154:	e000      	b.n	8004158 <SPI_EndRxTxTransaction+0x70>
        break;
 8004156:	bf00      	nop
  }

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20000004 	.word	0x20000004
 8004168:	165e9f81 	.word	0x165e9f81

0800416c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e041      	b.n	8004202 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fc ff8c 	bl	80010b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	4619      	mov	r1, r3
 80041aa:	4610      	mov	r0, r2
 80041ac:	f000 fa96 	bl	80046dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	d001      	beq.n	8004224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e04e      	b.n	80042c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a23      	ldr	r2, [pc, #140]	; (80042d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d022      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x80>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424e:	d01d      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x80>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a1f      	ldr	r2, [pc, #124]	; (80042d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d018      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x80>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a1e      	ldr	r2, [pc, #120]	; (80042d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d013      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x80>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1c      	ldr	r2, [pc, #112]	; (80042dc <HAL_TIM_Base_Start_IT+0xd0>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00e      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x80>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1b      	ldr	r2, [pc, #108]	; (80042e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d009      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x80>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a19      	ldr	r2, [pc, #100]	; (80042e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d004      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x80>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a18      	ldr	r2, [pc, #96]	; (80042e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d111      	bne.n	80042b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b06      	cmp	r3, #6
 800429c:	d010      	beq.n	80042c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0201 	orr.w	r2, r2, #1
 80042ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ae:	e007      	b.n	80042c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40010000 	.word	0x40010000
 80042d4:	40000400 	.word	0x40000400
 80042d8:	40000800 	.word	0x40000800
 80042dc:	40000c00 	.word	0x40000c00
 80042e0:	40010400 	.word	0x40010400
 80042e4:	40014000 	.word	0x40014000
 80042e8:	40001800 	.word	0x40001800

080042ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d122      	bne.n	8004348 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b02      	cmp	r3, #2
 800430e:	d11b      	bne.n	8004348 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f06f 0202 	mvn.w	r2, #2
 8004318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f9b5 	bl	800469e <HAL_TIM_IC_CaptureCallback>
 8004334:	e005      	b.n	8004342 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f9a7 	bl	800468a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f9b8 	bl	80046b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b04      	cmp	r3, #4
 8004354:	d122      	bne.n	800439c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b04      	cmp	r3, #4
 8004362:	d11b      	bne.n	800439c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f06f 0204 	mvn.w	r2, #4
 800436c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2202      	movs	r2, #2
 8004372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f98b 	bl	800469e <HAL_TIM_IC_CaptureCallback>
 8004388:	e005      	b.n	8004396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f97d 	bl	800468a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f98e 	bl	80046b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d122      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f003 0308 	and.w	r3, r3, #8
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d11b      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0208 	mvn.w	r2, #8
 80043c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2204      	movs	r2, #4
 80043c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f961 	bl	800469e <HAL_TIM_IC_CaptureCallback>
 80043dc:	e005      	b.n	80043ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f953 	bl	800468a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f964 	bl	80046b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 0310 	and.w	r3, r3, #16
 80043fa:	2b10      	cmp	r3, #16
 80043fc:	d122      	bne.n	8004444 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b10      	cmp	r3, #16
 800440a:	d11b      	bne.n	8004444 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0210 	mvn.w	r2, #16
 8004414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2208      	movs	r2, #8
 800441a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f937 	bl	800469e <HAL_TIM_IC_CaptureCallback>
 8004430:	e005      	b.n	800443e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f929 	bl	800468a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f93a 	bl	80046b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b01      	cmp	r3, #1
 8004450:	d10e      	bne.n	8004470 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b01      	cmp	r3, #1
 800445e:	d107      	bne.n	8004470 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0201 	mvn.w	r2, #1
 8004468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7fc fcfa 	bl	8000e64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447a:	2b80      	cmp	r3, #128	; 0x80
 800447c:	d10e      	bne.n	800449c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004488:	2b80      	cmp	r3, #128	; 0x80
 800448a:	d107      	bne.n	800449c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fae0 	bl	8004a5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a6:	2b40      	cmp	r3, #64	; 0x40
 80044a8:	d10e      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b4:	2b40      	cmp	r3, #64	; 0x40
 80044b6:	d107      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f8ff 	bl	80046c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b20      	cmp	r3, #32
 80044d4:	d10e      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b20      	cmp	r3, #32
 80044e2:	d107      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0220 	mvn.w	r2, #32
 80044ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 faaa 	bl	8004a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044f4:	bf00      	nop
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_TIM_ConfigClockSource+0x1c>
 8004514:	2302      	movs	r3, #2
 8004516:	e0b4      	b.n	8004682 <HAL_TIM_ConfigClockSource+0x186>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800453e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004550:	d03e      	beq.n	80045d0 <HAL_TIM_ConfigClockSource+0xd4>
 8004552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004556:	f200 8087 	bhi.w	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 800455a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455e:	f000 8086 	beq.w	800466e <HAL_TIM_ConfigClockSource+0x172>
 8004562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004566:	d87f      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004568:	2b70      	cmp	r3, #112	; 0x70
 800456a:	d01a      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0xa6>
 800456c:	2b70      	cmp	r3, #112	; 0x70
 800456e:	d87b      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004570:	2b60      	cmp	r3, #96	; 0x60
 8004572:	d050      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0x11a>
 8004574:	2b60      	cmp	r3, #96	; 0x60
 8004576:	d877      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004578:	2b50      	cmp	r3, #80	; 0x50
 800457a:	d03c      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0xfa>
 800457c:	2b50      	cmp	r3, #80	; 0x50
 800457e:	d873      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004580:	2b40      	cmp	r3, #64	; 0x40
 8004582:	d058      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0x13a>
 8004584:	2b40      	cmp	r3, #64	; 0x40
 8004586:	d86f      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004588:	2b30      	cmp	r3, #48	; 0x30
 800458a:	d064      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x15a>
 800458c:	2b30      	cmp	r3, #48	; 0x30
 800458e:	d86b      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004590:	2b20      	cmp	r3, #32
 8004592:	d060      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x15a>
 8004594:	2b20      	cmp	r3, #32
 8004596:	d867      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d05c      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x15a>
 800459c:	2b10      	cmp	r3, #16
 800459e:	d05a      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x15a>
 80045a0:	e062      	b.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6899      	ldr	r1, [r3, #8]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f000 f9ad 	bl	8004910 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	609a      	str	r2, [r3, #8]
      break;
 80045ce:	e04f      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6818      	ldr	r0, [r3, #0]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	6899      	ldr	r1, [r3, #8]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f000 f996 	bl	8004910 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045f2:	609a      	str	r2, [r3, #8]
      break;
 80045f4:	e03c      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	6859      	ldr	r1, [r3, #4]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	461a      	mov	r2, r3
 8004604:	f000 f90a 	bl	800481c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2150      	movs	r1, #80	; 0x50
 800460e:	4618      	mov	r0, r3
 8004610:	f000 f963 	bl	80048da <TIM_ITRx_SetConfig>
      break;
 8004614:	e02c      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6859      	ldr	r1, [r3, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	461a      	mov	r2, r3
 8004624:	f000 f929 	bl	800487a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2160      	movs	r1, #96	; 0x60
 800462e:	4618      	mov	r0, r3
 8004630:	f000 f953 	bl	80048da <TIM_ITRx_SetConfig>
      break;
 8004634:	e01c      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6818      	ldr	r0, [r3, #0]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6859      	ldr	r1, [r3, #4]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	461a      	mov	r2, r3
 8004644:	f000 f8ea 	bl	800481c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2140      	movs	r1, #64	; 0x40
 800464e:	4618      	mov	r0, r3
 8004650:	f000 f943 	bl	80048da <TIM_ITRx_SetConfig>
      break;
 8004654:	e00c      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4619      	mov	r1, r3
 8004660:	4610      	mov	r0, r2
 8004662:	f000 f93a 	bl	80048da <TIM_ITRx_SetConfig>
      break;
 8004666:	e003      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
      break;
 800466c:	e000      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800466e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a40      	ldr	r2, [pc, #256]	; (80047f0 <TIM_Base_SetConfig+0x114>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d013      	beq.n	800471c <TIM_Base_SetConfig+0x40>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046fa:	d00f      	beq.n	800471c <TIM_Base_SetConfig+0x40>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a3d      	ldr	r2, [pc, #244]	; (80047f4 <TIM_Base_SetConfig+0x118>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d00b      	beq.n	800471c <TIM_Base_SetConfig+0x40>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a3c      	ldr	r2, [pc, #240]	; (80047f8 <TIM_Base_SetConfig+0x11c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d007      	beq.n	800471c <TIM_Base_SetConfig+0x40>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a3b      	ldr	r2, [pc, #236]	; (80047fc <TIM_Base_SetConfig+0x120>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d003      	beq.n	800471c <TIM_Base_SetConfig+0x40>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a3a      	ldr	r2, [pc, #232]	; (8004800 <TIM_Base_SetConfig+0x124>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d108      	bne.n	800472e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a2f      	ldr	r2, [pc, #188]	; (80047f0 <TIM_Base_SetConfig+0x114>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d02b      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473c:	d027      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a2c      	ldr	r2, [pc, #176]	; (80047f4 <TIM_Base_SetConfig+0x118>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d023      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a2b      	ldr	r2, [pc, #172]	; (80047f8 <TIM_Base_SetConfig+0x11c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d01f      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a2a      	ldr	r2, [pc, #168]	; (80047fc <TIM_Base_SetConfig+0x120>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d01b      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a29      	ldr	r2, [pc, #164]	; (8004800 <TIM_Base_SetConfig+0x124>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d017      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a28      	ldr	r2, [pc, #160]	; (8004804 <TIM_Base_SetConfig+0x128>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d013      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a27      	ldr	r2, [pc, #156]	; (8004808 <TIM_Base_SetConfig+0x12c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00f      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a26      	ldr	r2, [pc, #152]	; (800480c <TIM_Base_SetConfig+0x130>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00b      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a25      	ldr	r2, [pc, #148]	; (8004810 <TIM_Base_SetConfig+0x134>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d007      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a24      	ldr	r2, [pc, #144]	; (8004814 <TIM_Base_SetConfig+0x138>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d003      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a23      	ldr	r2, [pc, #140]	; (8004818 <TIM_Base_SetConfig+0x13c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d108      	bne.n	80047a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	4313      	orrs	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a0a      	ldr	r2, [pc, #40]	; (80047f0 <TIM_Base_SetConfig+0x114>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d003      	beq.n	80047d4 <TIM_Base_SetConfig+0xf8>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a0c      	ldr	r2, [pc, #48]	; (8004800 <TIM_Base_SetConfig+0x124>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d103      	bne.n	80047dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	615a      	str	r2, [r3, #20]
}
 80047e2:	bf00      	nop
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40010000 	.word	0x40010000
 80047f4:	40000400 	.word	0x40000400
 80047f8:	40000800 	.word	0x40000800
 80047fc:	40000c00 	.word	0x40000c00
 8004800:	40010400 	.word	0x40010400
 8004804:	40014000 	.word	0x40014000
 8004808:	40014400 	.word	0x40014400
 800480c:	40014800 	.word	0x40014800
 8004810:	40001800 	.word	0x40001800
 8004814:	40001c00 	.word	0x40001c00
 8004818:	40002000 	.word	0x40002000

0800481c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	f023 0201 	bic.w	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f023 030a 	bic.w	r3, r3, #10
 8004858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	4313      	orrs	r3, r2
 8004860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	621a      	str	r2, [r3, #32]
}
 800486e:	bf00      	nop
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800487a:	b480      	push	{r7}
 800487c:	b087      	sub	sp, #28
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f023 0210 	bic.w	r2, r3, #16
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	031b      	lsls	r3, r3, #12
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	011b      	lsls	r3, r3, #4
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	bf00      	nop
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048da:	b480      	push	{r7}
 80048dc:	b085      	sub	sp, #20
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f043 0307 	orr.w	r3, r3, #7
 80048fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	609a      	str	r2, [r3, #8]
}
 8004904:	bf00      	nop
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800492a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	021a      	lsls	r2, r3, #8
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	431a      	orrs	r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	4313      	orrs	r3, r2
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	4313      	orrs	r3, r2
 800493c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	609a      	str	r2, [r3, #8]
}
 8004944:	bf00      	nop
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004960:	2b01      	cmp	r3, #1
 8004962:	d101      	bne.n	8004968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004964:	2302      	movs	r3, #2
 8004966:	e05a      	b.n	8004a1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a21      	ldr	r2, [pc, #132]	; (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d022      	beq.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b4:	d01d      	beq.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1d      	ldr	r2, [pc, #116]	; (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d018      	beq.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a1b      	ldr	r2, [pc, #108]	; (8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d013      	beq.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a1a      	ldr	r2, [pc, #104]	; (8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d00e      	beq.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a18      	ldr	r2, [pc, #96]	; (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d009      	beq.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a17      	ldr	r2, [pc, #92]	; (8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d004      	beq.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a15      	ldr	r2, [pc, #84]	; (8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d10c      	bne.n	8004a0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40010000 	.word	0x40010000
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800
 8004a38:	40000c00 	.word	0x40000c00
 8004a3c:	40010400 	.word	0x40010400
 8004a40:	40014000 	.word	0x40014000
 8004a44:	40001800 	.word	0x40001800

08004a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e03f      	b.n	8004b02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7fc fb30 	bl	80010fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2224      	movs	r2, #36	; 0x24
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fddb 	bl	8005670 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695a      	ldr	r2, [r3, #20]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b08a      	sub	sp, #40	; 0x28
 8004b0e:	af02      	add	r7, sp, #8
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	603b      	str	r3, [r7, #0]
 8004b16:	4613      	mov	r3, r2
 8004b18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	d17c      	bne.n	8004c24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <HAL_UART_Transmit+0x2c>
 8004b30:	88fb      	ldrh	r3, [r7, #6]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e075      	b.n	8004c26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_UART_Transmit+0x3e>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e06e      	b.n	8004c26 <HAL_UART_Transmit+0x11c>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2221      	movs	r2, #33	; 0x21
 8004b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b5e:	f7fc fcc9 	bl	80014f4 <HAL_GetTick>
 8004b62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	88fa      	ldrh	r2, [r7, #6]
 8004b68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	88fa      	ldrh	r2, [r7, #6]
 8004b6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b78:	d108      	bne.n	8004b8c <HAL_UART_Transmit+0x82>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d104      	bne.n	8004b8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b82:	2300      	movs	r3, #0
 8004b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	61bb      	str	r3, [r7, #24]
 8004b8a:	e003      	b.n	8004b94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b9c:	e02a      	b.n	8004bf4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2180      	movs	r1, #128	; 0x80
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 fb1f 	bl	80051ec <UART_WaitOnFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e036      	b.n	8004c26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10b      	bne.n	8004bd6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	3302      	adds	r3, #2
 8004bd2:	61bb      	str	r3, [r7, #24]
 8004bd4:	e007      	b.n	8004be6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	781a      	ldrb	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	3301      	adds	r3, #1
 8004be4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1cf      	bne.n	8004b9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2200      	movs	r2, #0
 8004c06:	2140      	movs	r1, #64	; 0x40
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 faef 	bl	80051ec <UART_WaitOnFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e006      	b.n	8004c26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	e000      	b.n	8004c26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c24:	2302      	movs	r3, #2
  }
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3720      	adds	r7, #32
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b084      	sub	sp, #16
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b20      	cmp	r3, #32
 8004c46:	d11d      	bne.n	8004c84 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <HAL_UART_Receive_IT+0x26>
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e016      	b.n	8004c86 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_UART_Receive_IT+0x38>
 8004c62:	2302      	movs	r3, #2
 8004c64:	e00f      	b.n	8004c86 <HAL_UART_Receive_IT+0x58>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c74:	88fb      	ldrh	r3, [r7, #6]
 8004c76:	461a      	mov	r2, r3
 8004c78:	68b9      	ldr	r1, [r7, #8]
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 fb24 	bl	80052c8 <UART_Start_Receive_IT>
 8004c80:	4603      	mov	r3, r0
 8004c82:	e000      	b.n	8004c86 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004c84:	2302      	movs	r3, #2
  }
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b0ba      	sub	sp, #232	; 0xe8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004cce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10f      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d009      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x66>
 8004ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ce6:	f003 0320 	and.w	r3, r3, #32
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fc03 	bl	80054fa <UART_Receive_IT>
      return;
 8004cf4:	e256      	b.n	80051a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004cf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 80de 	beq.w	8004ebc <HAL_UART_IRQHandler+0x22c>
 8004d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d106      	bne.n	8004d1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 80d1 	beq.w	8004ebc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00b      	beq.n	8004d3e <HAL_UART_IRQHandler+0xae>
 8004d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d005      	beq.n	8004d3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	f043 0201 	orr.w	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00b      	beq.n	8004d62 <HAL_UART_IRQHandler+0xd2>
 8004d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d005      	beq.n	8004d62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	f043 0202 	orr.w	r2, r3, #2
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00b      	beq.n	8004d86 <HAL_UART_IRQHandler+0xf6>
 8004d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d005      	beq.n	8004d86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	f043 0204 	orr.w	r2, r3, #4
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d011      	beq.n	8004db6 <HAL_UART_IRQHandler+0x126>
 8004d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d105      	bne.n	8004daa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d005      	beq.n	8004db6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	f043 0208 	orr.w	r2, r3, #8
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 81ed 	beq.w	800519a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <HAL_UART_IRQHandler+0x14e>
 8004dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fb8e 	bl	80054fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	bf0c      	ite	eq
 8004dec:	2301      	moveq	r3, #1
 8004dee:	2300      	movne	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	f003 0308 	and.w	r3, r3, #8
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d103      	bne.n	8004e0a <HAL_UART_IRQHandler+0x17a>
 8004e02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d04f      	beq.n	8004eaa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fa96 	bl	800533c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1a:	2b40      	cmp	r3, #64	; 0x40
 8004e1c:	d141      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3314      	adds	r3, #20
 8004e24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e2c:	e853 3f00 	ldrex	r3, [r3]
 8004e30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3314      	adds	r3, #20
 8004e46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e5a:	e841 2300 	strex	r3, r2, [r1]
 8004e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1d9      	bne.n	8004e1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d013      	beq.n	8004e9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	4a7d      	ldr	r2, [pc, #500]	; (800506c <HAL_UART_IRQHandler+0x3dc>)
 8004e78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fd f9de 	bl	8002240 <HAL_DMA_Abort_IT>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d016      	beq.n	8004eb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e94:	4610      	mov	r0, r2
 8004e96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e98:	e00e      	b.n	8004eb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f990 	bl	80051c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea0:	e00a      	b.n	8004eb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f98c 	bl	80051c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea8:	e006      	b.n	8004eb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f988 	bl	80051c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004eb6:	e170      	b.n	800519a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb8:	bf00      	nop
    return;
 8004eba:	e16e      	b.n	800519a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	f040 814a 	bne.w	800515a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eca:	f003 0310 	and.w	r3, r3, #16
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 8143 	beq.w	800515a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 813c 	beq.w	800515a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60bb      	str	r3, [r7, #8]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	60bb      	str	r3, [r7, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	60bb      	str	r3, [r7, #8]
 8004ef6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f02:	2b40      	cmp	r3, #64	; 0x40
 8004f04:	f040 80b4 	bne.w	8005070 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 8140 	beq.w	800519e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f26:	429a      	cmp	r2, r3
 8004f28:	f080 8139 	bcs.w	800519e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f3e:	f000 8088 	beq.w	8005052 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	330c      	adds	r3, #12
 8004f48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f50:	e853 3f00 	ldrex	r3, [r3]
 8004f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	330c      	adds	r3, #12
 8004f6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1d9      	bne.n	8004f42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3314      	adds	r3, #20
 8004f94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f98:	e853 3f00 	ldrex	r3, [r3]
 8004f9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fa0:	f023 0301 	bic.w	r3, r3, #1
 8004fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3314      	adds	r3, #20
 8004fae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004fba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fbe:	e841 2300 	strex	r3, r2, [r1]
 8004fc2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1e1      	bne.n	8004f8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3314      	adds	r3, #20
 8004fd0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3314      	adds	r3, #20
 8004fea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004fee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ff0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ff4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ff6:	e841 2300 	strex	r3, r2, [r1]
 8004ffa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ffc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e3      	bne.n	8004fca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	330c      	adds	r3, #12
 8005016:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800501a:	e853 3f00 	ldrex	r3, [r3]
 800501e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005022:	f023 0310 	bic.w	r3, r3, #16
 8005026:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	330c      	adds	r3, #12
 8005030:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005034:	65ba      	str	r2, [r7, #88]	; 0x58
 8005036:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005038:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800503a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800503c:	e841 2300 	strex	r3, r2, [r1]
 8005040:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e3      	bne.n	8005010 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504c:	4618      	mov	r0, r3
 800504e:	f7fd f887 	bl	8002160 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800505a:	b29b      	uxth	r3, r3
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	b29b      	uxth	r3, r3
 8005060:	4619      	mov	r1, r3
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f8b6 	bl	80051d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005068:	e099      	b.n	800519e <HAL_UART_IRQHandler+0x50e>
 800506a:	bf00      	nop
 800506c:	08005403 	.word	0x08005403
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005078:	b29b      	uxth	r3, r3
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 808b 	beq.w	80051a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800508c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8086 	beq.w	80051a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	330c      	adds	r3, #12
 800509c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	330c      	adds	r3, #12
 80050b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80050ba:	647a      	str	r2, [r7, #68]	; 0x44
 80050bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e3      	bne.n	8005096 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3314      	adds	r3, #20
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	623b      	str	r3, [r7, #32]
   return(result);
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	f023 0301 	bic.w	r3, r3, #1
 80050e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3314      	adds	r3, #20
 80050ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050f2:	633a      	str	r2, [r7, #48]	; 0x30
 80050f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e3      	bne.n	80050ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	330c      	adds	r3, #12
 800511a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	60fb      	str	r3, [r7, #12]
   return(result);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0310 	bic.w	r3, r3, #16
 800512a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	330c      	adds	r3, #12
 8005134:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005138:	61fa      	str	r2, [r7, #28]
 800513a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	69b9      	ldr	r1, [r7, #24]
 800513e:	69fa      	ldr	r2, [r7, #28]
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	617b      	str	r3, [r7, #20]
   return(result);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e3      	bne.n	8005114 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800514c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005150:	4619      	mov	r1, r3
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f83e 	bl	80051d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005158:	e023      	b.n	80051a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800515a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800515e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <HAL_UART_IRQHandler+0x4ea>
 8005166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800516a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f959 	bl	800542a <UART_Transmit_IT>
    return;
 8005178:	e014      	b.n	80051a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800517a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800517e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00e      	beq.n	80051a4 <HAL_UART_IRQHandler+0x514>
 8005186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800518a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d008      	beq.n	80051a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f999 	bl	80054ca <UART_EndTransmit_IT>
    return;
 8005198:	e004      	b.n	80051a4 <HAL_UART_IRQHandler+0x514>
    return;
 800519a:	bf00      	nop
 800519c:	e002      	b.n	80051a4 <HAL_UART_IRQHandler+0x514>
      return;
 800519e:	bf00      	nop
 80051a0:	e000      	b.n	80051a4 <HAL_UART_IRQHandler+0x514>
      return;
 80051a2:	bf00      	nop
  }
}
 80051a4:	37e8      	adds	r7, #232	; 0xe8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop

080051ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b090      	sub	sp, #64	; 0x40
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	603b      	str	r3, [r7, #0]
 80051f8:	4613      	mov	r3, r2
 80051fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fc:	e050      	b.n	80052a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005204:	d04c      	beq.n	80052a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005208:	2b00      	cmp	r3, #0
 800520a:	d007      	beq.n	800521c <UART_WaitOnFlagUntilTimeout+0x30>
 800520c:	f7fc f972 	bl	80014f4 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005218:	429a      	cmp	r2, r3
 800521a:	d241      	bcs.n	80052a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	330c      	adds	r3, #12
 800523a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800523c:	637a      	str	r2, [r7, #52]	; 0x34
 800523e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005240:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005242:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005244:	e841 2300 	strex	r3, r2, [r1]
 8005248:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e5      	bne.n	800521c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3314      	adds	r3, #20
 8005256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	613b      	str	r3, [r7, #16]
   return(result);
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f023 0301 	bic.w	r3, r3, #1
 8005266:	63bb      	str	r3, [r7, #56]	; 0x38
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3314      	adds	r3, #20
 800526e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005270:	623a      	str	r2, [r7, #32]
 8005272:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	69f9      	ldr	r1, [r7, #28]
 8005276:	6a3a      	ldr	r2, [r7, #32]
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	61bb      	str	r3, [r7, #24]
   return(result);
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e5      	bne.n	8005250 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2220      	movs	r2, #32
 8005290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e00f      	b.n	80052c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4013      	ands	r3, r2
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	bf0c      	ite	eq
 80052b0:	2301      	moveq	r3, #1
 80052b2:	2300      	movne	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	461a      	mov	r2, r3
 80052b8:	79fb      	ldrb	r3, [r7, #7]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d09f      	beq.n	80051fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3740      	adds	r7, #64	; 0x40
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	4613      	mov	r3, r2
 80052d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	88fa      	ldrh	r2, [r7, #6]
 80052e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	88fa      	ldrh	r2, [r7, #6]
 80052e6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2222      	movs	r2, #34	; 0x22
 80052f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800530c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695a      	ldr	r2, [r3, #20]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0201 	orr.w	r2, r2, #1
 800531c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0220 	orr.w	r2, r2, #32
 800532c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800533c:	b480      	push	{r7}
 800533e:	b095      	sub	sp, #84	; 0x54
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	330c      	adds	r3, #12
 800534a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534e:	e853 3f00 	ldrex	r3, [r3]
 8005352:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800535a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	330c      	adds	r3, #12
 8005362:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005364:	643a      	str	r2, [r7, #64]	; 0x40
 8005366:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005368:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800536a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800536c:	e841 2300 	strex	r3, r2, [r1]
 8005370:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1e5      	bne.n	8005344 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3314      	adds	r3, #20
 800537e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	e853 3f00 	ldrex	r3, [r3]
 8005386:	61fb      	str	r3, [r7, #28]
   return(result);
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	f023 0301 	bic.w	r3, r3, #1
 800538e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3314      	adds	r3, #20
 8005396:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005398:	62fa      	str	r2, [r7, #44]	; 0x2c
 800539a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800539e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053a0:	e841 2300 	strex	r3, r2, [r1]
 80053a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1e5      	bne.n	8005378 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d119      	bne.n	80053e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	e853 3f00 	ldrex	r3, [r3]
 80053c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f023 0310 	bic.w	r3, r3, #16
 80053ca:	647b      	str	r3, [r7, #68]	; 0x44
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	330c      	adds	r3, #12
 80053d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053d4:	61ba      	str	r2, [r7, #24]
 80053d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d8:	6979      	ldr	r1, [r7, #20]
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	e841 2300 	strex	r3, r2, [r1]
 80053e0:	613b      	str	r3, [r7, #16]
   return(result);
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e5      	bne.n	80053b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80053f6:	bf00      	nop
 80053f8:	3754      	adds	r7, #84	; 0x54
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f7ff fecf 	bl	80051c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005422:	bf00      	nop
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800542a:	b480      	push	{r7}
 800542c:	b085      	sub	sp, #20
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b21      	cmp	r3, #33	; 0x21
 800543c:	d13e      	bne.n	80054bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005446:	d114      	bne.n	8005472 <UART_Transmit_IT+0x48>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d110      	bne.n	8005472 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005464:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	1c9a      	adds	r2, r3, #2
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	621a      	str	r2, [r3, #32]
 8005470:	e008      	b.n	8005484 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	1c59      	adds	r1, r3, #1
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6211      	str	r1, [r2, #32]
 800547c:	781a      	ldrb	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005488:	b29b      	uxth	r3, r3
 800548a:	3b01      	subs	r3, #1
 800548c:	b29b      	uxth	r3, r3
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	4619      	mov	r1, r3
 8005492:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10f      	bne.n	80054b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054b8:	2300      	movs	r3, #0
 80054ba:	e000      	b.n	80054be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054bc:	2302      	movs	r3, #2
  }
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b082      	sub	sp, #8
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7ff fe5e 	bl	80051ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b08c      	sub	sp, #48	; 0x30
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b22      	cmp	r3, #34	; 0x22
 800550c:	f040 80ab 	bne.w	8005666 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005518:	d117      	bne.n	800554a <UART_Receive_IT+0x50>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d113      	bne.n	800554a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005522:	2300      	movs	r3, #0
 8005524:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	b29b      	uxth	r3, r3
 8005534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005538:	b29a      	uxth	r2, r3
 800553a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	1c9a      	adds	r2, r3, #2
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	629a      	str	r2, [r3, #40]	; 0x28
 8005548:	e026      	b.n	8005598 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005550:	2300      	movs	r3, #0
 8005552:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555c:	d007      	beq.n	800556e <UART_Receive_IT+0x74>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10a      	bne.n	800557c <UART_Receive_IT+0x82>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	b2da      	uxtb	r2, r3
 8005576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	e008      	b.n	800558e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	b2db      	uxtb	r3, r3
 8005584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005588:	b2da      	uxtb	r2, r3
 800558a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	1c5a      	adds	r2, r3, #1
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800559c:	b29b      	uxth	r3, r3
 800559e:	3b01      	subs	r3, #1
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	4619      	mov	r1, r3
 80055a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d15a      	bne.n	8005662 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0220 	bic.w	r2, r2, #32
 80055ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695a      	ldr	r2, [r3, #20]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0201 	bic.w	r2, r2, #1
 80055da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d135      	bne.n	8005658 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	330c      	adds	r3, #12
 80055f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	613b      	str	r3, [r7, #16]
   return(result);
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f023 0310 	bic.w	r3, r3, #16
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	330c      	adds	r3, #12
 8005610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005612:	623a      	str	r2, [r7, #32]
 8005614:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005616:	69f9      	ldr	r1, [r7, #28]
 8005618:	6a3a      	ldr	r2, [r7, #32]
 800561a:	e841 2300 	strex	r3, r2, [r1]
 800561e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1e5      	bne.n	80055f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0310 	and.w	r3, r3, #16
 8005630:	2b10      	cmp	r3, #16
 8005632:	d10a      	bne.n	800564a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005634:	2300      	movs	r3, #0
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800564e:	4619      	mov	r1, r3
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7ff fdbf 	bl	80051d4 <HAL_UARTEx_RxEventCallback>
 8005656:	e002      	b.n	800565e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7fb fc15 	bl	8000e88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	e002      	b.n	8005668 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	e000      	b.n	8005668 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005666:	2302      	movs	r3, #2
  }
}
 8005668:	4618      	mov	r0, r3
 800566a:	3730      	adds	r7, #48	; 0x30
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005674:	b09f      	sub	sp, #124	; 0x7c
 8005676:	af00      	add	r7, sp, #0
 8005678:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800567a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005686:	68d9      	ldr	r1, [r3, #12]
 8005688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	ea40 0301 	orr.w	r3, r0, r1
 8005690:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005694:	689a      	ldr	r2, [r3, #8]
 8005696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	431a      	orrs	r2, r3
 800569c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	431a      	orrs	r2, r3
 80056a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80056aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80056b4:	f021 010c 	bic.w	r1, r1, #12
 80056b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056be:	430b      	orrs	r3, r1
 80056c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ce:	6999      	ldr	r1, [r3, #24]
 80056d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	ea40 0301 	orr.w	r3, r0, r1
 80056d8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	4bc5      	ldr	r3, [pc, #788]	; (80059f4 <UART_SetConfig+0x384>)
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d004      	beq.n	80056ee <UART_SetConfig+0x7e>
 80056e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	4bc3      	ldr	r3, [pc, #780]	; (80059f8 <UART_SetConfig+0x388>)
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d103      	bne.n	80056f6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056ee:	f7fd fe63 	bl	80033b8 <HAL_RCC_GetPCLK2Freq>
 80056f2:	6778      	str	r0, [r7, #116]	; 0x74
 80056f4:	e002      	b.n	80056fc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056f6:	f7fd fe4b 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 80056fa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005704:	f040 80b6 	bne.w	8005874 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005708:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800570a:	461c      	mov	r4, r3
 800570c:	f04f 0500 	mov.w	r5, #0
 8005710:	4622      	mov	r2, r4
 8005712:	462b      	mov	r3, r5
 8005714:	1891      	adds	r1, r2, r2
 8005716:	6439      	str	r1, [r7, #64]	; 0x40
 8005718:	415b      	adcs	r3, r3
 800571a:	647b      	str	r3, [r7, #68]	; 0x44
 800571c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005720:	1912      	adds	r2, r2, r4
 8005722:	eb45 0303 	adc.w	r3, r5, r3
 8005726:	f04f 0000 	mov.w	r0, #0
 800572a:	f04f 0100 	mov.w	r1, #0
 800572e:	00d9      	lsls	r1, r3, #3
 8005730:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005734:	00d0      	lsls	r0, r2, #3
 8005736:	4602      	mov	r2, r0
 8005738:	460b      	mov	r3, r1
 800573a:	1911      	adds	r1, r2, r4
 800573c:	6639      	str	r1, [r7, #96]	; 0x60
 800573e:	416b      	adcs	r3, r5
 8005740:	667b      	str	r3, [r7, #100]	; 0x64
 8005742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	461a      	mov	r2, r3
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	1891      	adds	r1, r2, r2
 800574e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005750:	415b      	adcs	r3, r3
 8005752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005754:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005758:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800575c:	f7fa fd88 	bl	8000270 <__aeabi_uldivmod>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4ba5      	ldr	r3, [pc, #660]	; (80059fc <UART_SetConfig+0x38c>)
 8005766:	fba3 2302 	umull	r2, r3, r3, r2
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	011e      	lsls	r6, r3, #4
 800576e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005770:	461c      	mov	r4, r3
 8005772:	f04f 0500 	mov.w	r5, #0
 8005776:	4622      	mov	r2, r4
 8005778:	462b      	mov	r3, r5
 800577a:	1891      	adds	r1, r2, r2
 800577c:	6339      	str	r1, [r7, #48]	; 0x30
 800577e:	415b      	adcs	r3, r3
 8005780:	637b      	str	r3, [r7, #52]	; 0x34
 8005782:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005786:	1912      	adds	r2, r2, r4
 8005788:	eb45 0303 	adc.w	r3, r5, r3
 800578c:	f04f 0000 	mov.w	r0, #0
 8005790:	f04f 0100 	mov.w	r1, #0
 8005794:	00d9      	lsls	r1, r3, #3
 8005796:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800579a:	00d0      	lsls	r0, r2, #3
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	1911      	adds	r1, r2, r4
 80057a2:	65b9      	str	r1, [r7, #88]	; 0x58
 80057a4:	416b      	adcs	r3, r5
 80057a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	461a      	mov	r2, r3
 80057ae:	f04f 0300 	mov.w	r3, #0
 80057b2:	1891      	adds	r1, r2, r2
 80057b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80057b6:	415b      	adcs	r3, r3
 80057b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80057c2:	f7fa fd55 	bl	8000270 <__aeabi_uldivmod>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4b8c      	ldr	r3, [pc, #560]	; (80059fc <UART_SetConfig+0x38c>)
 80057cc:	fba3 1302 	umull	r1, r3, r3, r2
 80057d0:	095b      	lsrs	r3, r3, #5
 80057d2:	2164      	movs	r1, #100	; 0x64
 80057d4:	fb01 f303 	mul.w	r3, r1, r3
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	3332      	adds	r3, #50	; 0x32
 80057de:	4a87      	ldr	r2, [pc, #540]	; (80059fc <UART_SetConfig+0x38c>)
 80057e0:	fba2 2303 	umull	r2, r3, r2, r3
 80057e4:	095b      	lsrs	r3, r3, #5
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057ec:	441e      	add	r6, r3
 80057ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057f0:	4618      	mov	r0, r3
 80057f2:	f04f 0100 	mov.w	r1, #0
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	1894      	adds	r4, r2, r2
 80057fc:	623c      	str	r4, [r7, #32]
 80057fe:	415b      	adcs	r3, r3
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
 8005802:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005806:	1812      	adds	r2, r2, r0
 8005808:	eb41 0303 	adc.w	r3, r1, r3
 800580c:	f04f 0400 	mov.w	r4, #0
 8005810:	f04f 0500 	mov.w	r5, #0
 8005814:	00dd      	lsls	r5, r3, #3
 8005816:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800581a:	00d4      	lsls	r4, r2, #3
 800581c:	4622      	mov	r2, r4
 800581e:	462b      	mov	r3, r5
 8005820:	1814      	adds	r4, r2, r0
 8005822:	653c      	str	r4, [r7, #80]	; 0x50
 8005824:	414b      	adcs	r3, r1
 8005826:	657b      	str	r3, [r7, #84]	; 0x54
 8005828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	461a      	mov	r2, r3
 800582e:	f04f 0300 	mov.w	r3, #0
 8005832:	1891      	adds	r1, r2, r2
 8005834:	61b9      	str	r1, [r7, #24]
 8005836:	415b      	adcs	r3, r3
 8005838:	61fb      	str	r3, [r7, #28]
 800583a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800583e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005842:	f7fa fd15 	bl	8000270 <__aeabi_uldivmod>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4b6c      	ldr	r3, [pc, #432]	; (80059fc <UART_SetConfig+0x38c>)
 800584c:	fba3 1302 	umull	r1, r3, r3, r2
 8005850:	095b      	lsrs	r3, r3, #5
 8005852:	2164      	movs	r1, #100	; 0x64
 8005854:	fb01 f303 	mul.w	r3, r1, r3
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	3332      	adds	r3, #50	; 0x32
 800585e:	4a67      	ldr	r2, [pc, #412]	; (80059fc <UART_SetConfig+0x38c>)
 8005860:	fba2 2303 	umull	r2, r3, r2, r3
 8005864:	095b      	lsrs	r3, r3, #5
 8005866:	f003 0207 	and.w	r2, r3, #7
 800586a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4432      	add	r2, r6
 8005870:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005872:	e0b9      	b.n	80059e8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005874:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005876:	461c      	mov	r4, r3
 8005878:	f04f 0500 	mov.w	r5, #0
 800587c:	4622      	mov	r2, r4
 800587e:	462b      	mov	r3, r5
 8005880:	1891      	adds	r1, r2, r2
 8005882:	6139      	str	r1, [r7, #16]
 8005884:	415b      	adcs	r3, r3
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800588c:	1912      	adds	r2, r2, r4
 800588e:	eb45 0303 	adc.w	r3, r5, r3
 8005892:	f04f 0000 	mov.w	r0, #0
 8005896:	f04f 0100 	mov.w	r1, #0
 800589a:	00d9      	lsls	r1, r3, #3
 800589c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058a0:	00d0      	lsls	r0, r2, #3
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	eb12 0804 	adds.w	r8, r2, r4
 80058aa:	eb43 0905 	adc.w	r9, r3, r5
 80058ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f04f 0100 	mov.w	r1, #0
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	008b      	lsls	r3, r1, #2
 80058c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058c6:	0082      	lsls	r2, r0, #2
 80058c8:	4640      	mov	r0, r8
 80058ca:	4649      	mov	r1, r9
 80058cc:	f7fa fcd0 	bl	8000270 <__aeabi_uldivmod>
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	4b49      	ldr	r3, [pc, #292]	; (80059fc <UART_SetConfig+0x38c>)
 80058d6:	fba3 2302 	umull	r2, r3, r3, r2
 80058da:	095b      	lsrs	r3, r3, #5
 80058dc:	011e      	lsls	r6, r3, #4
 80058de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058e0:	4618      	mov	r0, r3
 80058e2:	f04f 0100 	mov.w	r1, #0
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	1894      	adds	r4, r2, r2
 80058ec:	60bc      	str	r4, [r7, #8]
 80058ee:	415b      	adcs	r3, r3
 80058f0:	60fb      	str	r3, [r7, #12]
 80058f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058f6:	1812      	adds	r2, r2, r0
 80058f8:	eb41 0303 	adc.w	r3, r1, r3
 80058fc:	f04f 0400 	mov.w	r4, #0
 8005900:	f04f 0500 	mov.w	r5, #0
 8005904:	00dd      	lsls	r5, r3, #3
 8005906:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800590a:	00d4      	lsls	r4, r2, #3
 800590c:	4622      	mov	r2, r4
 800590e:	462b      	mov	r3, r5
 8005910:	1814      	adds	r4, r2, r0
 8005912:	64bc      	str	r4, [r7, #72]	; 0x48
 8005914:	414b      	adcs	r3, r1
 8005916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	4618      	mov	r0, r3
 800591e:	f04f 0100 	mov.w	r1, #0
 8005922:	f04f 0200 	mov.w	r2, #0
 8005926:	f04f 0300 	mov.w	r3, #0
 800592a:	008b      	lsls	r3, r1, #2
 800592c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005930:	0082      	lsls	r2, r0, #2
 8005932:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005936:	f7fa fc9b 	bl	8000270 <__aeabi_uldivmod>
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	4b2f      	ldr	r3, [pc, #188]	; (80059fc <UART_SetConfig+0x38c>)
 8005940:	fba3 1302 	umull	r1, r3, r3, r2
 8005944:	095b      	lsrs	r3, r3, #5
 8005946:	2164      	movs	r1, #100	; 0x64
 8005948:	fb01 f303 	mul.w	r3, r1, r3
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	3332      	adds	r3, #50	; 0x32
 8005952:	4a2a      	ldr	r2, [pc, #168]	; (80059fc <UART_SetConfig+0x38c>)
 8005954:	fba2 2303 	umull	r2, r3, r2, r3
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800595e:	441e      	add	r6, r3
 8005960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005962:	4618      	mov	r0, r3
 8005964:	f04f 0100 	mov.w	r1, #0
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	1894      	adds	r4, r2, r2
 800596e:	603c      	str	r4, [r7, #0]
 8005970:	415b      	adcs	r3, r3
 8005972:	607b      	str	r3, [r7, #4]
 8005974:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005978:	1812      	adds	r2, r2, r0
 800597a:	eb41 0303 	adc.w	r3, r1, r3
 800597e:	f04f 0400 	mov.w	r4, #0
 8005982:	f04f 0500 	mov.w	r5, #0
 8005986:	00dd      	lsls	r5, r3, #3
 8005988:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800598c:	00d4      	lsls	r4, r2, #3
 800598e:	4622      	mov	r2, r4
 8005990:	462b      	mov	r3, r5
 8005992:	eb12 0a00 	adds.w	sl, r2, r0
 8005996:	eb43 0b01 	adc.w	fp, r3, r1
 800599a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	4618      	mov	r0, r3
 80059a0:	f04f 0100 	mov.w	r1, #0
 80059a4:	f04f 0200 	mov.w	r2, #0
 80059a8:	f04f 0300 	mov.w	r3, #0
 80059ac:	008b      	lsls	r3, r1, #2
 80059ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059b2:	0082      	lsls	r2, r0, #2
 80059b4:	4650      	mov	r0, sl
 80059b6:	4659      	mov	r1, fp
 80059b8:	f7fa fc5a 	bl	8000270 <__aeabi_uldivmod>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4b0e      	ldr	r3, [pc, #56]	; (80059fc <UART_SetConfig+0x38c>)
 80059c2:	fba3 1302 	umull	r1, r3, r3, r2
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	2164      	movs	r1, #100	; 0x64
 80059ca:	fb01 f303 	mul.w	r3, r1, r3
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	011b      	lsls	r3, r3, #4
 80059d2:	3332      	adds	r3, #50	; 0x32
 80059d4:	4a09      	ldr	r2, [pc, #36]	; (80059fc <UART_SetConfig+0x38c>)
 80059d6:	fba2 2303 	umull	r2, r3, r2, r3
 80059da:	095b      	lsrs	r3, r3, #5
 80059dc:	f003 020f 	and.w	r2, r3, #15
 80059e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4432      	add	r2, r6
 80059e6:	609a      	str	r2, [r3, #8]
}
 80059e8:	bf00      	nop
 80059ea:	377c      	adds	r7, #124	; 0x7c
 80059ec:	46bd      	mov	sp, r7
 80059ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f2:	bf00      	nop
 80059f4:	40011000 	.word	0x40011000
 80059f8:	40011400 	.word	0x40011400
 80059fc:	51eb851f 	.word	0x51eb851f

08005a00 <__errno>:
 8005a00:	4b01      	ldr	r3, [pc, #4]	; (8005a08 <__errno+0x8>)
 8005a02:	6818      	ldr	r0, [r3, #0]
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	20000010 	.word	0x20000010

08005a0c <__libc_init_array>:
 8005a0c:	b570      	push	{r4, r5, r6, lr}
 8005a0e:	4d0d      	ldr	r5, [pc, #52]	; (8005a44 <__libc_init_array+0x38>)
 8005a10:	4c0d      	ldr	r4, [pc, #52]	; (8005a48 <__libc_init_array+0x3c>)
 8005a12:	1b64      	subs	r4, r4, r5
 8005a14:	10a4      	asrs	r4, r4, #2
 8005a16:	2600      	movs	r6, #0
 8005a18:	42a6      	cmp	r6, r4
 8005a1a:	d109      	bne.n	8005a30 <__libc_init_array+0x24>
 8005a1c:	4d0b      	ldr	r5, [pc, #44]	; (8005a4c <__libc_init_array+0x40>)
 8005a1e:	4c0c      	ldr	r4, [pc, #48]	; (8005a50 <__libc_init_array+0x44>)
 8005a20:	f000 fc4e 	bl	80062c0 <_init>
 8005a24:	1b64      	subs	r4, r4, r5
 8005a26:	10a4      	asrs	r4, r4, #2
 8005a28:	2600      	movs	r6, #0
 8005a2a:	42a6      	cmp	r6, r4
 8005a2c:	d105      	bne.n	8005a3a <__libc_init_array+0x2e>
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}
 8005a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a34:	4798      	blx	r3
 8005a36:	3601      	adds	r6, #1
 8005a38:	e7ee      	b.n	8005a18 <__libc_init_array+0xc>
 8005a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a3e:	4798      	blx	r3
 8005a40:	3601      	adds	r6, #1
 8005a42:	e7f2      	b.n	8005a2a <__libc_init_array+0x1e>
 8005a44:	0800634c 	.word	0x0800634c
 8005a48:	0800634c 	.word	0x0800634c
 8005a4c:	0800634c 	.word	0x0800634c
 8005a50:	08006350 	.word	0x08006350

08005a54 <memset>:
 8005a54:	4402      	add	r2, r0
 8005a56:	4603      	mov	r3, r0
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d100      	bne.n	8005a5e <memset+0xa>
 8005a5c:	4770      	bx	lr
 8005a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a62:	e7f9      	b.n	8005a58 <memset+0x4>

08005a64 <siprintf>:
 8005a64:	b40e      	push	{r1, r2, r3}
 8005a66:	b500      	push	{lr}
 8005a68:	b09c      	sub	sp, #112	; 0x70
 8005a6a:	ab1d      	add	r3, sp, #116	; 0x74
 8005a6c:	9002      	str	r0, [sp, #8]
 8005a6e:	9006      	str	r0, [sp, #24]
 8005a70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a74:	4809      	ldr	r0, [pc, #36]	; (8005a9c <siprintf+0x38>)
 8005a76:	9107      	str	r1, [sp, #28]
 8005a78:	9104      	str	r1, [sp, #16]
 8005a7a:	4909      	ldr	r1, [pc, #36]	; (8005aa0 <siprintf+0x3c>)
 8005a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a80:	9105      	str	r1, [sp, #20]
 8005a82:	6800      	ldr	r0, [r0, #0]
 8005a84:	9301      	str	r3, [sp, #4]
 8005a86:	a902      	add	r1, sp, #8
 8005a88:	f000 f868 	bl	8005b5c <_svfiprintf_r>
 8005a8c:	9b02      	ldr	r3, [sp, #8]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	b01c      	add	sp, #112	; 0x70
 8005a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a98:	b003      	add	sp, #12
 8005a9a:	4770      	bx	lr
 8005a9c:	20000010 	.word	0x20000010
 8005aa0:	ffff0208 	.word	0xffff0208

08005aa4 <__ssputs_r>:
 8005aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa8:	688e      	ldr	r6, [r1, #8]
 8005aaa:	429e      	cmp	r6, r3
 8005aac:	4682      	mov	sl, r0
 8005aae:	460c      	mov	r4, r1
 8005ab0:	4690      	mov	r8, r2
 8005ab2:	461f      	mov	r7, r3
 8005ab4:	d838      	bhi.n	8005b28 <__ssputs_r+0x84>
 8005ab6:	898a      	ldrh	r2, [r1, #12]
 8005ab8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005abc:	d032      	beq.n	8005b24 <__ssputs_r+0x80>
 8005abe:	6825      	ldr	r5, [r4, #0]
 8005ac0:	6909      	ldr	r1, [r1, #16]
 8005ac2:	eba5 0901 	sub.w	r9, r5, r1
 8005ac6:	6965      	ldr	r5, [r4, #20]
 8005ac8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005acc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	444b      	add	r3, r9
 8005ad4:	106d      	asrs	r5, r5, #1
 8005ad6:	429d      	cmp	r5, r3
 8005ad8:	bf38      	it	cc
 8005ada:	461d      	movcc	r5, r3
 8005adc:	0553      	lsls	r3, r2, #21
 8005ade:	d531      	bpl.n	8005b44 <__ssputs_r+0xa0>
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	f000 fb47 	bl	8006174 <_malloc_r>
 8005ae6:	4606      	mov	r6, r0
 8005ae8:	b950      	cbnz	r0, 8005b00 <__ssputs_r+0x5c>
 8005aea:	230c      	movs	r3, #12
 8005aec:	f8ca 3000 	str.w	r3, [sl]
 8005af0:	89a3      	ldrh	r3, [r4, #12]
 8005af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005af6:	81a3      	strh	r3, [r4, #12]
 8005af8:	f04f 30ff 	mov.w	r0, #4294967295
 8005afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b00:	6921      	ldr	r1, [r4, #16]
 8005b02:	464a      	mov	r2, r9
 8005b04:	f000 fabe 	bl	8006084 <memcpy>
 8005b08:	89a3      	ldrh	r3, [r4, #12]
 8005b0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b12:	81a3      	strh	r3, [r4, #12]
 8005b14:	6126      	str	r6, [r4, #16]
 8005b16:	6165      	str	r5, [r4, #20]
 8005b18:	444e      	add	r6, r9
 8005b1a:	eba5 0509 	sub.w	r5, r5, r9
 8005b1e:	6026      	str	r6, [r4, #0]
 8005b20:	60a5      	str	r5, [r4, #8]
 8005b22:	463e      	mov	r6, r7
 8005b24:	42be      	cmp	r6, r7
 8005b26:	d900      	bls.n	8005b2a <__ssputs_r+0x86>
 8005b28:	463e      	mov	r6, r7
 8005b2a:	4632      	mov	r2, r6
 8005b2c:	6820      	ldr	r0, [r4, #0]
 8005b2e:	4641      	mov	r1, r8
 8005b30:	f000 fab6 	bl	80060a0 <memmove>
 8005b34:	68a3      	ldr	r3, [r4, #8]
 8005b36:	6822      	ldr	r2, [r4, #0]
 8005b38:	1b9b      	subs	r3, r3, r6
 8005b3a:	4432      	add	r2, r6
 8005b3c:	60a3      	str	r3, [r4, #8]
 8005b3e:	6022      	str	r2, [r4, #0]
 8005b40:	2000      	movs	r0, #0
 8005b42:	e7db      	b.n	8005afc <__ssputs_r+0x58>
 8005b44:	462a      	mov	r2, r5
 8005b46:	f000 fb6f 	bl	8006228 <_realloc_r>
 8005b4a:	4606      	mov	r6, r0
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d1e1      	bne.n	8005b14 <__ssputs_r+0x70>
 8005b50:	6921      	ldr	r1, [r4, #16]
 8005b52:	4650      	mov	r0, sl
 8005b54:	f000 fabe 	bl	80060d4 <_free_r>
 8005b58:	e7c7      	b.n	8005aea <__ssputs_r+0x46>
	...

08005b5c <_svfiprintf_r>:
 8005b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b60:	4698      	mov	r8, r3
 8005b62:	898b      	ldrh	r3, [r1, #12]
 8005b64:	061b      	lsls	r3, r3, #24
 8005b66:	b09d      	sub	sp, #116	; 0x74
 8005b68:	4607      	mov	r7, r0
 8005b6a:	460d      	mov	r5, r1
 8005b6c:	4614      	mov	r4, r2
 8005b6e:	d50e      	bpl.n	8005b8e <_svfiprintf_r+0x32>
 8005b70:	690b      	ldr	r3, [r1, #16]
 8005b72:	b963      	cbnz	r3, 8005b8e <_svfiprintf_r+0x32>
 8005b74:	2140      	movs	r1, #64	; 0x40
 8005b76:	f000 fafd 	bl	8006174 <_malloc_r>
 8005b7a:	6028      	str	r0, [r5, #0]
 8005b7c:	6128      	str	r0, [r5, #16]
 8005b7e:	b920      	cbnz	r0, 8005b8a <_svfiprintf_r+0x2e>
 8005b80:	230c      	movs	r3, #12
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295
 8005b88:	e0d1      	b.n	8005d2e <_svfiprintf_r+0x1d2>
 8005b8a:	2340      	movs	r3, #64	; 0x40
 8005b8c:	616b      	str	r3, [r5, #20]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	9309      	str	r3, [sp, #36]	; 0x24
 8005b92:	2320      	movs	r3, #32
 8005b94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b98:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b9c:	2330      	movs	r3, #48	; 0x30
 8005b9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005d48 <_svfiprintf_r+0x1ec>
 8005ba2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ba6:	f04f 0901 	mov.w	r9, #1
 8005baa:	4623      	mov	r3, r4
 8005bac:	469a      	mov	sl, r3
 8005bae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bb2:	b10a      	cbz	r2, 8005bb8 <_svfiprintf_r+0x5c>
 8005bb4:	2a25      	cmp	r2, #37	; 0x25
 8005bb6:	d1f9      	bne.n	8005bac <_svfiprintf_r+0x50>
 8005bb8:	ebba 0b04 	subs.w	fp, sl, r4
 8005bbc:	d00b      	beq.n	8005bd6 <_svfiprintf_r+0x7a>
 8005bbe:	465b      	mov	r3, fp
 8005bc0:	4622      	mov	r2, r4
 8005bc2:	4629      	mov	r1, r5
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	f7ff ff6d 	bl	8005aa4 <__ssputs_r>
 8005bca:	3001      	adds	r0, #1
 8005bcc:	f000 80aa 	beq.w	8005d24 <_svfiprintf_r+0x1c8>
 8005bd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bd2:	445a      	add	r2, fp
 8005bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8005bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 80a2 	beq.w	8005d24 <_svfiprintf_r+0x1c8>
 8005be0:	2300      	movs	r3, #0
 8005be2:	f04f 32ff 	mov.w	r2, #4294967295
 8005be6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bea:	f10a 0a01 	add.w	sl, sl, #1
 8005bee:	9304      	str	r3, [sp, #16]
 8005bf0:	9307      	str	r3, [sp, #28]
 8005bf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bf6:	931a      	str	r3, [sp, #104]	; 0x68
 8005bf8:	4654      	mov	r4, sl
 8005bfa:	2205      	movs	r2, #5
 8005bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c00:	4851      	ldr	r0, [pc, #324]	; (8005d48 <_svfiprintf_r+0x1ec>)
 8005c02:	f7fa fae5 	bl	80001d0 <memchr>
 8005c06:	9a04      	ldr	r2, [sp, #16]
 8005c08:	b9d8      	cbnz	r0, 8005c42 <_svfiprintf_r+0xe6>
 8005c0a:	06d0      	lsls	r0, r2, #27
 8005c0c:	bf44      	itt	mi
 8005c0e:	2320      	movmi	r3, #32
 8005c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c14:	0711      	lsls	r1, r2, #28
 8005c16:	bf44      	itt	mi
 8005c18:	232b      	movmi	r3, #43	; 0x2b
 8005c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8005c22:	2b2a      	cmp	r3, #42	; 0x2a
 8005c24:	d015      	beq.n	8005c52 <_svfiprintf_r+0xf6>
 8005c26:	9a07      	ldr	r2, [sp, #28]
 8005c28:	4654      	mov	r4, sl
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	f04f 0c0a 	mov.w	ip, #10
 8005c30:	4621      	mov	r1, r4
 8005c32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c36:	3b30      	subs	r3, #48	; 0x30
 8005c38:	2b09      	cmp	r3, #9
 8005c3a:	d94e      	bls.n	8005cda <_svfiprintf_r+0x17e>
 8005c3c:	b1b0      	cbz	r0, 8005c6c <_svfiprintf_r+0x110>
 8005c3e:	9207      	str	r2, [sp, #28]
 8005c40:	e014      	b.n	8005c6c <_svfiprintf_r+0x110>
 8005c42:	eba0 0308 	sub.w	r3, r0, r8
 8005c46:	fa09 f303 	lsl.w	r3, r9, r3
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	9304      	str	r3, [sp, #16]
 8005c4e:	46a2      	mov	sl, r4
 8005c50:	e7d2      	b.n	8005bf8 <_svfiprintf_r+0x9c>
 8005c52:	9b03      	ldr	r3, [sp, #12]
 8005c54:	1d19      	adds	r1, r3, #4
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	9103      	str	r1, [sp, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	bfbb      	ittet	lt
 8005c5e:	425b      	neglt	r3, r3
 8005c60:	f042 0202 	orrlt.w	r2, r2, #2
 8005c64:	9307      	strge	r3, [sp, #28]
 8005c66:	9307      	strlt	r3, [sp, #28]
 8005c68:	bfb8      	it	lt
 8005c6a:	9204      	strlt	r2, [sp, #16]
 8005c6c:	7823      	ldrb	r3, [r4, #0]
 8005c6e:	2b2e      	cmp	r3, #46	; 0x2e
 8005c70:	d10c      	bne.n	8005c8c <_svfiprintf_r+0x130>
 8005c72:	7863      	ldrb	r3, [r4, #1]
 8005c74:	2b2a      	cmp	r3, #42	; 0x2a
 8005c76:	d135      	bne.n	8005ce4 <_svfiprintf_r+0x188>
 8005c78:	9b03      	ldr	r3, [sp, #12]
 8005c7a:	1d1a      	adds	r2, r3, #4
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	9203      	str	r2, [sp, #12]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	bfb8      	it	lt
 8005c84:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c88:	3402      	adds	r4, #2
 8005c8a:	9305      	str	r3, [sp, #20]
 8005c8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005d58 <_svfiprintf_r+0x1fc>
 8005c90:	7821      	ldrb	r1, [r4, #0]
 8005c92:	2203      	movs	r2, #3
 8005c94:	4650      	mov	r0, sl
 8005c96:	f7fa fa9b 	bl	80001d0 <memchr>
 8005c9a:	b140      	cbz	r0, 8005cae <_svfiprintf_r+0x152>
 8005c9c:	2340      	movs	r3, #64	; 0x40
 8005c9e:	eba0 000a 	sub.w	r0, r0, sl
 8005ca2:	fa03 f000 	lsl.w	r0, r3, r0
 8005ca6:	9b04      	ldr	r3, [sp, #16]
 8005ca8:	4303      	orrs	r3, r0
 8005caa:	3401      	adds	r4, #1
 8005cac:	9304      	str	r3, [sp, #16]
 8005cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cb2:	4826      	ldr	r0, [pc, #152]	; (8005d4c <_svfiprintf_r+0x1f0>)
 8005cb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cb8:	2206      	movs	r2, #6
 8005cba:	f7fa fa89 	bl	80001d0 <memchr>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d038      	beq.n	8005d34 <_svfiprintf_r+0x1d8>
 8005cc2:	4b23      	ldr	r3, [pc, #140]	; (8005d50 <_svfiprintf_r+0x1f4>)
 8005cc4:	bb1b      	cbnz	r3, 8005d0e <_svfiprintf_r+0x1b2>
 8005cc6:	9b03      	ldr	r3, [sp, #12]
 8005cc8:	3307      	adds	r3, #7
 8005cca:	f023 0307 	bic.w	r3, r3, #7
 8005cce:	3308      	adds	r3, #8
 8005cd0:	9303      	str	r3, [sp, #12]
 8005cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cd4:	4433      	add	r3, r6
 8005cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8005cd8:	e767      	b.n	8005baa <_svfiprintf_r+0x4e>
 8005cda:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cde:	460c      	mov	r4, r1
 8005ce0:	2001      	movs	r0, #1
 8005ce2:	e7a5      	b.n	8005c30 <_svfiprintf_r+0xd4>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	3401      	adds	r4, #1
 8005ce8:	9305      	str	r3, [sp, #20]
 8005cea:	4619      	mov	r1, r3
 8005cec:	f04f 0c0a 	mov.w	ip, #10
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cf6:	3a30      	subs	r2, #48	; 0x30
 8005cf8:	2a09      	cmp	r2, #9
 8005cfa:	d903      	bls.n	8005d04 <_svfiprintf_r+0x1a8>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0c5      	beq.n	8005c8c <_svfiprintf_r+0x130>
 8005d00:	9105      	str	r1, [sp, #20]
 8005d02:	e7c3      	b.n	8005c8c <_svfiprintf_r+0x130>
 8005d04:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d08:	4604      	mov	r4, r0
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e7f0      	b.n	8005cf0 <_svfiprintf_r+0x194>
 8005d0e:	ab03      	add	r3, sp, #12
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	462a      	mov	r2, r5
 8005d14:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <_svfiprintf_r+0x1f8>)
 8005d16:	a904      	add	r1, sp, #16
 8005d18:	4638      	mov	r0, r7
 8005d1a:	f3af 8000 	nop.w
 8005d1e:	1c42      	adds	r2, r0, #1
 8005d20:	4606      	mov	r6, r0
 8005d22:	d1d6      	bne.n	8005cd2 <_svfiprintf_r+0x176>
 8005d24:	89ab      	ldrh	r3, [r5, #12]
 8005d26:	065b      	lsls	r3, r3, #25
 8005d28:	f53f af2c 	bmi.w	8005b84 <_svfiprintf_r+0x28>
 8005d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d2e:	b01d      	add	sp, #116	; 0x74
 8005d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d34:	ab03      	add	r3, sp, #12
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	462a      	mov	r2, r5
 8005d3a:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <_svfiprintf_r+0x1f8>)
 8005d3c:	a904      	add	r1, sp, #16
 8005d3e:	4638      	mov	r0, r7
 8005d40:	f000 f87a 	bl	8005e38 <_printf_i>
 8005d44:	e7eb      	b.n	8005d1e <_svfiprintf_r+0x1c2>
 8005d46:	bf00      	nop
 8005d48:	08006310 	.word	0x08006310
 8005d4c:	0800631a 	.word	0x0800631a
 8005d50:	00000000 	.word	0x00000000
 8005d54:	08005aa5 	.word	0x08005aa5
 8005d58:	08006316 	.word	0x08006316

08005d5c <_printf_common>:
 8005d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d60:	4616      	mov	r6, r2
 8005d62:	4699      	mov	r9, r3
 8005d64:	688a      	ldr	r2, [r1, #8]
 8005d66:	690b      	ldr	r3, [r1, #16]
 8005d68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	bfb8      	it	lt
 8005d70:	4613      	movlt	r3, r2
 8005d72:	6033      	str	r3, [r6, #0]
 8005d74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d78:	4607      	mov	r7, r0
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	b10a      	cbz	r2, 8005d82 <_printf_common+0x26>
 8005d7e:	3301      	adds	r3, #1
 8005d80:	6033      	str	r3, [r6, #0]
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	0699      	lsls	r1, r3, #26
 8005d86:	bf42      	ittt	mi
 8005d88:	6833      	ldrmi	r3, [r6, #0]
 8005d8a:	3302      	addmi	r3, #2
 8005d8c:	6033      	strmi	r3, [r6, #0]
 8005d8e:	6825      	ldr	r5, [r4, #0]
 8005d90:	f015 0506 	ands.w	r5, r5, #6
 8005d94:	d106      	bne.n	8005da4 <_printf_common+0x48>
 8005d96:	f104 0a19 	add.w	sl, r4, #25
 8005d9a:	68e3      	ldr	r3, [r4, #12]
 8005d9c:	6832      	ldr	r2, [r6, #0]
 8005d9e:	1a9b      	subs	r3, r3, r2
 8005da0:	42ab      	cmp	r3, r5
 8005da2:	dc26      	bgt.n	8005df2 <_printf_common+0x96>
 8005da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005da8:	1e13      	subs	r3, r2, #0
 8005daa:	6822      	ldr	r2, [r4, #0]
 8005dac:	bf18      	it	ne
 8005dae:	2301      	movne	r3, #1
 8005db0:	0692      	lsls	r2, r2, #26
 8005db2:	d42b      	bmi.n	8005e0c <_printf_common+0xb0>
 8005db4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005db8:	4649      	mov	r1, r9
 8005dba:	4638      	mov	r0, r7
 8005dbc:	47c0      	blx	r8
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	d01e      	beq.n	8005e00 <_printf_common+0xa4>
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	68e5      	ldr	r5, [r4, #12]
 8005dc6:	6832      	ldr	r2, [r6, #0]
 8005dc8:	f003 0306 	and.w	r3, r3, #6
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	bf08      	it	eq
 8005dd0:	1aad      	subeq	r5, r5, r2
 8005dd2:	68a3      	ldr	r3, [r4, #8]
 8005dd4:	6922      	ldr	r2, [r4, #16]
 8005dd6:	bf0c      	ite	eq
 8005dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ddc:	2500      	movne	r5, #0
 8005dde:	4293      	cmp	r3, r2
 8005de0:	bfc4      	itt	gt
 8005de2:	1a9b      	subgt	r3, r3, r2
 8005de4:	18ed      	addgt	r5, r5, r3
 8005de6:	2600      	movs	r6, #0
 8005de8:	341a      	adds	r4, #26
 8005dea:	42b5      	cmp	r5, r6
 8005dec:	d11a      	bne.n	8005e24 <_printf_common+0xc8>
 8005dee:	2000      	movs	r0, #0
 8005df0:	e008      	b.n	8005e04 <_printf_common+0xa8>
 8005df2:	2301      	movs	r3, #1
 8005df4:	4652      	mov	r2, sl
 8005df6:	4649      	mov	r1, r9
 8005df8:	4638      	mov	r0, r7
 8005dfa:	47c0      	blx	r8
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d103      	bne.n	8005e08 <_printf_common+0xac>
 8005e00:	f04f 30ff 	mov.w	r0, #4294967295
 8005e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e08:	3501      	adds	r5, #1
 8005e0a:	e7c6      	b.n	8005d9a <_printf_common+0x3e>
 8005e0c:	18e1      	adds	r1, r4, r3
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	2030      	movs	r0, #48	; 0x30
 8005e12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e16:	4422      	add	r2, r4
 8005e18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e20:	3302      	adds	r3, #2
 8005e22:	e7c7      	b.n	8005db4 <_printf_common+0x58>
 8005e24:	2301      	movs	r3, #1
 8005e26:	4622      	mov	r2, r4
 8005e28:	4649      	mov	r1, r9
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	47c0      	blx	r8
 8005e2e:	3001      	adds	r0, #1
 8005e30:	d0e6      	beq.n	8005e00 <_printf_common+0xa4>
 8005e32:	3601      	adds	r6, #1
 8005e34:	e7d9      	b.n	8005dea <_printf_common+0x8e>
	...

08005e38 <_printf_i>:
 8005e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	4691      	mov	r9, r2
 8005e40:	7e27      	ldrb	r7, [r4, #24]
 8005e42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e44:	2f78      	cmp	r7, #120	; 0x78
 8005e46:	4680      	mov	r8, r0
 8005e48:	469a      	mov	sl, r3
 8005e4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e4e:	d807      	bhi.n	8005e60 <_printf_i+0x28>
 8005e50:	2f62      	cmp	r7, #98	; 0x62
 8005e52:	d80a      	bhi.n	8005e6a <_printf_i+0x32>
 8005e54:	2f00      	cmp	r7, #0
 8005e56:	f000 80d8 	beq.w	800600a <_printf_i+0x1d2>
 8005e5a:	2f58      	cmp	r7, #88	; 0x58
 8005e5c:	f000 80a3 	beq.w	8005fa6 <_printf_i+0x16e>
 8005e60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e68:	e03a      	b.n	8005ee0 <_printf_i+0xa8>
 8005e6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e6e:	2b15      	cmp	r3, #21
 8005e70:	d8f6      	bhi.n	8005e60 <_printf_i+0x28>
 8005e72:	a001      	add	r0, pc, #4	; (adr r0, 8005e78 <_printf_i+0x40>)
 8005e74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005e78:	08005ed1 	.word	0x08005ed1
 8005e7c:	08005ee5 	.word	0x08005ee5
 8005e80:	08005e61 	.word	0x08005e61
 8005e84:	08005e61 	.word	0x08005e61
 8005e88:	08005e61 	.word	0x08005e61
 8005e8c:	08005e61 	.word	0x08005e61
 8005e90:	08005ee5 	.word	0x08005ee5
 8005e94:	08005e61 	.word	0x08005e61
 8005e98:	08005e61 	.word	0x08005e61
 8005e9c:	08005e61 	.word	0x08005e61
 8005ea0:	08005e61 	.word	0x08005e61
 8005ea4:	08005ff1 	.word	0x08005ff1
 8005ea8:	08005f15 	.word	0x08005f15
 8005eac:	08005fd3 	.word	0x08005fd3
 8005eb0:	08005e61 	.word	0x08005e61
 8005eb4:	08005e61 	.word	0x08005e61
 8005eb8:	08006013 	.word	0x08006013
 8005ebc:	08005e61 	.word	0x08005e61
 8005ec0:	08005f15 	.word	0x08005f15
 8005ec4:	08005e61 	.word	0x08005e61
 8005ec8:	08005e61 	.word	0x08005e61
 8005ecc:	08005fdb 	.word	0x08005fdb
 8005ed0:	680b      	ldr	r3, [r1, #0]
 8005ed2:	1d1a      	adds	r2, r3, #4
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	600a      	str	r2, [r1, #0]
 8005ed8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e0a3      	b.n	800602c <_printf_i+0x1f4>
 8005ee4:	6825      	ldr	r5, [r4, #0]
 8005ee6:	6808      	ldr	r0, [r1, #0]
 8005ee8:	062e      	lsls	r6, r5, #24
 8005eea:	f100 0304 	add.w	r3, r0, #4
 8005eee:	d50a      	bpl.n	8005f06 <_printf_i+0xce>
 8005ef0:	6805      	ldr	r5, [r0, #0]
 8005ef2:	600b      	str	r3, [r1, #0]
 8005ef4:	2d00      	cmp	r5, #0
 8005ef6:	da03      	bge.n	8005f00 <_printf_i+0xc8>
 8005ef8:	232d      	movs	r3, #45	; 0x2d
 8005efa:	426d      	negs	r5, r5
 8005efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f00:	485e      	ldr	r0, [pc, #376]	; (800607c <_printf_i+0x244>)
 8005f02:	230a      	movs	r3, #10
 8005f04:	e019      	b.n	8005f3a <_printf_i+0x102>
 8005f06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f0a:	6805      	ldr	r5, [r0, #0]
 8005f0c:	600b      	str	r3, [r1, #0]
 8005f0e:	bf18      	it	ne
 8005f10:	b22d      	sxthne	r5, r5
 8005f12:	e7ef      	b.n	8005ef4 <_printf_i+0xbc>
 8005f14:	680b      	ldr	r3, [r1, #0]
 8005f16:	6825      	ldr	r5, [r4, #0]
 8005f18:	1d18      	adds	r0, r3, #4
 8005f1a:	6008      	str	r0, [r1, #0]
 8005f1c:	0628      	lsls	r0, r5, #24
 8005f1e:	d501      	bpl.n	8005f24 <_printf_i+0xec>
 8005f20:	681d      	ldr	r5, [r3, #0]
 8005f22:	e002      	b.n	8005f2a <_printf_i+0xf2>
 8005f24:	0669      	lsls	r1, r5, #25
 8005f26:	d5fb      	bpl.n	8005f20 <_printf_i+0xe8>
 8005f28:	881d      	ldrh	r5, [r3, #0]
 8005f2a:	4854      	ldr	r0, [pc, #336]	; (800607c <_printf_i+0x244>)
 8005f2c:	2f6f      	cmp	r7, #111	; 0x6f
 8005f2e:	bf0c      	ite	eq
 8005f30:	2308      	moveq	r3, #8
 8005f32:	230a      	movne	r3, #10
 8005f34:	2100      	movs	r1, #0
 8005f36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f3a:	6866      	ldr	r6, [r4, #4]
 8005f3c:	60a6      	str	r6, [r4, #8]
 8005f3e:	2e00      	cmp	r6, #0
 8005f40:	bfa2      	ittt	ge
 8005f42:	6821      	ldrge	r1, [r4, #0]
 8005f44:	f021 0104 	bicge.w	r1, r1, #4
 8005f48:	6021      	strge	r1, [r4, #0]
 8005f4a:	b90d      	cbnz	r5, 8005f50 <_printf_i+0x118>
 8005f4c:	2e00      	cmp	r6, #0
 8005f4e:	d04d      	beq.n	8005fec <_printf_i+0x1b4>
 8005f50:	4616      	mov	r6, r2
 8005f52:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f56:	fb03 5711 	mls	r7, r3, r1, r5
 8005f5a:	5dc7      	ldrb	r7, [r0, r7]
 8005f5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f60:	462f      	mov	r7, r5
 8005f62:	42bb      	cmp	r3, r7
 8005f64:	460d      	mov	r5, r1
 8005f66:	d9f4      	bls.n	8005f52 <_printf_i+0x11a>
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d10b      	bne.n	8005f84 <_printf_i+0x14c>
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	07df      	lsls	r7, r3, #31
 8005f70:	d508      	bpl.n	8005f84 <_printf_i+0x14c>
 8005f72:	6923      	ldr	r3, [r4, #16]
 8005f74:	6861      	ldr	r1, [r4, #4]
 8005f76:	4299      	cmp	r1, r3
 8005f78:	bfde      	ittt	le
 8005f7a:	2330      	movle	r3, #48	; 0x30
 8005f7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f84:	1b92      	subs	r2, r2, r6
 8005f86:	6122      	str	r2, [r4, #16]
 8005f88:	f8cd a000 	str.w	sl, [sp]
 8005f8c:	464b      	mov	r3, r9
 8005f8e:	aa03      	add	r2, sp, #12
 8005f90:	4621      	mov	r1, r4
 8005f92:	4640      	mov	r0, r8
 8005f94:	f7ff fee2 	bl	8005d5c <_printf_common>
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d14c      	bne.n	8006036 <_printf_i+0x1fe>
 8005f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa0:	b004      	add	sp, #16
 8005fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa6:	4835      	ldr	r0, [pc, #212]	; (800607c <_printf_i+0x244>)
 8005fa8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	680e      	ldr	r6, [r1, #0]
 8005fb0:	061f      	lsls	r7, r3, #24
 8005fb2:	f856 5b04 	ldr.w	r5, [r6], #4
 8005fb6:	600e      	str	r6, [r1, #0]
 8005fb8:	d514      	bpl.n	8005fe4 <_printf_i+0x1ac>
 8005fba:	07d9      	lsls	r1, r3, #31
 8005fbc:	bf44      	itt	mi
 8005fbe:	f043 0320 	orrmi.w	r3, r3, #32
 8005fc2:	6023      	strmi	r3, [r4, #0]
 8005fc4:	b91d      	cbnz	r5, 8005fce <_printf_i+0x196>
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	f023 0320 	bic.w	r3, r3, #32
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	2310      	movs	r3, #16
 8005fd0:	e7b0      	b.n	8005f34 <_printf_i+0xfc>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	f043 0320 	orr.w	r3, r3, #32
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	2378      	movs	r3, #120	; 0x78
 8005fdc:	4828      	ldr	r0, [pc, #160]	; (8006080 <_printf_i+0x248>)
 8005fde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fe2:	e7e3      	b.n	8005fac <_printf_i+0x174>
 8005fe4:	065e      	lsls	r6, r3, #25
 8005fe6:	bf48      	it	mi
 8005fe8:	b2ad      	uxthmi	r5, r5
 8005fea:	e7e6      	b.n	8005fba <_printf_i+0x182>
 8005fec:	4616      	mov	r6, r2
 8005fee:	e7bb      	b.n	8005f68 <_printf_i+0x130>
 8005ff0:	680b      	ldr	r3, [r1, #0]
 8005ff2:	6826      	ldr	r6, [r4, #0]
 8005ff4:	6960      	ldr	r0, [r4, #20]
 8005ff6:	1d1d      	adds	r5, r3, #4
 8005ff8:	600d      	str	r5, [r1, #0]
 8005ffa:	0635      	lsls	r5, r6, #24
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	d501      	bpl.n	8006004 <_printf_i+0x1cc>
 8006000:	6018      	str	r0, [r3, #0]
 8006002:	e002      	b.n	800600a <_printf_i+0x1d2>
 8006004:	0671      	lsls	r1, r6, #25
 8006006:	d5fb      	bpl.n	8006000 <_printf_i+0x1c8>
 8006008:	8018      	strh	r0, [r3, #0]
 800600a:	2300      	movs	r3, #0
 800600c:	6123      	str	r3, [r4, #16]
 800600e:	4616      	mov	r6, r2
 8006010:	e7ba      	b.n	8005f88 <_printf_i+0x150>
 8006012:	680b      	ldr	r3, [r1, #0]
 8006014:	1d1a      	adds	r2, r3, #4
 8006016:	600a      	str	r2, [r1, #0]
 8006018:	681e      	ldr	r6, [r3, #0]
 800601a:	6862      	ldr	r2, [r4, #4]
 800601c:	2100      	movs	r1, #0
 800601e:	4630      	mov	r0, r6
 8006020:	f7fa f8d6 	bl	80001d0 <memchr>
 8006024:	b108      	cbz	r0, 800602a <_printf_i+0x1f2>
 8006026:	1b80      	subs	r0, r0, r6
 8006028:	6060      	str	r0, [r4, #4]
 800602a:	6863      	ldr	r3, [r4, #4]
 800602c:	6123      	str	r3, [r4, #16]
 800602e:	2300      	movs	r3, #0
 8006030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006034:	e7a8      	b.n	8005f88 <_printf_i+0x150>
 8006036:	6923      	ldr	r3, [r4, #16]
 8006038:	4632      	mov	r2, r6
 800603a:	4649      	mov	r1, r9
 800603c:	4640      	mov	r0, r8
 800603e:	47d0      	blx	sl
 8006040:	3001      	adds	r0, #1
 8006042:	d0ab      	beq.n	8005f9c <_printf_i+0x164>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	079b      	lsls	r3, r3, #30
 8006048:	d413      	bmi.n	8006072 <_printf_i+0x23a>
 800604a:	68e0      	ldr	r0, [r4, #12]
 800604c:	9b03      	ldr	r3, [sp, #12]
 800604e:	4298      	cmp	r0, r3
 8006050:	bfb8      	it	lt
 8006052:	4618      	movlt	r0, r3
 8006054:	e7a4      	b.n	8005fa0 <_printf_i+0x168>
 8006056:	2301      	movs	r3, #1
 8006058:	4632      	mov	r2, r6
 800605a:	4649      	mov	r1, r9
 800605c:	4640      	mov	r0, r8
 800605e:	47d0      	blx	sl
 8006060:	3001      	adds	r0, #1
 8006062:	d09b      	beq.n	8005f9c <_printf_i+0x164>
 8006064:	3501      	adds	r5, #1
 8006066:	68e3      	ldr	r3, [r4, #12]
 8006068:	9903      	ldr	r1, [sp, #12]
 800606a:	1a5b      	subs	r3, r3, r1
 800606c:	42ab      	cmp	r3, r5
 800606e:	dcf2      	bgt.n	8006056 <_printf_i+0x21e>
 8006070:	e7eb      	b.n	800604a <_printf_i+0x212>
 8006072:	2500      	movs	r5, #0
 8006074:	f104 0619 	add.w	r6, r4, #25
 8006078:	e7f5      	b.n	8006066 <_printf_i+0x22e>
 800607a:	bf00      	nop
 800607c:	08006321 	.word	0x08006321
 8006080:	08006332 	.word	0x08006332

08006084 <memcpy>:
 8006084:	440a      	add	r2, r1
 8006086:	4291      	cmp	r1, r2
 8006088:	f100 33ff 	add.w	r3, r0, #4294967295
 800608c:	d100      	bne.n	8006090 <memcpy+0xc>
 800608e:	4770      	bx	lr
 8006090:	b510      	push	{r4, lr}
 8006092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006096:	f803 4f01 	strb.w	r4, [r3, #1]!
 800609a:	4291      	cmp	r1, r2
 800609c:	d1f9      	bne.n	8006092 <memcpy+0xe>
 800609e:	bd10      	pop	{r4, pc}

080060a0 <memmove>:
 80060a0:	4288      	cmp	r0, r1
 80060a2:	b510      	push	{r4, lr}
 80060a4:	eb01 0402 	add.w	r4, r1, r2
 80060a8:	d902      	bls.n	80060b0 <memmove+0x10>
 80060aa:	4284      	cmp	r4, r0
 80060ac:	4623      	mov	r3, r4
 80060ae:	d807      	bhi.n	80060c0 <memmove+0x20>
 80060b0:	1e43      	subs	r3, r0, #1
 80060b2:	42a1      	cmp	r1, r4
 80060b4:	d008      	beq.n	80060c8 <memmove+0x28>
 80060b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060be:	e7f8      	b.n	80060b2 <memmove+0x12>
 80060c0:	4402      	add	r2, r0
 80060c2:	4601      	mov	r1, r0
 80060c4:	428a      	cmp	r2, r1
 80060c6:	d100      	bne.n	80060ca <memmove+0x2a>
 80060c8:	bd10      	pop	{r4, pc}
 80060ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060d2:	e7f7      	b.n	80060c4 <memmove+0x24>

080060d4 <_free_r>:
 80060d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060d6:	2900      	cmp	r1, #0
 80060d8:	d048      	beq.n	800616c <_free_r+0x98>
 80060da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060de:	9001      	str	r0, [sp, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f1a1 0404 	sub.w	r4, r1, #4
 80060e6:	bfb8      	it	lt
 80060e8:	18e4      	addlt	r4, r4, r3
 80060ea:	f000 f8d3 	bl	8006294 <__malloc_lock>
 80060ee:	4a20      	ldr	r2, [pc, #128]	; (8006170 <_free_r+0x9c>)
 80060f0:	9801      	ldr	r0, [sp, #4]
 80060f2:	6813      	ldr	r3, [r2, #0]
 80060f4:	4615      	mov	r5, r2
 80060f6:	b933      	cbnz	r3, 8006106 <_free_r+0x32>
 80060f8:	6063      	str	r3, [r4, #4]
 80060fa:	6014      	str	r4, [r2, #0]
 80060fc:	b003      	add	sp, #12
 80060fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006102:	f000 b8cd 	b.w	80062a0 <__malloc_unlock>
 8006106:	42a3      	cmp	r3, r4
 8006108:	d90b      	bls.n	8006122 <_free_r+0x4e>
 800610a:	6821      	ldr	r1, [r4, #0]
 800610c:	1862      	adds	r2, r4, r1
 800610e:	4293      	cmp	r3, r2
 8006110:	bf04      	itt	eq
 8006112:	681a      	ldreq	r2, [r3, #0]
 8006114:	685b      	ldreq	r3, [r3, #4]
 8006116:	6063      	str	r3, [r4, #4]
 8006118:	bf04      	itt	eq
 800611a:	1852      	addeq	r2, r2, r1
 800611c:	6022      	streq	r2, [r4, #0]
 800611e:	602c      	str	r4, [r5, #0]
 8006120:	e7ec      	b.n	80060fc <_free_r+0x28>
 8006122:	461a      	mov	r2, r3
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	b10b      	cbz	r3, 800612c <_free_r+0x58>
 8006128:	42a3      	cmp	r3, r4
 800612a:	d9fa      	bls.n	8006122 <_free_r+0x4e>
 800612c:	6811      	ldr	r1, [r2, #0]
 800612e:	1855      	adds	r5, r2, r1
 8006130:	42a5      	cmp	r5, r4
 8006132:	d10b      	bne.n	800614c <_free_r+0x78>
 8006134:	6824      	ldr	r4, [r4, #0]
 8006136:	4421      	add	r1, r4
 8006138:	1854      	adds	r4, r2, r1
 800613a:	42a3      	cmp	r3, r4
 800613c:	6011      	str	r1, [r2, #0]
 800613e:	d1dd      	bne.n	80060fc <_free_r+0x28>
 8006140:	681c      	ldr	r4, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	6053      	str	r3, [r2, #4]
 8006146:	4421      	add	r1, r4
 8006148:	6011      	str	r1, [r2, #0]
 800614a:	e7d7      	b.n	80060fc <_free_r+0x28>
 800614c:	d902      	bls.n	8006154 <_free_r+0x80>
 800614e:	230c      	movs	r3, #12
 8006150:	6003      	str	r3, [r0, #0]
 8006152:	e7d3      	b.n	80060fc <_free_r+0x28>
 8006154:	6825      	ldr	r5, [r4, #0]
 8006156:	1961      	adds	r1, r4, r5
 8006158:	428b      	cmp	r3, r1
 800615a:	bf04      	itt	eq
 800615c:	6819      	ldreq	r1, [r3, #0]
 800615e:	685b      	ldreq	r3, [r3, #4]
 8006160:	6063      	str	r3, [r4, #4]
 8006162:	bf04      	itt	eq
 8006164:	1949      	addeq	r1, r1, r5
 8006166:	6021      	streq	r1, [r4, #0]
 8006168:	6054      	str	r4, [r2, #4]
 800616a:	e7c7      	b.n	80060fc <_free_r+0x28>
 800616c:	b003      	add	sp, #12
 800616e:	bd30      	pop	{r4, r5, pc}
 8006170:	200000c0 	.word	0x200000c0

08006174 <_malloc_r>:
 8006174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006176:	1ccd      	adds	r5, r1, #3
 8006178:	f025 0503 	bic.w	r5, r5, #3
 800617c:	3508      	adds	r5, #8
 800617e:	2d0c      	cmp	r5, #12
 8006180:	bf38      	it	cc
 8006182:	250c      	movcc	r5, #12
 8006184:	2d00      	cmp	r5, #0
 8006186:	4606      	mov	r6, r0
 8006188:	db01      	blt.n	800618e <_malloc_r+0x1a>
 800618a:	42a9      	cmp	r1, r5
 800618c:	d903      	bls.n	8006196 <_malloc_r+0x22>
 800618e:	230c      	movs	r3, #12
 8006190:	6033      	str	r3, [r6, #0]
 8006192:	2000      	movs	r0, #0
 8006194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006196:	f000 f87d 	bl	8006294 <__malloc_lock>
 800619a:	4921      	ldr	r1, [pc, #132]	; (8006220 <_malloc_r+0xac>)
 800619c:	680a      	ldr	r2, [r1, #0]
 800619e:	4614      	mov	r4, r2
 80061a0:	b99c      	cbnz	r4, 80061ca <_malloc_r+0x56>
 80061a2:	4f20      	ldr	r7, [pc, #128]	; (8006224 <_malloc_r+0xb0>)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	b923      	cbnz	r3, 80061b2 <_malloc_r+0x3e>
 80061a8:	4621      	mov	r1, r4
 80061aa:	4630      	mov	r0, r6
 80061ac:	f000 f862 	bl	8006274 <_sbrk_r>
 80061b0:	6038      	str	r0, [r7, #0]
 80061b2:	4629      	mov	r1, r5
 80061b4:	4630      	mov	r0, r6
 80061b6:	f000 f85d 	bl	8006274 <_sbrk_r>
 80061ba:	1c43      	adds	r3, r0, #1
 80061bc:	d123      	bne.n	8006206 <_malloc_r+0x92>
 80061be:	230c      	movs	r3, #12
 80061c0:	6033      	str	r3, [r6, #0]
 80061c2:	4630      	mov	r0, r6
 80061c4:	f000 f86c 	bl	80062a0 <__malloc_unlock>
 80061c8:	e7e3      	b.n	8006192 <_malloc_r+0x1e>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	1b5b      	subs	r3, r3, r5
 80061ce:	d417      	bmi.n	8006200 <_malloc_r+0x8c>
 80061d0:	2b0b      	cmp	r3, #11
 80061d2:	d903      	bls.n	80061dc <_malloc_r+0x68>
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	441c      	add	r4, r3
 80061d8:	6025      	str	r5, [r4, #0]
 80061da:	e004      	b.n	80061e6 <_malloc_r+0x72>
 80061dc:	6863      	ldr	r3, [r4, #4]
 80061de:	42a2      	cmp	r2, r4
 80061e0:	bf0c      	ite	eq
 80061e2:	600b      	streq	r3, [r1, #0]
 80061e4:	6053      	strne	r3, [r2, #4]
 80061e6:	4630      	mov	r0, r6
 80061e8:	f000 f85a 	bl	80062a0 <__malloc_unlock>
 80061ec:	f104 000b 	add.w	r0, r4, #11
 80061f0:	1d23      	adds	r3, r4, #4
 80061f2:	f020 0007 	bic.w	r0, r0, #7
 80061f6:	1ac2      	subs	r2, r0, r3
 80061f8:	d0cc      	beq.n	8006194 <_malloc_r+0x20>
 80061fa:	1a1b      	subs	r3, r3, r0
 80061fc:	50a3      	str	r3, [r4, r2]
 80061fe:	e7c9      	b.n	8006194 <_malloc_r+0x20>
 8006200:	4622      	mov	r2, r4
 8006202:	6864      	ldr	r4, [r4, #4]
 8006204:	e7cc      	b.n	80061a0 <_malloc_r+0x2c>
 8006206:	1cc4      	adds	r4, r0, #3
 8006208:	f024 0403 	bic.w	r4, r4, #3
 800620c:	42a0      	cmp	r0, r4
 800620e:	d0e3      	beq.n	80061d8 <_malloc_r+0x64>
 8006210:	1a21      	subs	r1, r4, r0
 8006212:	4630      	mov	r0, r6
 8006214:	f000 f82e 	bl	8006274 <_sbrk_r>
 8006218:	3001      	adds	r0, #1
 800621a:	d1dd      	bne.n	80061d8 <_malloc_r+0x64>
 800621c:	e7cf      	b.n	80061be <_malloc_r+0x4a>
 800621e:	bf00      	nop
 8006220:	200000c0 	.word	0x200000c0
 8006224:	200000c4 	.word	0x200000c4

08006228 <_realloc_r>:
 8006228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622a:	4607      	mov	r7, r0
 800622c:	4614      	mov	r4, r2
 800622e:	460e      	mov	r6, r1
 8006230:	b921      	cbnz	r1, 800623c <_realloc_r+0x14>
 8006232:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006236:	4611      	mov	r1, r2
 8006238:	f7ff bf9c 	b.w	8006174 <_malloc_r>
 800623c:	b922      	cbnz	r2, 8006248 <_realloc_r+0x20>
 800623e:	f7ff ff49 	bl	80060d4 <_free_r>
 8006242:	4625      	mov	r5, r4
 8006244:	4628      	mov	r0, r5
 8006246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006248:	f000 f830 	bl	80062ac <_malloc_usable_size_r>
 800624c:	42a0      	cmp	r0, r4
 800624e:	d20f      	bcs.n	8006270 <_realloc_r+0x48>
 8006250:	4621      	mov	r1, r4
 8006252:	4638      	mov	r0, r7
 8006254:	f7ff ff8e 	bl	8006174 <_malloc_r>
 8006258:	4605      	mov	r5, r0
 800625a:	2800      	cmp	r0, #0
 800625c:	d0f2      	beq.n	8006244 <_realloc_r+0x1c>
 800625e:	4631      	mov	r1, r6
 8006260:	4622      	mov	r2, r4
 8006262:	f7ff ff0f 	bl	8006084 <memcpy>
 8006266:	4631      	mov	r1, r6
 8006268:	4638      	mov	r0, r7
 800626a:	f7ff ff33 	bl	80060d4 <_free_r>
 800626e:	e7e9      	b.n	8006244 <_realloc_r+0x1c>
 8006270:	4635      	mov	r5, r6
 8006272:	e7e7      	b.n	8006244 <_realloc_r+0x1c>

08006274 <_sbrk_r>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	4d06      	ldr	r5, [pc, #24]	; (8006290 <_sbrk_r+0x1c>)
 8006278:	2300      	movs	r3, #0
 800627a:	4604      	mov	r4, r0
 800627c:	4608      	mov	r0, r1
 800627e:	602b      	str	r3, [r5, #0]
 8006280:	f7fa ffde 	bl	8001240 <_sbrk>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	d102      	bne.n	800628e <_sbrk_r+0x1a>
 8006288:	682b      	ldr	r3, [r5, #0]
 800628a:	b103      	cbz	r3, 800628e <_sbrk_r+0x1a>
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	bd38      	pop	{r3, r4, r5, pc}
 8006290:	200002c4 	.word	0x200002c4

08006294 <__malloc_lock>:
 8006294:	4801      	ldr	r0, [pc, #4]	; (800629c <__malloc_lock+0x8>)
 8006296:	f000 b811 	b.w	80062bc <__retarget_lock_acquire_recursive>
 800629a:	bf00      	nop
 800629c:	200002cc 	.word	0x200002cc

080062a0 <__malloc_unlock>:
 80062a0:	4801      	ldr	r0, [pc, #4]	; (80062a8 <__malloc_unlock+0x8>)
 80062a2:	f000 b80c 	b.w	80062be <__retarget_lock_release_recursive>
 80062a6:	bf00      	nop
 80062a8:	200002cc 	.word	0x200002cc

080062ac <_malloc_usable_size_r>:
 80062ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062b0:	1f18      	subs	r0, r3, #4
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	bfbc      	itt	lt
 80062b6:	580b      	ldrlt	r3, [r1, r0]
 80062b8:	18c0      	addlt	r0, r0, r3
 80062ba:	4770      	bx	lr

080062bc <__retarget_lock_acquire_recursive>:
 80062bc:	4770      	bx	lr

080062be <__retarget_lock_release_recursive>:
 80062be:	4770      	bx	lr

080062c0 <_init>:
 80062c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c2:	bf00      	nop
 80062c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062c6:	bc08      	pop	{r3}
 80062c8:	469e      	mov	lr, r3
 80062ca:	4770      	bx	lr

080062cc <_fini>:
 80062cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ce:	bf00      	nop
 80062d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062d2:	bc08      	pop	{r3}
 80062d4:	469e      	mov	lr, r3
 80062d6:	4770      	bx	lr
