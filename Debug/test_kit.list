
test_kit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d834  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008eb4  0800d9c8  0800d9c8  0001d9c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801687c  0801687c  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801687c  0801687c  0002687c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016884  08016884  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016884  08016884  00026884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016888  08016888  00026888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801688c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e0  2**0
                  CONTENTS
 10 .bss          00000458  200001e0  200001e0  000301e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000638  20000638  000301e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000260e6  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003efb  00000000  00000000  000562f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001740  00000000  00000000  0005a1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015d0  00000000  00000000  0005b938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000267a6  00000000  00000000  0005cf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d475  00000000  00000000  000836ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e10f8  00000000  00000000  000a0b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00181c1b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007310  00000000  00000000  00181c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d9ac 	.word	0x0800d9ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d9ac 	.word	0x0800d9ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <adc_init>:

uint32_t adcReceive[4];

uint8_t counter_test = 0;

void adc_init(){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	HAL_ADC_Init(&hadc1);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <adc_init+0x10>)
 8000f46:	f003 f8f7 	bl	8004138 <HAL_ADC_Init>
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200002ec 	.word	0x200002ec

08000f54 <adc_ReadSensor>:


void adc_ReadSensor(){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, adcReceive, 4);
 8000f58:	2204      	movs	r2, #4
 8000f5a:	4903      	ldr	r1, [pc, #12]	; (8000f68 <adc_ReadSensor+0x14>)
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <adc_ReadSensor+0x18>)
 8000f5e:	f003 f92f 	bl	80041c0 <HAL_ADC_Start_DMA>
//	HAL_ADC_Stop_DMA(&hadc1);
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000334 	.word	0x20000334
 8000f6c:	200002ec 	.word	0x200002ec

08000f70 <adc_GetLight>:

uint32_t adc_GetLight(){
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
	return adcReceive[0];
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <adc_GetLight+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000334 	.word	0x20000334

08000f88 <adc_GetVarResistor>:

uint32_t adc_GetVarResistor(){
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
	return adcReceive[1];
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <adc_GetVarResistor+0x14>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000334 	.word	0x20000334

08000fa0 <adc_GetVoltage>:

float adc_GetVoltage(){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	return ((float)adcReceive[2]*3.3*12)/(4095*1.565);
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <adc_GetVoltage+0x70>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	ee07 3a90 	vmov	s15, r3
 8000fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fb0:	ee17 0a90 	vmov	r0, s15
 8000fb4:	f7ff fac8 	bl	8000548 <__aeabi_f2d>
 8000fb8:	a311      	add	r3, pc, #68	; (adr r3, 8001000 <adc_GetVoltage+0x60>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff fb1b 	bl	80005f8 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <adc_GetVoltage+0x74>)
 8000fd0:	f7ff fb12 	bl	80005f8 <__aeabi_dmul>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	a30a      	add	r3, pc, #40	; (adr r3, 8001008 <adc_GetVoltage+0x68>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff fc33 	bl	800084c <__aeabi_ddiv>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff fddb 	bl	8000ba8 <__aeabi_d2f>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	ee07 3a90 	vmov	s15, r3
}
 8000ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	66666666 	.word	0x66666666
 8001004:	400a6666 	.word	0x400a6666
 8001008:	cccccccd 	.word	0xcccccccd
 800100c:	40b908ac 	.word	0x40b908ac
 8001010:	20000334 	.word	0x20000334
 8001014:	40280000 	.word	0x40280000

08001018 <adc_GetCurrent>:

float adc_GetCurrent(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	return (((float)adcReceive[3]*3.3)/(4095*0.647)-2.5)*5/2.5;
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <adc_GetCurrent+0x98>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001028:	ee17 0a90 	vmov	r0, s15
 800102c:	f7ff fa8c 	bl	8000548 <__aeabi_f2d>
 8001030:	a31b      	add	r3, pc, #108	; (adr r3, 80010a0 <adc_GetCurrent+0x88>)
 8001032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001036:	f7ff fadf 	bl	80005f8 <__aeabi_dmul>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4610      	mov	r0, r2
 8001040:	4619      	mov	r1, r3
 8001042:	a319      	add	r3, pc, #100	; (adr r3, 80010a8 <adc_GetCurrent+0x90>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	f7ff fc00 	bl	800084c <__aeabi_ddiv>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <adc_GetCurrent+0x9c>)
 800105a:	f7ff f915 	bl	8000288 <__aeabi_dsub>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4610      	mov	r0, r2
 8001064:	4619      	mov	r1, r3
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <adc_GetCurrent+0xa0>)
 800106c:	f7ff fac4 	bl	80005f8 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <adc_GetCurrent+0x9c>)
 800107e:	f7ff fbe5 	bl	800084c <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff fd8d 	bl	8000ba8 <__aeabi_d2f>
 800108e:	4603      	mov	r3, r0
 8001090:	ee07 3a90 	vmov	s15, r3
}
 8001094:	eeb0 0a67 	vmov.f32	s0, s15
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	f3af 8000 	nop.w
 80010a0:	66666666 	.word	0x66666666
 80010a4:	400a6666 	.word	0x400a6666
 80010a8:	147ae148 	.word	0x147ae148
 80010ac:	40a4b2ee 	.word	0x40a4b2ee
 80010b0:	20000334 	.word	0x20000334
 80010b4:	40040000 	.word	0x40040000
 80010b8:	40140000 	.word	0x40140000

080010bc <adc_Test>:

void adc_Test(){
 80010bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010c0:	b09e      	sub	sp, #120	; 0x78
 80010c2:	af04      	add	r7, sp, #16
	counter_test = (counter_test + 1)%20;
 80010c4:	4b3c      	ldr	r3, [pc, #240]	; (80011b8 <adc_Test+0xfc>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	4b3c      	ldr	r3, [pc, #240]	; (80011bc <adc_Test+0x100>)
 80010cc:	fb83 1302 	smull	r1, r3, r3, r2
 80010d0:	10d9      	asrs	r1, r3, #3
 80010d2:	17d3      	asrs	r3, r2, #31
 80010d4:	1ac9      	subs	r1, r1, r3
 80010d6:	460b      	mov	r3, r1
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	440b      	add	r3, r1
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	1ad1      	subs	r1, r2, r3
 80010e0:	b2ca      	uxtb	r2, r1
 80010e2:	4b35      	ldr	r3, [pc, #212]	; (80011b8 <adc_Test+0xfc>)
 80010e4:	701a      	strb	r2, [r3, #0]
	if(counter_test == 0){
 80010e6:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <adc_Test+0xfc>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d15f      	bne.n	80011ae <adc_Test+0xf2>
		adc_ReadSensor();
 80010ee:	f7ff ff31 	bl	8000f54 <adc_ReadSensor>
		char msg[100];
		HAL_UART_Transmit(&huart1, (void*)msg, sprintf(msg, "Light: %ld, VarResistor: %ld, Voltage: %.2f, Current: %.4f\n", adc_GetLight(), adc_GetVarResistor(), adc_GetVoltage(), adc_GetCurrent()), 10);
 80010f2:	f7ff ff3d 	bl	8000f70 <adc_GetLight>
 80010f6:	4606      	mov	r6, r0
 80010f8:	f7ff ff46 	bl	8000f88 <adc_GetVarResistor>
 80010fc:	4680      	mov	r8, r0
 80010fe:	f7ff ff4f 	bl	8000fa0 <adc_GetVoltage>
 8001102:	ee10 3a10 	vmov	r3, s0
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fa1e 	bl	8000548 <__aeabi_f2d>
 800110c:	4604      	mov	r4, r0
 800110e:	460d      	mov	r5, r1
 8001110:	f7ff ff82 	bl	8001018 <adc_GetCurrent>
 8001114:	ee10 3a10 	vmov	r3, s0
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fa15 	bl	8000548 <__aeabi_f2d>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	1d38      	adds	r0, r7, #4
 8001124:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001128:	e9cd 4500 	strd	r4, r5, [sp]
 800112c:	4643      	mov	r3, r8
 800112e:	4632      	mov	r2, r6
 8001130:	4923      	ldr	r1, [pc, #140]	; (80011c0 <adc_Test+0x104>)
 8001132:	f00a fa0f 	bl	800b554 <siprintf>
 8001136:	4603      	mov	r3, r0
 8001138:	b29a      	uxth	r2, r3
 800113a:	1d39      	adds	r1, r7, #4
 800113c:	230a      	movs	r3, #10
 800113e:	4821      	ldr	r0, [pc, #132]	; (80011c4 <adc_Test+0x108>)
 8001140:	f008 fd21 	bl	8009b86 <HAL_UART_Transmit>
		sprintf(msg, "Vol: %.2fV, Cur: %.2fmA", adc_GetVoltage(), adc_GetCurrent()*1000);
 8001144:	f7ff ff2c 	bl	8000fa0 <adc_GetVoltage>
 8001148:	ee10 3a10 	vmov	r3, s0
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f9fb 	bl	8000548 <__aeabi_f2d>
 8001152:	4604      	mov	r4, r0
 8001154:	460d      	mov	r5, r1
 8001156:	f7ff ff5f 	bl	8001018 <adc_GetCurrent>
 800115a:	eef0 7a40 	vmov.f32	s15, s0
 800115e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80011c8 <adc_Test+0x10c>
 8001162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001166:	ee17 0a90 	vmov	r0, s15
 800116a:	f7ff f9ed 	bl	8000548 <__aeabi_f2d>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	1d38      	adds	r0, r7, #4
 8001174:	e9cd 2300 	strd	r2, r3, [sp]
 8001178:	4622      	mov	r2, r4
 800117a:	462b      	mov	r3, r5
 800117c:	4913      	ldr	r1, [pc, #76]	; (80011cc <adc_Test+0x110>)
 800117e:	f00a f9e9 	bl	800b554 <siprintf>
//		sprintf(msg, "Voltage: %.2fV", adc_GetVoltage());
		LCD_Fill(0, 100, lcddev.width, 120, BLACK);
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <adc_Test+0x114>)
 8001184:	881a      	ldrh	r2, [r3, #0]
 8001186:	2300      	movs	r3, #0
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2378      	movs	r3, #120	; 0x78
 800118c:	2164      	movs	r1, #100	; 0x64
 800118e:	2000      	movs	r0, #0
 8001190:	f000 faf2 	bl	8001778 <LCD_Fill>
		Gui_StrCenter(0,100,msg,WHITE,BLUE,16,1);
 8001194:	1d3a      	adds	r2, r7, #4
 8001196:	2301      	movs	r3, #1
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	2310      	movs	r3, #16
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	231f      	movs	r3, #31
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a6:	2164      	movs	r1, #100	; 0x64
 80011a8:	2000      	movs	r0, #0
 80011aa:	f001 fa4f 	bl	800264c <Gui_StrCenter>
	}

}
 80011ae:	bf00      	nop
 80011b0:	3768      	adds	r7, #104	; 0x68
 80011b2:	46bd      	mov	sp, r7
 80011b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011b8:	200001fc 	.word	0x200001fc
 80011bc:	66666667 	.word	0x66666667
 80011c0:	0800d9c8 	.word	0x0800d9c8
 80011c4:	2000038c 	.word	0x2000038c
 80011c8:	447a0000 	.word	0x447a0000
 80011cc:	0800da04 	.word	0x0800da04
 80011d0:	20000598 	.word	0x20000598

080011d4 <button_init>:
#include <stdio.h>

unsigned char button_count[8] = {0, 0, 0, 0, 0, 0, 0, 0};
unsigned char spi_button = 0x00;

void button_init(){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	HAL_SPI_Init(&hspi1);
 80011d8:	4804      	ldr	r0, [pc, #16]	; (80011ec <button_init+0x18>)
 80011da:	f006 fcd9 	bl	8007b90 <HAL_SPI_Init>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80011de:	2201      	movs	r2, #1
 80011e0:	2108      	movs	r1, #8
 80011e2:	4803      	ldr	r0, [pc, #12]	; (80011f0 <button_init+0x1c>)
 80011e4:	f004 fa78 	bl	80056d8 <HAL_GPIO_WritePin>
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000430 	.word	0x20000430
 80011f0:	40020c00 	.word	0x40020c00

080011f4 <button_Scan>:

void button_Scan(){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2108      	movs	r1, #8
 80011fe:	482a      	ldr	r0, [pc, #168]	; (80012a8 <button_Scan+0xb4>)
 8001200:	f004 fa6a 	bl	80056d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001204:	2201      	movs	r2, #1
 8001206:	2108      	movs	r1, #8
 8001208:	4827      	ldr	r0, [pc, #156]	; (80012a8 <button_Scan+0xb4>)
 800120a:	f004 fa65 	bl	80056d8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, &spi_button, 1, 1);
 800120e:	2301      	movs	r3, #1
 8001210:	2201      	movs	r2, #1
 8001212:	4926      	ldr	r1, [pc, #152]	; (80012ac <button_Scan+0xb8>)
 8001214:	4826      	ldr	r0, [pc, #152]	; (80012b0 <button_Scan+0xbc>)
 8001216:	f006 fe80 	bl	8007f1a <HAL_SPI_Receive>
	  unsigned char mask = 0x80;
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	71fb      	strb	r3, [r7, #7]
	  for(int i = 0; i < 8; i++){
 800121e:	2300      	movs	r3, #0
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	e038      	b.n	8001296 <button_Scan+0xa2>
		  if(mask > 0x0f){
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	d917      	bls.n	800125a <button_Scan+0x66>
			  if(spi_button & mask) button_count[3-i] = 0;
 800122a:	4b20      	ldr	r3, [pc, #128]	; (80012ac <button_Scan+0xb8>)
 800122c:	781a      	ldrb	r2, [r3, #0]
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	4013      	ands	r3, r2
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d006      	beq.n	8001246 <button_Scan+0x52>
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	f1c3 0303 	rsb	r3, r3, #3
 800123e:	4a1d      	ldr	r2, [pc, #116]	; (80012b4 <button_Scan+0xc0>)
 8001240:	2100      	movs	r1, #0
 8001242:	54d1      	strb	r1, [r2, r3]
 8001244:	e021      	b.n	800128a <button_Scan+0x96>
			  else button_count[3-i]++;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	f1c3 0303 	rsb	r3, r3, #3
 800124c:	4a19      	ldr	r2, [pc, #100]	; (80012b4 <button_Scan+0xc0>)
 800124e:	5cd2      	ldrb	r2, [r2, r3]
 8001250:	3201      	adds	r2, #1
 8001252:	b2d1      	uxtb	r1, r2
 8001254:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <button_Scan+0xc0>)
 8001256:	54d1      	strb	r1, [r2, r3]
 8001258:	e017      	b.n	800128a <button_Scan+0x96>
		  } else {
			  if(spi_button & mask) button_count[i] = 0;
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <button_Scan+0xb8>)
 800125c:	781a      	ldrb	r2, [r3, #0]
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	4013      	ands	r3, r2
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <button_Scan+0x80>
 8001268:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <button_Scan+0xc0>)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	4413      	add	r3, r2
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
 8001272:	e00a      	b.n	800128a <button_Scan+0x96>
			  else button_count[i]++;
 8001274:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <button_Scan+0xc0>)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	4413      	add	r3, r2
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	3301      	adds	r3, #1
 800127e:	b2d9      	uxtb	r1, r3
 8001280:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <button_Scan+0xc0>)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	4413      	add	r3, r2
 8001286:	460a      	mov	r2, r1
 8001288:	701a      	strb	r2, [r3, #0]
		  }
		  mask = mask >> 1;
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	085b      	lsrs	r3, r3, #1
 800128e:	71fb      	strb	r3, [r7, #7]
	  for(int i = 0; i < 8; i++){
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	2b07      	cmp	r3, #7
 800129a:	ddc3      	ble.n	8001224 <button_Scan+0x30>
	  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40020c00 	.word	0x40020c00
 80012ac:	20000208 	.word	0x20000208
 80012b0:	20000430 	.word	0x20000430
 80012b4:	20000200 	.word	0x20000200

080012b8 <button_Test>:

void button_Test(){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++){
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	e016      	b.n	80012f2 <button_Test+0x3a>
		if(button_count[i] > 0){
 80012c4:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <button_Test+0x4c>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00d      	beq.n	80012ec <button_Test+0x34>
			HAL_UART_Transmit(&huart1, (void*)str, sprintf(str, "Button %d pressed.\n", i+1), 100);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3301      	adds	r3, #1
 80012d4:	461a      	mov	r2, r3
 80012d6:	490c      	ldr	r1, [pc, #48]	; (8001308 <button_Test+0x50>)
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <button_Test+0x54>)
 80012da:	f00a f93b 	bl	800b554 <siprintf>
 80012de:	4603      	mov	r3, r0
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	2364      	movs	r3, #100	; 0x64
 80012e4:	4909      	ldr	r1, [pc, #36]	; (800130c <button_Test+0x54>)
 80012e6:	480a      	ldr	r0, [pc, #40]	; (8001310 <button_Test+0x58>)
 80012e8:	f008 fc4d 	bl	8009b86 <HAL_UART_Transmit>
	for(int i = 0; i < 8; i++){
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3301      	adds	r3, #1
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b07      	cmp	r3, #7
 80012f6:	dde5      	ble.n	80012c4 <button_Test+0xc>
		}
	}
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000200 	.word	0x20000200
 8001308:	0800da1c 	.word	0x0800da1c
 800130c:	20000514 	.word	0x20000514
 8001310:	2000038c 	.word	0x2000038c

08001314 <rtc_fsm_get_time>:
	HAL_UART_Transmit(&huart2, &start, 1, 10);
	while(!flag_finish);
	flag_finish = 0;
}

void rtc_fsm_get_time(){
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	switch (status) {
 8001318:	4b45      	ldr	r3, [pc, #276]	; (8001430 <rtc_fsm_get_time+0x11c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b03      	cmp	r3, #3
 800131e:	f200 8082 	bhi.w	8001426 <rtc_fsm_get_time+0x112>
 8001322:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <rtc_fsm_get_time+0x14>)
 8001324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001328:	08001339 	.word	0x08001339
 800132c:	08001349 	.word	0x08001349
 8001330:	08001391 	.word	0x08001391
 8001334:	080013d9 	.word	0x080013d9
		case WAIT_START:
			if(receive_buffer2 == '!') status = GET_HOUR;
 8001338:	4b3e      	ldr	r3, [pc, #248]	; (8001434 <rtc_fsm_get_time+0x120>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b21      	cmp	r3, #33	; 0x21
 800133e:	d174      	bne.n	800142a <rtc_fsm_get_time+0x116>
 8001340:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <rtc_fsm_get_time+0x11c>)
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
			break;
 8001346:	e070      	b.n	800142a <rtc_fsm_get_time+0x116>
		case GET_HOUR:
			if(receive_buffer2 == ':'){
 8001348:	4b3a      	ldr	r3, [pc, #232]	; (8001434 <rtc_fsm_get_time+0x120>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b3a      	cmp	r3, #58	; 0x3a
 800134e:	d10f      	bne.n	8001370 <rtc_fsm_get_time+0x5c>
				tranBuffer[2] = DEC2BCD(value);
 8001350:	4b39      	ldr	r3, [pc, #228]	; (8001438 <rtc_fsm_get_time+0x124>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f002 fe0b 	bl	8003f70 <DEC2BCD>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4b37      	ldr	r3, [pc, #220]	; (800143c <rtc_fsm_get_time+0x128>)
 8001360:	709a      	strb	r2, [r3, #2]
				value = 0;
 8001362:	4b35      	ldr	r3, [pc, #212]	; (8001438 <rtc_fsm_get_time+0x124>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
				status = GET_MINUTE;
 8001368:	4b31      	ldr	r3, [pc, #196]	; (8001430 <rtc_fsm_get_time+0x11c>)
 800136a:	2202      	movs	r2, #2
 800136c:	701a      	strb	r2, [r3, #0]
			} else {
				value = value*10 + receive_buffer2 - '0';
			}
			break;
 800136e:	e05d      	b.n	800142c <rtc_fsm_get_time+0x118>
				value = value*10 + receive_buffer2 - '0';
 8001370:	4b31      	ldr	r3, [pc, #196]	; (8001438 <rtc_fsm_get_time+0x124>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	0092      	lsls	r2, r2, #2
 8001378:	4413      	add	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <rtc_fsm_get_time+0x120>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	b2db      	uxtb	r3, r3
 8001386:	3b30      	subs	r3, #48	; 0x30
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b2b      	ldr	r3, [pc, #172]	; (8001438 <rtc_fsm_get_time+0x124>)
 800138c:	701a      	strb	r2, [r3, #0]
			break;
 800138e:	e04d      	b.n	800142c <rtc_fsm_get_time+0x118>
		case GET_MINUTE:
			if(receive_buffer2 == ':'){
 8001390:	4b28      	ldr	r3, [pc, #160]	; (8001434 <rtc_fsm_get_time+0x120>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b3a      	cmp	r3, #58	; 0x3a
 8001396:	d10f      	bne.n	80013b8 <rtc_fsm_get_time+0xa4>
				tranBuffer[1] = DEC2BCD(value);
 8001398:	4b27      	ldr	r3, [pc, #156]	; (8001438 <rtc_fsm_get_time+0x124>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f002 fde7 	bl	8003f70 <DEC2BCD>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b25      	ldr	r3, [pc, #148]	; (800143c <rtc_fsm_get_time+0x128>)
 80013a8:	705a      	strb	r2, [r3, #1]
				value = 0;
 80013aa:	4b23      	ldr	r3, [pc, #140]	; (8001438 <rtc_fsm_get_time+0x124>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
				status = GET_SECOND;
 80013b0:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <rtc_fsm_get_time+0x11c>)
 80013b2:	2203      	movs	r2, #3
 80013b4:	701a      	strb	r2, [r3, #0]
			} else {
				value = value*10 + receive_buffer2 - '0';
			}
			break;
 80013b6:	e039      	b.n	800142c <rtc_fsm_get_time+0x118>
				value = value*10 + receive_buffer2 - '0';
 80013b8:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <rtc_fsm_get_time+0x124>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <rtc_fsm_get_time+0x120>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	3b30      	subs	r3, #48	; 0x30
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <rtc_fsm_get_time+0x124>)
 80013d4:	701a      	strb	r2, [r3, #0]
			break;
 80013d6:	e029      	b.n	800142c <rtc_fsm_get_time+0x118>
		case GET_SECOND:
			if(receive_buffer2 == '#'){
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <rtc_fsm_get_time+0x120>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b23      	cmp	r3, #35	; 0x23
 80013de:	d112      	bne.n	8001406 <rtc_fsm_get_time+0xf2>
				tranBuffer[0] = DEC2BCD(value);
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <rtc_fsm_get_time+0x124>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f002 fdc3 	bl	8003f70 <DEC2BCD>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <rtc_fsm_get_time+0x128>)
 80013f0:	701a      	strb	r2, [r3, #0]
				value = 0;
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <rtc_fsm_get_time+0x124>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
				flag_finish = 1;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <rtc_fsm_get_time+0x12c>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]
				status = WAIT_START;
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <rtc_fsm_get_time+0x11c>)
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
			} else {
				value = value*10 + receive_buffer2 - '0';
			}
			break;
 8001404:	e012      	b.n	800142c <rtc_fsm_get_time+0x118>
				value = value*10 + receive_buffer2 - '0';
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <rtc_fsm_get_time+0x124>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	4413      	add	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <rtc_fsm_get_time+0x120>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4413      	add	r3, r2
 800141a:	b2db      	uxtb	r3, r3
 800141c:	3b30      	subs	r3, #48	; 0x30
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <rtc_fsm_get_time+0x124>)
 8001422:	701a      	strb	r2, [r3, #0]
			break;
 8001424:	e002      	b.n	800142c <rtc_fsm_get_time+0x118>
		default:
			break;
 8001426:	bf00      	nop
 8001428:	e000      	b.n	800142c <rtc_fsm_get_time+0x118>
			break;
 800142a:	bf00      	nop
	}
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000209 	.word	0x20000209
 8001434:	20000245 	.word	0x20000245
 8001438:	2000020b 	.word	0x2000020b
 800143c:	20000578 	.word	0x20000578
 8001440:	2000020a 	.word	0x2000020a

08001444 <rtc_init>:



void rtc_init(){
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
//	tranBuffer[3] = DEC2BCD(5);
//	tranBuffer[4] = DEC2BCD(3);
//	tranBuffer[5] = DEC2BCD(8);
//	tranBuffer[6] = DEC2BCD(23);
//	HAL_I2C_Mem_Write_IT(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, tranBuffer, 7);
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <rtc_Display7Seg>:

void rtc_Display7Seg(){
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	  led7_SetDigit(DS3231_TimeNow.hours/10, 1);
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <rtc_Display7Seg+0x74>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4a1b      	ldr	r2, [pc, #108]	; (80014cc <rtc_Display7Seg+0x78>)
 800145e:	fba2 2303 	umull	r2, r3, r2, r3
 8001462:	08db      	lsrs	r3, r3, #3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2101      	movs	r1, #1
 8001468:	4618      	mov	r0, r3
 800146a:	f001 fa65 	bl	8002938 <led7_SetDigit>
	  led7_SetDigit(DS3231_TimeNow.hours%10, 2);
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <rtc_Display7Seg+0x74>)
 8001470:	781a      	ldrb	r2, [r3, #0]
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <rtc_Display7Seg+0x78>)
 8001474:	fba3 1302 	umull	r1, r3, r3, r2
 8001478:	08d9      	lsrs	r1, r3, #3
 800147a:	460b      	mov	r3, r1
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2102      	movs	r1, #2
 8001488:	4618      	mov	r0, r3
 800148a:	f001 fa55 	bl	8002938 <led7_SetDigit>
	  led7_SetDigit(DS3231_TimeNow.min/10, 3);
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <rtc_Display7Seg+0x74>)
 8001490:	785b      	ldrb	r3, [r3, #1]
 8001492:	4a0e      	ldr	r2, [pc, #56]	; (80014cc <rtc_Display7Seg+0x78>)
 8001494:	fba2 2303 	umull	r2, r3, r2, r3
 8001498:	08db      	lsrs	r3, r3, #3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2103      	movs	r1, #3
 800149e:	4618      	mov	r0, r3
 80014a0:	f001 fa4a 	bl	8002938 <led7_SetDigit>
	  led7_SetDigit(DS3231_TimeNow.min%10, 4);
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <rtc_Display7Seg+0x74>)
 80014a6:	785a      	ldrb	r2, [r3, #1]
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <rtc_Display7Seg+0x78>)
 80014aa:	fba3 1302 	umull	r1, r3, r3, r2
 80014ae:	08d9      	lsrs	r1, r3, #3
 80014b0:	460b      	mov	r3, r1
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2104      	movs	r1, #4
 80014be:	4618      	mov	r0, r3
 80014c0:	f001 fa3a 	bl	8002938 <led7_SetDigit>
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000590 	.word	0x20000590
 80014cc:	cccccccd 	.word	0xcccccccd

080014d0 <rtc_Read>:

void rtc_Read(){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af02      	add	r7, sp, #8
	read_count = (read_count + 1)%20;
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <rtc_Read+0x4c>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <rtc_Read+0x50>)
 80014de:	fb83 1302 	smull	r1, r3, r3, r2
 80014e2:	10d9      	asrs	r1, r3, #3
 80014e4:	17d3      	asrs	r3, r2, #31
 80014e6:	1ac9      	subs	r1, r1, r3
 80014e8:	460b      	mov	r3, r1
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	1ad1      	subs	r1, r2, r3
 80014f2:	b2ca      	uxtb	r2, r1
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <rtc_Read+0x4c>)
 80014f6:	701a      	strb	r2, [r3, #0]
	if(read_count == 0){
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <rtc_Read+0x4c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d109      	bne.n	8001514 <rtc_Read+0x44>
		HAL_I2C_Mem_Read_IT(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, revBuffer, 7);
 8001500:	2307      	movs	r3, #7
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <rtc_Read+0x54>)
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2301      	movs	r3, #1
 800150a:	2200      	movs	r2, #0
 800150c:	21d0      	movs	r1, #208	; 0xd0
 800150e:	4806      	ldr	r0, [pc, #24]	; (8001528 <rtc_Read+0x58>)
 8001510:	f004 fa5a 	bl	80059c8 <HAL_I2C_Mem_Read_IT>
	}
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000020c 	.word	0x2000020c
 8001520:	66666667 	.word	0x66666667
 8001524:	20000588 	.word	0x20000588
 8001528:	20000250 	.word	0x20000250

0800152c <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	UNUSED(hi2c);
	if (hi2c->Instance == I2C1) {
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a22      	ldr	r2, [pc, #136]	; (80015c4 <HAL_I2C_MemRxCpltCallback+0x98>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d13e      	bne.n	80015bc <HAL_I2C_MemRxCpltCallback+0x90>
		DS3231_TimeNow.sec = BCD2DEC(revBuffer[0]);
 800153e:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <HAL_I2C_MemRxCpltCallback+0x9c>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f002 fcfa 	bl	8003f3c <BCD2DEC>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <HAL_I2C_MemRxCpltCallback+0xa0>)
 800154e:	709a      	strb	r2, [r3, #2]
		DS3231_TimeNow.min = BCD2DEC(revBuffer[1]);
 8001550:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <HAL_I2C_MemRxCpltCallback+0x9c>)
 8001552:	785b      	ldrb	r3, [r3, #1]
 8001554:	4618      	mov	r0, r3
 8001556:	f002 fcf1 	bl	8003f3c <BCD2DEC>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <HAL_I2C_MemRxCpltCallback+0xa0>)
 8001560:	705a      	strb	r2, [r3, #1]
		DS3231_TimeNow.hours = BCD2DEC(revBuffer[2]);
 8001562:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <HAL_I2C_MemRxCpltCallback+0x9c>)
 8001564:	789b      	ldrb	r3, [r3, #2]
 8001566:	4618      	mov	r0, r3
 8001568:	f002 fce8 	bl	8003f3c <BCD2DEC>
 800156c:	4603      	mov	r3, r0
 800156e:	461a      	mov	r2, r3
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <HAL_I2C_MemRxCpltCallback+0xa0>)
 8001572:	701a      	strb	r2, [r3, #0]
		DS3231_TimeNow.day = BCD2DEC(revBuffer[3]);
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <HAL_I2C_MemRxCpltCallback+0x9c>)
 8001576:	78db      	ldrb	r3, [r3, #3]
 8001578:	4618      	mov	r0, r3
 800157a:	f002 fcdf 	bl	8003f3c <BCD2DEC>
 800157e:	4603      	mov	r3, r0
 8001580:	461a      	mov	r2, r3
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_I2C_MemRxCpltCallback+0xa0>)
 8001584:	711a      	strb	r2, [r3, #4]
		DS3231_TimeNow.date = BCD2DEC(revBuffer[4]);
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <HAL_I2C_MemRxCpltCallback+0x9c>)
 8001588:	791b      	ldrb	r3, [r3, #4]
 800158a:	4618      	mov	r0, r3
 800158c:	f002 fcd6 	bl	8003f3c <BCD2DEC>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <HAL_I2C_MemRxCpltCallback+0xa0>)
 8001596:	70da      	strb	r2, [r3, #3]
		DS3231_TimeNow.month = BCD2DEC(revBuffer[5]);
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <HAL_I2C_MemRxCpltCallback+0x9c>)
 800159a:	795b      	ldrb	r3, [r3, #5]
 800159c:	4618      	mov	r0, r3
 800159e:	f002 fccd 	bl	8003f3c <BCD2DEC>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_I2C_MemRxCpltCallback+0xa0>)
 80015a8:	715a      	strb	r2, [r3, #5]
		DS3231_TimeNow.year = BCD2DEC(revBuffer[6]);
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <HAL_I2C_MemRxCpltCallback+0x9c>)
 80015ac:	799b      	ldrb	r3, [r3, #6]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f002 fcc4 	bl	8003f3c <BCD2DEC>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <HAL_I2C_MemRxCpltCallback+0xa0>)
 80015ba:	719a      	strb	r2, [r3, #6]
	}
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40005400 	.word	0x40005400
 80015c8:	20000588 	.word	0x20000588
 80015cc:	20000590 	.word	0x20000590

080015d0 <rtc_GetHour>:

uint8_t rtc_GetHour(){
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
	return DS3231_TimeNow.hours;
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <rtc_GetHour+0x14>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000590 	.word	0x20000590

080015e8 <rtc_GetMin>:

uint8_t rtc_GetMin(){
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
	return DS3231_TimeNow.min;
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <rtc_GetMin+0x14>)
 80015ee:	785b      	ldrb	r3, [r3, #1]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000590 	.word	0x20000590

08001600 <rtc_GetSec>:

uint8_t rtc_GetSec(){
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
	return DS3231_TimeNow.sec;
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <rtc_GetSec+0x14>)
 8001606:	789b      	ldrb	r3, [r3, #2]
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000590 	.word	0x20000590

08001618 <LCD_WR_REG>:
_lcd_dev lcddev;

//Ð´¼Ä´æÆ÷º¯Êý
//regval:¼Ä´æÆ÷Öµ
void LCD_WR_REG(uint16_t reg)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;//Ð´ÈëÒªÐ´µÄ¼Ä´æÆ÷ÐòºÅ
 8001622:	4a04      	ldr	r2, [pc, #16]	; (8001634 <LCD_WR_REG+0x1c>)
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	8013      	strh	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	600ffffe 	.word	0x600ffffe

08001638 <LCD_WR_DATA>:
//Ð´LCDÊý¾Ý
//data:ÒªÐ´ÈëµÄÖµ
void LCD_WR_DATA(uint16_t data)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001642:	4a04      	ldr	r2, [pc, #16]	; (8001654 <LCD_WR_DATA+0x1c>)
 8001644:	88fb      	ldrh	r3, [r7, #6]
 8001646:	8053      	strh	r3, [r2, #2]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	600ffffe 	.word	0x600ffffe

08001658 <LCD_RD_DATA>:
//¶ÁLCDÊý¾Ý
//·µ»ØÖµ:¶Áµ½µÄÖµ
uint16_t LCD_RD_DATA(void)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;			//·ÀÖ¹±»ÓÅ»¯
	ram=LCD->LCD_RAM;
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <LCD_RD_DATA+0x20>)
 8001660:	885b      	ldrh	r3, [r3, #2]
 8001662:	b29b      	uxth	r3, r3
 8001664:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	b29b      	uxth	r3, r3
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	600ffffe 	.word	0x600ffffe

0800167c <LCD_Address_Set>:
      Èë¿ÚÊý¾Ý£ºx1,x2 ÉèÖÃÁÐµÄÆðÊ¼ºÍ½áÊøµØÖ·
                y1,y2 ÉèÖÃÐÐµÄÆðÊ¼ºÍ½áÊøµØÖ·
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void LCD_Address_Set(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4604      	mov	r4, r0
 8001684:	4608      	mov	r0, r1
 8001686:	4611      	mov	r1, r2
 8001688:	461a      	mov	r2, r3
 800168a:	4623      	mov	r3, r4
 800168c:	80fb      	strh	r3, [r7, #6]
 800168e:	4603      	mov	r3, r0
 8001690:	80bb      	strh	r3, [r7, #4]
 8001692:	460b      	mov	r3, r1
 8001694:	807b      	strh	r3, [r7, #2]
 8001696:	4613      	mov	r3, r2
 8001698:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);//ÁÐµØÖ·ÉèÖÃ
 800169a:	202a      	movs	r0, #42	; 0x2a
 800169c:	f7ff ffbc 	bl	8001618 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	0a1b      	lsrs	r3, r3, #8
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ffc6 	bl	8001638 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ffc0 	bl	8001638 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80016b8:	887b      	ldrh	r3, [r7, #2]
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ffba 	bl	8001638 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80016c4:	887b      	ldrh	r3, [r7, #2]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ffb4 	bl	8001638 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);//ÐÐµØÖ·ÉèÖÃ
 80016d0:	202b      	movs	r0, #43	; 0x2b
 80016d2:	f7ff ffa1 	bl	8001618 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80016d6:	88bb      	ldrh	r3, [r7, #4]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ffab 	bl	8001638 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80016e2:	88bb      	ldrh	r3, [r7, #4]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ffa5 	bl	8001638 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80016ee:	883b      	ldrh	r3, [r7, #0]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff9f 	bl	8001638 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80016fa:	883b      	ldrh	r3, [r7, #0]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff99 	bl	8001638 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);//´¢´æÆ÷Ð´
 8001706:	202c      	movs	r0, #44	; 0x2c
 8001708:	f7ff ff86 	bl	8001618 <LCD_WR_REG>
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bd90      	pop	{r4, r7, pc}

08001714 <LCD_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void LCD_Clear(uint16_t color)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	LCD_Address_Set(0,0,lcddev.width-1,lcddev.height-1);//ÉèÖÃÏÔÊ¾·¶Î§
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <LCD_Clear+0x60>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	3b01      	subs	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <LCD_Clear+0x60>)
 8001728:	885b      	ldrh	r3, [r3, #2]
 800172a:	3b01      	subs	r3, #1
 800172c:	b29b      	uxth	r3, r3
 800172e:	2100      	movs	r1, #0
 8001730:	2000      	movs	r0, #0
 8001732:	f7ff ffa3 	bl	800167c <LCD_Address_Set>
	for(i=0;i<lcddev.width;i++)
 8001736:	2300      	movs	r3, #0
 8001738:	81fb      	strh	r3, [r7, #14]
 800173a:	e011      	b.n	8001760 <LCD_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 800173c:	2300      	movs	r3, #0
 800173e:	81bb      	strh	r3, [r7, #12]
 8001740:	e006      	b.n	8001750 <LCD_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001742:	88fb      	ldrh	r3, [r7, #6]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff77 	bl	8001638 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800174a:	89bb      	ldrh	r3, [r7, #12]
 800174c:	3301      	adds	r3, #1
 800174e:	81bb      	strh	r3, [r7, #12]
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <LCD_Clear+0x60>)
 8001752:	885b      	ldrh	r3, [r3, #2]
 8001754:	89ba      	ldrh	r2, [r7, #12]
 8001756:	429a      	cmp	r2, r3
 8001758:	d3f3      	bcc.n	8001742 <LCD_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 800175a:	89fb      	ldrh	r3, [r7, #14]
 800175c:	3301      	adds	r3, #1
 800175e:	81fb      	strh	r3, [r7, #14]
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <LCD_Clear+0x60>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	89fa      	ldrh	r2, [r7, #14]
 8001766:	429a      	cmp	r2, r3
 8001768:	d3e8      	bcc.n	800173c <LCD_Clear+0x28>
		}
	}
}
 800176a:	bf00      	nop
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000598 	.word	0x20000598

08001778 <LCD_Fill>:
                xend,yend   ÖÕÖ¹×ø±ê
								color       ÒªÌî³äµÄÑÕÉ«
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void LCD_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color)
{
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	4604      	mov	r4, r0
 8001780:	4608      	mov	r0, r1
 8001782:	4611      	mov	r1, r2
 8001784:	461a      	mov	r2, r3
 8001786:	4623      	mov	r3, r4
 8001788:	80fb      	strh	r3, [r7, #6]
 800178a:	4603      	mov	r3, r0
 800178c:	80bb      	strh	r3, [r7, #4]
 800178e:	460b      	mov	r3, r1
 8001790:	807b      	strh	r3, [r7, #2]
 8001792:	4613      	mov	r3, r2
 8001794:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	LCD_Address_Set(xsta,ysta,xend-1,yend-1);//ÉèÖÃÏÔÊ¾·¶Î§
 8001796:	887b      	ldrh	r3, [r7, #2]
 8001798:	3b01      	subs	r3, #1
 800179a:	b29a      	uxth	r2, r3
 800179c:	883b      	ldrh	r3, [r7, #0]
 800179e:	3b01      	subs	r3, #1
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	88b9      	ldrh	r1, [r7, #4]
 80017a4:	88f8      	ldrh	r0, [r7, #6]
 80017a6:	f7ff ff69 	bl	800167c <LCD_Address_Set>
	for(i=ysta;i<yend;i++)
 80017aa:	88bb      	ldrh	r3, [r7, #4]
 80017ac:	81fb      	strh	r3, [r7, #14]
 80017ae:	e010      	b.n	80017d2 <LCD_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	81bb      	strh	r3, [r7, #12]
 80017b4:	e006      	b.n	80017c4 <LCD_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 80017b6:	8c3b      	ldrh	r3, [r7, #32]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff3d 	bl	8001638 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 80017be:	89bb      	ldrh	r3, [r7, #12]
 80017c0:	3301      	adds	r3, #1
 80017c2:	81bb      	strh	r3, [r7, #12]
 80017c4:	89ba      	ldrh	r2, [r7, #12]
 80017c6:	887b      	ldrh	r3, [r7, #2]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d3f4      	bcc.n	80017b6 <LCD_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 80017cc:	89fb      	ldrh	r3, [r7, #14]
 80017ce:	3301      	adds	r3, #1
 80017d0:	81fb      	strh	r3, [r7, #14]
 80017d2:	89fa      	ldrh	r2, [r7, #14]
 80017d4:	883b      	ldrh	r3, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d3ea      	bcc.n	80017b0 <LCD_Fill+0x38>
		}
	}
}
 80017da:	bf00      	nop
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd90      	pop	{r4, r7, pc}

080017e4 <LCD_DrawPoint>:
      Èë¿ÚÊý¾Ý£ºx,y »­µã×ø±ê
                color µãµÄÑÕÉ«
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void LCD_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
 80017ee:	460b      	mov	r3, r1
 80017f0:	80bb      	strh	r3, [r7, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	807b      	strh	r3, [r7, #2]
	LCD_Address_Set(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80017f6:	88bb      	ldrh	r3, [r7, #4]
 80017f8:	88fa      	ldrh	r2, [r7, #6]
 80017fa:	88b9      	ldrh	r1, [r7, #4]
 80017fc:	88f8      	ldrh	r0, [r7, #6]
 80017fe:	f7ff ff3d 	bl	800167c <LCD_Address_Set>
	LCD_WR_DATA(color);
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff17 	bl	8001638 <LCD_WR_DATA>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <LCD_ShowChinese12x12>:
                sizey ×ÖºÅ
                mode:  0·Çµþ¼ÓÄ£Ê½  1µþ¼ÓÄ£Ê½
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void LCD_ShowChinese12x12(uint16_t x,uint16_t y,uint8_t *s,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b089      	sub	sp, #36	; 0x24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60ba      	str	r2, [r7, #8]
 800181c:	461a      	mov	r2, r3
 800181e:	4603      	mov	r3, r0
 8001820:	81fb      	strh	r3, [r7, #14]
 8001822:	460b      	mov	r3, r1
 8001824:	81bb      	strh	r3, [r7, #12]
 8001826:	4613      	mov	r3, r2
 8001828:	80fb      	strh	r3, [r7, #6]
	uint8_t i,j,m=0;
 800182a:	2300      	movs	r3, #0
 800182c:	777b      	strb	r3, [r7, #29]
	uint16_t k;
	uint16_t HZnum;//ºº×ÖÊýÄ¿
	uint16_t TypefaceNum;//Ò»¸ö×Ö·ûËùÕ¼×Ö½Ú´óÐ¡
	uint16_t x0=x;
 800182e:	89fb      	ldrh	r3, [r7, #14]
 8001830:	833b      	strh	r3, [r7, #24]
	TypefaceNum=(sizey/8+((sizey%8)?1:0))*sizey;
 8001832:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001836:	08db      	lsrs	r3, r3, #3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	461a      	mov	r2, r3
 800183c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	bf14      	ite	ne
 800184a:	2301      	movne	r3, #1
 800184c:	2300      	moveq	r3, #0
 800184e:	b2db      	uxtb	r3, r3
 8001850:	4413      	add	r3, r2
 8001852:	b29a      	uxth	r2, r3
 8001854:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001858:	b29b      	uxth	r3, r3
 800185a:	fb12 f303 	smulbb	r3, r2, r3
 800185e:	82fb      	strh	r3, [r7, #22]

	HZnum=sizeof(tfont12)/sizeof(typFNT_GB12);	//Í³¼Æºº×ÖÊýÄ¿
 8001860:	2305      	movs	r3, #5
 8001862:	82bb      	strh	r3, [r7, #20]
	for(k=0;k<HZnum;k++)
 8001864:	2300      	movs	r3, #0
 8001866:	837b      	strh	r3, [r7, #26]
 8001868:	e09d      	b.n	80019a6 <LCD_ShowChinese12x12+0x192>
	{
		if((tfont12[k].Index[0]==*(s))&&(tfont12[k].Index[1]==*(s+1)))
 800186a:	8b7b      	ldrh	r3, [r7, #26]
 800186c:	4a53      	ldr	r2, [pc, #332]	; (80019bc <LCD_ShowChinese12x12+0x1a8>)
 800186e:	211a      	movs	r1, #26
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	4413      	add	r3, r2
 8001876:	781a      	ldrb	r2, [r3, #0]
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	f040 808f 	bne.w	80019a0 <LCD_ShowChinese12x12+0x18c>
 8001882:	8b7b      	ldrh	r3, [r7, #26]
 8001884:	4a4d      	ldr	r2, [pc, #308]	; (80019bc <LCD_ShowChinese12x12+0x1a8>)
 8001886:	211a      	movs	r1, #26
 8001888:	fb01 f303 	mul.w	r3, r1, r3
 800188c:	4413      	add	r3, r2
 800188e:	3301      	adds	r3, #1
 8001890:	781a      	ldrb	r2, [r3, #0]
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	3301      	adds	r3, #1
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	f040 8081 	bne.w	80019a0 <LCD_ShowChinese12x12+0x18c>
		{
			LCD_Address_Set(x,y,x+sizey-1,y+sizey-1);
 800189e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	89fb      	ldrh	r3, [r7, #14]
 80018a6:	4413      	add	r3, r2
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	3b01      	subs	r3, #1
 80018ac:	b29c      	uxth	r4, r3
 80018ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	89bb      	ldrh	r3, [r7, #12]
 80018b6:	4413      	add	r3, r2
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	3b01      	subs	r3, #1
 80018bc:	b29b      	uxth	r3, r3
 80018be:	89b9      	ldrh	r1, [r7, #12]
 80018c0:	89f8      	ldrh	r0, [r7, #14]
 80018c2:	4622      	mov	r2, r4
 80018c4:	f7ff feda 	bl	800167c <LCD_Address_Set>
			for(i=0;i<TypefaceNum;i++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	77fb      	strb	r3, [r7, #31]
 80018cc:	e063      	b.n	8001996 <LCD_ShowChinese12x12+0x182>
			{
				for(j=0;j<8;j++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	77bb      	strb	r3, [r7, #30]
 80018d2:	e05a      	b.n	800198a <LCD_ShowChinese12x12+0x176>
				{
					if(!mode)//·Çµþ¼Ó·½Ê½
 80018d4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d12b      	bne.n	8001934 <LCD_ShowChinese12x12+0x120>
					{
						if(tfont12[k].Msk[i]&(0x01<<j))LCD_WR_DATA(fc);
 80018dc:	8b7a      	ldrh	r2, [r7, #26]
 80018de:	7ffb      	ldrb	r3, [r7, #31]
 80018e0:	4936      	ldr	r1, [pc, #216]	; (80019bc <LCD_ShowChinese12x12+0x1a8>)
 80018e2:	201a      	movs	r0, #26
 80018e4:	fb00 f202 	mul.w	r2, r0, r2
 80018e8:	440a      	add	r2, r1
 80018ea:	4413      	add	r3, r2
 80018ec:	3302      	adds	r3, #2
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	7fbb      	ldrb	r3, [r7, #30]
 80018f4:	fa42 f303 	asr.w	r3, r2, r3
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d004      	beq.n	800190a <LCD_ShowChinese12x12+0xf6>
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fe98 	bl	8001638 <LCD_WR_DATA>
 8001908:	e003      	b.n	8001912 <LCD_ShowChinese12x12+0xfe>
						else LCD_WR_DATA(bc);
 800190a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fe93 	bl	8001638 <LCD_WR_DATA>
						m++;
 8001912:	7f7b      	ldrb	r3, [r7, #29]
 8001914:	3301      	adds	r3, #1
 8001916:	777b      	strb	r3, [r7, #29]
						if(m%sizey==0)
 8001918:	7f7b      	ldrb	r3, [r7, #29]
 800191a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800191e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001922:	fb02 f201 	mul.w	r2, r2, r1
 8001926:	1a9b      	subs	r3, r3, r2
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d12a      	bne.n	8001984 <LCD_ShowChinese12x12+0x170>
						{
							m=0;
 800192e:	2300      	movs	r3, #0
 8001930:	777b      	strb	r3, [r7, #29]
							break;
 8001932:	e02d      	b.n	8001990 <LCD_ShowChinese12x12+0x17c>
						}
					}
					else//µþ¼Ó·½Ê½
					{
						if(tfont12[k].Msk[i]&(0x01<<j))	LCD_DrawPoint(x,y,fc);//»­Ò»¸öµã
 8001934:	8b7a      	ldrh	r2, [r7, #26]
 8001936:	7ffb      	ldrb	r3, [r7, #31]
 8001938:	4920      	ldr	r1, [pc, #128]	; (80019bc <LCD_ShowChinese12x12+0x1a8>)
 800193a:	201a      	movs	r0, #26
 800193c:	fb00 f202 	mul.w	r2, r0, r2
 8001940:	440a      	add	r2, r1
 8001942:	4413      	add	r3, r2
 8001944:	3302      	adds	r3, #2
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	7fbb      	ldrb	r3, [r7, #30]
 800194c:	fa42 f303 	asr.w	r3, r2, r3
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <LCD_ShowChinese12x12+0x150>
 8001958:	88fa      	ldrh	r2, [r7, #6]
 800195a:	89b9      	ldrh	r1, [r7, #12]
 800195c:	89fb      	ldrh	r3, [r7, #14]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff40 	bl	80017e4 <LCD_DrawPoint>
						x++;
 8001964:	89fb      	ldrh	r3, [r7, #14]
 8001966:	3301      	adds	r3, #1
 8001968:	81fb      	strh	r3, [r7, #14]
						if((x-x0)==sizey)
 800196a:	89fa      	ldrh	r2, [r7, #14]
 800196c:	8b3b      	ldrh	r3, [r7, #24]
 800196e:	1ad2      	subs	r2, r2, r3
 8001970:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001974:	429a      	cmp	r2, r3
 8001976:	d105      	bne.n	8001984 <LCD_ShowChinese12x12+0x170>
						{
							x=x0;
 8001978:	8b3b      	ldrh	r3, [r7, #24]
 800197a:	81fb      	strh	r3, [r7, #14]
							y++;
 800197c:	89bb      	ldrh	r3, [r7, #12]
 800197e:	3301      	adds	r3, #1
 8001980:	81bb      	strh	r3, [r7, #12]
							break;
 8001982:	e005      	b.n	8001990 <LCD_ShowChinese12x12+0x17c>
				for(j=0;j<8;j++)
 8001984:	7fbb      	ldrb	r3, [r7, #30]
 8001986:	3301      	adds	r3, #1
 8001988:	77bb      	strb	r3, [r7, #30]
 800198a:	7fbb      	ldrb	r3, [r7, #30]
 800198c:	2b07      	cmp	r3, #7
 800198e:	d9a1      	bls.n	80018d4 <LCD_ShowChinese12x12+0xc0>
			for(i=0;i<TypefaceNum;i++)
 8001990:	7ffb      	ldrb	r3, [r7, #31]
 8001992:	3301      	adds	r3, #1
 8001994:	77fb      	strb	r3, [r7, #31]
 8001996:	7ffb      	ldrb	r3, [r7, #31]
 8001998:	b29b      	uxth	r3, r3
 800199a:	8afa      	ldrh	r2, [r7, #22]
 800199c:	429a      	cmp	r2, r3
 800199e:	d896      	bhi.n	80018ce <LCD_ShowChinese12x12+0xba>
	for(k=0;k<HZnum;k++)
 80019a0:	8b7b      	ldrh	r3, [r7, #26]
 80019a2:	3301      	adds	r3, #1
 80019a4:	837b      	strh	r3, [r7, #26]
 80019a6:	8b7a      	ldrh	r2, [r7, #26]
 80019a8:	8abb      	ldrh	r3, [r7, #20]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	f4ff af5d 	bcc.w	800186a <LCD_ShowChinese12x12+0x56>
				}
			}
		}
		continue;  //²éÕÒµ½¶ÔÓ¦µãÕó×Ö¿âÁ¢¼´ÍË³ö£¬·ÀÖ¹¶à¸öºº×ÖÖØ¸´È¡Ä£´øÀ´Ó°Ïì
	}
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3724      	adds	r7, #36	; 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd90      	pop	{r4, r7, pc}
 80019ba:	bf00      	nop
 80019bc:	08010e78 	.word	0x08010e78

080019c0 <LCD_ShowChinese16x16>:
                sizey ×ÖºÅ
                mode:  0·Çµþ¼ÓÄ£Ê½  1µþ¼ÓÄ£Ê½
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void LCD_ShowChinese16x16(uint16_t x,uint16_t y,uint8_t *s,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60ba      	str	r2, [r7, #8]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4603      	mov	r3, r0
 80019cc:	81fb      	strh	r3, [r7, #14]
 80019ce:	460b      	mov	r3, r1
 80019d0:	81bb      	strh	r3, [r7, #12]
 80019d2:	4613      	mov	r3, r2
 80019d4:	80fb      	strh	r3, [r7, #6]
	uint8_t i,j,m=0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	777b      	strb	r3, [r7, #29]
	uint16_t k;
	uint16_t HZnum;//ºº×ÖÊýÄ¿
	uint16_t TypefaceNum;//Ò»¸ö×Ö·ûËùÕ¼×Ö½Ú´óÐ¡
	uint16_t x0=x;
 80019da:	89fb      	ldrh	r3, [r7, #14]
 80019dc:	833b      	strh	r3, [r7, #24]
  TypefaceNum=(sizey/8+((sizey%8)?1:0))*sizey;
 80019de:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80019e2:	08db      	lsrs	r3, r3, #3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	461a      	mov	r2, r3
 80019e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	bf14      	ite	ne
 80019f6:	2301      	movne	r3, #1
 80019f8:	2300      	moveq	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	fb12 f303 	smulbb	r3, r2, r3
 8001a0a:	82fb      	strh	r3, [r7, #22]
	HZnum=sizeof(tfont16)/sizeof(typFNT_GB16);	//Í³¼Æºº×ÖÊýÄ¿
 8001a0c:	232b      	movs	r3, #43	; 0x2b
 8001a0e:	82bb      	strh	r3, [r7, #20]
	for(k=0;k<HZnum;k++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	837b      	strh	r3, [r7, #26]
 8001a14:	e0a1      	b.n	8001b5a <LCD_ShowChinese16x16+0x19a>
	{
		if ((tfont16[k].Index[0]==*(s))&&(tfont16[k].Index[1]==*(s+1)))
 8001a16:	8b7a      	ldrh	r2, [r7, #26]
 8001a18:	4955      	ldr	r1, [pc, #340]	; (8001b70 <LCD_ShowChinese16x16+0x1b0>)
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	4413      	add	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	440b      	add	r3, r1
 8001a24:	781a      	ldrb	r2, [r3, #0]
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	f040 8092 	bne.w	8001b54 <LCD_ShowChinese16x16+0x194>
 8001a30:	8b7a      	ldrh	r2, [r7, #26]
 8001a32:	494f      	ldr	r1, [pc, #316]	; (8001b70 <LCD_ShowChinese16x16+0x1b0>)
 8001a34:	4613      	mov	r3, r2
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	4413      	add	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3301      	adds	r3, #1
 8001a40:	781a      	ldrb	r2, [r3, #0]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	3301      	adds	r3, #1
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	f040 8083 	bne.w	8001b54 <LCD_ShowChinese16x16+0x194>
		{
			LCD_Address_Set(x,y,x+sizey-1,y+sizey-1);
 8001a4e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	89fb      	ldrh	r3, [r7, #14]
 8001a56:	4413      	add	r3, r2
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29c      	uxth	r4, r3
 8001a5e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	89bb      	ldrh	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	89b9      	ldrh	r1, [r7, #12]
 8001a70:	89f8      	ldrh	r0, [r7, #14]
 8001a72:	4622      	mov	r2, r4
 8001a74:	f7ff fe02 	bl	800167c <LCD_Address_Set>
			for(i=0;i<TypefaceNum;i++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	77fb      	strb	r3, [r7, #31]
 8001a7c:	e065      	b.n	8001b4a <LCD_ShowChinese16x16+0x18a>
			{
				for(j=0;j<8;j++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	77bb      	strb	r3, [r7, #30]
 8001a82:	e05c      	b.n	8001b3e <LCD_ShowChinese16x16+0x17e>
				{
					if(!mode)//·Çµþ¼Ó·½Ê½
 8001a84:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d12c      	bne.n	8001ae6 <LCD_ShowChinese16x16+0x126>
					{
						if(tfont16[k].Msk[i]&(0x01<<j))LCD_WR_DATA(fc);
 8001a8c:	8b7a      	ldrh	r2, [r7, #26]
 8001a8e:	7ff9      	ldrb	r1, [r7, #31]
 8001a90:	4837      	ldr	r0, [pc, #220]	; (8001b70 <LCD_ShowChinese16x16+0x1b0>)
 8001a92:	4613      	mov	r3, r2
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	4413      	add	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4403      	add	r3, r0
 8001a9c:	440b      	add	r3, r1
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	7fbb      	ldrb	r3, [r7, #30]
 8001aa6:	fa42 f303 	asr.w	r3, r2, r3
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <LCD_ShowChinese16x16+0xfc>
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fdbf 	bl	8001638 <LCD_WR_DATA>
 8001aba:	e003      	b.n	8001ac4 <LCD_ShowChinese16x16+0x104>
						else LCD_WR_DATA(bc);
 8001abc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fdba 	bl	8001638 <LCD_WR_DATA>
						m++;
 8001ac4:	7f7b      	ldrb	r3, [r7, #29]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	777b      	strb	r3, [r7, #29]
						if(m%sizey==0)
 8001aca:	7f7b      	ldrb	r3, [r7, #29]
 8001acc:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001ad0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ad4:	fb02 f201 	mul.w	r2, r2, r1
 8001ad8:	1a9b      	subs	r3, r3, r2
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d12b      	bne.n	8001b38 <LCD_ShowChinese16x16+0x178>
						{
							m=0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	777b      	strb	r3, [r7, #29]
							break;
 8001ae4:	e02e      	b.n	8001b44 <LCD_ShowChinese16x16+0x184>
						}
					}
					else//µþ¼Ó·½Ê½
					{
						if(tfont16[k].Msk[i]&(0x01<<j))	LCD_DrawPoint(x,y,fc);//»­Ò»¸öµã
 8001ae6:	8b7a      	ldrh	r2, [r7, #26]
 8001ae8:	7ff9      	ldrb	r1, [r7, #31]
 8001aea:	4821      	ldr	r0, [pc, #132]	; (8001b70 <LCD_ShowChinese16x16+0x1b0>)
 8001aec:	4613      	mov	r3, r2
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	4413      	add	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4403      	add	r3, r0
 8001af6:	440b      	add	r3, r1
 8001af8:	3302      	adds	r3, #2
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	7fbb      	ldrb	r3, [r7, #30]
 8001b00:	fa42 f303 	asr.w	r3, r2, r3
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <LCD_ShowChinese16x16+0x158>
 8001b0c:	88fa      	ldrh	r2, [r7, #6]
 8001b0e:	89b9      	ldrh	r1, [r7, #12]
 8001b10:	89fb      	ldrh	r3, [r7, #14]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fe66 	bl	80017e4 <LCD_DrawPoint>
						x++;
 8001b18:	89fb      	ldrh	r3, [r7, #14]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	81fb      	strh	r3, [r7, #14]
						if((x-x0)==sizey)
 8001b1e:	89fa      	ldrh	r2, [r7, #14]
 8001b20:	8b3b      	ldrh	r3, [r7, #24]
 8001b22:	1ad2      	subs	r2, r2, r3
 8001b24:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d105      	bne.n	8001b38 <LCD_ShowChinese16x16+0x178>
						{
							x=x0;
 8001b2c:	8b3b      	ldrh	r3, [r7, #24]
 8001b2e:	81fb      	strh	r3, [r7, #14]
							y++;
 8001b30:	89bb      	ldrh	r3, [r7, #12]
 8001b32:	3301      	adds	r3, #1
 8001b34:	81bb      	strh	r3, [r7, #12]
							break;
 8001b36:	e005      	b.n	8001b44 <LCD_ShowChinese16x16+0x184>
				for(j=0;j<8;j++)
 8001b38:	7fbb      	ldrb	r3, [r7, #30]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	77bb      	strb	r3, [r7, #30]
 8001b3e:	7fbb      	ldrb	r3, [r7, #30]
 8001b40:	2b07      	cmp	r3, #7
 8001b42:	d99f      	bls.n	8001a84 <LCD_ShowChinese16x16+0xc4>
			for(i=0;i<TypefaceNum;i++)
 8001b44:	7ffb      	ldrb	r3, [r7, #31]
 8001b46:	3301      	adds	r3, #1
 8001b48:	77fb      	strb	r3, [r7, #31]
 8001b4a:	7ffb      	ldrb	r3, [r7, #31]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	8afa      	ldrh	r2, [r7, #22]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d894      	bhi.n	8001a7e <LCD_ShowChinese16x16+0xbe>
	for(k=0;k<HZnum;k++)
 8001b54:	8b7b      	ldrh	r3, [r7, #26]
 8001b56:	3301      	adds	r3, #1
 8001b58:	837b      	strh	r3, [r7, #26]
 8001b5a:	8b7a      	ldrh	r2, [r7, #26]
 8001b5c:	8abb      	ldrh	r3, [r7, #20]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	f4ff af59 	bcc.w	8001a16 <LCD_ShowChinese16x16+0x56>
				}
			}
		}
		continue;  //²éÕÒµ½¶ÔÓ¦µãÕó×Ö¿âÁ¢¼´ÍË³ö£¬·ÀÖ¹¶à¸öºº×ÖÖØ¸´È¡Ä£´øÀ´Ó°Ïì
	}
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3724      	adds	r7, #36	; 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd90      	pop	{r4, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	08010efc 	.word	0x08010efc

08001b74 <LCD_ShowChinese24x24>:
                sizey ×ÖºÅ
                mode:  0·Çµþ¼ÓÄ£Ê½  1µþ¼ÓÄ£Ê½
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void LCD_ShowChinese24x24(uint16_t x,uint16_t y,uint8_t *s,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60ba      	str	r2, [r7, #8]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4603      	mov	r3, r0
 8001b80:	81fb      	strh	r3, [r7, #14]
 8001b82:	460b      	mov	r3, r1
 8001b84:	81bb      	strh	r3, [r7, #12]
 8001b86:	4613      	mov	r3, r2
 8001b88:	80fb      	strh	r3, [r7, #6]
	uint8_t i,j,m=0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	777b      	strb	r3, [r7, #29]
	uint16_t k;
	uint16_t HZnum;//ºº×ÖÊýÄ¿
	uint16_t TypefaceNum;//Ò»¸ö×Ö·ûËùÕ¼×Ö½Ú´óÐ¡
	uint16_t x0=x;
 8001b8e:	89fb      	ldrh	r3, [r7, #14]
 8001b90:	833b      	strh	r3, [r7, #24]
	TypefaceNum=(sizey/8+((sizey%8)?1:0))*sizey;
 8001b92:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001b96:	08db      	lsrs	r3, r3, #3
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	bf14      	ite	ne
 8001baa:	2301      	movne	r3, #1
 8001bac:	2300      	moveq	r3, #0
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	fb12 f303 	smulbb	r3, r2, r3
 8001bbe:	82fb      	strh	r3, [r7, #22]
	HZnum=sizeof(tfont24)/sizeof(typFNT_GB24);	//Í³¼Æºº×ÖÊýÄ¿
 8001bc0:	2305      	movs	r3, #5
 8001bc2:	82bb      	strh	r3, [r7, #20]
	for(k=0;k<HZnum;k++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	837b      	strh	r3, [r7, #26]
 8001bc8:	e09d      	b.n	8001d06 <LCD_ShowChinese24x24+0x192>
	{
		if ((tfont24[k].Index[0]==*(s))&&(tfont24[k].Index[1]==*(s+1)))
 8001bca:	8b7b      	ldrh	r3, [r7, #26]
 8001bcc:	4a53      	ldr	r2, [pc, #332]	; (8001d1c <LCD_ShowChinese24x24+0x1a8>)
 8001bce:	214a      	movs	r1, #74	; 0x4a
 8001bd0:	fb01 f303 	mul.w	r3, r1, r3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	781a      	ldrb	r2, [r3, #0]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	f040 808f 	bne.w	8001d00 <LCD_ShowChinese24x24+0x18c>
 8001be2:	8b7b      	ldrh	r3, [r7, #26]
 8001be4:	4a4d      	ldr	r2, [pc, #308]	; (8001d1c <LCD_ShowChinese24x24+0x1a8>)
 8001be6:	214a      	movs	r1, #74	; 0x4a
 8001be8:	fb01 f303 	mul.w	r3, r1, r3
 8001bec:	4413      	add	r3, r2
 8001bee:	3301      	adds	r3, #1
 8001bf0:	781a      	ldrb	r2, [r3, #0]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	f040 8081 	bne.w	8001d00 <LCD_ShowChinese24x24+0x18c>
		{
			LCD_Address_Set(x,y,x+sizey-1,y+sizey-1);
 8001bfe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	89fb      	ldrh	r3, [r7, #14]
 8001c06:	4413      	add	r3, r2
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b29c      	uxth	r4, r3
 8001c0e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	89bb      	ldrh	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	89b9      	ldrh	r1, [r7, #12]
 8001c20:	89f8      	ldrh	r0, [r7, #14]
 8001c22:	4622      	mov	r2, r4
 8001c24:	f7ff fd2a 	bl	800167c <LCD_Address_Set>
			for(i=0;i<TypefaceNum;i++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	77fb      	strb	r3, [r7, #31]
 8001c2c:	e063      	b.n	8001cf6 <LCD_ShowChinese24x24+0x182>
			{
				for(j=0;j<8;j++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	77bb      	strb	r3, [r7, #30]
 8001c32:	e05a      	b.n	8001cea <LCD_ShowChinese24x24+0x176>
				{
					if(!mode)//·Çµþ¼Ó·½Ê½
 8001c34:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d12b      	bne.n	8001c94 <LCD_ShowChinese24x24+0x120>
					{
						if(tfont24[k].Msk[i]&(0x01<<j))LCD_WR_DATA(fc);
 8001c3c:	8b7a      	ldrh	r2, [r7, #26]
 8001c3e:	7ffb      	ldrb	r3, [r7, #31]
 8001c40:	4936      	ldr	r1, [pc, #216]	; (8001d1c <LCD_ShowChinese24x24+0x1a8>)
 8001c42:	204a      	movs	r0, #74	; 0x4a
 8001c44:	fb00 f202 	mul.w	r2, r0, r2
 8001c48:	440a      	add	r2, r1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	7fbb      	ldrb	r3, [r7, #30]
 8001c54:	fa42 f303 	asr.w	r3, r2, r3
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d004      	beq.n	8001c6a <LCD_ShowChinese24x24+0xf6>
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fce8 	bl	8001638 <LCD_WR_DATA>
 8001c68:	e003      	b.n	8001c72 <LCD_ShowChinese24x24+0xfe>
						else LCD_WR_DATA(bc);
 8001c6a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fce3 	bl	8001638 <LCD_WR_DATA>
						m++;
 8001c72:	7f7b      	ldrb	r3, [r7, #29]
 8001c74:	3301      	adds	r3, #1
 8001c76:	777b      	strb	r3, [r7, #29]
						if(m%sizey==0)
 8001c78:	7f7b      	ldrb	r3, [r7, #29]
 8001c7a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001c7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c82:	fb02 f201 	mul.w	r2, r2, r1
 8001c86:	1a9b      	subs	r3, r3, r2
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d12a      	bne.n	8001ce4 <LCD_ShowChinese24x24+0x170>
						{
							m=0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	777b      	strb	r3, [r7, #29]
							break;
 8001c92:	e02d      	b.n	8001cf0 <LCD_ShowChinese24x24+0x17c>
						}
					}
					else//µþ¼Ó·½Ê½
					{
						if(tfont24[k].Msk[i]&(0x01<<j))	LCD_DrawPoint(x,y,fc);//»­Ò»¸öµã
 8001c94:	8b7a      	ldrh	r2, [r7, #26]
 8001c96:	7ffb      	ldrb	r3, [r7, #31]
 8001c98:	4920      	ldr	r1, [pc, #128]	; (8001d1c <LCD_ShowChinese24x24+0x1a8>)
 8001c9a:	204a      	movs	r0, #74	; 0x4a
 8001c9c:	fb00 f202 	mul.w	r2, r0, r2
 8001ca0:	440a      	add	r2, r1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	7fbb      	ldrb	r3, [r7, #30]
 8001cac:	fa42 f303 	asr.w	r3, r2, r3
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <LCD_ShowChinese24x24+0x150>
 8001cb8:	88fa      	ldrh	r2, [r7, #6]
 8001cba:	89b9      	ldrh	r1, [r7, #12]
 8001cbc:	89fb      	ldrh	r3, [r7, #14]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fd90 	bl	80017e4 <LCD_DrawPoint>
						x++;
 8001cc4:	89fb      	ldrh	r3, [r7, #14]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	81fb      	strh	r3, [r7, #14]
						if((x-x0)==sizey)
 8001cca:	89fa      	ldrh	r2, [r7, #14]
 8001ccc:	8b3b      	ldrh	r3, [r7, #24]
 8001cce:	1ad2      	subs	r2, r2, r3
 8001cd0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d105      	bne.n	8001ce4 <LCD_ShowChinese24x24+0x170>
						{
							x=x0;
 8001cd8:	8b3b      	ldrh	r3, [r7, #24]
 8001cda:	81fb      	strh	r3, [r7, #14]
							y++;
 8001cdc:	89bb      	ldrh	r3, [r7, #12]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	81bb      	strh	r3, [r7, #12]
							break;
 8001ce2:	e005      	b.n	8001cf0 <LCD_ShowChinese24x24+0x17c>
				for(j=0;j<8;j++)
 8001ce4:	7fbb      	ldrb	r3, [r7, #30]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	77bb      	strb	r3, [r7, #30]
 8001cea:	7fbb      	ldrb	r3, [r7, #30]
 8001cec:	2b07      	cmp	r3, #7
 8001cee:	d9a1      	bls.n	8001c34 <LCD_ShowChinese24x24+0xc0>
			for(i=0;i<TypefaceNum;i++)
 8001cf0:	7ffb      	ldrb	r3, [r7, #31]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	77fb      	strb	r3, [r7, #31]
 8001cf6:	7ffb      	ldrb	r3, [r7, #31]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	8afa      	ldrh	r2, [r7, #22]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d896      	bhi.n	8001c2e <LCD_ShowChinese24x24+0xba>
	for(k=0;k<HZnum;k++)
 8001d00:	8b7b      	ldrh	r3, [r7, #26]
 8001d02:	3301      	adds	r3, #1
 8001d04:	837b      	strh	r3, [r7, #26]
 8001d06:	8b7a      	ldrh	r2, [r7, #26]
 8001d08:	8abb      	ldrh	r3, [r7, #20]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	f4ff af5d 	bcc.w	8001bca <LCD_ShowChinese24x24+0x56>
				}
			}
		}
		continue;  //²éÕÒµ½¶ÔÓ¦µãÕó×Ö¿âÁ¢¼´ÍË³ö£¬·ÀÖ¹¶à¸öºº×ÖÖØ¸´È¡Ä£´øÀ´Ó°Ïì
	}
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd90      	pop	{r4, r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	080114b4 	.word	0x080114b4

08001d20 <LCD_ShowChinese32x32>:
                sizey ×ÖºÅ
                mode:  0·Çµþ¼ÓÄ£Ê½  1µþ¼ÓÄ£Ê½
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void LCD_ShowChinese32x32(uint16_t x,uint16_t y,uint8_t *s,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60ba      	str	r2, [r7, #8]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	81fb      	strh	r3, [r7, #14]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	81bb      	strh	r3, [r7, #12]
 8001d32:	4613      	mov	r3, r2
 8001d34:	80fb      	strh	r3, [r7, #6]
	uint8_t i,j,m=0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	777b      	strb	r3, [r7, #29]
	uint16_t k;
	uint16_t HZnum;//ºº×ÖÊýÄ¿
	uint16_t TypefaceNum;//Ò»¸ö×Ö·ûËùÕ¼×Ö½Ú´óÐ¡
	uint16_t x0=x;
 8001d3a:	89fb      	ldrh	r3, [r7, #14]
 8001d3c:	833b      	strh	r3, [r7, #24]
	TypefaceNum=(sizey/8+((sizey%8)?1:0))*sizey;
 8001d3e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001d42:	08db      	lsrs	r3, r3, #3
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	bf14      	ite	ne
 8001d56:	2301      	movne	r3, #1
 8001d58:	2300      	moveq	r3, #0
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	fb12 f303 	smulbb	r3, r2, r3
 8001d6a:	82fb      	strh	r3, [r7, #22]
	HZnum=sizeof(tfont32)/sizeof(typFNT_GB32);	//Í³¼Æºº×ÖÊýÄ¿
 8001d6c:	2305      	movs	r3, #5
 8001d6e:	82bb      	strh	r3, [r7, #20]
	for(k=0;k<HZnum;k++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	837b      	strh	r3, [r7, #26]
 8001d74:	e0a1      	b.n	8001eba <LCD_ShowChinese32x32+0x19a>
	{
		if ((tfont32[k].Index[0]==*(s))&&(tfont32[k].Index[1]==*(s+1)))
 8001d76:	8b7a      	ldrh	r2, [r7, #26]
 8001d78:	4955      	ldr	r1, [pc, #340]	; (8001ed0 <LCD_ShowChinese32x32+0x1b0>)
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	019b      	lsls	r3, r3, #6
 8001d7e:	4413      	add	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	440b      	add	r3, r1
 8001d84:	781a      	ldrb	r2, [r3, #0]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	f040 8092 	bne.w	8001eb4 <LCD_ShowChinese32x32+0x194>
 8001d90:	8b7a      	ldrh	r2, [r7, #26]
 8001d92:	494f      	ldr	r1, [pc, #316]	; (8001ed0 <LCD_ShowChinese32x32+0x1b0>)
 8001d94:	4613      	mov	r3, r2
 8001d96:	019b      	lsls	r3, r3, #6
 8001d98:	4413      	add	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	440b      	add	r3, r1
 8001d9e:	3301      	adds	r3, #1
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	3301      	adds	r3, #1
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	f040 8083 	bne.w	8001eb4 <LCD_ShowChinese32x32+0x194>
		{
			LCD_Address_Set(x,y,x+sizey-1,y+sizey-1);
 8001dae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	89fb      	ldrh	r3, [r7, #14]
 8001db6:	4413      	add	r3, r2
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b29c      	uxth	r4, r3
 8001dbe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	89bb      	ldrh	r3, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	89b9      	ldrh	r1, [r7, #12]
 8001dd0:	89f8      	ldrh	r0, [r7, #14]
 8001dd2:	4622      	mov	r2, r4
 8001dd4:	f7ff fc52 	bl	800167c <LCD_Address_Set>
			for(i=0;i<TypefaceNum;i++)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	77fb      	strb	r3, [r7, #31]
 8001ddc:	e065      	b.n	8001eaa <LCD_ShowChinese32x32+0x18a>
			{
				for(j=0;j<8;j++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	77bb      	strb	r3, [r7, #30]
 8001de2:	e05c      	b.n	8001e9e <LCD_ShowChinese32x32+0x17e>
				{
					if(!mode)//·Çµþ¼Ó·½Ê½
 8001de4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d12c      	bne.n	8001e46 <LCD_ShowChinese32x32+0x126>
					{
						if(tfont32[k].Msk[i]&(0x01<<j))LCD_WR_DATA(fc);
 8001dec:	8b7a      	ldrh	r2, [r7, #26]
 8001dee:	7ff9      	ldrb	r1, [r7, #31]
 8001df0:	4837      	ldr	r0, [pc, #220]	; (8001ed0 <LCD_ShowChinese32x32+0x1b0>)
 8001df2:	4613      	mov	r3, r2
 8001df4:	019b      	lsls	r3, r3, #6
 8001df6:	4413      	add	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4403      	add	r3, r0
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3302      	adds	r3, #2
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	7fbb      	ldrb	r3, [r7, #30]
 8001e06:	fa42 f303 	asr.w	r3, r2, r3
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d004      	beq.n	8001e1c <LCD_ShowChinese32x32+0xfc>
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fc0f 	bl	8001638 <LCD_WR_DATA>
 8001e1a:	e003      	b.n	8001e24 <LCD_ShowChinese32x32+0x104>
						else LCD_WR_DATA(bc);
 8001e1c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fc0a 	bl	8001638 <LCD_WR_DATA>
						m++;
 8001e24:	7f7b      	ldrb	r3, [r7, #29]
 8001e26:	3301      	adds	r3, #1
 8001e28:	777b      	strb	r3, [r7, #29]
						if(m%sizey==0)
 8001e2a:	7f7b      	ldrb	r3, [r7, #29]
 8001e2c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001e30:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e34:	fb02 f201 	mul.w	r2, r2, r1
 8001e38:	1a9b      	subs	r3, r3, r2
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d12b      	bne.n	8001e98 <LCD_ShowChinese32x32+0x178>
						{
							m=0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	777b      	strb	r3, [r7, #29]
							break;
 8001e44:	e02e      	b.n	8001ea4 <LCD_ShowChinese32x32+0x184>
						}
					}
					else//µþ¼Ó·½Ê½
					{
						if(tfont32[k].Msk[i]&(0x01<<j))	LCD_DrawPoint(x,y,fc);//»­Ò»¸öµã
 8001e46:	8b7a      	ldrh	r2, [r7, #26]
 8001e48:	7ff9      	ldrb	r1, [r7, #31]
 8001e4a:	4821      	ldr	r0, [pc, #132]	; (8001ed0 <LCD_ShowChinese32x32+0x1b0>)
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	019b      	lsls	r3, r3, #6
 8001e50:	4413      	add	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4403      	add	r3, r0
 8001e56:	440b      	add	r3, r1
 8001e58:	3302      	adds	r3, #2
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	7fbb      	ldrb	r3, [r7, #30]
 8001e60:	fa42 f303 	asr.w	r3, r2, r3
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <LCD_ShowChinese32x32+0x158>
 8001e6c:	88fa      	ldrh	r2, [r7, #6]
 8001e6e:	89b9      	ldrh	r1, [r7, #12]
 8001e70:	89fb      	ldrh	r3, [r7, #14]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fcb6 	bl	80017e4 <LCD_DrawPoint>
						x++;
 8001e78:	89fb      	ldrh	r3, [r7, #14]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	81fb      	strh	r3, [r7, #14]
						if((x-x0)==sizey)
 8001e7e:	89fa      	ldrh	r2, [r7, #14]
 8001e80:	8b3b      	ldrh	r3, [r7, #24]
 8001e82:	1ad2      	subs	r2, r2, r3
 8001e84:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d105      	bne.n	8001e98 <LCD_ShowChinese32x32+0x178>
						{
							x=x0;
 8001e8c:	8b3b      	ldrh	r3, [r7, #24]
 8001e8e:	81fb      	strh	r3, [r7, #14]
							y++;
 8001e90:	89bb      	ldrh	r3, [r7, #12]
 8001e92:	3301      	adds	r3, #1
 8001e94:	81bb      	strh	r3, [r7, #12]
							break;
 8001e96:	e005      	b.n	8001ea4 <LCD_ShowChinese32x32+0x184>
				for(j=0;j<8;j++)
 8001e98:	7fbb      	ldrb	r3, [r7, #30]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	77bb      	strb	r3, [r7, #30]
 8001e9e:	7fbb      	ldrb	r3, [r7, #30]
 8001ea0:	2b07      	cmp	r3, #7
 8001ea2:	d99f      	bls.n	8001de4 <LCD_ShowChinese32x32+0xc4>
			for(i=0;i<TypefaceNum;i++)
 8001ea4:	7ffb      	ldrb	r3, [r7, #31]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	77fb      	strb	r3, [r7, #31]
 8001eaa:	7ffb      	ldrb	r3, [r7, #31]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	8afa      	ldrh	r2, [r7, #22]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d894      	bhi.n	8001dde <LCD_ShowChinese32x32+0xbe>
	for(k=0;k<HZnum;k++)
 8001eb4:	8b7b      	ldrh	r3, [r7, #26]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	837b      	strh	r3, [r7, #26]
 8001eba:	8b7a      	ldrh	r2, [r7, #26]
 8001ebc:	8abb      	ldrh	r3, [r7, #20]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	f4ff af59 	bcc.w	8001d76 <LCD_ShowChinese32x32+0x56>
				}
			}
		}
		continue;  //²éÕÒµ½¶ÔÓ¦µãÕó×Ö¿âÁ¢¼´ÍË³ö£¬·ÀÖ¹¶à¸öºº×ÖÖØ¸´È¡Ä£´øÀ´Ó°Ïì
	}
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	3724      	adds	r7, #36	; 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd90      	pop	{r4, r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	08011628 	.word	0x08011628

08001ed4 <LCD_ShowChar>:
                sizey ×ÖºÅ
                mode:  0·Çµþ¼ÓÄ£Ê½  1µþ¼ÓÄ£Ê½
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001ed4:	b590      	push	{r4, r7, lr}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4604      	mov	r4, r0
 8001edc:	4608      	mov	r0, r1
 8001ede:	4611      	mov	r1, r2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4623      	mov	r3, r4
 8001ee4:	80fb      	strh	r3, [r7, #6]
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	80bb      	strh	r3, [r7, #4]
 8001eea:	460b      	mov	r3, r1
 8001eec:	70fb      	strb	r3, [r7, #3]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;//Ò»¸ö×Ö·ûËùÕ¼×Ö½Ú´óÐ¡
	uint16_t x0=x;
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001efa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001efe:	085b      	lsrs	r3, r3, #1
 8001f00:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	08db      	lsrs	r3, r3, #3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	bf14      	ite	ne
 8001f16:	2301      	movne	r3, #1
 8001f18:	2300      	moveq	r3, #0
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	fb12 f303 	smulbb	r3, r2, r3
 8001f2a:	81bb      	strh	r3, [r7, #12]
	num=num-' ';    //µÃµ½Æ«ÒÆºóµÄÖµ
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	3b20      	subs	r3, #32
 8001f30:	70fb      	strb	r3, [r7, #3]
	LCD_Address_Set(x,y,x+sizex-1,y+sizey-1);  //ÉèÖÃ¹â±êÎ»ÖÃ
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	4413      	add	r3, r2
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b29c      	uxth	r4, r3
 8001f40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	88bb      	ldrh	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	88b9      	ldrh	r1, [r7, #4]
 8001f52:	88f8      	ldrh	r0, [r7, #6]
 8001f54:	4622      	mov	r2, r4
 8001f56:	f7ff fb91 	bl	800167c <LCD_Address_Set>
	for(i=0;i<TypefaceNum;i++)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	827b      	strh	r3, [r7, #18]
 8001f5e:	e086      	b.n	800206e <LCD_ShowChar+0x19a>
	{
		if(sizey==12)temp=ascii_1206[num][i];		       //µ÷ÓÃ6x12×ÖÌå
 8001f60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f64:	2b0c      	cmp	r3, #12
 8001f66:	d10b      	bne.n	8001f80 <LCD_ShowChar+0xac>
 8001f68:	78fa      	ldrb	r2, [r7, #3]
 8001f6a:	8a79      	ldrh	r1, [r7, #18]
 8001f6c:	4845      	ldr	r0, [pc, #276]	; (8002084 <LCD_ShowChar+0x1b0>)
 8001f6e:	4613      	mov	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4403      	add	r3, r0
 8001f78:	440b      	add	r3, r1
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	75fb      	strb	r3, [r7, #23]
 8001f7e:	e028      	b.n	8001fd2 <LCD_ShowChar+0xfe>
		else if(sizey==16)temp=ascii_1608[num][i];		 //µ÷ÓÃ8x16×ÖÌå
 8001f80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f84:	2b10      	cmp	r3, #16
 8001f86:	d108      	bne.n	8001f9a <LCD_ShowChar+0xc6>
 8001f88:	78fa      	ldrb	r2, [r7, #3]
 8001f8a:	8a7b      	ldrh	r3, [r7, #18]
 8001f8c:	493e      	ldr	r1, [pc, #248]	; (8002088 <LCD_ShowChar+0x1b4>)
 8001f8e:	0112      	lsls	r2, r2, #4
 8001f90:	440a      	add	r2, r1
 8001f92:	4413      	add	r3, r2
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	75fb      	strb	r3, [r7, #23]
 8001f98:	e01b      	b.n	8001fd2 <LCD_ShowChar+0xfe>
		else if(sizey==24)temp=ascii_2412[num][i];		 //µ÷ÓÃ12x24×ÖÌå
 8001f9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f9e:	2b18      	cmp	r3, #24
 8001fa0:	d10b      	bne.n	8001fba <LCD_ShowChar+0xe6>
 8001fa2:	78fa      	ldrb	r2, [r7, #3]
 8001fa4:	8a79      	ldrh	r1, [r7, #18]
 8001fa6:	4839      	ldr	r0, [pc, #228]	; (800208c <LCD_ShowChar+0x1b8>)
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	4403      	add	r3, r0
 8001fb2:	440b      	add	r3, r1
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	75fb      	strb	r3, [r7, #23]
 8001fb8:	e00b      	b.n	8001fd2 <LCD_ShowChar+0xfe>
		else if(sizey==32)temp=ascii_3216[num][i];		 //µ÷ÓÃ16x32×ÖÌå
 8001fba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fbe:	2b20      	cmp	r3, #32
 8001fc0:	d15b      	bne.n	800207a <LCD_ShowChar+0x1a6>
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	8a7b      	ldrh	r3, [r7, #18]
 8001fc6:	4932      	ldr	r1, [pc, #200]	; (8002090 <LCD_ShowChar+0x1bc>)
 8001fc8:	0192      	lsls	r2, r2, #6
 8001fca:	440a      	add	r2, r1
 8001fcc:	4413      	add	r3, r2
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	75bb      	strb	r3, [r7, #22]
 8001fd6:	e044      	b.n	8002062 <LCD_ShowChar+0x18e>
		{
			if(!mode)//·Çµþ¼ÓÄ£Ê½
 8001fd8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d120      	bne.n	8002022 <LCD_ShowChar+0x14e>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001fe0:	7dfa      	ldrb	r2, [r7, #23]
 8001fe2:	7dbb      	ldrb	r3, [r7, #22]
 8001fe4:	fa42 f303 	asr.w	r3, r2, r3
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d004      	beq.n	8001ffa <LCD_ShowChar+0x126>
 8001ff0:	883b      	ldrh	r3, [r7, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fb20 	bl	8001638 <LCD_WR_DATA>
 8001ff8:	e003      	b.n	8002002 <LCD_ShowChar+0x12e>
				else LCD_WR_DATA(bc);
 8001ffa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fb1b 	bl	8001638 <LCD_WR_DATA>
				m++;
 8002002:	7d7b      	ldrb	r3, [r7, #21]
 8002004:	3301      	adds	r3, #1
 8002006:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8002008:	7d7b      	ldrb	r3, [r7, #21]
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002010:	fb02 f201 	mul.w	r2, r2, r1
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d11f      	bne.n	800205c <LCD_ShowChar+0x188>
				{
					m=0;
 800201c:	2300      	movs	r3, #0
 800201e:	757b      	strb	r3, [r7, #21]
					break;
 8002020:	e022      	b.n	8002068 <LCD_ShowChar+0x194>
				}
			}
			else//µþ¼ÓÄ£Ê½
			{
				if(temp&(0x01<<t))LCD_DrawPoint(x,y,fc);//»­Ò»¸öµã
 8002022:	7dfa      	ldrb	r2, [r7, #23]
 8002024:	7dbb      	ldrb	r3, [r7, #22]
 8002026:	fa42 f303 	asr.w	r3, r2, r3
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <LCD_ShowChar+0x16a>
 8002032:	883a      	ldrh	r2, [r7, #0]
 8002034:	88b9      	ldrh	r1, [r7, #4]
 8002036:	88fb      	ldrh	r3, [r7, #6]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fbd3 	bl	80017e4 <LCD_DrawPoint>
				x++;
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	3301      	adds	r3, #1
 8002042:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8002044:	88fa      	ldrh	r2, [r7, #6]
 8002046:	8a3b      	ldrh	r3, [r7, #16]
 8002048:	1ad2      	subs	r2, r2, r3
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	429a      	cmp	r2, r3
 800204e:	d105      	bne.n	800205c <LCD_ShowChar+0x188>
				{
					x=x0;
 8002050:	8a3b      	ldrh	r3, [r7, #16]
 8002052:	80fb      	strh	r3, [r7, #6]
					y++;
 8002054:	88bb      	ldrh	r3, [r7, #4]
 8002056:	3301      	adds	r3, #1
 8002058:	80bb      	strh	r3, [r7, #4]
					break;
 800205a:	e005      	b.n	8002068 <LCD_ShowChar+0x194>
		for(t=0;t<8;t++)
 800205c:	7dbb      	ldrb	r3, [r7, #22]
 800205e:	3301      	adds	r3, #1
 8002060:	75bb      	strb	r3, [r7, #22]
 8002062:	7dbb      	ldrb	r3, [r7, #22]
 8002064:	2b07      	cmp	r3, #7
 8002066:	d9b7      	bls.n	8001fd8 <LCD_ShowChar+0x104>
	for(i=0;i<TypefaceNum;i++)
 8002068:	8a7b      	ldrh	r3, [r7, #18]
 800206a:	3301      	adds	r3, #1
 800206c:	827b      	strh	r3, [r7, #18]
 800206e:	8a7a      	ldrh	r2, [r7, #18]
 8002070:	89bb      	ldrh	r3, [r7, #12]
 8002072:	429a      	cmp	r2, r3
 8002074:	f4ff af74 	bcc.w	8001f60 <LCD_ShowChar+0x8c>
 8002078:	e000      	b.n	800207c <LCD_ShowChar+0x1a8>
		else return;
 800207a:	bf00      	nop
				}
			}
		}
	}
}
 800207c:	371c      	adds	r7, #28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd90      	pop	{r4, r7, pc}
 8002082:	bf00      	nop
 8002084:	0800da84 	.word	0x0800da84
 8002088:	0800def8 	.word	0x0800def8
 800208c:	0800e4e8 	.word	0x0800e4e8
 8002090:	0800f6b8 	.word	0x0800f6b8

08002094 <LCD_ShowString>:
                sizey ×ÖºÅ
                mode:  0·Çµþ¼ÓÄ£Ê½  1µþ¼ÓÄ£Ê½
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void LCD_ShowString(uint16_t x,uint16_t y,const uint8_t *p,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af04      	add	r7, sp, #16
 800209a:	60ba      	str	r2, [r7, #8]
 800209c:	461a      	mov	r2, r3
 800209e:	4603      	mov	r3, r0
 80020a0:	81fb      	strh	r3, [r7, #14]
 80020a2:	460b      	mov	r3, r1
 80020a4:	81bb      	strh	r3, [r7, #12]
 80020a6:	4613      	mov	r3, r2
 80020a8:	80fb      	strh	r3, [r7, #6]
	while(*p!='\0')
 80020aa:	e01a      	b.n	80020e2 <LCD_ShowString+0x4e>
	{
		LCD_ShowChar(x,y,*p,fc,bc,sizey,mode);
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	781a      	ldrb	r2, [r3, #0]
 80020b0:	88fc      	ldrh	r4, [r7, #6]
 80020b2:	89b9      	ldrh	r1, [r7, #12]
 80020b4:	89f8      	ldrh	r0, [r7, #14]
 80020b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80020ba:	9302      	str	r3, [sp, #8]
 80020bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	8c3b      	ldrh	r3, [r7, #32]
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	4623      	mov	r3, r4
 80020c8:	f7ff ff04 	bl	8001ed4 <LCD_ShowChar>
		x+=sizey/2;
 80020cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80020d0:	085b      	lsrs	r3, r3, #1
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	89fb      	ldrh	r3, [r7, #14]
 80020d8:	4413      	add	r3, r2
 80020da:	81fb      	strh	r3, [r7, #14]
		p++;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	3301      	adds	r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]
	while(*p!='\0')
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1e0      	bne.n	80020ac <LCD_ShowString+0x18>
	}
}
 80020ea:	bf00      	nop
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd90      	pop	{r4, r7, pc}

080020f4 <LCD_ShowPicture>:
                width  Í¼Æ¬¿í¶È
                pic[]  Í¼Æ¬Êý×é
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void LCD_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[])
{
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4604      	mov	r4, r0
 80020fc:	4608      	mov	r0, r1
 80020fe:	4611      	mov	r1, r2
 8002100:	461a      	mov	r2, r3
 8002102:	4623      	mov	r3, r4
 8002104:	80fb      	strh	r3, [r7, #6]
 8002106:	4603      	mov	r3, r0
 8002108:	80bb      	strh	r3, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	807b      	strh	r3, [r7, #2]
 800210e:	4613      	mov	r3, r2
 8002110:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
	LCD_Address_Set(x,y,x+length-1,y+width-1);
 8002116:	88fa      	ldrh	r2, [r7, #6]
 8002118:	887b      	ldrh	r3, [r7, #2]
 800211a:	4413      	add	r3, r2
 800211c:	b29b      	uxth	r3, r3
 800211e:	3b01      	subs	r3, #1
 8002120:	b29c      	uxth	r4, r3
 8002122:	88ba      	ldrh	r2, [r7, #4]
 8002124:	883b      	ldrh	r3, [r7, #0]
 8002126:	4413      	add	r3, r2
 8002128:	b29b      	uxth	r3, r3
 800212a:	3b01      	subs	r3, #1
 800212c:	b29b      	uxth	r3, r3
 800212e:	88b9      	ldrh	r1, [r7, #4]
 8002130:	88f8      	ldrh	r0, [r7, #6]
 8002132:	4622      	mov	r2, r4
 8002134:	f7ff faa2 	bl	800167c <LCD_Address_Set>
	for(i=0;i<length;i++)
 8002138:	2300      	movs	r3, #0
 800213a:	82fb      	strh	r3, [r7, #22]
 800213c:	e027      	b.n	800218e <LCD_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 800213e:	2300      	movs	r3, #0
 8002140:	82bb      	strh	r3, [r7, #20]
 8002142:	e01d      	b.n	8002180 <LCD_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800214a:	4413      	add	r3, r2
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	3301      	adds	r3, #1
 8002156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002158:	4413      	add	r3, r2
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	b21a      	sxth	r2, r3
 8002164:	7bbb      	ldrb	r3, [r7, #14]
 8002166:	b21b      	sxth	r3, r3
 8002168:	4313      	orrs	r3, r2
 800216a:	b21b      	sxth	r3, r3
 800216c:	b29b      	uxth	r3, r3
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fa62 	bl	8001638 <LCD_WR_DATA>
			k++;
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	3301      	adds	r3, #1
 8002178:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 800217a:	8abb      	ldrh	r3, [r7, #20]
 800217c:	3301      	adds	r3, #1
 800217e:	82bb      	strh	r3, [r7, #20]
 8002180:	8aba      	ldrh	r2, [r7, #20]
 8002182:	883b      	ldrh	r3, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d3dd      	bcc.n	8002144 <LCD_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8002188:	8afb      	ldrh	r3, [r7, #22]
 800218a:	3301      	adds	r3, #1
 800218c:	82fb      	strh	r3, [r7, #22]
 800218e:	8afa      	ldrh	r2, [r7, #22]
 8002190:	887b      	ldrh	r3, [r7, #2]
 8002192:	429a      	cmp	r2, r3
 8002194:	d3d3      	bcc.n	800213e <LCD_ShowPicture+0x4a>
		}
	}
}
 8002196:	bf00      	nop
 8002198:	bf00      	nop
 800219a:	371c      	adds	r7, #28
 800219c:	46bd      	mov	sp, r7
 800219e:	bd90      	pop	{r4, r7, pc}

080021a0 <Set_Dir>:


void Set_Dir(uint8_t dir)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d007      	beq.n	80021ca <Set_Dir+0x2a>
	{
		lcddev.width=320;
 80021ba:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <Set_Dir+0x44>)
 80021bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021c0:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <Set_Dir+0x44>)
 80021c4:	22f0      	movs	r2, #240	; 0xf0
 80021c6:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80021c8:	e006      	b.n	80021d8 <Set_Dir+0x38>
		lcddev.width=240;
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <Set_Dir+0x44>)
 80021cc:	22f0      	movs	r2, #240	; 0xf0
 80021ce:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <Set_Dir+0x44>)
 80021d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021d6:	805a      	strh	r2, [r3, #2]
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	20000598 	.word	0x20000598

080021e8 <LCD_Init>:



//³õÊ¼»¯lcd
void LCD_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80021ec:	2200      	movs	r2, #0
 80021ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021f2:	48aa      	ldr	r0, [pc, #680]	; (800249c <LCD_Init+0x2b4>)
 80021f4:	f003 fa70 	bl	80056d8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80021f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021fc:	f001 ff78 	bl	80040f0 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8002200:	2201      	movs	r2, #1
 8002202:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002206:	48a5      	ldr	r0, [pc, #660]	; (800249c <LCD_Init+0x2b4>)
 8002208:	f003 fa66 	bl	80056d8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800220c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002210:	f001 ff6e 	bl	80040f0 <HAL_Delay>
//	Set_Dir(DFT_SCAN_DIR);
	Set_Dir(L2R_U2D);
 8002214:	2000      	movs	r0, #0
 8002216:	f7ff ffc3 	bl	80021a0 <Set_Dir>
	LCD_WR_REG(0XD3);
 800221a:	20d3      	movs	r0, #211	; 0xd3
 800221c:	f7ff f9fc 	bl	8001618 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8002220:	f7ff fa1a 	bl	8001658 <LCD_RD_DATA>
 8002224:	4603      	mov	r3, r0
 8002226:	461a      	mov	r2, r3
 8002228:	4b9d      	ldr	r3, [pc, #628]	; (80024a0 <LCD_Init+0x2b8>)
 800222a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();	//¶Áµ½0X00
 800222c:	f7ff fa14 	bl	8001658 <LCD_RD_DATA>
 8002230:	4603      	mov	r3, r0
 8002232:	461a      	mov	r2, r3
 8002234:	4b9a      	ldr	r3, [pc, #616]	; (80024a0 <LCD_Init+0x2b8>)
 8002236:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();   	//¶ÁÈ¡93
 8002238:	f7ff fa0e 	bl	8001658 <LCD_RD_DATA>
 800223c:	4603      	mov	r3, r0
 800223e:	461a      	mov	r2, r3
 8002240:	4b97      	ldr	r3, [pc, #604]	; (80024a0 <LCD_Init+0x2b8>)
 8002242:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8002244:	4b96      	ldr	r3, [pc, #600]	; (80024a0 <LCD_Init+0x2b8>)
 8002246:	889b      	ldrh	r3, [r3, #4]
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	b29a      	uxth	r2, r3
 800224c:	4b94      	ldr	r3, [pc, #592]	; (80024a0 <LCD_Init+0x2b8>)
 800224e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();  	//¶ÁÈ¡41
 8002250:	f7ff fa02 	bl	8001658 <LCD_RD_DATA>
 8002254:	4603      	mov	r3, r0
 8002256:	461a      	mov	r2, r3
 8002258:	4b91      	ldr	r3, [pc, #580]	; (80024a0 <LCD_Init+0x2b8>)
 800225a:	889b      	ldrh	r3, [r3, #4]
 800225c:	4313      	orrs	r3, r2
 800225e:	b29a      	uxth	r2, r3
 8002260:	4b8f      	ldr	r3, [pc, #572]	; (80024a0 <LCD_Init+0x2b8>)
 8002262:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8002264:	20cf      	movs	r0, #207	; 0xcf
 8002266:	f7ff f9d7 	bl	8001618 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800226a:	2000      	movs	r0, #0
 800226c:	f7ff f9e4 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8002270:	20c1      	movs	r0, #193	; 0xc1
 8002272:	f7ff f9e1 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8002276:	2030      	movs	r0, #48	; 0x30
 8002278:	f7ff f9de 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 800227c:	20ed      	movs	r0, #237	; 0xed
 800227e:	f7ff f9cb 	bl	8001618 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8002282:	2064      	movs	r0, #100	; 0x64
 8002284:	f7ff f9d8 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002288:	2003      	movs	r0, #3
 800228a:	f7ff f9d5 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800228e:	2012      	movs	r0, #18
 8002290:	f7ff f9d2 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8002294:	2081      	movs	r0, #129	; 0x81
 8002296:	f7ff f9cf 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800229a:	20e8      	movs	r0, #232	; 0xe8
 800229c:	f7ff f9bc 	bl	8001618 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80022a0:	2085      	movs	r0, #133	; 0x85
 80022a2:	f7ff f9c9 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80022a6:	2010      	movs	r0, #16
 80022a8:	f7ff f9c6 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80022ac:	207a      	movs	r0, #122	; 0x7a
 80022ae:	f7ff f9c3 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80022b2:	20cb      	movs	r0, #203	; 0xcb
 80022b4:	f7ff f9b0 	bl	8001618 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80022b8:	2039      	movs	r0, #57	; 0x39
 80022ba:	f7ff f9bd 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80022be:	202c      	movs	r0, #44	; 0x2c
 80022c0:	f7ff f9ba 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80022c4:	2000      	movs	r0, #0
 80022c6:	f7ff f9b7 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80022ca:	2034      	movs	r0, #52	; 0x34
 80022cc:	f7ff f9b4 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80022d0:	2002      	movs	r0, #2
 80022d2:	f7ff f9b1 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80022d6:	20f7      	movs	r0, #247	; 0xf7
 80022d8:	f7ff f99e 	bl	8001618 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80022dc:	2020      	movs	r0, #32
 80022de:	f7ff f9ab 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80022e2:	20ea      	movs	r0, #234	; 0xea
 80022e4:	f7ff f998 	bl	8001618 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80022e8:	2000      	movs	r0, #0
 80022ea:	f7ff f9a5 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80022ee:	2000      	movs	r0, #0
 80022f0:	f7ff f9a2 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80022f4:	20c0      	movs	r0, #192	; 0xc0
 80022f6:	f7ff f98f 	bl	8001618 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80022fa:	201b      	movs	r0, #27
 80022fc:	f7ff f99c 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002300:	20c1      	movs	r0, #193	; 0xc1
 8002302:	f7ff f989 	bl	8001618 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002306:	2001      	movs	r0, #1
 8002308:	f7ff f996 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 800230c:	20c5      	movs	r0, #197	; 0xc5
 800230e:	f7ff f983 	bl	8001618 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8002312:	2030      	movs	r0, #48	; 0x30
 8002314:	f7ff f990 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002318:	2030      	movs	r0, #48	; 0x30
 800231a:	f7ff f98d 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800231e:	20c7      	movs	r0, #199	; 0xc7
 8002320:	f7ff f97a 	bl	8001618 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002324:	20b7      	movs	r0, #183	; 0xb7
 8002326:	f7ff f987 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800232a:	2036      	movs	r0, #54	; 0x36
 800232c:	f7ff f974 	bl	8001618 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8002330:	2008      	movs	r0, #8
 8002332:	f7ff f981 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8002336:	203a      	movs	r0, #58	; 0x3a
 8002338:	f7ff f96e 	bl	8001618 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 800233c:	2055      	movs	r0, #85	; 0x55
 800233e:	f7ff f97b 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8002342:	20b1      	movs	r0, #177	; 0xb1
 8002344:	f7ff f968 	bl	8001618 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002348:	2000      	movs	r0, #0
 800234a:	f7ff f975 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800234e:	201a      	movs	r0, #26
 8002350:	f7ff f972 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002354:	20b6      	movs	r0, #182	; 0xb6
 8002356:	f7ff f95f 	bl	8001618 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800235a:	200a      	movs	r0, #10
 800235c:	f7ff f96c 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002360:	20a2      	movs	r0, #162	; 0xa2
 8002362:	f7ff f969 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002366:	20f2      	movs	r0, #242	; 0xf2
 8002368:	f7ff f956 	bl	8001618 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800236c:	2000      	movs	r0, #0
 800236e:	f7ff f963 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8002372:	2026      	movs	r0, #38	; 0x26
 8002374:	f7ff f950 	bl	8001618 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002378:	2001      	movs	r0, #1
 800237a:	f7ff f95d 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800237e:	20e0      	movs	r0, #224	; 0xe0
 8002380:	f7ff f94a 	bl	8001618 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002384:	200f      	movs	r0, #15
 8002386:	f7ff f957 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800238a:	202a      	movs	r0, #42	; 0x2a
 800238c:	f7ff f954 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002390:	2028      	movs	r0, #40	; 0x28
 8002392:	f7ff f951 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002396:	2008      	movs	r0, #8
 8002398:	f7ff f94e 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800239c:	200e      	movs	r0, #14
 800239e:	f7ff f94b 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80023a2:	2008      	movs	r0, #8
 80023a4:	f7ff f948 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80023a8:	2054      	movs	r0, #84	; 0x54
 80023aa:	f7ff f945 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80023ae:	20a9      	movs	r0, #169	; 0xa9
 80023b0:	f7ff f942 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80023b4:	2043      	movs	r0, #67	; 0x43
 80023b6:	f7ff f93f 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80023ba:	200a      	movs	r0, #10
 80023bc:	f7ff f93c 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80023c0:	200f      	movs	r0, #15
 80023c2:	f7ff f939 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7ff f936 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80023cc:	2000      	movs	r0, #0
 80023ce:	f7ff f933 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7ff f930 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80023d8:	2000      	movs	r0, #0
 80023da:	f7ff f92d 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80023de:	20e1      	movs	r0, #225	; 0xe1
 80023e0:	f7ff f91a 	bl	8001618 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7ff f927 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80023ea:	2015      	movs	r0, #21
 80023ec:	f7ff f924 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80023f0:	2017      	movs	r0, #23
 80023f2:	f7ff f921 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80023f6:	2007      	movs	r0, #7
 80023f8:	f7ff f91e 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80023fc:	2011      	movs	r0, #17
 80023fe:	f7ff f91b 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002402:	2006      	movs	r0, #6
 8002404:	f7ff f918 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002408:	202b      	movs	r0, #43	; 0x2b
 800240a:	f7ff f915 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800240e:	2056      	movs	r0, #86	; 0x56
 8002410:	f7ff f912 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002414:	203c      	movs	r0, #60	; 0x3c
 8002416:	f7ff f90f 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800241a:	2005      	movs	r0, #5
 800241c:	f7ff f90c 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002420:	2010      	movs	r0, #16
 8002422:	f7ff f909 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002426:	200f      	movs	r0, #15
 8002428:	f7ff f906 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800242c:	203f      	movs	r0, #63	; 0x3f
 800242e:	f7ff f903 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002432:	203f      	movs	r0, #63	; 0x3f
 8002434:	f7ff f900 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002438:	200f      	movs	r0, #15
 800243a:	f7ff f8fd 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800243e:	202b      	movs	r0, #43	; 0x2b
 8002440:	f7ff f8ea 	bl	8001618 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002444:	2000      	movs	r0, #0
 8002446:	f7ff f8f7 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800244a:	2000      	movs	r0, #0
 800244c:	f7ff f8f4 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002450:	2001      	movs	r0, #1
 8002452:	f7ff f8f1 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002456:	203f      	movs	r0, #63	; 0x3f
 8002458:	f7ff f8ee 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 800245c:	202a      	movs	r0, #42	; 0x2a
 800245e:	f7ff f8db 	bl	8001618 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002462:	2000      	movs	r0, #0
 8002464:	f7ff f8e8 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002468:	2000      	movs	r0, #0
 800246a:	f7ff f8e5 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800246e:	2000      	movs	r0, #0
 8002470:	f7ff f8e2 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002474:	20ef      	movs	r0, #239	; 0xef
 8002476:	f7ff f8df 	bl	8001638 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800247a:	2011      	movs	r0, #17
 800247c:	f7ff f8cc 	bl	8001618 <LCD_WR_REG>
	HAL_Delay(120);
 8002480:	2078      	movs	r0, #120	; 0x78
 8002482:	f001 fe35 	bl	80040f0 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002486:	2029      	movs	r0, #41	; 0x29
 8002488:	f7ff f8c6 	bl	8001618 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800248c:	2201      	movs	r2, #1
 800248e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002492:	4804      	ldr	r0, [pc, #16]	; (80024a4 <LCD_Init+0x2bc>)
 8002494:	f003 f920 	bl	80056d8 <HAL_GPIO_WritePin>
}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40020800 	.word	0x40020800
 80024a0:	20000598 	.word	0x20000598
 80024a4:	40020000 	.word	0x40020000

080024a8 <Show_Str>:
								size:×ÖÌå´óÐ¡
								mode:Ä£Ê½	0,Ìî³äÄ£Ê½;1,µþ¼ÓÄ£Ê½
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void Show_Str(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b08b      	sub	sp, #44	; 0x2c
 80024ac:	af04      	add	r7, sp, #16
 80024ae:	60ba      	str	r2, [r7, #8]
 80024b0:	461a      	mov	r2, r3
 80024b2:	4603      	mov	r3, r0
 80024b4:	81fb      	strh	r3, [r7, #14]
 80024b6:	460b      	mov	r3, r1
 80024b8:	81bb      	strh	r3, [r7, #12]
 80024ba:	4613      	mov	r3, r2
 80024bc:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80024be:	89fb      	ldrh	r3, [r7, #14]
 80024c0:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;     //×Ö·û»òÕßÖÐÎÄ
 80024c2:	2300      	movs	r3, #0
 80024c4:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)//Êý¾ÝÎ´½áÊø
 80024c6:	e0b3      	b.n	8002630 <Show_Str+0x188>
	{
		if(!bHz)
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d148      	bne.n	8002560 <Show_Str+0xb8>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80024ce:	89fa      	ldrh	r2, [r7, #14]
 80024d0:	4b5d      	ldr	r3, [pc, #372]	; (8002648 <Show_Str+0x1a0>)
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	4619      	mov	r1, r3
 80024d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024da:	085b      	lsrs	r3, r3, #1
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	1acb      	subs	r3, r1, r3
 80024e0:	429a      	cmp	r2, r3
 80024e2:	f300 80ab 	bgt.w	800263c <Show_Str+0x194>
 80024e6:	89ba      	ldrh	r2, [r7, #12]
 80024e8:	4b57      	ldr	r3, [pc, #348]	; (8002648 <Show_Str+0x1a0>)
 80024ea:	885b      	ldrh	r3, [r3, #2]
 80024ec:	4619      	mov	r1, r3
 80024ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024f2:	1acb      	subs	r3, r1, r3
 80024f4:	429a      	cmp	r2, r3
 80024f6:	f300 80a1 	bgt.w	800263c <Show_Str+0x194>
			if(*str>0x80)bHz=1;//ÖÐÎÄ
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b80      	cmp	r3, #128	; 0x80
 8002500:	d902      	bls.n	8002508 <Show_Str+0x60>
 8002502:	2301      	movs	r3, #1
 8002504:	75fb      	strb	r3, [r7, #23]
 8002506:	e093      	b.n	8002630 <Show_Str+0x188>
			else              //×Ö·û
			{
				if(*str==0x0D)//»»ÐÐ·ûºÅ
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b0d      	cmp	r3, #13
 800250e:	d10b      	bne.n	8002528 <Show_Str+0x80>
				{
					y+=sizey;
 8002510:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002514:	b29a      	uxth	r2, r3
 8002516:	89bb      	ldrh	r3, [r7, #12]
 8002518:	4413      	add	r3, r2
 800251a:	81bb      	strh	r3, [r7, #12]
					x=x0;
 800251c:	8abb      	ldrh	r3, [r7, #20]
 800251e:	81fb      	strh	r3, [r7, #14]
					str++;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	3301      	adds	r3, #1
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	e017      	b.n	8002558 <Show_Str+0xb0>
				}else
				{
					LCD_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	781a      	ldrb	r2, [r3, #0]
 800252c:	88fc      	ldrh	r4, [r7, #6]
 800252e:	89b9      	ldrh	r1, [r7, #12]
 8002530:	89f8      	ldrh	r0, [r7, #14]
 8002532:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002536:	9302      	str	r3, [sp, #8]
 8002538:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	4623      	mov	r3, r4
 8002544:	f7ff fcc6 	bl	8001ed4 <LCD_ShowChar>
					x+=sizey/2; //×Ö·û,ÎªÈ«×ÖµÄÒ»°ë
 8002548:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800254c:	085b      	lsrs	r3, r3, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	b29a      	uxth	r2, r3
 8002552:	89fb      	ldrh	r3, [r7, #14]
 8002554:	4413      	add	r3, r2
 8002556:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	3301      	adds	r3, #1
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	e067      	b.n	8002630 <Show_Str+0x188>
			}
		}else//ÖÐÎÄ
		{
			if(x>(lcddev.width-sizey)||y>(lcddev.height-sizey)) return;
 8002560:	89fa      	ldrh	r2, [r7, #14]
 8002562:	4b39      	ldr	r3, [pc, #228]	; (8002648 <Show_Str+0x1a0>)
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	4619      	mov	r1, r3
 8002568:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800256c:	1acb      	subs	r3, r1, r3
 800256e:	429a      	cmp	r2, r3
 8002570:	dc66      	bgt.n	8002640 <Show_Str+0x198>
 8002572:	89ba      	ldrh	r2, [r7, #12]
 8002574:	4b34      	ldr	r3, [pc, #208]	; (8002648 <Show_Str+0x1a0>)
 8002576:	885b      	ldrh	r3, [r3, #2]
 8002578:	4619      	mov	r1, r3
 800257a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800257e:	1acb      	subs	r3, r1, r3
 8002580:	429a      	cmp	r2, r3
 8002582:	dc5d      	bgt.n	8002640 <Show_Str+0x198>
			bHz=0;//ÓÐºº×Ö¿â
 8002584:	2300      	movs	r3, #0
 8002586:	75fb      	strb	r3, [r7, #23]
			if(sizey==32)
 8002588:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800258c:	2b20      	cmp	r3, #32
 800258e:	d10f      	bne.n	80025b0 <Show_Str+0x108>
				LCD_ShowChinese32x32(x,y,str,fc,bc,sizey,mode);
 8002590:	88fa      	ldrh	r2, [r7, #6]
 8002592:	89b9      	ldrh	r1, [r7, #12]
 8002594:	89f8      	ldrh	r0, [r7, #14]
 8002596:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800259a:	9302      	str	r3, [sp, #8]
 800259c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025a0:	9301      	str	r3, [sp, #4]
 80025a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	4613      	mov	r3, r2
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	f7ff fbb9 	bl	8001d20 <LCD_ShowChinese32x32>
 80025ae:	e036      	b.n	800261e <Show_Str+0x176>
			else if(sizey==24)
 80025b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025b4:	2b18      	cmp	r3, #24
 80025b6:	d10f      	bne.n	80025d8 <Show_Str+0x130>
				LCD_ShowChinese24x24(x,y,str,fc,bc,sizey,mode);
 80025b8:	88fa      	ldrh	r2, [r7, #6]
 80025ba:	89b9      	ldrh	r1, [r7, #12]
 80025bc:	89f8      	ldrh	r0, [r7, #14]
 80025be:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80025c2:	9302      	str	r3, [sp, #8]
 80025c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025c8:	9301      	str	r3, [sp, #4]
 80025ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	4613      	mov	r3, r2
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	f7ff facf 	bl	8001b74 <LCD_ShowChinese24x24>
 80025d6:	e022      	b.n	800261e <Show_Str+0x176>
			else if(sizey==16)
 80025d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025dc:	2b10      	cmp	r3, #16
 80025de:	d10f      	bne.n	8002600 <Show_Str+0x158>
			  LCD_ShowChinese16x16(x,y,str,fc,bc,sizey,mode);
 80025e0:	88fa      	ldrh	r2, [r7, #6]
 80025e2:	89b9      	ldrh	r1, [r7, #12]
 80025e4:	89f8      	ldrh	r0, [r7, #14]
 80025e6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80025ea:	9302      	str	r3, [sp, #8]
 80025ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025f0:	9301      	str	r3, [sp, #4]
 80025f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	4613      	mov	r3, r2
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	f7ff f9e1 	bl	80019c0 <LCD_ShowChinese16x16>
 80025fe:	e00e      	b.n	800261e <Show_Str+0x176>
			else
			  LCD_ShowChinese12x12(x,y,str,fc,bc,sizey,mode);
 8002600:	88fa      	ldrh	r2, [r7, #6]
 8002602:	89b9      	ldrh	r1, [r7, #12]
 8002604:	89f8      	ldrh	r0, [r7, #14]
 8002606:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800260a:	9302      	str	r3, [sp, #8]
 800260c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	4613      	mov	r3, r2
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	f7ff f8fb 	bl	8001814 <LCD_ShowChinese12x12>
				str+=2;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	3302      	adds	r3, #2
 8002622:	60bb      	str	r3, [r7, #8]
				x+=sizey;//ÏÂÒ»¸öºº×ÖÆ«ÒÆ
 8002624:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002628:	b29a      	uxth	r2, r3
 800262a:	89fb      	ldrh	r3, [r7, #14]
 800262c:	4413      	add	r3, r2
 800262e:	81fb      	strh	r3, [r7, #14]
	while(*str!=0)//Êý¾ÝÎ´½áÊø
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	f47f af47 	bne.w	80024c8 <Show_Str+0x20>
 800263a:	e002      	b.n	8002642 <Show_Str+0x19a>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800263c:	bf00      	nop
 800263e:	e000      	b.n	8002642 <Show_Str+0x19a>
			if(x>(lcddev.width-sizey)||y>(lcddev.height-sizey)) return;
 8002640:	bf00      	nop
			}
	}
}
 8002642:	371c      	adds	r7, #28
 8002644:	46bd      	mov	sp, r7
 8002646:	bd90      	pop	{r4, r7, pc}
 8002648:	20000598 	.word	0x20000598

0800264c <Gui_StrCenter>:
								size:×ÖÌå´óÐ¡
								mode:Ä£Ê½	0,Ìî³äÄ£Ê½;1,µþ¼ÓÄ£Ê½
      ·µ»ØÖµ£º  ÎÞ
******************************************************************************/
void Gui_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af04      	add	r7, sp, #16
 8002652:	60ba      	str	r2, [r7, #8]
 8002654:	461a      	mov	r2, r3
 8002656:	4603      	mov	r3, r0
 8002658:	81fb      	strh	r3, [r7, #14]
 800265a:	460b      	mov	r3, r1
 800265c:	81bb      	strh	r3, [r7, #12]
 800265e:	4613      	mov	r3, r2
 8002660:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8002662:	68b8      	ldr	r0, [r7, #8]
 8002664:	f7fd fdb4 	bl	80001d0 <strlen>
 8002668:	4603      	mov	r3, r0
 800266a:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 800266c:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <Gui_StrCenter+0x60>)
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	8afb      	ldrh	r3, [r7, #22]
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	0fda      	lsrs	r2, r3, #31
 800267a:	4413      	add	r3, r2
 800267c:	105b      	asrs	r3, r3, #1
 800267e:	82bb      	strh	r3, [r7, #20]
	Show_Str(x+x1,y,str,fc,bc,sizey,mode);
 8002680:	89fa      	ldrh	r2, [r7, #14]
 8002682:	8abb      	ldrh	r3, [r7, #20]
 8002684:	4413      	add	r3, r2
 8002686:	b298      	uxth	r0, r3
 8002688:	88fa      	ldrh	r2, [r7, #6]
 800268a:	89b9      	ldrh	r1, [r7, #12]
 800268c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002690:	9302      	str	r3, [sp, #8]
 8002692:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	8c3b      	ldrh	r3, [r7, #32]
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	4613      	mov	r3, r2
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	f7ff ff02 	bl	80024a8 <Show_Str>
}
 80026a4:	bf00      	nop
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000598 	.word	0x20000598

080026b0 <LcdTest>:

void LcdTest(){
 80026b0:	b5b0      	push	{r4, r5, r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af04      	add	r7, sp, #16
	  sprintf(s, "%02d:%02d:%02d", rtc_GetHour(), rtc_GetMin(), rtc_GetSec());
 80026b6:	f7fe ff8b 	bl	80015d0 <rtc_GetHour>
 80026ba:	4603      	mov	r3, r0
 80026bc:	461c      	mov	r4, r3
 80026be:	f7fe ff93 	bl	80015e8 <rtc_GetMin>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461d      	mov	r5, r3
 80026c6:	f7fe ff9b 	bl	8001600 <rtc_GetSec>
 80026ca:	4603      	mov	r3, r0
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	462b      	mov	r3, r5
 80026d0:	4622      	mov	r2, r4
 80026d2:	491f      	ldr	r1, [pc, #124]	; (8002750 <LcdTest+0xa0>)
 80026d4:	481f      	ldr	r0, [pc, #124]	; (8002754 <LcdTest+0xa4>)
 80026d6:	f008 ff3d 	bl	800b554 <siprintf>
	  LCD_Fill(0, 60, lcddev.width, 80, BLACK);
 80026da:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <LcdTest+0xa8>)
 80026dc:	881a      	ldrh	r2, [r3, #0]
 80026de:	2300      	movs	r3, #0
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	2350      	movs	r3, #80	; 0x50
 80026e4:	213c      	movs	r1, #60	; 0x3c
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7ff f846 	bl	8001778 <LCD_Fill>
	  Gui_StrCenter(0,60,(uint8_t*)s,WHITE,BLUE,16,1);
 80026ec:	2301      	movs	r3, #1
 80026ee:	9302      	str	r3, [sp, #8]
 80026f0:	2310      	movs	r3, #16
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	231f      	movs	r3, #31
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026fc:	4a15      	ldr	r2, [pc, #84]	; (8002754 <LcdTest+0xa4>)
 80026fe:	213c      	movs	r1, #60	; 0x3c
 8002700:	2000      	movs	r0, #0
 8002702:	f7ff ffa3 	bl	800264c <Gui_StrCenter>
	  sprintf(s, "Light: %d, Res: %d", adc_GetLight(), adc_GetVarResistor());
 8002706:	f7fe fc33 	bl	8000f70 <adc_GetLight>
 800270a:	4604      	mov	r4, r0
 800270c:	f7fe fc3c 	bl	8000f88 <adc_GetVarResistor>
 8002710:	4603      	mov	r3, r0
 8002712:	4622      	mov	r2, r4
 8002714:	4911      	ldr	r1, [pc, #68]	; (800275c <LcdTest+0xac>)
 8002716:	480f      	ldr	r0, [pc, #60]	; (8002754 <LcdTest+0xa4>)
 8002718:	f008 ff1c 	bl	800b554 <siprintf>
	  LCD_Fill(0, 80, lcddev.width, 100, BLACK);
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <LcdTest+0xa8>)
 800271e:	881a      	ldrh	r2, [r3, #0]
 8002720:	2300      	movs	r3, #0
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2364      	movs	r3, #100	; 0x64
 8002726:	2150      	movs	r1, #80	; 0x50
 8002728:	2000      	movs	r0, #0
 800272a:	f7ff f825 	bl	8001778 <LCD_Fill>
	  Gui_StrCenter(0,80,(uint8_t*)s,WHITE,BLUE,16,1);
 800272e:	2301      	movs	r3, #1
 8002730:	9302      	str	r3, [sp, #8]
 8002732:	2310      	movs	r3, #16
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	231f      	movs	r3, #31
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800273e:	4a05      	ldr	r2, [pc, #20]	; (8002754 <LcdTest+0xa4>)
 8002740:	2150      	movs	r1, #80	; 0x50
 8002742:	2000      	movs	r0, #0
 8002744:	f7ff ff82 	bl	800264c <Gui_StrCenter>

}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	bdb0      	pop	{r4, r5, r7, pc}
 800274e:	bf00      	nop
 8002750:	0800da30 	.word	0x0800da30
 8002754:	200005a0 	.word	0x200005a0
 8002758:	20000598 	.word	0x20000598
 800275c:	0800da40 	.word	0x0800da40

08002760 <LcdShowOne>:

void LcdShowOne(){
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af04      	add	r7, sp, #16
	  DrawTestPage("Arm Kit");
 8002766:	480e      	ldr	r0, [pc, #56]	; (80027a0 <LcdShowOne+0x40>)
 8002768:	f000 f93a 	bl	80029e0 <DrawTestPage>
	  Gui_StrCenter(0,30,"BKIT HARDWARE CLUB",BRRED,RED,16,1);
 800276c:	2301      	movs	r3, #1
 800276e:	9302      	str	r3, [sp, #8]
 8002770:	2310      	movs	r3, #16
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	f64f 4307 	movw	r3, #64519	; 0xfc07
 800277e:	4a09      	ldr	r2, [pc, #36]	; (80027a4 <LcdShowOne+0x44>)
 8002780:	211e      	movs	r1, #30
 8002782:	2000      	movs	r0, #0
 8002784:	f7ff ff62 	bl	800264c <Gui_StrCenter>
	  LCD_ShowPicture(70,170,97,100,gImage_bk);
 8002788:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <LcdShowOne+0x48>)
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	2364      	movs	r3, #100	; 0x64
 800278e:	2261      	movs	r2, #97	; 0x61
 8002790:	21aa      	movs	r1, #170	; 0xaa
 8002792:	2046      	movs	r0, #70	; 0x46
 8002794:	f7ff fcae 	bl	80020f4 <LCD_ShowPicture>
//	  LCD_ShowPicture(0,150,60,60,gImage_dino);
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	0800da54 	.word	0x0800da54
 80027a4:	0800da5c 	.word	0x0800da5c
 80027a8:	080118b4 	.word	0x080118b4

080027ac <led7_init>:

unsigned char led7[4] = {0x00, 0xf1, 0x0e, 0x6a};

int led7_index = 0;

void led7_init(){
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LED1_GPIO_Port, LD_LED1_Pin, 0);
 80027b0:	2200      	movs	r2, #0
 80027b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027b6:	480d      	ldr	r0, [pc, #52]	; (80027ec <led7_init+0x40>)
 80027b8:	f002 ff8e 	bl	80056d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, 0);
 80027bc:	2200      	movs	r2, #0
 80027be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027c2:	480b      	ldr	r0, [pc, #44]	; (80027f0 <led7_init+0x44>)
 80027c4:	f002 ff88 	bl	80056d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD_LED3_GPIO_Port, LD_LED3_Pin, 0);
 80027c8:	2200      	movs	r2, #0
 80027ca:	2104      	movs	r1, #4
 80027cc:	4807      	ldr	r0, [pc, #28]	; (80027ec <led7_init+0x40>)
 80027ce:	f002 ff83 	bl	80056d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD_LED4_GPIO_Port, LD_LED4_Pin, 0);
 80027d2:	2200      	movs	r2, #0
 80027d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027d8:	4804      	ldr	r0, [pc, #16]	; (80027ec <led7_init+0x40>)
 80027da:	f002 ff7d 	bl	80056d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80027de:	2201      	movs	r2, #1
 80027e0:	2140      	movs	r1, #64	; 0x40
 80027e2:	4804      	ldr	r0, [pc, #16]	; (80027f4 <led7_init+0x48>)
 80027e4:	f002 ff78 	bl	80056d8 <HAL_GPIO_WritePin>
}
 80027e8:	bf00      	nop
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40020400 	.word	0x40020400
 80027f0:	40021400 	.word	0x40021400
 80027f4:	40021800 	.word	0x40021800

080027f8 <led7_Scan>:

void led7_Scan(){
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80027fc:	2200      	movs	r2, #0
 80027fe:	2140      	movs	r1, #64	; 0x40
 8002800:	4847      	ldr	r0, [pc, #284]	; (8002920 <led7_Scan+0x128>)
 8002802:	f002 ff69 	bl	80056d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, led7 + led7_index, 1, 1);
 8002806:	4b47      	ldr	r3, [pc, #284]	; (8002924 <led7_Scan+0x12c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	4b46      	ldr	r3, [pc, #280]	; (8002928 <led7_Scan+0x130>)
 800280e:	18d1      	adds	r1, r2, r3
 8002810:	2301      	movs	r3, #1
 8002812:	2201      	movs	r2, #1
 8002814:	4845      	ldr	r0, [pc, #276]	; (800292c <led7_Scan+0x134>)
 8002816:	f005 fa44 	bl	8007ca2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800281a:	2201      	movs	r2, #1
 800281c:	2140      	movs	r1, #64	; 0x40
 800281e:	4840      	ldr	r0, [pc, #256]	; (8002920 <led7_Scan+0x128>)
 8002820:	f002 ff5a 	bl	80056d8 <HAL_GPIO_WritePin>
	switch(led7_index){
 8002824:	4b3f      	ldr	r3, [pc, #252]	; (8002924 <led7_Scan+0x12c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d86b      	bhi.n	8002904 <led7_Scan+0x10c>
 800282c:	a201      	add	r2, pc, #4	; (adr r2, 8002834 <led7_Scan+0x3c>)
 800282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002832:	bf00      	nop
 8002834:	08002845 	.word	0x08002845
 8002838:	08002875 	.word	0x08002875
 800283c:	080028a5 	.word	0x080028a5
 8002840:	080028d5 	.word	0x080028d5
	case 0:
		  HAL_GPIO_WritePin(LD_LED1_GPIO_Port, LD_LED1_Pin, 0);
 8002844:	2200      	movs	r2, #0
 8002846:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800284a:	4839      	ldr	r0, [pc, #228]	; (8002930 <led7_Scan+0x138>)
 800284c:	f002 ff44 	bl	80056d8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, 1);
 8002850:	2201      	movs	r2, #1
 8002852:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002856:	4837      	ldr	r0, [pc, #220]	; (8002934 <led7_Scan+0x13c>)
 8002858:	f002 ff3e 	bl	80056d8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED3_GPIO_Port, LD_LED3_Pin, 1);
 800285c:	2201      	movs	r2, #1
 800285e:	2104      	movs	r1, #4
 8002860:	4833      	ldr	r0, [pc, #204]	; (8002930 <led7_Scan+0x138>)
 8002862:	f002 ff39 	bl	80056d8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED4_GPIO_Port, LD_LED4_Pin, 1);
 8002866:	2201      	movs	r2, #1
 8002868:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800286c:	4830      	ldr	r0, [pc, #192]	; (8002930 <led7_Scan+0x138>)
 800286e:	f002 ff33 	bl	80056d8 <HAL_GPIO_WritePin>
		  break;
 8002872:	e047      	b.n	8002904 <led7_Scan+0x10c>
	case 1:
		  HAL_GPIO_WritePin(LD_LED1_GPIO_Port, LD_LED1_Pin, 1);
 8002874:	2201      	movs	r2, #1
 8002876:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800287a:	482d      	ldr	r0, [pc, #180]	; (8002930 <led7_Scan+0x138>)
 800287c:	f002 ff2c 	bl	80056d8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, 0);
 8002880:	2200      	movs	r2, #0
 8002882:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002886:	482b      	ldr	r0, [pc, #172]	; (8002934 <led7_Scan+0x13c>)
 8002888:	f002 ff26 	bl	80056d8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED3_GPIO_Port, LD_LED3_Pin, 1);
 800288c:	2201      	movs	r2, #1
 800288e:	2104      	movs	r1, #4
 8002890:	4827      	ldr	r0, [pc, #156]	; (8002930 <led7_Scan+0x138>)
 8002892:	f002 ff21 	bl	80056d8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED4_GPIO_Port, LD_LED4_Pin, 1);
 8002896:	2201      	movs	r2, #1
 8002898:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800289c:	4824      	ldr	r0, [pc, #144]	; (8002930 <led7_Scan+0x138>)
 800289e:	f002 ff1b 	bl	80056d8 <HAL_GPIO_WritePin>
		  break;
 80028a2:	e02f      	b.n	8002904 <led7_Scan+0x10c>
	case 2:
		  HAL_GPIO_WritePin(LD_LED1_GPIO_Port, LD_LED1_Pin, 1);
 80028a4:	2201      	movs	r2, #1
 80028a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028aa:	4821      	ldr	r0, [pc, #132]	; (8002930 <led7_Scan+0x138>)
 80028ac:	f002 ff14 	bl	80056d8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, 1);
 80028b0:	2201      	movs	r2, #1
 80028b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028b6:	481f      	ldr	r0, [pc, #124]	; (8002934 <led7_Scan+0x13c>)
 80028b8:	f002 ff0e 	bl	80056d8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED3_GPIO_Port, LD_LED3_Pin, 0);
 80028bc:	2200      	movs	r2, #0
 80028be:	2104      	movs	r1, #4
 80028c0:	481b      	ldr	r0, [pc, #108]	; (8002930 <led7_Scan+0x138>)
 80028c2:	f002 ff09 	bl	80056d8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED4_GPIO_Port, LD_LED4_Pin, 1);
 80028c6:	2201      	movs	r2, #1
 80028c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028cc:	4818      	ldr	r0, [pc, #96]	; (8002930 <led7_Scan+0x138>)
 80028ce:	f002 ff03 	bl	80056d8 <HAL_GPIO_WritePin>
		  break;
 80028d2:	e017      	b.n	8002904 <led7_Scan+0x10c>
	case 3:
		  HAL_GPIO_WritePin(LD_LED1_GPIO_Port, LD_LED1_Pin, 1);
 80028d4:	2201      	movs	r2, #1
 80028d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028da:	4815      	ldr	r0, [pc, #84]	; (8002930 <led7_Scan+0x138>)
 80028dc:	f002 fefc 	bl	80056d8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, 1);
 80028e0:	2201      	movs	r2, #1
 80028e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028e6:	4813      	ldr	r0, [pc, #76]	; (8002934 <led7_Scan+0x13c>)
 80028e8:	f002 fef6 	bl	80056d8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED3_GPIO_Port, LD_LED3_Pin, 1);
 80028ec:	2201      	movs	r2, #1
 80028ee:	2104      	movs	r1, #4
 80028f0:	480f      	ldr	r0, [pc, #60]	; (8002930 <led7_Scan+0x138>)
 80028f2:	f002 fef1 	bl	80056d8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD_LED4_GPIO_Port, LD_LED4_Pin, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028fc:	480c      	ldr	r0, [pc, #48]	; (8002930 <led7_Scan+0x138>)
 80028fe:	f002 feeb 	bl	80056d8 <HAL_GPIO_WritePin>
		  break;
 8002902:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002904:	4b07      	ldr	r3, [pc, #28]	; (8002924 <led7_Scan+0x12c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	3301      	adds	r3, #1
 800290a:	425a      	negs	r2, r3
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	f002 0203 	and.w	r2, r2, #3
 8002914:	bf58      	it	pl
 8002916:	4253      	negpl	r3, r2
 8002918:	4a02      	ldr	r2, [pc, #8]	; (8002924 <led7_Scan+0x12c>)
 800291a:	6013      	str	r3, [r2, #0]
}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021800 	.word	0x40021800
 8002924:	20000210 	.word	0x20000210
 8002928:	20000000 	.word	0x20000000
 800292c:	20000430 	.word	0x20000430
 8002930:	40020400 	.word	0x40020400
 8002934:	40021400 	.word	0x40021400

08002938 <led7_SetDigit>:

void led7_SetDigit(int num, int position){
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
	if(num > 9 || num < 0) return;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b09      	cmp	r3, #9
 8002946:	dc43      	bgt.n	80029d0 <led7_SetDigit+0x98>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	db40      	blt.n	80029d0 <led7_SetDigit+0x98>
	unsigned char digit = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b09      	cmp	r3, #9
 8002956:	d835      	bhi.n	80029c4 <led7_SetDigit+0x8c>
 8002958:	a201      	add	r2, pc, #4	; (adr r2, 8002960 <led7_SetDigit+0x28>)
 800295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295e:	bf00      	nop
 8002960:	08002989 	.word	0x08002989
 8002964:	0800298f 	.word	0x0800298f
 8002968:	08002995 	.word	0x08002995
 800296c:	0800299b 	.word	0x0800299b
 8002970:	080029a1 	.word	0x080029a1
 8002974:	080029a7 	.word	0x080029a7
 8002978:	080029ad 	.word	0x080029ad
 800297c:	080029b3 	.word	0x080029b3
 8002980:	080029b9 	.word	0x080029b9
 8002984:	080029bf 	.word	0x080029bf
	switch(num){
	case 0:
		digit = 0x03;
 8002988:	2303      	movs	r3, #3
 800298a:	73fb      	strb	r3, [r7, #15]
		break;
 800298c:	e01a      	b.n	80029c4 <led7_SetDigit+0x8c>
	case 1:
		digit = 0x9f;
 800298e:	239f      	movs	r3, #159	; 0x9f
 8002990:	73fb      	strb	r3, [r7, #15]
		break;
 8002992:	e017      	b.n	80029c4 <led7_SetDigit+0x8c>
	case 2:
		digit = 0x25;
 8002994:	2325      	movs	r3, #37	; 0x25
 8002996:	73fb      	strb	r3, [r7, #15]
		break;
 8002998:	e014      	b.n	80029c4 <led7_SetDigit+0x8c>
	case 3:
		digit = 0x0d;
 800299a:	230d      	movs	r3, #13
 800299c:	73fb      	strb	r3, [r7, #15]
		break;
 800299e:	e011      	b.n	80029c4 <led7_SetDigit+0x8c>
	case 4:
		digit = 0x99;
 80029a0:	2399      	movs	r3, #153	; 0x99
 80029a2:	73fb      	strb	r3, [r7, #15]
		break;
 80029a4:	e00e      	b.n	80029c4 <led7_SetDigit+0x8c>
	case 5:
		digit = 0x49;
 80029a6:	2349      	movs	r3, #73	; 0x49
 80029a8:	73fb      	strb	r3, [r7, #15]
		break;
 80029aa:	e00b      	b.n	80029c4 <led7_SetDigit+0x8c>
	case 6:
		digit = 0x41;
 80029ac:	2341      	movs	r3, #65	; 0x41
 80029ae:	73fb      	strb	r3, [r7, #15]
		break;
 80029b0:	e008      	b.n	80029c4 <led7_SetDigit+0x8c>
	case 7:
		digit = 0x1f;
 80029b2:	231f      	movs	r3, #31
 80029b4:	73fb      	strb	r3, [r7, #15]
		break;
 80029b6:	e005      	b.n	80029c4 <led7_SetDigit+0x8c>
	case 8:
		digit = 0x01;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
		break;
 80029bc:	e002      	b.n	80029c4 <led7_SetDigit+0x8c>
	case 9:
		digit = 0x09;
 80029be:	2309      	movs	r3, #9
 80029c0:	73fb      	strb	r3, [r7, #15]
		break;
 80029c2:	bf00      	nop
	}
	led7[position - 1] = digit;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	4904      	ldr	r1, [pc, #16]	; (80029dc <led7_SetDigit+0xa4>)
 80029ca:	7bfa      	ldrb	r2, [r7, #15]
 80029cc:	54ca      	strb	r2, [r1, r3]
 80029ce:	e000      	b.n	80029d2 <led7_SetDigit+0x9a>
	if(num > 9 || num < 0) return;
 80029d0:	bf00      	nop
}
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	20000000 	.word	0x20000000

080029e0 <DrawTestPage>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DrawTestPage(uint8_t *str)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af04      	add	r7, sp, #16
 80029e6:	6078      	str	r0, [r7, #4]
	LCD_Fill(0,0,lcddev.width,20,BLUE);
 80029e8:	4b21      	ldr	r3, [pc, #132]	; (8002a70 <DrawTestPage+0x90>)
 80029ea:	881a      	ldrh	r2, [r3, #0]
 80029ec:	231f      	movs	r3, #31
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	2314      	movs	r3, #20
 80029f2:	2100      	movs	r1, #0
 80029f4:	2000      	movs	r0, #0
 80029f6:	f7fe febf 	bl	8001778 <LCD_Fill>
	LCD_Fill(0,lcddev.height-20,lcddev.width,lcddev.height,BLUE);
 80029fa:	4b1d      	ldr	r3, [pc, #116]	; (8002a70 <DrawTestPage+0x90>)
 80029fc:	885b      	ldrh	r3, [r3, #2]
 80029fe:	3b14      	subs	r3, #20
 8002a00:	b299      	uxth	r1, r3
 8002a02:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <DrawTestPage+0x90>)
 8002a04:	881a      	ldrh	r2, [r3, #0]
 8002a06:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <DrawTestPage+0x90>)
 8002a08:	885b      	ldrh	r3, [r3, #2]
 8002a0a:	201f      	movs	r0, #31
 8002a0c:	9000      	str	r0, [sp, #0]
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f7fe feb2 	bl	8001778 <LCD_Fill>
	Gui_StrCenter(0,2,str,WHITE,BLUE,16,1);
 8002a14:	2301      	movs	r3, #1
 8002a16:	9302      	str	r3, [sp, #8]
 8002a18:	2310      	movs	r3, #16
 8002a1a:	9301      	str	r3, [sp, #4]
 8002a1c:	231f      	movs	r3, #31
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	2102      	movs	r1, #2
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7ff fe0f 	bl	800264c <Gui_StrCenter>
	Gui_StrCenter(0,lcddev.height-18,"Test page",WHITE,BLUE,16,1);
 8002a2e:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <DrawTestPage+0x90>)
 8002a30:	885b      	ldrh	r3, [r3, #2]
 8002a32:	3b12      	subs	r3, #18
 8002a34:	b299      	uxth	r1, r3
 8002a36:	2301      	movs	r3, #1
 8002a38:	9302      	str	r3, [sp, #8]
 8002a3a:	2310      	movs	r3, #16
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	231f      	movs	r3, #31
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a46:	4a0b      	ldr	r2, [pc, #44]	; (8002a74 <DrawTestPage+0x94>)
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7ff fdff 	bl	800264c <Gui_StrCenter>
	LCD_Fill(0,20,lcddev.width,lcddev.height-20,BLACK);
 8002a4e:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <DrawTestPage+0x90>)
 8002a50:	881a      	ldrh	r2, [r3, #0]
 8002a52:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <DrawTestPage+0x90>)
 8002a54:	885b      	ldrh	r3, [r3, #2]
 8002a56:	3b14      	subs	r3, #20
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	9100      	str	r1, [sp, #0]
 8002a5e:	2114      	movs	r1, #20
 8002a60:	2000      	movs	r0, #0
 8002a62:	f7fe fe89 	bl	8001778 <LCD_Fill>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000598 	.word	0x20000598
 8002a74:	0800da70 	.word	0x0800da70

08002a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b092      	sub	sp, #72	; 0x48
 8002a7c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a7e:	f001 fac5 	bl	800400c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a82:	f000 f865 	bl	8002b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a86:	f000 fb07 	bl	8003098 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002a8a:	f000 f9a9 	bl	8002de0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002a8e:	f000 fa8f 	bl	8002fb0 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8002a92:	f000 f96f 	bl	8002d74 <MX_SPI1_Init>
  MX_DMA_Init();
 8002a96:	f000 fadf 	bl	8003058 <MX_DMA_Init>
  MX_ADC1_Init();
 8002a9a:	f000 f8c1 	bl	8002c20 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002a9e:	f000 f9eb 	bl	8002e78 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002aa2:	f000 f939 	bl	8002d18 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002aa6:	f000 faad 	bl	8003004 <MX_USART2_UART_Init>
  MX_TIM13_Init();
 8002aaa:	f000 fa33 	bl	8002f14 <MX_TIM13_Init>
  MX_FSMC_Init();
 8002aae:	f000 fc11 	bl	80032d4 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  init_system();
 8002ab2:	f000 fcd9 	bl	8003468 <init_system>
  uint8_t s[50];



//  HAL_UART_Transmit(&huart1, (void*)s, sprintf(s, "%d:%d:%d", getHour(), getMin(), getSec()), 10);
  int hello_index = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	637b      	str	r3, [r7, #52]	; 0x34
  LcdShowOne();
 8002aba:	f7ff fe51 	bl	8002760 <LcdShowOne>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(!flag_timer2);
 8002abe:	bf00      	nop
 8002ac0:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <main+0xc8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0fb      	beq.n	8002ac0 <main+0x48>
	  flag_timer2 = 0;
 8002ac8:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <main+0xc8>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
	  rtc_Read();
 8002ace:	f7fe fcff 	bl	80014d0 <rtc_Read>
	  button_Scan();
 8002ad2:	f7fe fb8f 	bl	80011f4 <button_Scan>
	  adc_Test();
 8002ad6:	f7fe faf1 	bl	80010bc <adc_Test>
	  LCD_Fill(0, 120, lcddev.width, 140, WHITE);
 8002ada:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <main+0xcc>)
 8002adc:	881a      	ldrh	r2, [r3, #0]
 8002ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	238c      	movs	r3, #140	; 0x8c
 8002ae6:	2178      	movs	r1, #120	; 0x78
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f7fe fe45 	bl	8001778 <LCD_Fill>
	  LCD_ShowString(hello_index,120,"Welcome",BLUE,BLUE,16,1);
 8002aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af0:	b298      	uxth	r0, r3
 8002af2:	2301      	movs	r3, #1
 8002af4:	9302      	str	r3, [sp, #8]
 8002af6:	2310      	movs	r3, #16
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	231f      	movs	r3, #31
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	231f      	movs	r3, #31
 8002b00:	4a11      	ldr	r2, [pc, #68]	; (8002b48 <main+0xd0>)
 8002b02:	2178      	movs	r1, #120	; 0x78
 8002b04:	f7ff fac6 	bl	8002094 <LCD_ShowString>
	  hello_index = (hello_index+1)%lcddev.width;
 8002b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <main+0xcc>)
 8002b0e:	8812      	ldrh	r2, [r2, #0]
 8002b10:	fb93 f1f2 	sdiv	r1, r3, r2
 8002b14:	fb02 f201 	mul.w	r2, r2, r1
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	637b      	str	r3, [r7, #52]	; 0x34
	  output_Test();
 8002b1c:	f000 fc54 	bl	80033c8 <output_Test>
	  rtc_Display7Seg();
 8002b20:	f7fe fc98 	bl	8001454 <rtc_Display7Seg>
	  button_Test();
 8002b24:	f7fe fbc8 	bl	80012b8 <button_Test>
	  pwm_Test();
 8002b28:	f000 fcdc 	bl	80034e4 <pwm_Test>
	  if(flag_timer1){
 8002b2c:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <main+0xd4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0c4      	beq.n	8002abe <main+0x46>
		  flag_timer1 = 0;
 8002b34:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <main+0xd4>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
		  LcdTest();
 8002b3a:	f7ff fdb9 	bl	80026b0 <LcdTest>
	  while(!flag_timer2);
 8002b3e:	e7be      	b.n	8002abe <main+0x46>
 8002b40:	20000224 	.word	0x20000224
 8002b44:	20000598 	.word	0x20000598
 8002b48:	0800da7c 	.word	0x0800da7c
 8002b4c:	20000220 	.word	0x20000220

08002b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b094      	sub	sp, #80	; 0x50
 8002b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b56:	f107 0320 	add.w	r3, r7, #32
 8002b5a:	2230      	movs	r2, #48	; 0x30
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f008 f886 	bl	800ac70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b64:	f107 030c 	add.w	r3, r7, #12
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b74:	2300      	movs	r3, #0
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <SystemClock_Config+0xc8>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	4a26      	ldr	r2, [pc, #152]	; (8002c18 <SystemClock_Config+0xc8>)
 8002b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b82:	6413      	str	r3, [r2, #64]	; 0x40
 8002b84:	4b24      	ldr	r3, [pc, #144]	; (8002c18 <SystemClock_Config+0xc8>)
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b90:	2300      	movs	r3, #0
 8002b92:	607b      	str	r3, [r7, #4]
 8002b94:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <SystemClock_Config+0xcc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a20      	ldr	r2, [pc, #128]	; (8002c1c <SystemClock_Config+0xcc>)
 8002b9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	4b1e      	ldr	r3, [pc, #120]	; (8002c1c <SystemClock_Config+0xcc>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba8:	607b      	str	r3, [r7, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bac:	2301      	movs	r3, #1
 8002bae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002bc0:	2304      	movs	r3, #4
 8002bc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002bc4:	2348      	movs	r3, #72	; 0x48
 8002bc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002bcc:	2304      	movs	r3, #4
 8002bce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bd0:	f107 0320 	add.w	r3, r7, #32
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f004 fb67 	bl	80072a8 <HAL_RCC_OscConfig>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002be0:	f000 fc5e 	bl	80034a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002be4:	230f      	movs	r3, #15
 8002be6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002be8:	2302      	movs	r3, #2
 8002bea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bfa:	f107 030c 	add.w	r3, r7, #12
 8002bfe:	2102      	movs	r1, #2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f004 fdc9 	bl	8007798 <HAL_RCC_ClockConfig>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002c0c:	f000 fc48 	bl	80034a0 <Error_Handler>
  }
}
 8002c10:	bf00      	nop
 8002c12:	3750      	adds	r7, #80	; 0x50
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40007000 	.word	0x40007000

08002c20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c26:	463b      	mov	r3, r7
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002c32:	4b36      	ldr	r3, [pc, #216]	; (8002d0c <MX_ADC1_Init+0xec>)
 8002c34:	4a36      	ldr	r2, [pc, #216]	; (8002d10 <MX_ADC1_Init+0xf0>)
 8002c36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002c38:	4b34      	ldr	r3, [pc, #208]	; (8002d0c <MX_ADC1_Init+0xec>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c3e:	4b33      	ldr	r3, [pc, #204]	; (8002d0c <MX_ADC1_Init+0xec>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002c44:	4b31      	ldr	r3, [pc, #196]	; (8002d0c <MX_ADC1_Init+0xec>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c4a:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <MX_ADC1_Init+0xec>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c50:	4b2e      	ldr	r3, [pc, #184]	; (8002d0c <MX_ADC1_Init+0xec>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c58:	4b2c      	ldr	r3, [pc, #176]	; (8002d0c <MX_ADC1_Init+0xec>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c5e:	4b2b      	ldr	r3, [pc, #172]	; (8002d0c <MX_ADC1_Init+0xec>)
 8002c60:	4a2c      	ldr	r2, [pc, #176]	; (8002d14 <MX_ADC1_Init+0xf4>)
 8002c62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c64:	4b29      	ldr	r3, [pc, #164]	; (8002d0c <MX_ADC1_Init+0xec>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002c6a:	4b28      	ldr	r3, [pc, #160]	; (8002d0c <MX_ADC1_Init+0xec>)
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c70:	4b26      	ldr	r3, [pc, #152]	; (8002d0c <MX_ADC1_Init+0xec>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c78:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <MX_ADC1_Init+0xec>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c7e:	4823      	ldr	r0, [pc, #140]	; (8002d0c <MX_ADC1_Init+0xec>)
 8002c80:	f001 fa5a 	bl	8004138 <HAL_ADC_Init>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002c8a:	f000 fc09 	bl	80034a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002c8e:	230a      	movs	r3, #10
 8002c90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002c92:	2301      	movs	r3, #1
 8002c94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002c96:	2301      	movs	r3, #1
 8002c98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c9a:	463b      	mov	r3, r7
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	481b      	ldr	r0, [pc, #108]	; (8002d0c <MX_ADC1_Init+0xec>)
 8002ca0:	f001 fbbc 	bl	800441c <HAL_ADC_ConfigChannel>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002caa:	f000 fbf9 	bl	80034a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002cae:	230b      	movs	r3, #11
 8002cb0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cb6:	463b      	mov	r3, r7
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4814      	ldr	r0, [pc, #80]	; (8002d0c <MX_ADC1_Init+0xec>)
 8002cbc:	f001 fbae 	bl	800441c <HAL_ADC_ConfigChannel>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8002cc6:	f000 fbeb 	bl	80034a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002cca:	2308      	movs	r3, #8
 8002ccc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cd2:	463b      	mov	r3, r7
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	480d      	ldr	r0, [pc, #52]	; (8002d0c <MX_ADC1_Init+0xec>)
 8002cd8:	f001 fba0 	bl	800441c <HAL_ADC_ConfigChannel>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8002ce2:	f000 fbdd 	bl	80034a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002ce6:	2309      	movs	r3, #9
 8002ce8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002cea:	2304      	movs	r3, #4
 8002cec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cee:	463b      	mov	r3, r7
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4806      	ldr	r0, [pc, #24]	; (8002d0c <MX_ADC1_Init+0xec>)
 8002cf4:	f001 fb92 	bl	800441c <HAL_ADC_ConfigChannel>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8002cfe:	f000 fbcf 	bl	80034a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200002ec 	.word	0x200002ec
 8002d10:	40012000 	.word	0x40012000
 8002d14:	0f000001 	.word	0x0f000001

08002d18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d1c:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <MX_I2C1_Init+0x50>)
 8002d1e:	4a13      	ldr	r2, [pc, #76]	; (8002d6c <MX_I2C1_Init+0x54>)
 8002d20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d22:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <MX_I2C1_Init+0x50>)
 8002d24:	4a12      	ldr	r2, [pc, #72]	; (8002d70 <MX_I2C1_Init+0x58>)
 8002d26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d28:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <MX_I2C1_Init+0x50>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <MX_I2C1_Init+0x50>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <MX_I2C1_Init+0x50>)
 8002d36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d3c:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <MX_I2C1_Init+0x50>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d42:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <MX_I2C1_Init+0x50>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d48:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <MX_I2C1_Init+0x50>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <MX_I2C1_Init+0x50>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d54:	4804      	ldr	r0, [pc, #16]	; (8002d68 <MX_I2C1_Init+0x50>)
 8002d56:	f002 fcf3 	bl	8005740 <HAL_I2C_Init>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d60:	f000 fb9e 	bl	80034a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d64:	bf00      	nop
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000250 	.word	0x20000250
 8002d6c:	40005400 	.word	0x40005400
 8002d70:	000186a0 	.word	0x000186a0

08002d74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d78:	4b17      	ldr	r3, [pc, #92]	; (8002dd8 <MX_SPI1_Init+0x64>)
 8002d7a:	4a18      	ldr	r2, [pc, #96]	; (8002ddc <MX_SPI1_Init+0x68>)
 8002d7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d7e:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <MX_SPI1_Init+0x64>)
 8002d80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d86:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <MX_SPI1_Init+0x64>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d8c:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <MX_SPI1_Init+0x64>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <MX_SPI1_Init+0x64>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d98:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <MX_SPI1_Init+0x64>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <MX_SPI1_Init+0x64>)
 8002da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002da4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002da6:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <MX_SPI1_Init+0x64>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dac:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <MX_SPI1_Init+0x64>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <MX_SPI1_Init+0x64>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002db8:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <MX_SPI1_Init+0x64>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <MX_SPI1_Init+0x64>)
 8002dc0:	220a      	movs	r2, #10
 8002dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002dc4:	4804      	ldr	r0, [pc, #16]	; (8002dd8 <MX_SPI1_Init+0x64>)
 8002dc6:	f004 fee3 	bl	8007b90 <HAL_SPI_Init>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002dd0:	f000 fb66 	bl	80034a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002dd4:	bf00      	nop
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20000430 	.word	0x20000430
 8002ddc:	40013000 	.word	0x40013000

08002de0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002de6:	f107 0308 	add.w	r3, r7, #8
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	605a      	str	r2, [r3, #4]
 8002df0:	609a      	str	r2, [r3, #8]
 8002df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002df4:	463b      	mov	r3, r7
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002dfc:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <MX_TIM2_Init+0x94>)
 8002dfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <MX_TIM2_Init+0x94>)
 8002e06:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002e0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <MX_TIM2_Init+0x94>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8002e12:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <MX_TIM2_Init+0x94>)
 8002e14:	2263      	movs	r2, #99	; 0x63
 8002e16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e18:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <MX_TIM2_Init+0x94>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <MX_TIM2_Init+0x94>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e24:	4813      	ldr	r0, [pc, #76]	; (8002e74 <MX_TIM2_Init+0x94>)
 8002e26:	f005 fdbd 	bl	80089a4 <HAL_TIM_Base_Init>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002e30:	f000 fb36 	bl	80034a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e3a:	f107 0308 	add.w	r3, r7, #8
 8002e3e:	4619      	mov	r1, r3
 8002e40:	480c      	ldr	r0, [pc, #48]	; (8002e74 <MX_TIM2_Init+0x94>)
 8002e42:	f006 f9c3 	bl	80091cc <HAL_TIM_ConfigClockSource>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002e4c:	f000 fb28 	bl	80034a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e50:	2300      	movs	r3, #0
 8002e52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e58:	463b      	mov	r3, r7
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4805      	ldr	r0, [pc, #20]	; (8002e74 <MX_TIM2_Init+0x94>)
 8002e5e:	f006 fdb5 	bl	80099cc <HAL_TIMEx_MasterConfigSynchronization>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002e68:	f000 fb1a 	bl	80034a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e6c:	bf00      	nop
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20000488 	.word	0x20000488

08002e78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e7e:	f107 0308 	add.w	r3, r7, #8
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	605a      	str	r2, [r3, #4]
 8002e88:	609a      	str	r2, [r3, #8]
 8002e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e8c:	463b      	mov	r3, r7
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e94:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <MX_TIM3_Init+0x94>)
 8002e96:	4a1e      	ldr	r2, [pc, #120]	; (8002f10 <MX_TIM3_Init+0x98>)
 8002e98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002e9a:	4b1c      	ldr	r3, [pc, #112]	; (8002f0c <MX_TIM3_Init+0x94>)
 8002e9c:	2247      	movs	r2, #71	; 0x47
 8002e9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea0:	4b1a      	ldr	r3, [pc, #104]	; (8002f0c <MX_TIM3_Init+0x94>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8002ea6:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <MX_TIM3_Init+0x94>)
 8002ea8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002eac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eae:	4b17      	ldr	r3, [pc, #92]	; (8002f0c <MX_TIM3_Init+0x94>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002eb4:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <MX_TIM3_Init+0x94>)
 8002eb6:	2280      	movs	r2, #128	; 0x80
 8002eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002eba:	4814      	ldr	r0, [pc, #80]	; (8002f0c <MX_TIM3_Init+0x94>)
 8002ebc:	f005 fd72 	bl	80089a4 <HAL_TIM_Base_Init>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002ec6:	f000 faeb 	bl	80034a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ece:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ed0:	f107 0308 	add.w	r3, r7, #8
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	480d      	ldr	r0, [pc, #52]	; (8002f0c <MX_TIM3_Init+0x94>)
 8002ed8:	f006 f978 	bl	80091cc <HAL_TIM_ConfigClockSource>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002ee2:	f000 fadd 	bl	80034a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eea:	2300      	movs	r3, #0
 8002eec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002eee:	463b      	mov	r3, r7
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4806      	ldr	r0, [pc, #24]	; (8002f0c <MX_TIM3_Init+0x94>)
 8002ef4:	f006 fd6a 	bl	80099cc <HAL_TIMEx_MasterConfigSynchronization>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002efe:	f000 facf 	bl	80034a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f02:	bf00      	nop
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	200002a4 	.word	0x200002a4
 8002f10:	40000400 	.word	0x40000400

08002f14 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f1a:	1d3b      	adds	r3, r7, #4
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	60da      	str	r2, [r3, #12]
 8002f26:	611a      	str	r2, [r3, #16]
 8002f28:	615a      	str	r2, [r3, #20]
 8002f2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002f2c:	4b1e      	ldr	r3, [pc, #120]	; (8002fa8 <MX_TIM13_Init+0x94>)
 8002f2e:	4a1f      	ldr	r2, [pc, #124]	; (8002fac <MX_TIM13_Init+0x98>)
 8002f30:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 7199;
 8002f32:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <MX_TIM13_Init+0x94>)
 8002f34:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002f38:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f3a:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <MX_TIM13_Init+0x94>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9;
 8002f40:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <MX_TIM13_Init+0x94>)
 8002f42:	2209      	movs	r2, #9
 8002f44:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f46:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <MX_TIM13_Init+0x94>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f4c:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <MX_TIM13_Init+0x94>)
 8002f4e:	2280      	movs	r2, #128	; 0x80
 8002f50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002f52:	4815      	ldr	r0, [pc, #84]	; (8002fa8 <MX_TIM13_Init+0x94>)
 8002f54:	f005 fd26 	bl	80089a4 <HAL_TIM_Base_Init>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002f5e:	f000 fa9f 	bl	80034a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002f62:	4811      	ldr	r0, [pc, #68]	; (8002fa8 <MX_TIM13_Init+0x94>)
 8002f64:	f005 fe46 	bl	8008bf4 <HAL_TIM_PWM_Init>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002f6e:	f000 fa97 	bl	80034a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f72:	2360      	movs	r3, #96	; 0x60
 8002f74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f82:	1d3b      	adds	r3, r7, #4
 8002f84:	2200      	movs	r2, #0
 8002f86:	4619      	mov	r1, r3
 8002f88:	4807      	ldr	r0, [pc, #28]	; (8002fa8 <MX_TIM13_Init+0x94>)
 8002f8a:	f006 f85d 	bl	8009048 <HAL_TIM_PWM_ConfigChannel>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002f94:	f000 fa84 	bl	80034a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002f98:	4803      	ldr	r0, [pc, #12]	; (8002fa8 <MX_TIM13_Init+0x94>)
 8002f9a:	f000 fc75 	bl	8003888 <HAL_TIM_MspPostInit>

}
 8002f9e:	bf00      	nop
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000344 	.word	0x20000344
 8002fac:	40001c00 	.word	0x40001c00

08002fb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fb4:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <MX_USART1_UART_Init+0x4c>)
 8002fb6:	4a12      	ldr	r2, [pc, #72]	; (8003000 <MX_USART1_UART_Init+0x50>)
 8002fb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <MX_USART1_UART_Init+0x4c>)
 8002fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <MX_USART1_UART_Init+0x4c>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fc8:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <MX_USART1_UART_Init+0x4c>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fce:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <MX_USART1_UART_Init+0x4c>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fd4:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <MX_USART1_UART_Init+0x4c>)
 8002fd6:	220c      	movs	r2, #12
 8002fd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fda:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <MX_USART1_UART_Init+0x4c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <MX_USART1_UART_Init+0x4c>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fe6:	4805      	ldr	r0, [pc, #20]	; (8002ffc <MX_USART1_UART_Init+0x4c>)
 8002fe8:	f006 fd80 	bl	8009aec <HAL_UART_Init>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ff2:	f000 fa55 	bl	80034a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2000038c 	.word	0x2000038c
 8003000:	40011000 	.word	0x40011000

08003004 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003008:	4b11      	ldr	r3, [pc, #68]	; (8003050 <MX_USART2_UART_Init+0x4c>)
 800300a:	4a12      	ldr	r2, [pc, #72]	; (8003054 <MX_USART2_UART_Init+0x50>)
 800300c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800300e:	4b10      	ldr	r3, [pc, #64]	; (8003050 <MX_USART2_UART_Init+0x4c>)
 8003010:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003014:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003016:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <MX_USART2_UART_Init+0x4c>)
 8003018:	2200      	movs	r2, #0
 800301a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <MX_USART2_UART_Init+0x4c>)
 800301e:	2200      	movs	r2, #0
 8003020:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003022:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <MX_USART2_UART_Init+0x4c>)
 8003024:	2200      	movs	r2, #0
 8003026:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003028:	4b09      	ldr	r3, [pc, #36]	; (8003050 <MX_USART2_UART_Init+0x4c>)
 800302a:	220c      	movs	r2, #12
 800302c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800302e:	4b08      	ldr	r3, [pc, #32]	; (8003050 <MX_USART2_UART_Init+0x4c>)
 8003030:	2200      	movs	r2, #0
 8003032:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <MX_USART2_UART_Init+0x4c>)
 8003036:	2200      	movs	r2, #0
 8003038:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800303a:	4805      	ldr	r0, [pc, #20]	; (8003050 <MX_USART2_UART_Init+0x4c>)
 800303c:	f006 fd56 	bl	8009aec <HAL_UART_Init>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003046:	f000 fa2b 	bl	80034a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	200004d0 	.word	0x200004d0
 8003054:	40004400 	.word	0x40004400

08003058 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	607b      	str	r3, [r7, #4]
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <MX_DMA_Init+0x3c>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	4a0b      	ldr	r2, [pc, #44]	; (8003094 <MX_DMA_Init+0x3c>)
 8003068:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800306c:	6313      	str	r3, [r2, #48]	; 0x30
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <MX_DMA_Init+0x3c>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003076:	607b      	str	r3, [r7, #4]
 8003078:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800307a:	2200      	movs	r2, #0
 800307c:	2100      	movs	r1, #0
 800307e:	2038      	movs	r0, #56	; 0x38
 8003080:	f001 fd47 	bl	8004b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003084:	2038      	movs	r0, #56	; 0x38
 8003086:	f001 fd60 	bl	8004b4a <HAL_NVIC_EnableIRQ>

}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800

08003098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08e      	sub	sp, #56	; 0x38
 800309c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	609a      	str	r2, [r3, #8]
 80030aa:	60da      	str	r2, [r3, #12]
 80030ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	623b      	str	r3, [r7, #32]
 80030b2:	4b80      	ldr	r3, [pc, #512]	; (80032b4 <MX_GPIO_Init+0x21c>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a7f      	ldr	r2, [pc, #508]	; (80032b4 <MX_GPIO_Init+0x21c>)
 80030b8:	f043 0310 	orr.w	r3, r3, #16
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b7d      	ldr	r3, [pc, #500]	; (80032b4 <MX_GPIO_Init+0x21c>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	623b      	str	r3, [r7, #32]
 80030c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	4b79      	ldr	r3, [pc, #484]	; (80032b4 <MX_GPIO_Init+0x21c>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a78      	ldr	r2, [pc, #480]	; (80032b4 <MX_GPIO_Init+0x21c>)
 80030d4:	f043 0304 	orr.w	r3, r3, #4
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
 80030da:	4b76      	ldr	r3, [pc, #472]	; (80032b4 <MX_GPIO_Init+0x21c>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	4b72      	ldr	r3, [pc, #456]	; (80032b4 <MX_GPIO_Init+0x21c>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	4a71      	ldr	r2, [pc, #452]	; (80032b4 <MX_GPIO_Init+0x21c>)
 80030f0:	f043 0320 	orr.w	r3, r3, #32
 80030f4:	6313      	str	r3, [r2, #48]	; 0x30
 80030f6:	4b6f      	ldr	r3, [pc, #444]	; (80032b4 <MX_GPIO_Init+0x21c>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	4b6b      	ldr	r3, [pc, #428]	; (80032b4 <MX_GPIO_Init+0x21c>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4a6a      	ldr	r2, [pc, #424]	; (80032b4 <MX_GPIO_Init+0x21c>)
 800310c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
 8003112:	4b68      	ldr	r3, [pc, #416]	; (80032b4 <MX_GPIO_Init+0x21c>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	4b64      	ldr	r3, [pc, #400]	; (80032b4 <MX_GPIO_Init+0x21c>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a63      	ldr	r2, [pc, #396]	; (80032b4 <MX_GPIO_Init+0x21c>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b61      	ldr	r3, [pc, #388]	; (80032b4 <MX_GPIO_Init+0x21c>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	4b5d      	ldr	r3, [pc, #372]	; (80032b4 <MX_GPIO_Init+0x21c>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	4a5c      	ldr	r2, [pc, #368]	; (80032b4 <MX_GPIO_Init+0x21c>)
 8003144:	f043 0302 	orr.w	r3, r3, #2
 8003148:	6313      	str	r3, [r2, #48]	; 0x30
 800314a:	4b5a      	ldr	r3, [pc, #360]	; (80032b4 <MX_GPIO_Init+0x21c>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	4b56      	ldr	r3, [pc, #344]	; (80032b4 <MX_GPIO_Init+0x21c>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	4a55      	ldr	r2, [pc, #340]	; (80032b4 <MX_GPIO_Init+0x21c>)
 8003160:	f043 0308 	orr.w	r3, r3, #8
 8003164:	6313      	str	r3, [r2, #48]	; 0x30
 8003166:	4b53      	ldr	r3, [pc, #332]	; (80032b4 <MX_GPIO_Init+0x21c>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
 8003176:	4b4f      	ldr	r3, [pc, #316]	; (80032b4 <MX_GPIO_Init+0x21c>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	4a4e      	ldr	r2, [pc, #312]	; (80032b4 <MX_GPIO_Init+0x21c>)
 800317c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003180:	6313      	str	r3, [r2, #48]	; 0x30
 8003182:	4b4c      	ldr	r3, [pc, #304]	; (80032b4 <MX_GPIO_Init+0x21c>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800318e:	2200      	movs	r2, #0
 8003190:	2170      	movs	r1, #112	; 0x70
 8003192:	4849      	ldr	r0, [pc, #292]	; (80032b8 <MX_GPIO_Init+0x220>)
 8003194:	f002 faa0 	bl	80056d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8003198:	2200      	movs	r2, #0
 800319a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800319e:	4847      	ldr	r0, [pc, #284]	; (80032bc <MX_GPIO_Init+0x224>)
 80031a0:	f002 fa9a 	bl	80056d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_LED3_Pin|LD_LED1_Pin|LD_LED4_Pin, GPIO_PIN_RESET);
 80031a4:	2200      	movs	r2, #0
 80031a6:	f640 4104 	movw	r1, #3076	; 0xc04
 80031aa:	4845      	ldr	r0, [pc, #276]	; (80032c0 <MX_GPIO_Init+0x228>)
 80031ac:	f002 fa94 	bl	80056d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LED2_GPIO_Port, LD_LED2_Pin, GPIO_PIN_RESET);
 80031b0:	2200      	movs	r2, #0
 80031b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031b6:	4843      	ldr	r0, [pc, #268]	; (80032c4 <MX_GPIO_Init+0x22c>)
 80031b8:	f002 fa8e 	bl	80056d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|ONE_WIRE_Pin, GPIO_PIN_RESET);
 80031bc:	2200      	movs	r2, #0
 80031be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80031c2:	4841      	ldr	r0, [pc, #260]	; (80032c8 <MX_GPIO_Init+0x230>)
 80031c4:	f002 fa88 	bl	80056d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80031c8:	2200      	movs	r2, #0
 80031ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031ce:	483f      	ldr	r0, [pc, #252]	; (80032cc <MX_GPIO_Init+0x234>)
 80031d0:	f002 fa82 	bl	80056d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BTN_LOAD_Pin|LD_COLON_Pin, GPIO_PIN_RESET);
 80031d4:	2200      	movs	r2, #0
 80031d6:	2148      	movs	r1, #72	; 0x48
 80031d8:	483d      	ldr	r0, [pc, #244]	; (80032d0 <MX_GPIO_Init+0x238>)
 80031da:	f002 fa7d 	bl	80056d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin OUTPUT_Y0_Pin OUTPUT_Y1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80031de:	2370      	movs	r3, #112	; 0x70
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031e2:	2301      	movs	r3, #1
 80031e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ea:	2300      	movs	r3, #0
 80031ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031f2:	4619      	mov	r1, r3
 80031f4:	4830      	ldr	r0, [pc, #192]	; (80032b8 <MX_GPIO_Init+0x220>)
 80031f6:	f002 f8d3 	bl	80053a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_RES_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80031fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003200:	2301      	movs	r3, #1
 8003202:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003204:	2301      	movs	r3, #1
 8003206:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003208:	2300      	movs	r3, #0
 800320a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800320c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003210:	4619      	mov	r1, r3
 8003212:	482a      	ldr	r0, [pc, #168]	; (80032bc <MX_GPIO_Init+0x224>)
 8003214:	f002 f8c4 	bl	80053a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_LED3_Pin LD_LED1_Pin LD_LED4_Pin */
  GPIO_InitStruct.Pin = LD_LED3_Pin|LD_LED1_Pin|LD_LED4_Pin;
 8003218:	f640 4304 	movw	r3, #3076	; 0xc04
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800321e:	2301      	movs	r3, #1
 8003220:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	2300      	movs	r3, #0
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003226:	2300      	movs	r3, #0
 8003228:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800322e:	4619      	mov	r1, r3
 8003230:	4823      	ldr	r0, [pc, #140]	; (80032c0 <MX_GPIO_Init+0x228>)
 8003232:	f002 f8b5 	bl	80053a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_LED2_Pin */
  GPIO_InitStruct.Pin = LD_LED2_Pin;
 8003236:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800323c:	2301      	movs	r3, #1
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003244:	2300      	movs	r3, #0
 8003246:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LED2_GPIO_Port, &GPIO_InitStruct);
 8003248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800324c:	4619      	mov	r1, r3
 800324e:	481d      	ldr	r0, [pc, #116]	; (80032c4 <MX_GPIO_Init+0x22c>)
 8003250:	f002 f8a6 	bl	80053a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_LATCH_Pin ONE_WIRE_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|ONE_WIRE_Pin;
 8003254:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800325a:	2301      	movs	r3, #1
 800325c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325e:	2300      	movs	r3, #0
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003262:	2300      	movs	r3, #0
 8003264:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800326a:	4619      	mov	r1, r3
 800326c:	4816      	ldr	r0, [pc, #88]	; (80032c8 <MX_GPIO_Init+0x230>)
 800326e:	f002 f897 	bl	80053a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8003272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003278:	2301      	movs	r3, #1
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800327c:	2301      	movs	r3, #1
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003280:	2303      	movs	r3, #3
 8003282:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8003284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003288:	4619      	mov	r1, r3
 800328a:	4810      	ldr	r0, [pc, #64]	; (80032cc <MX_GPIO_Init+0x234>)
 800328c:	f002 f888 	bl	80053a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_LOAD_Pin LD_COLON_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin|LD_COLON_Pin;
 8003290:	2348      	movs	r3, #72	; 0x48
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003294:	2301      	movs	r3, #1
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003298:	2300      	movs	r3, #0
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329c:	2300      	movs	r3, #0
 800329e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a4:	4619      	mov	r1, r3
 80032a6:	480a      	ldr	r0, [pc, #40]	; (80032d0 <MX_GPIO_Init+0x238>)
 80032a8:	f002 f87a 	bl	80053a0 <HAL_GPIO_Init>

}
 80032ac:	bf00      	nop
 80032ae:	3738      	adds	r7, #56	; 0x38
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40020800 	.word	0x40020800
 80032c0:	40020400 	.word	0x40020400
 80032c4:	40021400 	.word	0x40021400
 80032c8:	40021800 	.word	0x40021800
 80032cc:	40020000 	.word	0x40020000
 80032d0:	40020c00 	.word	0x40020c00

080032d4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08e      	sub	sp, #56	; 0x38
 80032d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80032da:	f107 031c 	add.w	r3, r7, #28
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	605a      	str	r2, [r3, #4]
 80032e4:	609a      	str	r2, [r3, #8]
 80032e6:	60da      	str	r2, [r3, #12]
 80032e8:	611a      	str	r2, [r3, #16]
 80032ea:	615a      	str	r2, [r3, #20]
 80032ec:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80032ee:	463b      	mov	r3, r7
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	611a      	str	r2, [r3, #16]
 80032fc:	615a      	str	r2, [r3, #20]
 80032fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8003300:	4b2f      	ldr	r3, [pc, #188]	; (80033c0 <MX_FSMC_Init+0xec>)
 8003302:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003306:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003308:	4b2d      	ldr	r3, [pc, #180]	; (80033c0 <MX_FSMC_Init+0xec>)
 800330a:	4a2e      	ldr	r2, [pc, #184]	; (80033c4 <MX_FSMC_Init+0xf0>)
 800330c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800330e:	4b2c      	ldr	r3, [pc, #176]	; (80033c0 <MX_FSMC_Init+0xec>)
 8003310:	2200      	movs	r2, #0
 8003312:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8003314:	4b2a      	ldr	r3, [pc, #168]	; (80033c0 <MX_FSMC_Init+0xec>)
 8003316:	2200      	movs	r2, #0
 8003318:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800331a:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <MX_FSMC_Init+0xec>)
 800331c:	2200      	movs	r2, #0
 800331e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003320:	4b27      	ldr	r3, [pc, #156]	; (80033c0 <MX_FSMC_Init+0xec>)
 8003322:	2210      	movs	r2, #16
 8003324:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003326:	4b26      	ldr	r3, [pc, #152]	; (80033c0 <MX_FSMC_Init+0xec>)
 8003328:	2200      	movs	r2, #0
 800332a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800332c:	4b24      	ldr	r3, [pc, #144]	; (80033c0 <MX_FSMC_Init+0xec>)
 800332e:	2200      	movs	r2, #0
 8003330:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8003332:	4b23      	ldr	r3, [pc, #140]	; (80033c0 <MX_FSMC_Init+0xec>)
 8003334:	2200      	movs	r2, #0
 8003336:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003338:	4b21      	ldr	r3, [pc, #132]	; (80033c0 <MX_FSMC_Init+0xec>)
 800333a:	2200      	movs	r2, #0
 800333c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800333e:	4b20      	ldr	r3, [pc, #128]	; (80033c0 <MX_FSMC_Init+0xec>)
 8003340:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003344:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8003346:	4b1e      	ldr	r3, [pc, #120]	; (80033c0 <MX_FSMC_Init+0xec>)
 8003348:	2200      	movs	r2, #0
 800334a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800334c:	4b1c      	ldr	r3, [pc, #112]	; (80033c0 <MX_FSMC_Init+0xec>)
 800334e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003354:	4b1a      	ldr	r3, [pc, #104]	; (80033c0 <MX_FSMC_Init+0xec>)
 8003356:	2200      	movs	r2, #0
 8003358:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800335a:	4b19      	ldr	r3, [pc, #100]	; (80033c0 <MX_FSMC_Init+0xec>)
 800335c:	2200      	movs	r2, #0
 800335e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8003360:	4b17      	ldr	r3, [pc, #92]	; (80033c0 <MX_FSMC_Init+0xec>)
 8003362:	2200      	movs	r2, #0
 8003364:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0x0f;
 8003366:	230f      	movs	r3, #15
 8003368:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800336a:	230f      	movs	r3, #15
 800336c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800336e:	233c      	movs	r3, #60	; 0x3c
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0x00;
 8003372:	2300      	movs	r3, #0
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8003376:	2310      	movs	r3, #16
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800337a:	2311      	movs	r3, #17
 800337c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800337e:	2300      	movs	r3, #0
 8003380:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 9;
 8003382:	2309      	movs	r3, #9
 8003384:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8003386:	230f      	movs	r3, #15
 8003388:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 8;
 800338a:	2308      	movs	r3, #8
 800338c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8003392:	2310      	movs	r3, #16
 8003394:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8003396:	2311      	movs	r3, #17
 8003398:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800339a:	2300      	movs	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800339e:	463a      	mov	r2, r7
 80033a0:	f107 031c 	add.w	r3, r7, #28
 80033a4:	4619      	mov	r1, r3
 80033a6:	4806      	ldr	r0, [pc, #24]	; (80033c0 <MX_FSMC_Init+0xec>)
 80033a8:	f005 fab8 	bl	800891c <HAL_SRAM_Init>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80033b2:	f000 f875 	bl	80034a0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */
  /* USER CODE END FSMC_Init 2 */
}
 80033b6:	bf00      	nop
 80033b8:	3738      	adds	r7, #56	; 0x38
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	200005d4 	.word	0x200005d4
 80033c4:	a0000104 	.word	0xa0000104

080033c8 <output_Test>:
	__HAL_TIM_ENABLE(&htim3);
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
	__HAL_TIM_DISABLE(&htim3);
}

void output_Test(){
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, button_count[1]);
 80033cc:	4b21      	ldr	r3, [pc, #132]	; (8003454 <output_Test+0x8c>)
 80033ce:	785b      	ldrb	r3, [r3, #1]
 80033d0:	461a      	mov	r2, r3
 80033d2:	2120      	movs	r1, #32
 80033d4:	4820      	ldr	r0, [pc, #128]	; (8003458 <output_Test+0x90>)
 80033d6:	f002 f97f 	bl	80056d8 <HAL_GPIO_WritePin>
	counter_debug = (counter_debug + 1)%20;
 80033da:	4b20      	ldr	r3, [pc, #128]	; (800345c <output_Test+0x94>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	4b1f      	ldr	r3, [pc, #124]	; (8003460 <output_Test+0x98>)
 80033e2:	fb83 1302 	smull	r1, r3, r3, r2
 80033e6:	10d9      	asrs	r1, r3, #3
 80033e8:	17d3      	asrs	r3, r2, #31
 80033ea:	1ac9      	subs	r1, r1, r3
 80033ec:	460b      	mov	r3, r1
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	1ad1      	subs	r1, r2, r3
 80033f6:	b2ca      	uxtb	r2, r1
 80033f8:	4b18      	ldr	r3, [pc, #96]	; (800345c <output_Test+0x94>)
 80033fa:	701a      	strb	r2, [r3, #0]
	if(counter_debug == 0){
 80033fc:	4b17      	ldr	r3, [pc, #92]	; (800345c <output_Test+0x94>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d103      	bne.n	800340c <output_Test+0x44>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8003404:	2110      	movs	r1, #16
 8003406:	4814      	ldr	r0, [pc, #80]	; (8003458 <output_Test+0x90>)
 8003408:	f002 f97f 	bl	800570a <HAL_GPIO_TogglePin>
	}
	if(button_count[2] % 20 == 1){
 800340c:	4b11      	ldr	r3, [pc, #68]	; (8003454 <output_Test+0x8c>)
 800340e:	789a      	ldrb	r2, [r3, #2]
 8003410:	4b14      	ldr	r3, [pc, #80]	; (8003464 <output_Test+0x9c>)
 8003412:	fba3 1302 	umull	r1, r3, r3, r2
 8003416:	0919      	lsrs	r1, r3, #4
 8003418:	460b      	mov	r3, r1
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	d103      	bne.n	8003430 <output_Test+0x68>
		HAL_GPIO_TogglePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin);
 8003428:	2140      	movs	r1, #64	; 0x40
 800342a:	480b      	ldr	r0, [pc, #44]	; (8003458 <output_Test+0x90>)
 800342c:	f002 f96d 	bl	800570a <HAL_GPIO_TogglePin>
	}
	if(button_count[3] == 1){
 8003430:	4b08      	ldr	r3, [pc, #32]	; (8003454 <output_Test+0x8c>)
 8003432:	78db      	ldrb	r3, [r3, #3]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d10b      	bne.n	8003450 <output_Test+0x88>
		Set_Dir(DFT_SCAN_DIR);
 8003438:	2060      	movs	r0, #96	; 0x60
 800343a:	f7fe feb1 	bl	80021a0 <Set_Dir>
		LCD_WR_REG(0x36);    // Memory Access Control
 800343e:	2036      	movs	r0, #54	; 0x36
 8003440:	f7fe f8ea 	bl	8001618 <LCD_WR_REG>
		LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8003444:	2068      	movs	r0, #104	; 0x68
 8003446:	f7fe f8f7 	bl	8001638 <LCD_WR_DATA>
		LCD_Clear(BLACK);
 800344a:	2000      	movs	r0, #0
 800344c:	f7fe f962 	bl	8001714 <LCD_Clear>
	}
}
 8003450:	bf00      	nop
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20000200 	.word	0x20000200
 8003458:	40021000 	.word	0x40021000
 800345c:	20000214 	.word	0x20000214
 8003460:	66666667 	.word	0x66666667
 8003464:	cccccccd 	.word	0xcccccccd

08003468 <init_system>:

void init_system(){
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
	timer_init();
 800346c:	f000 fc66 	bl	8003d3c <timer_init>
	pwm_init();
 8003470:	f000 f81c 	bl	80034ac <pwm_init>
	button_init();
 8003474:	f7fd feae 	bl	80011d4 <button_init>
	led7_init();
 8003478:	f7ff f998 	bl	80027ac <led7_init>
	adc_init();
 800347c:	f7fd fd60 	bl	8000f40 <adc_init>
	uart_init();
 8003480:	f000 fd10 	bl	8003ea4 <uart_init>
	LCD_Init();
 8003484:	f7fe feb0 	bl	80021e8 <LCD_Init>
	rtc_init();
 8003488:	f7fd ffdc 	bl	8001444 <rtc_init>
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 800348c:	2201      	movs	r2, #1
 800348e:	2110      	movs	r1, #16
 8003490:	4802      	ldr	r0, [pc, #8]	; (800349c <init_system+0x34>)
 8003492:	f002 f921 	bl	80056d8 <HAL_GPIO_WritePin>
}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40021000 	.word	0x40021000

080034a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034a4:	b672      	cpsid	i
}
 80034a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034a8:	e7fe      	b.n	80034a8 <Error_Handler+0x8>
	...

080034ac <pwm_init>:

#include "pwm.h"

unsigned char pwm = 0;

void pwm_init(){
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80034b0:	2100      	movs	r1, #0
 80034b2:	4802      	ldr	r0, [pc, #8]	; (80034bc <pwm_init+0x10>)
 80034b4:	f005 fbf8 	bl	8008ca8 <HAL_TIM_PWM_Start>
}
 80034b8:	bf00      	nop
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	20000344 	.word	0x20000344

080034c0 <pwm_SetDutyCycle>:

void pwm_SetDutyCycle(unsigned char value){
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim13,TIM_CHANNEL_1,value);
 80034ca:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <pwm_SetDutyCycle+0x20>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	79fa      	ldrb	r2, [r7, #7]
 80034d0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	20000344 	.word	0x20000344

080034e4 <pwm_Test>:

void pwm_Test(){
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
	if(button_count[0] == 1){
 80034e8:	4b0e      	ldr	r3, [pc, #56]	; (8003524 <pwm_Test+0x40>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d112      	bne.n	8003516 <pwm_Test+0x32>
		if(pwm == 0) pwm = 5;
 80034f0:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <pwm_Test+0x44>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d103      	bne.n	8003500 <pwm_Test+0x1c>
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <pwm_Test+0x44>)
 80034fa:	2205      	movs	r2, #5
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e00a      	b.n	8003516 <pwm_Test+0x32>
		else if(pwm == 5) pwm = 9;
 8003500:	4b09      	ldr	r3, [pc, #36]	; (8003528 <pwm_Test+0x44>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b05      	cmp	r3, #5
 8003506:	d103      	bne.n	8003510 <pwm_Test+0x2c>
 8003508:	4b07      	ldr	r3, [pc, #28]	; (8003528 <pwm_Test+0x44>)
 800350a:	2209      	movs	r2, #9
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	e002      	b.n	8003516 <pwm_Test+0x32>
		else pwm = 0;
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <pwm_Test+0x44>)
 8003512:	2200      	movs	r2, #0
 8003514:	701a      	strb	r2, [r3, #0]
	}
	pwm_SetDutyCycle(pwm);
 8003516:	4b04      	ldr	r3, [pc, #16]	; (8003528 <pwm_Test+0x44>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff ffd0 	bl	80034c0 <pwm_SetDutyCycle>
}
 8003520:	bf00      	nop
 8003522:	bd80      	pop	{r7, pc}
 8003524:	20000200 	.word	0x20000200
 8003528:	20000215 	.word	0x20000215

0800352c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	607b      	str	r3, [r7, #4]
 8003536:	4b10      	ldr	r3, [pc, #64]	; (8003578 <HAL_MspInit+0x4c>)
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	4a0f      	ldr	r2, [pc, #60]	; (8003578 <HAL_MspInit+0x4c>)
 800353c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003540:	6453      	str	r3, [r2, #68]	; 0x44
 8003542:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <HAL_MspInit+0x4c>)
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800354a:	607b      	str	r3, [r7, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	603b      	str	r3, [r7, #0]
 8003552:	4b09      	ldr	r3, [pc, #36]	; (8003578 <HAL_MspInit+0x4c>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	4a08      	ldr	r2, [pc, #32]	; (8003578 <HAL_MspInit+0x4c>)
 8003558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355c:	6413      	str	r3, [r2, #64]	; 0x40
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_MspInit+0x4c>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40023800 	.word	0x40023800

0800357c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	; 0x28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a3c      	ldr	r2, [pc, #240]	; (800368c <HAL_ADC_MspInit+0x110>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d171      	bne.n	8003682 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	4b3b      	ldr	r3, [pc, #236]	; (8003690 <HAL_ADC_MspInit+0x114>)
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	4a3a      	ldr	r2, [pc, #232]	; (8003690 <HAL_ADC_MspInit+0x114>)
 80035a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ac:	6453      	str	r3, [r2, #68]	; 0x44
 80035ae:	4b38      	ldr	r3, [pc, #224]	; (8003690 <HAL_ADC_MspInit+0x114>)
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	4b34      	ldr	r3, [pc, #208]	; (8003690 <HAL_ADC_MspInit+0x114>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	4a33      	ldr	r2, [pc, #204]	; (8003690 <HAL_ADC_MspInit+0x114>)
 80035c4:	f043 0304 	orr.w	r3, r3, #4
 80035c8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ca:	4b31      	ldr	r3, [pc, #196]	; (8003690 <HAL_ADC_MspInit+0x114>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	4b2d      	ldr	r3, [pc, #180]	; (8003690 <HAL_ADC_MspInit+0x114>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	4a2c      	ldr	r2, [pc, #176]	; (8003690 <HAL_ADC_MspInit+0x114>)
 80035e0:	f043 0302 	orr.w	r3, r3, #2
 80035e4:	6313      	str	r3, [r2, #48]	; 0x30
 80035e6:	4b2a      	ldr	r3, [pc, #168]	; (8003690 <HAL_ADC_MspInit+0x114>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80035f2:	2303      	movs	r3, #3
 80035f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035f6:	2303      	movs	r3, #3
 80035f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035fe:	f107 0314 	add.w	r3, r7, #20
 8003602:	4619      	mov	r1, r3
 8003604:	4823      	ldr	r0, [pc, #140]	; (8003694 <HAL_ADC_MspInit+0x118>)
 8003606:	f001 fecb 	bl	80053a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800360a:	2303      	movs	r3, #3
 800360c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800360e:	2303      	movs	r3, #3
 8003610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003616:	f107 0314 	add.w	r3, r7, #20
 800361a:	4619      	mov	r1, r3
 800361c:	481e      	ldr	r0, [pc, #120]	; (8003698 <HAL_ADC_MspInit+0x11c>)
 800361e:	f001 febf 	bl	80053a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003622:	4b1e      	ldr	r3, [pc, #120]	; (800369c <HAL_ADC_MspInit+0x120>)
 8003624:	4a1e      	ldr	r2, [pc, #120]	; (80036a0 <HAL_ADC_MspInit+0x124>)
 8003626:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003628:	4b1c      	ldr	r3, [pc, #112]	; (800369c <HAL_ADC_MspInit+0x120>)
 800362a:	2200      	movs	r2, #0
 800362c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800362e:	4b1b      	ldr	r3, [pc, #108]	; (800369c <HAL_ADC_MspInit+0x120>)
 8003630:	2200      	movs	r2, #0
 8003632:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003634:	4b19      	ldr	r3, [pc, #100]	; (800369c <HAL_ADC_MspInit+0x120>)
 8003636:	2200      	movs	r2, #0
 8003638:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800363a:	4b18      	ldr	r3, [pc, #96]	; (800369c <HAL_ADC_MspInit+0x120>)
 800363c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003640:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003642:	4b16      	ldr	r3, [pc, #88]	; (800369c <HAL_ADC_MspInit+0x120>)
 8003644:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003648:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800364a:	4b14      	ldr	r3, [pc, #80]	; (800369c <HAL_ADC_MspInit+0x120>)
 800364c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003650:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003652:	4b12      	ldr	r3, [pc, #72]	; (800369c <HAL_ADC_MspInit+0x120>)
 8003654:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003658:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800365a:	4b10      	ldr	r3, [pc, #64]	; (800369c <HAL_ADC_MspInit+0x120>)
 800365c:	2200      	movs	r2, #0
 800365e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003660:	4b0e      	ldr	r3, [pc, #56]	; (800369c <HAL_ADC_MspInit+0x120>)
 8003662:	2200      	movs	r2, #0
 8003664:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003666:	480d      	ldr	r0, [pc, #52]	; (800369c <HAL_ADC_MspInit+0x120>)
 8003668:	f001 fa8a 	bl	8004b80 <HAL_DMA_Init>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003672:	f7ff ff15 	bl	80034a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a08      	ldr	r2, [pc, #32]	; (800369c <HAL_ADC_MspInit+0x120>)
 800367a:	639a      	str	r2, [r3, #56]	; 0x38
 800367c:	4a07      	ldr	r2, [pc, #28]	; (800369c <HAL_ADC_MspInit+0x120>)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003682:	bf00      	nop
 8003684:	3728      	adds	r7, #40	; 0x28
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40012000 	.word	0x40012000
 8003690:	40023800 	.word	0x40023800
 8003694:	40020800 	.word	0x40020800
 8003698:	40020400 	.word	0x40020400
 800369c:	200003d0 	.word	0x200003d0
 80036a0:	40026410 	.word	0x40026410

080036a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08a      	sub	sp, #40	; 0x28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ac:	f107 0314 	add.w	r3, r7, #20
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	609a      	str	r2, [r3, #8]
 80036b8:	60da      	str	r2, [r3, #12]
 80036ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a1d      	ldr	r2, [pc, #116]	; (8003738 <HAL_I2C_MspInit+0x94>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d133      	bne.n	800372e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	4b1c      	ldr	r3, [pc, #112]	; (800373c <HAL_I2C_MspInit+0x98>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	4a1b      	ldr	r2, [pc, #108]	; (800373c <HAL_I2C_MspInit+0x98>)
 80036d0:	f043 0302 	orr.w	r3, r3, #2
 80036d4:	6313      	str	r3, [r2, #48]	; 0x30
 80036d6:	4b19      	ldr	r3, [pc, #100]	; (800373c <HAL_I2C_MspInit+0x98>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036e2:	23c0      	movs	r3, #192	; 0xc0
 80036e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036e6:	2312      	movs	r3, #18
 80036e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ee:	2303      	movs	r3, #3
 80036f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036f2:	2304      	movs	r3, #4
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f6:	f107 0314 	add.w	r3, r7, #20
 80036fa:	4619      	mov	r1, r3
 80036fc:	4810      	ldr	r0, [pc, #64]	; (8003740 <HAL_I2C_MspInit+0x9c>)
 80036fe:	f001 fe4f 	bl	80053a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	4b0d      	ldr	r3, [pc, #52]	; (800373c <HAL_I2C_MspInit+0x98>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	4a0c      	ldr	r2, [pc, #48]	; (800373c <HAL_I2C_MspInit+0x98>)
 800370c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003710:	6413      	str	r3, [r2, #64]	; 0x40
 8003712:	4b0a      	ldr	r3, [pc, #40]	; (800373c <HAL_I2C_MspInit+0x98>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800371e:	2200      	movs	r2, #0
 8003720:	2100      	movs	r1, #0
 8003722:	201f      	movs	r0, #31
 8003724:	f001 f9f5 	bl	8004b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003728:	201f      	movs	r0, #31
 800372a:	f001 fa0e 	bl	8004b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800372e:	bf00      	nop
 8003730:	3728      	adds	r7, #40	; 0x28
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40005400 	.word	0x40005400
 800373c:	40023800 	.word	0x40023800
 8003740:	40020400 	.word	0x40020400

08003744 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08a      	sub	sp, #40	; 0x28
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800374c:	f107 0314 	add.w	r3, r7, #20
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a1d      	ldr	r2, [pc, #116]	; (80037d8 <HAL_SPI_MspInit+0x94>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d133      	bne.n	80037ce <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	4b1c      	ldr	r3, [pc, #112]	; (80037dc <HAL_SPI_MspInit+0x98>)
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	4a1b      	ldr	r2, [pc, #108]	; (80037dc <HAL_SPI_MspInit+0x98>)
 8003770:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003774:	6453      	str	r3, [r2, #68]	; 0x44
 8003776:	4b19      	ldr	r3, [pc, #100]	; (80037dc <HAL_SPI_MspInit+0x98>)
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	4b15      	ldr	r3, [pc, #84]	; (80037dc <HAL_SPI_MspInit+0x98>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	4a14      	ldr	r2, [pc, #80]	; (80037dc <HAL_SPI_MspInit+0x98>)
 800378c:	f043 0302 	orr.w	r3, r3, #2
 8003790:	6313      	str	r3, [r2, #48]	; 0x30
 8003792:	4b12      	ldr	r3, [pc, #72]	; (80037dc <HAL_SPI_MspInit+0x98>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800379e:	2338      	movs	r3, #56	; 0x38
 80037a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a2:	2302      	movs	r3, #2
 80037a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037aa:	2303      	movs	r3, #3
 80037ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037ae:	2305      	movs	r3, #5
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b2:	f107 0314 	add.w	r3, r7, #20
 80037b6:	4619      	mov	r1, r3
 80037b8:	4809      	ldr	r0, [pc, #36]	; (80037e0 <HAL_SPI_MspInit+0x9c>)
 80037ba:	f001 fdf1 	bl	80053a0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80037be:	2200      	movs	r2, #0
 80037c0:	2100      	movs	r1, #0
 80037c2:	2023      	movs	r0, #35	; 0x23
 80037c4:	f001 f9a5 	bl	8004b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80037c8:	2023      	movs	r0, #35	; 0x23
 80037ca:	f001 f9be 	bl	8004b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80037ce:	bf00      	nop
 80037d0:	3728      	adds	r7, #40	; 0x28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40013000 	.word	0x40013000
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40020400 	.word	0x40020400

080037e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f4:	d116      	bne.n	8003824 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	4b20      	ldr	r3, [pc, #128]	; (800387c <HAL_TIM_Base_MspInit+0x98>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	4a1f      	ldr	r2, [pc, #124]	; (800387c <HAL_TIM_Base_MspInit+0x98>)
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	6413      	str	r3, [r2, #64]	; 0x40
 8003806:	4b1d      	ldr	r3, [pc, #116]	; (800387c <HAL_TIM_Base_MspInit+0x98>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003812:	2200      	movs	r2, #0
 8003814:	2100      	movs	r1, #0
 8003816:	201c      	movs	r0, #28
 8003818:	f001 f97b 	bl	8004b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800381c:	201c      	movs	r0, #28
 800381e:	f001 f994 	bl	8004b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003822:	e026      	b.n	8003872 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a15      	ldr	r2, [pc, #84]	; (8003880 <HAL_TIM_Base_MspInit+0x9c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d10e      	bne.n	800384c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	4b12      	ldr	r3, [pc, #72]	; (800387c <HAL_TIM_Base_MspInit+0x98>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	4a11      	ldr	r2, [pc, #68]	; (800387c <HAL_TIM_Base_MspInit+0x98>)
 8003838:	f043 0302 	orr.w	r3, r3, #2
 800383c:	6413      	str	r3, [r2, #64]	; 0x40
 800383e:	4b0f      	ldr	r3, [pc, #60]	; (800387c <HAL_TIM_Base_MspInit+0x98>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	693b      	ldr	r3, [r7, #16]
}
 800384a:	e012      	b.n	8003872 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a0c      	ldr	r2, [pc, #48]	; (8003884 <HAL_TIM_Base_MspInit+0xa0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d10d      	bne.n	8003872 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	4b08      	ldr	r3, [pc, #32]	; (800387c <HAL_TIM_Base_MspInit+0x98>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	4a07      	ldr	r2, [pc, #28]	; (800387c <HAL_TIM_Base_MspInit+0x98>)
 8003860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003864:	6413      	str	r3, [r2, #64]	; 0x40
 8003866:	4b05      	ldr	r3, [pc, #20]	; (800387c <HAL_TIM_Base_MspInit+0x98>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]
}
 8003872:	bf00      	nop
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40023800 	.word	0x40023800
 8003880:	40000400 	.word	0x40000400
 8003884:	40001c00 	.word	0x40001c00

08003888 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003890:	f107 030c 	add.w	r3, r7, #12
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	60da      	str	r2, [r3, #12]
 800389e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a12      	ldr	r2, [pc, #72]	; (80038f0 <HAL_TIM_MspPostInit+0x68>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d11e      	bne.n	80038e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80038aa:	2300      	movs	r3, #0
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <HAL_TIM_MspPostInit+0x6c>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	4a10      	ldr	r2, [pc, #64]	; (80038f4 <HAL_TIM_MspPostInit+0x6c>)
 80038b4:	f043 0320 	orr.w	r3, r3, #32
 80038b8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ba:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <HAL_TIM_MspPostInit+0x6c>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	60bb      	str	r3, [r7, #8]
 80038c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80038c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038cc:	2302      	movs	r3, #2
 80038ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80038d8:	2309      	movs	r3, #9
 80038da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038dc:	f107 030c 	add.w	r3, r7, #12
 80038e0:	4619      	mov	r1, r3
 80038e2:	4805      	ldr	r0, [pc, #20]	; (80038f8 <HAL_TIM_MspPostInit+0x70>)
 80038e4:	f001 fd5c 	bl	80053a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80038e8:	bf00      	nop
 80038ea:	3720      	adds	r7, #32
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40001c00 	.word	0x40001c00
 80038f4:	40023800 	.word	0x40023800
 80038f8:	40021400 	.word	0x40021400

080038fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08c      	sub	sp, #48	; 0x30
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003904:	f107 031c 	add.w	r3, r7, #28
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	609a      	str	r2, [r3, #8]
 8003910:	60da      	str	r2, [r3, #12]
 8003912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a3a      	ldr	r2, [pc, #232]	; (8003a04 <HAL_UART_MspInit+0x108>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d135      	bne.n	800398a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
 8003922:	4b39      	ldr	r3, [pc, #228]	; (8003a08 <HAL_UART_MspInit+0x10c>)
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	4a38      	ldr	r2, [pc, #224]	; (8003a08 <HAL_UART_MspInit+0x10c>)
 8003928:	f043 0310 	orr.w	r3, r3, #16
 800392c:	6453      	str	r3, [r2, #68]	; 0x44
 800392e:	4b36      	ldr	r3, [pc, #216]	; (8003a08 <HAL_UART_MspInit+0x10c>)
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	4b32      	ldr	r3, [pc, #200]	; (8003a08 <HAL_UART_MspInit+0x10c>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4a31      	ldr	r2, [pc, #196]	; (8003a08 <HAL_UART_MspInit+0x10c>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	6313      	str	r3, [r2, #48]	; 0x30
 800394a:	4b2f      	ldr	r3, [pc, #188]	; (8003a08 <HAL_UART_MspInit+0x10c>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003956:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800395a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395c:	2302      	movs	r3, #2
 800395e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	2300      	movs	r3, #0
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003964:	2303      	movs	r3, #3
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003968:	2307      	movs	r3, #7
 800396a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800396c:	f107 031c 	add.w	r3, r7, #28
 8003970:	4619      	mov	r1, r3
 8003972:	4826      	ldr	r0, [pc, #152]	; (8003a0c <HAL_UART_MspInit+0x110>)
 8003974:	f001 fd14 	bl	80053a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003978:	2200      	movs	r2, #0
 800397a:	2100      	movs	r1, #0
 800397c:	2025      	movs	r0, #37	; 0x25
 800397e:	f001 f8c8 	bl	8004b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003982:	2025      	movs	r0, #37	; 0x25
 8003984:	f001 f8e1 	bl	8004b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003988:	e038      	b.n	80039fc <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a20      	ldr	r2, [pc, #128]	; (8003a10 <HAL_UART_MspInit+0x114>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d133      	bne.n	80039fc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003994:	2300      	movs	r3, #0
 8003996:	613b      	str	r3, [r7, #16]
 8003998:	4b1b      	ldr	r3, [pc, #108]	; (8003a08 <HAL_UART_MspInit+0x10c>)
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	4a1a      	ldr	r2, [pc, #104]	; (8003a08 <HAL_UART_MspInit+0x10c>)
 800399e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a2:	6413      	str	r3, [r2, #64]	; 0x40
 80039a4:	4b18      	ldr	r3, [pc, #96]	; (8003a08 <HAL_UART_MspInit+0x10c>)
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <HAL_UART_MspInit+0x10c>)
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <HAL_UART_MspInit+0x10c>)
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	6313      	str	r3, [r2, #48]	; 0x30
 80039c0:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <HAL_UART_MspInit+0x10c>)
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80039cc:	230c      	movs	r3, #12
 80039ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d0:	2302      	movs	r3, #2
 80039d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d8:	2303      	movs	r3, #3
 80039da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039dc:	2307      	movs	r3, #7
 80039de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e0:	f107 031c 	add.w	r3, r7, #28
 80039e4:	4619      	mov	r1, r3
 80039e6:	4809      	ldr	r0, [pc, #36]	; (8003a0c <HAL_UART_MspInit+0x110>)
 80039e8:	f001 fcda 	bl	80053a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80039ec:	2200      	movs	r2, #0
 80039ee:	2100      	movs	r1, #0
 80039f0:	2026      	movs	r0, #38	; 0x26
 80039f2:	f001 f88e 	bl	8004b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80039f6:	2026      	movs	r0, #38	; 0x26
 80039f8:	f001 f8a7 	bl	8004b4a <HAL_NVIC_EnableIRQ>
}
 80039fc:	bf00      	nop
 80039fe:	3730      	adds	r7, #48	; 0x30
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40011000 	.word	0x40011000
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	40020000 	.word	0x40020000
 8003a10:	40004400 	.word	0x40004400

08003a14 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003a1a:	1d3b      	adds	r3, r7, #4
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	60da      	str	r2, [r3, #12]
 8003a26:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8003a28:	4b1c      	ldr	r3, [pc, #112]	; (8003a9c <HAL_FSMC_MspInit+0x88>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d131      	bne.n	8003a94 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8003a30:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <HAL_FSMC_MspInit+0x88>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	603b      	str	r3, [r7, #0]
 8003a3a:	4b19      	ldr	r3, [pc, #100]	; (8003aa0 <HAL_FSMC_MspInit+0x8c>)
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	4a18      	ldr	r2, [pc, #96]	; (8003aa0 <HAL_FSMC_MspInit+0x8c>)
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	6393      	str	r3, [r2, #56]	; 0x38
 8003a46:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <HAL_FSMC_MspInit+0x8c>)
 8003a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8003a52:	f64f 7388 	movw	r3, #65416	; 0xff88
 8003a56:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a60:	2303      	movs	r3, #3
 8003a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003a64:	230c      	movs	r3, #12
 8003a66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a68:	1d3b      	adds	r3, r7, #4
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	480d      	ldr	r0, [pc, #52]	; (8003aa4 <HAL_FSMC_MspInit+0x90>)
 8003a6e:	f001 fc97 	bl	80053a0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003a72:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8003a76:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a80:	2303      	movs	r3, #3
 8003a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003a84:	230c      	movs	r3, #12
 8003a86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a88:	1d3b      	adds	r3, r7, #4
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4806      	ldr	r0, [pc, #24]	; (8003aa8 <HAL_FSMC_MspInit+0x94>)
 8003a8e:	f001 fc87 	bl	80053a0 <HAL_GPIO_Init>
 8003a92:	e000      	b.n	8003a96 <HAL_FSMC_MspInit+0x82>
    return;
 8003a94:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000218 	.word	0x20000218
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40020c00 	.word	0x40020c00

08003aac <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8003ab4:	f7ff ffae 	bl	8003a14 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ac4:	e7fe      	b.n	8003ac4 <NMI_Handler+0x4>

08003ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003aca:	e7fe      	b.n	8003aca <HardFault_Handler+0x4>

08003acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ad0:	e7fe      	b.n	8003ad0 <MemManage_Handler+0x4>

08003ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ad6:	e7fe      	b.n	8003ad6 <BusFault_Handler+0x4>

08003ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003adc:	e7fe      	b.n	8003adc <UsageFault_Handler+0x4>

08003ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003af0:	bf00      	nop
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003afa:	b480      	push	{r7}
 8003afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003afe:	bf00      	nop
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b0c:	f000 fad0 	bl	80040b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b10:	bf00      	nop
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b18:	4802      	ldr	r0, [pc, #8]	; (8003b24 <TIM2_IRQHandler+0x10>)
 8003b1a:	f005 f98d 	bl	8008e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	20000488 	.word	0x20000488

08003b28 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003b2c:	4802      	ldr	r0, [pc, #8]	; (8003b38 <I2C1_EV_IRQHandler+0x10>)
 8003b2e:	f002 f809 	bl	8005b44 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000250 	.word	0x20000250

08003b3c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003b40:	4802      	ldr	r0, [pc, #8]	; (8003b4c <SPI1_IRQHandler+0x10>)
 8003b42:	f004 fc9d 	bl	8008480 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20000430 	.word	0x20000430

08003b50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b54:	4802      	ldr	r0, [pc, #8]	; (8003b60 <USART1_IRQHandler+0x10>)
 8003b56:	f006 f8d9 	bl	8009d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	2000038c 	.word	0x2000038c

08003b64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b68:	4802      	ldr	r0, [pc, #8]	; (8003b74 <USART2_IRQHandler+0x10>)
 8003b6a:	f006 f8cf 	bl	8009d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	200004d0 	.word	0x200004d0

08003b78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b7c:	4802      	ldr	r0, [pc, #8]	; (8003b88 <DMA2_Stream0_IRQHandler+0x10>)
 8003b7e:	f001 f997 	bl	8004eb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	200003d0 	.word	0x200003d0

08003b8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
	return 1;
 8003b90:	2301      	movs	r3, #1
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <_kill>:

int _kill(int pid, int sig)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ba6:	f007 f839 	bl	800ac1c <__errno>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2216      	movs	r2, #22
 8003bae:	601a      	str	r2, [r3, #0]
	return -1;
 8003bb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <_exit>:

void _exit (int status)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff ffe7 	bl	8003b9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003bce:	e7fe      	b.n	8003bce <_exit+0x12>

08003bd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	e00a      	b.n	8003bf8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003be2:	f3af 8000 	nop.w
 8003be6:	4601      	mov	r1, r0
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	60ba      	str	r2, [r7, #8]
 8003bee:	b2ca      	uxtb	r2, r1
 8003bf0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	dbf0      	blt.n	8003be2 <_read+0x12>
	}

return len;
 8003c00:	687b      	ldr	r3, [r7, #4]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b086      	sub	sp, #24
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	e009      	b.n	8003c30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	60ba      	str	r2, [r7, #8]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	dbf1      	blt.n	8003c1c <_write+0x12>
	}
	return len;
 8003c38:	687b      	ldr	r3, [r7, #4]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <_close>:

int _close(int file)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
	return -1;
 8003c4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c6a:	605a      	str	r2, [r3, #4]
	return 0;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <_isatty>:

int _isatty(int file)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
	return 1;
 8003c82:	2301      	movs	r3, #1
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
	return 0;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cb4:	4a14      	ldr	r2, [pc, #80]	; (8003d08 <_sbrk+0x5c>)
 8003cb6:	4b15      	ldr	r3, [pc, #84]	; (8003d0c <_sbrk+0x60>)
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cc0:	4b13      	ldr	r3, [pc, #76]	; (8003d10 <_sbrk+0x64>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d102      	bne.n	8003cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cc8:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <_sbrk+0x64>)
 8003cca:	4a12      	ldr	r2, [pc, #72]	; (8003d14 <_sbrk+0x68>)
 8003ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cce:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <_sbrk+0x64>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d207      	bcs.n	8003cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cdc:	f006 ff9e 	bl	800ac1c <__errno>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	220c      	movs	r2, #12
 8003ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cea:	e009      	b.n	8003d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cec:	4b08      	ldr	r3, [pc, #32]	; (8003d10 <_sbrk+0x64>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cf2:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <_sbrk+0x64>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	4a05      	ldr	r2, [pc, #20]	; (8003d10 <_sbrk+0x64>)
 8003cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20020000 	.word	0x20020000
 8003d0c:	00000400 	.word	0x00000400
 8003d10:	2000021c 	.word	0x2000021c
 8003d14:	20000638 	.word	0x20000638

08003d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <SystemInit+0x20>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	4a05      	ldr	r2, [pc, #20]	; (8003d38 <SystemInit+0x20>)
 8003d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <timer_init>:
 *  Created on: Aug 1, 2023
 *      Author: phamv
 */
#include "timer.h"

void timer_init(){
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8003d40:	4808      	ldr	r0, [pc, #32]	; (8003d64 <timer_init+0x28>)
 8003d42:	f004 fee7 	bl	8008b14 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Init(&htim3);
 8003d46:	4808      	ldr	r0, [pc, #32]	; (8003d68 <timer_init+0x2c>)
 8003d48:	f004 fe2c 	bl	80089a4 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start(&htim3);
 8003d4c:	4806      	ldr	r0, [pc, #24]	; (8003d68 <timer_init+0x2c>)
 8003d4e:	f004 fe79 	bl	8008a44 <HAL_TIM_Base_Start>
//	HAL_TIM_PWM_Init(&htim13);
	setTimer1(1000);
 8003d52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d56:	f000 f809 	bl	8003d6c <setTimer1>
	setTimer2(50);
 8003d5a:	2032      	movs	r0, #50	; 0x32
 8003d5c:	f000 f820 	bl	8003da0 <setTimer2>
}
 8003d60:	bf00      	nop
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20000488 	.word	0x20000488
 8003d68:	200002a4 	.word	0x200002a4

08003d6c <setTimer1>:

int flag_timer1 = 0, flag_timer2 = 0, flag_timer3 = 0;
int timer1_counter = 0, timer2_counter = 0, timer3_counter = 0;
int timer1_MUL = 0, timer2_MUL = 0, timer3_MUL = 0;

void setTimer1(int duration){
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
	timer1_MUL = duration/TIMER_CYCLE;
 8003d74:	4a07      	ldr	r2, [pc, #28]	; (8003d94 <setTimer1+0x28>)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6013      	str	r3, [r2, #0]
	timer1_counter = timer1_MUL;
 8003d7a:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <setTimer1+0x28>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a06      	ldr	r2, [pc, #24]	; (8003d98 <setTimer1+0x2c>)
 8003d80:	6013      	str	r3, [r2, #0]
	flag_timer1 = 0;
 8003d82:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <setTimer1+0x30>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	20000238 	.word	0x20000238
 8003d98:	2000022c 	.word	0x2000022c
 8003d9c:	20000220 	.word	0x20000220

08003da0 <setTimer2>:

void setTimer2(int duration){
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
	timer2_MUL = duration/TIMER_CYCLE;
 8003da8:	4a07      	ldr	r2, [pc, #28]	; (8003dc8 <setTimer2+0x28>)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6013      	str	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <setTimer2+0x28>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a06      	ldr	r2, [pc, #24]	; (8003dcc <setTimer2+0x2c>)
 8003db4:	6013      	str	r3, [r2, #0]
	flag_timer2 = 0;
 8003db6:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <setTimer2+0x30>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	2000023c 	.word	0x2000023c
 8003dcc:	20000230 	.word	0x20000230
 8003dd0:	20000224 	.word	0x20000224

08003dd4 <timerRun>:
	timer3_counter = timer3_MUL;
	flag_timer3 = 0;
}


void timerRun(){
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8003dd8:	4b16      	ldr	r3, [pc, #88]	; (8003e34 <timerRun+0x60>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	dd0f      	ble.n	8003e00 <timerRun+0x2c>
		timer1_counter--;
 8003de0:	4b14      	ldr	r3, [pc, #80]	; (8003e34 <timerRun+0x60>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3b01      	subs	r3, #1
 8003de6:	4a13      	ldr	r2, [pc, #76]	; (8003e34 <timerRun+0x60>)
 8003de8:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) {
 8003dea:	4b12      	ldr	r3, [pc, #72]	; (8003e34 <timerRun+0x60>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <timerRun+0x2c>
			flag_timer1 = 1;
 8003df2:	4b11      	ldr	r3, [pc, #68]	; (8003e38 <timerRun+0x64>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
			timer1_counter = timer1_MUL;
 8003df8:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <timerRun+0x68>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a0d      	ldr	r2, [pc, #52]	; (8003e34 <timerRun+0x60>)
 8003dfe:	6013      	str	r3, [r2, #0]
		}
	}

	if(timer3_counter > 0){
 8003e00:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <timerRun+0x6c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	dd0f      	ble.n	8003e28 <timerRun+0x54>
		timer3_counter--;
 8003e08:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <timerRun+0x6c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	4a0c      	ldr	r2, [pc, #48]	; (8003e40 <timerRun+0x6c>)
 8003e10:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) {
 8003e12:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <timerRun+0x6c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <timerRun+0x54>
			flag_timer3 = 1;
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <timerRun+0x70>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
			timer3_counter = timer3_MUL;
 8003e20:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <timerRun+0x74>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a06      	ldr	r2, [pc, #24]	; (8003e40 <timerRun+0x6c>)
 8003e26:	6013      	str	r3, [r2, #0]
		}
	}
}
 8003e28:	bf00      	nop
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	2000022c 	.word	0x2000022c
 8003e38:	20000220 	.word	0x20000220
 8003e3c:	20000238 	.word	0x20000238
 8003e40:	20000234 	.word	0x20000234
 8003e44:	20000228 	.word	0x20000228
 8003e48:	20000240 	.word	0x20000240

08003e4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5c:	d117      	bne.n	8003e8e <HAL_TIM_PeriodElapsedCallback+0x42>
		if(timer2_counter > 0){
 8003e5e:	4b0e      	ldr	r3, [pc, #56]	; (8003e98 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	dd0f      	ble.n	8003e86 <HAL_TIM_PeriodElapsedCallback+0x3a>
			timer2_counter--;
 8003e66:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	4a0a      	ldr	r2, [pc, #40]	; (8003e98 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003e6e:	6013      	str	r3, [r2, #0]
			if(timer2_counter == 0) {
 8003e70:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d106      	bne.n	8003e86 <HAL_TIM_PeriodElapsedCallback+0x3a>
				flag_timer2 = 1;
 8003e78:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8003e7e:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a05      	ldr	r2, [pc, #20]	; (8003e98 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003e84:	6013      	str	r3, [r2, #0]
			}
		}
		timerRun();
 8003e86:	f7ff ffa5 	bl	8003dd4 <timerRun>
		led7_Scan();
 8003e8a:	f7fe fcb5 	bl	80027f8 <led7_Scan>
	}
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000230 	.word	0x20000230
 8003e9c:	20000224 	.word	0x20000224
 8003ea0:	2000023c 	.word	0x2000023c

08003ea4 <uart_init>:
unsigned char receive_buffer1 = 0;
unsigned char receive_buffer2 = 0;

uint8_t msg[100];

void uart_init(){
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	4905      	ldr	r1, [pc, #20]	; (8003ec0 <uart_init+0x1c>)
 8003eac:	4805      	ldr	r0, [pc, #20]	; (8003ec4 <uart_init+0x20>)
 8003eae:	f005 fefc 	bl	8009caa <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4904      	ldr	r1, [pc, #16]	; (8003ec8 <uart_init+0x24>)
 8003eb6:	4805      	ldr	r0, [pc, #20]	; (8003ecc <uart_init+0x28>)
 8003eb8:	f005 fef7 	bl	8009caa <HAL_UART_Receive_IT>
}
 8003ebc:	bf00      	nop
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20000244 	.word	0x20000244
 8003ec4:	2000038c 	.word	0x2000038c
 8003ec8:	20000245 	.word	0x20000245
 8003ecc:	200004d0 	.word	0x200004d0

08003ed0 <HAL_UART_RxCpltCallback>:

void uart_SendString(UART_HandleTypeDef *huart, uint8_t* str){
	HAL_UART_Transmit(huart, (void*)msg, sprintf(msg,"%s",str), 10);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a11      	ldr	r2, [pc, #68]	; (8003f24 <HAL_UART_RxCpltCallback+0x54>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d10a      	bne.n	8003ef8 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8003ee2:	230a      	movs	r3, #10
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	4910      	ldr	r1, [pc, #64]	; (8003f28 <HAL_UART_RxCpltCallback+0x58>)
 8003ee8:	4810      	ldr	r0, [pc, #64]	; (8003f2c <HAL_UART_RxCpltCallback+0x5c>)
 8003eea:	f005 fe4c 	bl	8009b86 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003eee:	2201      	movs	r2, #1
 8003ef0:	490d      	ldr	r1, [pc, #52]	; (8003f28 <HAL_UART_RxCpltCallback+0x58>)
 8003ef2:	480e      	ldr	r0, [pc, #56]	; (8003f2c <HAL_UART_RxCpltCallback+0x5c>)
 8003ef4:	f005 fed9 	bl	8009caa <HAL_UART_Receive_IT>
	}
	if(huart->Instance == USART2){
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a0c      	ldr	r2, [pc, #48]	; (8003f30 <HAL_UART_RxCpltCallback+0x60>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d10c      	bne.n	8003f1c <HAL_UART_RxCpltCallback+0x4c>
		rtc_fsm_get_time();
 8003f02:	f7fd fa07 	bl	8001314 <rtc_fsm_get_time>
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8003f06:	2201      	movs	r2, #1
 8003f08:	490a      	ldr	r1, [pc, #40]	; (8003f34 <HAL_UART_RxCpltCallback+0x64>)
 8003f0a:	480b      	ldr	r0, [pc, #44]	; (8003f38 <HAL_UART_RxCpltCallback+0x68>)
 8003f0c:	f005 fecd 	bl	8009caa <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart1, &receive_buffer2, 1, 10);
 8003f10:	230a      	movs	r3, #10
 8003f12:	2201      	movs	r2, #1
 8003f14:	4907      	ldr	r1, [pc, #28]	; (8003f34 <HAL_UART_RxCpltCallback+0x64>)
 8003f16:	4805      	ldr	r0, [pc, #20]	; (8003f2c <HAL_UART_RxCpltCallback+0x5c>)
 8003f18:	f005 fe35 	bl	8009b86 <HAL_UART_Transmit>
	}
}
 8003f1c:	bf00      	nop
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40011000 	.word	0x40011000
 8003f28:	20000244 	.word	0x20000244
 8003f2c:	2000038c 	.word	0x2000038c
 8003f30:	40004400 	.word	0x40004400
 8003f34:	20000245 	.word	0x20000245
 8003f38:	200004d0 	.word	0x200004d0

08003f3c <BCD2DEC>:
 *      Author: phamv
 */

#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	4603      	mov	r3, r0
 8003f44:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	0092      	lsls	r2, r2, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	f003 030f 	and.w	r3, r3, #15
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	4413      	add	r3, r2
 8003f60:	b2db      	uxtb	r3, r3
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
	...

08003f70 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	4a0d      	ldr	r2, [pc, #52]	; (8003fb4 <DEC2BCD+0x44>)
 8003f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f82:	08db      	lsrs	r3, r3, #3
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	b258      	sxtb	r0, r3
 8003f8a:	79fa      	ldrb	r2, [r7, #7]
 8003f8c:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <DEC2BCD+0x44>)
 8003f8e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f92:	08d9      	lsrs	r1, r3, #3
 8003f94:	460b      	mov	r3, r1
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	b25b      	sxtb	r3, r3
 8003fa2:	4303      	orrs	r3, r0
 8003fa4:	b25b      	sxtb	r3, r3
 8003fa6:	b2db      	uxtb	r3, r3
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	cccccccd 	.word	0xcccccccd

08003fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ff0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fbc:	480d      	ldr	r0, [pc, #52]	; (8003ff4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003fbe:	490e      	ldr	r1, [pc, #56]	; (8003ff8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003fc0:	4a0e      	ldr	r2, [pc, #56]	; (8003ffc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fc4:	e002      	b.n	8003fcc <LoopCopyDataInit>

08003fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fca:	3304      	adds	r3, #4

08003fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fd0:	d3f9      	bcc.n	8003fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fd2:	4a0b      	ldr	r2, [pc, #44]	; (8004000 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003fd4:	4c0b      	ldr	r4, [pc, #44]	; (8004004 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fd8:	e001      	b.n	8003fde <LoopFillZerobss>

08003fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fdc:	3204      	adds	r2, #4

08003fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fe0:	d3fb      	bcc.n	8003fda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003fe2:	f7ff fe99 	bl	8003d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fe6:	f006 fe1f 	bl	800ac28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fea:	f7fe fd45 	bl	8002a78 <main>
  bx  lr    
 8003fee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003ff0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ff8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003ffc:	0801688c 	.word	0x0801688c
  ldr r2, =_sbss
 8004000:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004004:	20000638 	.word	0x20000638

08004008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004008:	e7fe      	b.n	8004008 <ADC_IRQHandler>
	...

0800400c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004010:	4b0e      	ldr	r3, [pc, #56]	; (800404c <HAL_Init+0x40>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a0d      	ldr	r2, [pc, #52]	; (800404c <HAL_Init+0x40>)
 8004016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800401a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800401c:	4b0b      	ldr	r3, [pc, #44]	; (800404c <HAL_Init+0x40>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a0a      	ldr	r2, [pc, #40]	; (800404c <HAL_Init+0x40>)
 8004022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004028:	4b08      	ldr	r3, [pc, #32]	; (800404c <HAL_Init+0x40>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a07      	ldr	r2, [pc, #28]	; (800404c <HAL_Init+0x40>)
 800402e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004034:	2003      	movs	r0, #3
 8004036:	f000 fd61 	bl	8004afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800403a:	200f      	movs	r0, #15
 800403c:	f000 f808 	bl	8004050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004040:	f7ff fa74 	bl	800352c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40023c00 	.word	0x40023c00

08004050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004058:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <HAL_InitTick+0x54>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <HAL_InitTick+0x58>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	4619      	mov	r1, r3
 8004062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004066:	fbb3 f3f1 	udiv	r3, r3, r1
 800406a:	fbb2 f3f3 	udiv	r3, r2, r3
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fd79 	bl	8004b66 <HAL_SYSTICK_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e00e      	b.n	800409c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b0f      	cmp	r3, #15
 8004082:	d80a      	bhi.n	800409a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004084:	2200      	movs	r2, #0
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	f04f 30ff 	mov.w	r0, #4294967295
 800408c:	f000 fd41 	bl	8004b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004090:	4a06      	ldr	r2, [pc, #24]	; (80040ac <HAL_InitTick+0x5c>)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	e000      	b.n	800409c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20000004 	.word	0x20000004
 80040a8:	2000000c 	.word	0x2000000c
 80040ac:	20000008 	.word	0x20000008

080040b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040b4:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <HAL_IncTick+0x20>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <HAL_IncTick+0x24>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4413      	add	r3, r2
 80040c0:	4a04      	ldr	r2, [pc, #16]	; (80040d4 <HAL_IncTick+0x24>)
 80040c2:	6013      	str	r3, [r2, #0]
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	2000000c 	.word	0x2000000c
 80040d4:	20000624 	.word	0x20000624

080040d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return uwTick;
 80040dc:	4b03      	ldr	r3, [pc, #12]	; (80040ec <HAL_GetTick+0x14>)
 80040de:	681b      	ldr	r3, [r3, #0]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	20000624 	.word	0x20000624

080040f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040f8:	f7ff ffee 	bl	80040d8 <HAL_GetTick>
 80040fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d005      	beq.n	8004116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800410a:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <HAL_Delay+0x44>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004116:	bf00      	nop
 8004118:	f7ff ffde 	bl	80040d8 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	429a      	cmp	r2, r3
 8004126:	d8f7      	bhi.n	8004118 <HAL_Delay+0x28>
  {
  }
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	2000000c 	.word	0x2000000c

08004138 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e033      	b.n	80041b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff fa10 	bl	800357c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	2b00      	cmp	r3, #0
 8004174:	d118      	bne.n	80041a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800417e:	f023 0302 	bic.w	r3, r3, #2
 8004182:	f043 0202 	orr.w	r2, r3, #2
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fa68 	bl	8004660 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f023 0303 	bic.w	r3, r3, #3
 800419e:	f043 0201 	orr.w	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40
 80041a6:	e001      	b.n	80041ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_ADC_Start_DMA+0x1e>
 80041da:	2302      	movs	r3, #2
 80041dc:	e0e9      	b.n	80043b2 <HAL_ADC_Start_DMA+0x1f2>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d018      	beq.n	8004226 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0201 	orr.w	r2, r2, #1
 8004202:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004204:	4b6d      	ldr	r3, [pc, #436]	; (80043bc <HAL_ADC_Start_DMA+0x1fc>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a6d      	ldr	r2, [pc, #436]	; (80043c0 <HAL_ADC_Start_DMA+0x200>)
 800420a:	fba2 2303 	umull	r2, r3, r2, r3
 800420e:	0c9a      	lsrs	r2, r3, #18
 8004210:	4613      	mov	r3, r2
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	4413      	add	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004218:	e002      	b.n	8004220 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	3b01      	subs	r3, #1
 800421e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f9      	bne.n	800421a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004234:	d107      	bne.n	8004246 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004244:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b01      	cmp	r3, #1
 8004252:	f040 80a1 	bne.w	8004398 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004274:	2b00      	cmp	r3, #0
 8004276:	d007      	beq.n	8004288 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004280:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004294:	d106      	bne.n	80042a4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	f023 0206 	bic.w	r2, r3, #6
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	645a      	str	r2, [r3, #68]	; 0x44
 80042a2:	e002      	b.n	80042aa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042b2:	4b44      	ldr	r3, [pc, #272]	; (80043c4 <HAL_ADC_Start_DMA+0x204>)
 80042b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ba:	4a43      	ldr	r2, [pc, #268]	; (80043c8 <HAL_ADC_Start_DMA+0x208>)
 80042bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	4a42      	ldr	r2, [pc, #264]	; (80043cc <HAL_ADC_Start_DMA+0x20c>)
 80042c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	4a41      	ldr	r2, [pc, #260]	; (80043d0 <HAL_ADC_Start_DMA+0x210>)
 80042cc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80042d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80042e6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	334c      	adds	r3, #76	; 0x4c
 8004302:	4619      	mov	r1, r3
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f000 fce8 	bl	8004cdc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	2b00      	cmp	r3, #0
 8004316:	d12a      	bne.n	800436e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a2d      	ldr	r2, [pc, #180]	; (80043d4 <HAL_ADC_Start_DMA+0x214>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d015      	beq.n	800434e <HAL_ADC_Start_DMA+0x18e>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a2c      	ldr	r2, [pc, #176]	; (80043d8 <HAL_ADC_Start_DMA+0x218>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d105      	bne.n	8004338 <HAL_ADC_Start_DMA+0x178>
 800432c:	4b25      	ldr	r3, [pc, #148]	; (80043c4 <HAL_ADC_Start_DMA+0x204>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 031f 	and.w	r3, r3, #31
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00a      	beq.n	800434e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a27      	ldr	r2, [pc, #156]	; (80043dc <HAL_ADC_Start_DMA+0x21c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d136      	bne.n	80043b0 <HAL_ADC_Start_DMA+0x1f0>
 8004342:	4b20      	ldr	r3, [pc, #128]	; (80043c4 <HAL_ADC_Start_DMA+0x204>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f003 0310 	and.w	r3, r3, #16
 800434a:	2b00      	cmp	r3, #0
 800434c:	d130      	bne.n	80043b0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d129      	bne.n	80043b0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800436a:	609a      	str	r2, [r3, #8]
 800436c:	e020      	b.n	80043b0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a18      	ldr	r2, [pc, #96]	; (80043d4 <HAL_ADC_Start_DMA+0x214>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d11b      	bne.n	80043b0 <HAL_ADC_Start_DMA+0x1f0>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d114      	bne.n	80043b0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004394:	609a      	str	r2, [r3, #8]
 8004396:	e00b      	b.n	80043b0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	f043 0210 	orr.w	r2, r3, #16
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a8:	f043 0201 	orr.w	r2, r3, #1
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20000004 	.word	0x20000004
 80043c0:	431bde83 	.word	0x431bde83
 80043c4:	40012300 	.word	0x40012300
 80043c8:	08004859 	.word	0x08004859
 80043cc:	08004913 	.word	0x08004913
 80043d0:	0800492f 	.word	0x0800492f
 80043d4:	40012000 	.word	0x40012000
 80043d8:	40012100 	.word	0x40012100
 80043dc:	40012200 	.word	0x40012200

080043e0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004430:	2b01      	cmp	r3, #1
 8004432:	d101      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x1c>
 8004434:	2302      	movs	r3, #2
 8004436:	e105      	b.n	8004644 <HAL_ADC_ConfigChannel+0x228>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b09      	cmp	r3, #9
 8004446:	d925      	bls.n	8004494 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68d9      	ldr	r1, [r3, #12]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	b29b      	uxth	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	4613      	mov	r3, r2
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	4413      	add	r3, r2
 800445c:	3b1e      	subs	r3, #30
 800445e:	2207      	movs	r2, #7
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	43da      	mvns	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	400a      	ands	r2, r1
 800446c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68d9      	ldr	r1, [r3, #12]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	b29b      	uxth	r3, r3
 800447e:	4618      	mov	r0, r3
 8004480:	4603      	mov	r3, r0
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	4403      	add	r3, r0
 8004486:	3b1e      	subs	r3, #30
 8004488:	409a      	lsls	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	60da      	str	r2, [r3, #12]
 8004492:	e022      	b.n	80044da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6919      	ldr	r1, [r3, #16]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	461a      	mov	r2, r3
 80044a2:	4613      	mov	r3, r2
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	4413      	add	r3, r2
 80044a8:	2207      	movs	r2, #7
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	43da      	mvns	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	400a      	ands	r2, r1
 80044b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6919      	ldr	r1, [r3, #16]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	4618      	mov	r0, r3
 80044ca:	4603      	mov	r3, r0
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	4403      	add	r3, r0
 80044d0:	409a      	lsls	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b06      	cmp	r3, #6
 80044e0:	d824      	bhi.n	800452c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	3b05      	subs	r3, #5
 80044f4:	221f      	movs	r2, #31
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	43da      	mvns	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	400a      	ands	r2, r1
 8004502:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	b29b      	uxth	r3, r3
 8004510:	4618      	mov	r0, r3
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	3b05      	subs	r3, #5
 800451e:	fa00 f203 	lsl.w	r2, r0, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	635a      	str	r2, [r3, #52]	; 0x34
 800452a:	e04c      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b0c      	cmp	r3, #12
 8004532:	d824      	bhi.n	800457e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	4613      	mov	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	3b23      	subs	r3, #35	; 0x23
 8004546:	221f      	movs	r2, #31
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	43da      	mvns	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	400a      	ands	r2, r1
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	b29b      	uxth	r3, r3
 8004562:	4618      	mov	r0, r3
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	3b23      	subs	r3, #35	; 0x23
 8004570:	fa00 f203 	lsl.w	r2, r0, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	631a      	str	r2, [r3, #48]	; 0x30
 800457c:	e023      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	3b41      	subs	r3, #65	; 0x41
 8004590:	221f      	movs	r2, #31
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	43da      	mvns	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	400a      	ands	r2, r1
 800459e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	4618      	mov	r0, r3
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	3b41      	subs	r3, #65	; 0x41
 80045ba:	fa00 f203 	lsl.w	r2, r0, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045c6:	4b22      	ldr	r3, [pc, #136]	; (8004650 <HAL_ADC_ConfigChannel+0x234>)
 80045c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a21      	ldr	r2, [pc, #132]	; (8004654 <HAL_ADC_ConfigChannel+0x238>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d109      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x1cc>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b12      	cmp	r3, #18
 80045da:	d105      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a19      	ldr	r2, [pc, #100]	; (8004654 <HAL_ADC_ConfigChannel+0x238>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d123      	bne.n	800463a <HAL_ADC_ConfigChannel+0x21e>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b10      	cmp	r3, #16
 80045f8:	d003      	beq.n	8004602 <HAL_ADC_ConfigChannel+0x1e6>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b11      	cmp	r3, #17
 8004600:	d11b      	bne.n	800463a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b10      	cmp	r3, #16
 8004614:	d111      	bne.n	800463a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004616:	4b10      	ldr	r3, [pc, #64]	; (8004658 <HAL_ADC_ConfigChannel+0x23c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a10      	ldr	r2, [pc, #64]	; (800465c <HAL_ADC_ConfigChannel+0x240>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	0c9a      	lsrs	r2, r3, #18
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800462c:	e002      	b.n	8004634 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	3b01      	subs	r3, #1
 8004632:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f9      	bne.n	800462e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	40012300 	.word	0x40012300
 8004654:	40012000 	.word	0x40012000
 8004658:	20000004 	.word	0x20000004
 800465c:	431bde83 	.word	0x431bde83

08004660 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004668:	4b79      	ldr	r3, [pc, #484]	; (8004850 <ADC_Init+0x1f0>)
 800466a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	431a      	orrs	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004694:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6859      	ldr	r1, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	021a      	lsls	r2, r3, #8
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80046b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6859      	ldr	r1, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6899      	ldr	r1, [r3, #8]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	4a58      	ldr	r2, [pc, #352]	; (8004854 <ADC_Init+0x1f4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d022      	beq.n	800473e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004706:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6899      	ldr	r1, [r3, #8]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004728:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6899      	ldr	r1, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	609a      	str	r2, [r3, #8]
 800473c:	e00f      	b.n	800475e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800474c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800475c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0202 	bic.w	r2, r2, #2
 800476c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6899      	ldr	r1, [r3, #8]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	7e1b      	ldrb	r3, [r3, #24]
 8004778:	005a      	lsls	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01b      	beq.n	80047c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800479a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80047aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6859      	ldr	r1, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	3b01      	subs	r3, #1
 80047b8:	035a      	lsls	r2, r3, #13
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
 80047c2:	e007      	b.n	80047d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80047e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	051a      	lsls	r2, r3, #20
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004808:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6899      	ldr	r1, [r3, #8]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004816:	025a      	lsls	r2, r3, #9
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800482e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6899      	ldr	r1, [r3, #8]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	029a      	lsls	r2, r3, #10
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	609a      	str	r2, [r3, #8]
}
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	40012300 	.word	0x40012300
 8004854:	0f000001 	.word	0x0f000001

08004858 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800486e:	2b00      	cmp	r3, #0
 8004870:	d13c      	bne.n	80048ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d12b      	bne.n	80048e4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004890:	2b00      	cmp	r3, #0
 8004892:	d127      	bne.n	80048e4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d006      	beq.n	80048b0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d119      	bne.n	80048e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0220 	bic.w	r2, r2, #32
 80048be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d105      	bne.n	80048e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	f043 0201 	orr.w	r2, r3, #1
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7ff fd7b 	bl	80043e0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80048ea:	e00e      	b.n	800490a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f7ff fd85 	bl	8004408 <HAL_ADC_ErrorCallback>
}
 80048fe:	e004      	b.n	800490a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	4798      	blx	r3
}
 800490a:	bf00      	nop
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f7ff fd67 	bl	80043f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004926:	bf00      	nop
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2240      	movs	r2, #64	; 0x40
 8004940:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	f043 0204 	orr.w	r2, r3, #4
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f7ff fd5a 	bl	8004408 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004954:	bf00      	nop
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800496c:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <__NVIC_SetPriorityGrouping+0x44>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004978:	4013      	ands	r3, r2
 800497a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800498c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800498e:	4a04      	ldr	r2, [pc, #16]	; (80049a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	60d3      	str	r3, [r2, #12]
}
 8004994:	bf00      	nop
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	e000ed00 	.word	0xe000ed00

080049a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049a8:	4b04      	ldr	r3, [pc, #16]	; (80049bc <__NVIC_GetPriorityGrouping+0x18>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	0a1b      	lsrs	r3, r3, #8
 80049ae:	f003 0307 	and.w	r3, r3, #7
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	e000ed00 	.word	0xe000ed00

080049c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	db0b      	blt.n	80049ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	f003 021f 	and.w	r2, r3, #31
 80049d8:	4907      	ldr	r1, [pc, #28]	; (80049f8 <__NVIC_EnableIRQ+0x38>)
 80049da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049de:	095b      	lsrs	r3, r3, #5
 80049e0:	2001      	movs	r0, #1
 80049e2:	fa00 f202 	lsl.w	r2, r0, r2
 80049e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	e000e100 	.word	0xe000e100

080049fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	6039      	str	r1, [r7, #0]
 8004a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	db0a      	blt.n	8004a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	490c      	ldr	r1, [pc, #48]	; (8004a48 <__NVIC_SetPriority+0x4c>)
 8004a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1a:	0112      	lsls	r2, r2, #4
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	440b      	add	r3, r1
 8004a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a24:	e00a      	b.n	8004a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	4908      	ldr	r1, [pc, #32]	; (8004a4c <__NVIC_SetPriority+0x50>)
 8004a2c:	79fb      	ldrb	r3, [r7, #7]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	3b04      	subs	r3, #4
 8004a34:	0112      	lsls	r2, r2, #4
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	440b      	add	r3, r1
 8004a3a:	761a      	strb	r2, [r3, #24]
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	e000e100 	.word	0xe000e100
 8004a4c:	e000ed00 	.word	0xe000ed00

08004a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b089      	sub	sp, #36	; 0x24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f1c3 0307 	rsb	r3, r3, #7
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	bf28      	it	cs
 8004a6e:	2304      	movcs	r3, #4
 8004a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	3304      	adds	r3, #4
 8004a76:	2b06      	cmp	r3, #6
 8004a78:	d902      	bls.n	8004a80 <NVIC_EncodePriority+0x30>
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	3b03      	subs	r3, #3
 8004a7e:	e000      	b.n	8004a82 <NVIC_EncodePriority+0x32>
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a84:	f04f 32ff 	mov.w	r2, #4294967295
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	43da      	mvns	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	401a      	ands	r2, r3
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a98:	f04f 31ff 	mov.w	r1, #4294967295
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa2:	43d9      	mvns	r1, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa8:	4313      	orrs	r3, r2
         );
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3724      	adds	r7, #36	; 0x24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
	...

08004ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ac8:	d301      	bcc.n	8004ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004aca:	2301      	movs	r3, #1
 8004acc:	e00f      	b.n	8004aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ace:	4a0a      	ldr	r2, [pc, #40]	; (8004af8 <SysTick_Config+0x40>)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ad6:	210f      	movs	r1, #15
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8004adc:	f7ff ff8e 	bl	80049fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <SysTick_Config+0x40>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ae6:	4b04      	ldr	r3, [pc, #16]	; (8004af8 <SysTick_Config+0x40>)
 8004ae8:	2207      	movs	r2, #7
 8004aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	e000e010 	.word	0xe000e010

08004afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff ff29 	bl	800495c <__NVIC_SetPriorityGrouping>
}
 8004b0a:	bf00      	nop
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b086      	sub	sp, #24
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	4603      	mov	r3, r0
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	607a      	str	r2, [r7, #4]
 8004b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b24:	f7ff ff3e 	bl	80049a4 <__NVIC_GetPriorityGrouping>
 8004b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	6978      	ldr	r0, [r7, #20]
 8004b30:	f7ff ff8e 	bl	8004a50 <NVIC_EncodePriority>
 8004b34:	4602      	mov	r2, r0
 8004b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff ff5d 	bl	80049fc <__NVIC_SetPriority>
}
 8004b42:	bf00      	nop
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	4603      	mov	r3, r0
 8004b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff ff31 	bl	80049c0 <__NVIC_EnableIRQ>
}
 8004b5e:	bf00      	nop
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b082      	sub	sp, #8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff ffa2 	bl	8004ab8 <SysTick_Config>
 8004b74:	4603      	mov	r3, r0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b8c:	f7ff faa4 	bl	80040d8 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e099      	b.n	8004cd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0201 	bic.w	r2, r2, #1
 8004bba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bbc:	e00f      	b.n	8004bde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bbe:	f7ff fa8b 	bl	80040d8 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b05      	cmp	r3, #5
 8004bca:	d908      	bls.n	8004bde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2203      	movs	r2, #3
 8004bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e078      	b.n	8004cd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e8      	bne.n	8004bbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4b38      	ldr	r3, [pc, #224]	; (8004cd8 <HAL_DMA_Init+0x158>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d107      	bne.n	8004c48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	4313      	orrs	r3, r2
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f023 0307 	bic.w	r3, r3, #7
 8004c5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d117      	bne.n	8004ca2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00e      	beq.n	8004ca2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 fb0f 	bl	80052a8 <DMA_CheckFifoParam>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2240      	movs	r2, #64	; 0x40
 8004c94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e016      	b.n	8004cd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fac6 	bl	800523c <DMA_CalcBaseAndBitshift>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb8:	223f      	movs	r2, #63	; 0x3f
 8004cba:	409a      	lsls	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	f010803f 	.word	0xf010803f

08004cdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_DMA_Start_IT+0x26>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e040      	b.n	8004d84 <HAL_DMA_Start_IT+0xa8>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d12f      	bne.n	8004d76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	68b9      	ldr	r1, [r7, #8]
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 fa58 	bl	80051e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d34:	223f      	movs	r2, #63	; 0x3f
 8004d36:	409a      	lsls	r2, r3
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0216 	orr.w	r2, r2, #22
 8004d4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0208 	orr.w	r2, r2, #8
 8004d62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	e005      	b.n	8004d82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d7e:	2302      	movs	r3, #2
 8004d80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3718      	adds	r7, #24
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004d9a:	f7ff f99d 	bl	80040d8 <HAL_GetTick>
 8004d9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d008      	beq.n	8004dbe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2280      	movs	r2, #128	; 0x80
 8004db0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e052      	b.n	8004e64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0216 	bic.w	r2, r2, #22
 8004dcc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	695a      	ldr	r2, [r3, #20]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ddc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d103      	bne.n	8004dee <HAL_DMA_Abort+0x62>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0208 	bic.w	r2, r2, #8
 8004dfc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0201 	bic.w	r2, r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e0e:	e013      	b.n	8004e38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e10:	f7ff f962 	bl	80040d8 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b05      	cmp	r3, #5
 8004e1c:	d90c      	bls.n	8004e38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2220      	movs	r2, #32
 8004e22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2203      	movs	r2, #3
 8004e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e015      	b.n	8004e64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e4      	bne.n	8004e10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4a:	223f      	movs	r2, #63	; 0x3f
 8004e4c:	409a      	lsls	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d004      	beq.n	8004e8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2280      	movs	r2, #128	; 0x80
 8004e84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e00c      	b.n	8004ea4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2205      	movs	r2, #5
 8004e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0201 	bic.w	r2, r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ebc:	4b92      	ldr	r3, [pc, #584]	; (8005108 <HAL_DMA_IRQHandler+0x258>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a92      	ldr	r2, [pc, #584]	; (800510c <HAL_DMA_IRQHandler+0x25c>)
 8004ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec6:	0a9b      	lsrs	r3, r3, #10
 8004ec8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ece:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eda:	2208      	movs	r2, #8
 8004edc:	409a      	lsls	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d01a      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d013      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0204 	bic.w	r2, r2, #4
 8004f02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f08:	2208      	movs	r2, #8
 8004f0a:	409a      	lsls	r2, r3
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f14:	f043 0201 	orr.w	r2, r3, #1
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f20:	2201      	movs	r2, #1
 8004f22:	409a      	lsls	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4013      	ands	r3, r2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d012      	beq.n	8004f52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00b      	beq.n	8004f52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f3e:	2201      	movs	r2, #1
 8004f40:	409a      	lsls	r2, r3
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4a:	f043 0202 	orr.w	r2, r3, #2
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f56:	2204      	movs	r2, #4
 8004f58:	409a      	lsls	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d012      	beq.n	8004f88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00b      	beq.n	8004f88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f74:	2204      	movs	r2, #4
 8004f76:	409a      	lsls	r2, r3
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f80:	f043 0204 	orr.w	r2, r3, #4
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8c:	2210      	movs	r2, #16
 8004f8e:	409a      	lsls	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4013      	ands	r3, r2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d043      	beq.n	8005020 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d03c      	beq.n	8005020 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004faa:	2210      	movs	r2, #16
 8004fac:	409a      	lsls	r2, r3
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d018      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d108      	bne.n	8004fe0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d024      	beq.n	8005020 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	4798      	blx	r3
 8004fde:	e01f      	b.n	8005020 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01b      	beq.n	8005020 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	4798      	blx	r3
 8004ff0:	e016      	b.n	8005020 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d107      	bne.n	8005010 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0208 	bic.w	r2, r2, #8
 800500e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005024:	2220      	movs	r2, #32
 8005026:	409a      	lsls	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4013      	ands	r3, r2
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 808e 	beq.w	800514e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0310 	and.w	r3, r3, #16
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 8086 	beq.w	800514e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005046:	2220      	movs	r2, #32
 8005048:	409a      	lsls	r2, r3
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b05      	cmp	r3, #5
 8005058:	d136      	bne.n	80050c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0216 	bic.w	r2, r2, #22
 8005068:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695a      	ldr	r2, [r3, #20]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005078:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	2b00      	cmp	r3, #0
 8005080:	d103      	bne.n	800508a <HAL_DMA_IRQHandler+0x1da>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0208 	bic.w	r2, r2, #8
 8005098:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800509e:	223f      	movs	r2, #63	; 0x3f
 80050a0:	409a      	lsls	r2, r3
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d07d      	beq.n	80051ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	4798      	blx	r3
        }
        return;
 80050c6:	e078      	b.n	80051ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d01c      	beq.n	8005110 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d108      	bne.n	80050f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d030      	beq.n	800514e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	4798      	blx	r3
 80050f4:	e02b      	b.n	800514e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d027      	beq.n	800514e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	4798      	blx	r3
 8005106:	e022      	b.n	800514e <HAL_DMA_IRQHandler+0x29e>
 8005108:	20000004 	.word	0x20000004
 800510c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10f      	bne.n	800513e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0210 	bic.w	r2, r2, #16
 800512c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005152:	2b00      	cmp	r3, #0
 8005154:	d032      	beq.n	80051bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d022      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2205      	movs	r2, #5
 8005166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0201 	bic.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	3301      	adds	r3, #1
 800517e:	60bb      	str	r3, [r7, #8]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	429a      	cmp	r2, r3
 8005184:	d307      	bcc.n	8005196 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1f2      	bne.n	800517a <HAL_DMA_IRQHandler+0x2ca>
 8005194:	e000      	b.n	8005198 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005196:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d005      	beq.n	80051bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	4798      	blx	r3
 80051b8:	e000      	b.n	80051bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80051ba:	bf00      	nop
    }
  }
}
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop

080051c4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051d2:	b2db      	uxtb	r3, r3
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b40      	cmp	r3, #64	; 0x40
 800520c:	d108      	bne.n	8005220 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800521e:	e007      	b.n	8005230 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	60da      	str	r2, [r3, #12]
}
 8005230:	bf00      	nop
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	b2db      	uxtb	r3, r3
 800524a:	3b10      	subs	r3, #16
 800524c:	4a14      	ldr	r2, [pc, #80]	; (80052a0 <DMA_CalcBaseAndBitshift+0x64>)
 800524e:	fba2 2303 	umull	r2, r3, r2, r3
 8005252:	091b      	lsrs	r3, r3, #4
 8005254:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005256:	4a13      	ldr	r2, [pc, #76]	; (80052a4 <DMA_CalcBaseAndBitshift+0x68>)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4413      	add	r3, r2
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b03      	cmp	r3, #3
 8005268:	d909      	bls.n	800527e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005272:	f023 0303 	bic.w	r3, r3, #3
 8005276:	1d1a      	adds	r2, r3, #4
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	659a      	str	r2, [r3, #88]	; 0x58
 800527c:	e007      	b.n	800528e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005286:	f023 0303 	bic.w	r3, r3, #3
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	aaaaaaab 	.word	0xaaaaaaab
 80052a4:	08016494 	.word	0x08016494

080052a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d11f      	bne.n	8005302 <DMA_CheckFifoParam+0x5a>
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b03      	cmp	r3, #3
 80052c6:	d856      	bhi.n	8005376 <DMA_CheckFifoParam+0xce>
 80052c8:	a201      	add	r2, pc, #4	; (adr r2, 80052d0 <DMA_CheckFifoParam+0x28>)
 80052ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ce:	bf00      	nop
 80052d0:	080052e1 	.word	0x080052e1
 80052d4:	080052f3 	.word	0x080052f3
 80052d8:	080052e1 	.word	0x080052e1
 80052dc:	08005377 	.word	0x08005377
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d046      	beq.n	800537a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052f0:	e043      	b.n	800537a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052fa:	d140      	bne.n	800537e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005300:	e03d      	b.n	800537e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800530a:	d121      	bne.n	8005350 <DMA_CheckFifoParam+0xa8>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b03      	cmp	r3, #3
 8005310:	d837      	bhi.n	8005382 <DMA_CheckFifoParam+0xda>
 8005312:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <DMA_CheckFifoParam+0x70>)
 8005314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005318:	08005329 	.word	0x08005329
 800531c:	0800532f 	.word	0x0800532f
 8005320:	08005329 	.word	0x08005329
 8005324:	08005341 	.word	0x08005341
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	73fb      	strb	r3, [r7, #15]
      break;
 800532c:	e030      	b.n	8005390 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005332:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d025      	beq.n	8005386 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800533e:	e022      	b.n	8005386 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005348:	d11f      	bne.n	800538a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800534e:	e01c      	b.n	800538a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d903      	bls.n	800535e <DMA_CheckFifoParam+0xb6>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b03      	cmp	r3, #3
 800535a:	d003      	beq.n	8005364 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800535c:	e018      	b.n	8005390 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	73fb      	strb	r3, [r7, #15]
      break;
 8005362:	e015      	b.n	8005390 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00e      	beq.n	800538e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	73fb      	strb	r3, [r7, #15]
      break;
 8005374:	e00b      	b.n	800538e <DMA_CheckFifoParam+0xe6>
      break;
 8005376:	bf00      	nop
 8005378:	e00a      	b.n	8005390 <DMA_CheckFifoParam+0xe8>
      break;
 800537a:	bf00      	nop
 800537c:	e008      	b.n	8005390 <DMA_CheckFifoParam+0xe8>
      break;
 800537e:	bf00      	nop
 8005380:	e006      	b.n	8005390 <DMA_CheckFifoParam+0xe8>
      break;
 8005382:	bf00      	nop
 8005384:	e004      	b.n	8005390 <DMA_CheckFifoParam+0xe8>
      break;
 8005386:	bf00      	nop
 8005388:	e002      	b.n	8005390 <DMA_CheckFifoParam+0xe8>
      break;   
 800538a:	bf00      	nop
 800538c:	e000      	b.n	8005390 <DMA_CheckFifoParam+0xe8>
      break;
 800538e:	bf00      	nop
    }
  } 
  
  return status; 
 8005390:	7bfb      	ldrb	r3, [r7, #15]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop

080053a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b089      	sub	sp, #36	; 0x24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053b6:	2300      	movs	r3, #0
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	e16b      	b.n	8005694 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053bc:	2201      	movs	r2, #1
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	fa02 f303 	lsl.w	r3, r2, r3
 80053c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4013      	ands	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	f040 815a 	bne.w	800568e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d005      	beq.n	80053f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d130      	bne.n	8005454 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	2203      	movs	r2, #3
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	43db      	mvns	r3, r3
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	4013      	ands	r3, r2
 8005408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	4313      	orrs	r3, r2
 800541a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005428:	2201      	movs	r2, #1
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	43db      	mvns	r3, r3
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	4013      	ands	r3, r2
 8005436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	091b      	lsrs	r3, r3, #4
 800543e:	f003 0201 	and.w	r2, r3, #1
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	4313      	orrs	r3, r2
 800544c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f003 0303 	and.w	r3, r3, #3
 800545c:	2b03      	cmp	r3, #3
 800545e:	d017      	beq.n	8005490 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	2203      	movs	r2, #3
 800546c:	fa02 f303 	lsl.w	r3, r2, r3
 8005470:	43db      	mvns	r3, r3
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	4013      	ands	r3, r2
 8005476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	fa02 f303 	lsl.w	r3, r2, r3
 8005484:	69ba      	ldr	r2, [r7, #24]
 8005486:	4313      	orrs	r3, r2
 8005488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f003 0303 	and.w	r3, r3, #3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d123      	bne.n	80054e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	08da      	lsrs	r2, r3, #3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3208      	adds	r2, #8
 80054a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	220f      	movs	r2, #15
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	43db      	mvns	r3, r3
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	4013      	ands	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	08da      	lsrs	r2, r3, #3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3208      	adds	r2, #8
 80054de:	69b9      	ldr	r1, [r7, #24]
 80054e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	2203      	movs	r2, #3
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	43db      	mvns	r3, r3
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	4013      	ands	r3, r2
 80054fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f003 0203 	and.w	r2, r3, #3
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	4313      	orrs	r3, r2
 8005510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 80b4 	beq.w	800568e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	4b60      	ldr	r3, [pc, #384]	; (80056ac <HAL_GPIO_Init+0x30c>)
 800552c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552e:	4a5f      	ldr	r2, [pc, #380]	; (80056ac <HAL_GPIO_Init+0x30c>)
 8005530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005534:	6453      	str	r3, [r2, #68]	; 0x44
 8005536:	4b5d      	ldr	r3, [pc, #372]	; (80056ac <HAL_GPIO_Init+0x30c>)
 8005538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005542:	4a5b      	ldr	r2, [pc, #364]	; (80056b0 <HAL_GPIO_Init+0x310>)
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	089b      	lsrs	r3, r3, #2
 8005548:	3302      	adds	r3, #2
 800554a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800554e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	220f      	movs	r2, #15
 800555a:	fa02 f303 	lsl.w	r3, r2, r3
 800555e:	43db      	mvns	r3, r3
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	4013      	ands	r3, r2
 8005564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a52      	ldr	r2, [pc, #328]	; (80056b4 <HAL_GPIO_Init+0x314>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d02b      	beq.n	80055c6 <HAL_GPIO_Init+0x226>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a51      	ldr	r2, [pc, #324]	; (80056b8 <HAL_GPIO_Init+0x318>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d025      	beq.n	80055c2 <HAL_GPIO_Init+0x222>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a50      	ldr	r2, [pc, #320]	; (80056bc <HAL_GPIO_Init+0x31c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d01f      	beq.n	80055be <HAL_GPIO_Init+0x21e>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a4f      	ldr	r2, [pc, #316]	; (80056c0 <HAL_GPIO_Init+0x320>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d019      	beq.n	80055ba <HAL_GPIO_Init+0x21a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a4e      	ldr	r2, [pc, #312]	; (80056c4 <HAL_GPIO_Init+0x324>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d013      	beq.n	80055b6 <HAL_GPIO_Init+0x216>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a4d      	ldr	r2, [pc, #308]	; (80056c8 <HAL_GPIO_Init+0x328>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d00d      	beq.n	80055b2 <HAL_GPIO_Init+0x212>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a4c      	ldr	r2, [pc, #304]	; (80056cc <HAL_GPIO_Init+0x32c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d007      	beq.n	80055ae <HAL_GPIO_Init+0x20e>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a4b      	ldr	r2, [pc, #300]	; (80056d0 <HAL_GPIO_Init+0x330>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d101      	bne.n	80055aa <HAL_GPIO_Init+0x20a>
 80055a6:	2307      	movs	r3, #7
 80055a8:	e00e      	b.n	80055c8 <HAL_GPIO_Init+0x228>
 80055aa:	2308      	movs	r3, #8
 80055ac:	e00c      	b.n	80055c8 <HAL_GPIO_Init+0x228>
 80055ae:	2306      	movs	r3, #6
 80055b0:	e00a      	b.n	80055c8 <HAL_GPIO_Init+0x228>
 80055b2:	2305      	movs	r3, #5
 80055b4:	e008      	b.n	80055c8 <HAL_GPIO_Init+0x228>
 80055b6:	2304      	movs	r3, #4
 80055b8:	e006      	b.n	80055c8 <HAL_GPIO_Init+0x228>
 80055ba:	2303      	movs	r3, #3
 80055bc:	e004      	b.n	80055c8 <HAL_GPIO_Init+0x228>
 80055be:	2302      	movs	r3, #2
 80055c0:	e002      	b.n	80055c8 <HAL_GPIO_Init+0x228>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <HAL_GPIO_Init+0x228>
 80055c6:	2300      	movs	r3, #0
 80055c8:	69fa      	ldr	r2, [r7, #28]
 80055ca:	f002 0203 	and.w	r2, r2, #3
 80055ce:	0092      	lsls	r2, r2, #2
 80055d0:	4093      	lsls	r3, r2
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055d8:	4935      	ldr	r1, [pc, #212]	; (80056b0 <HAL_GPIO_Init+0x310>)
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	089b      	lsrs	r3, r3, #2
 80055de:	3302      	adds	r3, #2
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055e6:	4b3b      	ldr	r3, [pc, #236]	; (80056d4 <HAL_GPIO_Init+0x334>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	43db      	mvns	r3, r3
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	4013      	ands	r3, r2
 80055f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800560a:	4a32      	ldr	r2, [pc, #200]	; (80056d4 <HAL_GPIO_Init+0x334>)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005610:	4b30      	ldr	r3, [pc, #192]	; (80056d4 <HAL_GPIO_Init+0x334>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	43db      	mvns	r3, r3
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	4013      	ands	r3, r2
 800561e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005634:	4a27      	ldr	r2, [pc, #156]	; (80056d4 <HAL_GPIO_Init+0x334>)
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800563a:	4b26      	ldr	r3, [pc, #152]	; (80056d4 <HAL_GPIO_Init+0x334>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	43db      	mvns	r3, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4013      	ands	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	4313      	orrs	r3, r2
 800565c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800565e:	4a1d      	ldr	r2, [pc, #116]	; (80056d4 <HAL_GPIO_Init+0x334>)
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005664:	4b1b      	ldr	r3, [pc, #108]	; (80056d4 <HAL_GPIO_Init+0x334>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	43db      	mvns	r3, r3
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	4013      	ands	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005688:	4a12      	ldr	r2, [pc, #72]	; (80056d4 <HAL_GPIO_Init+0x334>)
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	3301      	adds	r3, #1
 8005692:	61fb      	str	r3, [r7, #28]
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	2b0f      	cmp	r3, #15
 8005698:	f67f ae90 	bls.w	80053bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800569c:	bf00      	nop
 800569e:	bf00      	nop
 80056a0:	3724      	adds	r7, #36	; 0x24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	40023800 	.word	0x40023800
 80056b0:	40013800 	.word	0x40013800
 80056b4:	40020000 	.word	0x40020000
 80056b8:	40020400 	.word	0x40020400
 80056bc:	40020800 	.word	0x40020800
 80056c0:	40020c00 	.word	0x40020c00
 80056c4:	40021000 	.word	0x40021000
 80056c8:	40021400 	.word	0x40021400
 80056cc:	40021800 	.word	0x40021800
 80056d0:	40021c00 	.word	0x40021c00
 80056d4:	40013c00 	.word	0x40013c00

080056d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	807b      	strh	r3, [r7, #2]
 80056e4:	4613      	mov	r3, r2
 80056e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80056e8:	787b      	ldrb	r3, [r7, #1]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056ee:	887a      	ldrh	r2, [r7, #2]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80056f4:	e003      	b.n	80056fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80056f6:	887b      	ldrh	r3, [r7, #2]
 80056f8:	041a      	lsls	r2, r3, #16
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	619a      	str	r2, [r3, #24]
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800570a:	b480      	push	{r7}
 800570c:	b085      	sub	sp, #20
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	460b      	mov	r3, r1
 8005714:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800571c:	887a      	ldrh	r2, [r7, #2]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4013      	ands	r3, r2
 8005722:	041a      	lsls	r2, r3, #16
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	43d9      	mvns	r1, r3
 8005728:	887b      	ldrh	r3, [r7, #2]
 800572a:	400b      	ands	r3, r1
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	619a      	str	r2, [r3, #24]
}
 8005732:	bf00      	nop
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
	...

08005740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e12b      	b.n	80059aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fd ff9c 	bl	80036a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2224      	movs	r2, #36	; 0x24
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0201 	bic.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005792:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80057a4:	f002 f9cc 	bl	8007b40 <HAL_RCC_GetPCLK1Freq>
 80057a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	4a81      	ldr	r2, [pc, #516]	; (80059b4 <HAL_I2C_Init+0x274>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d807      	bhi.n	80057c4 <HAL_I2C_Init+0x84>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4a80      	ldr	r2, [pc, #512]	; (80059b8 <HAL_I2C_Init+0x278>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	bf94      	ite	ls
 80057bc:	2301      	movls	r3, #1
 80057be:	2300      	movhi	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	e006      	b.n	80057d2 <HAL_I2C_Init+0x92>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4a7d      	ldr	r2, [pc, #500]	; (80059bc <HAL_I2C_Init+0x27c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	bf94      	ite	ls
 80057cc:	2301      	movls	r3, #1
 80057ce:	2300      	movhi	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e0e7      	b.n	80059aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4a78      	ldr	r2, [pc, #480]	; (80059c0 <HAL_I2C_Init+0x280>)
 80057de:	fba2 2303 	umull	r2, r3, r2, r3
 80057e2:	0c9b      	lsrs	r3, r3, #18
 80057e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	4a6a      	ldr	r2, [pc, #424]	; (80059b4 <HAL_I2C_Init+0x274>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d802      	bhi.n	8005814 <HAL_I2C_Init+0xd4>
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	3301      	adds	r3, #1
 8005812:	e009      	b.n	8005828 <HAL_I2C_Init+0xe8>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800581a:	fb02 f303 	mul.w	r3, r2, r3
 800581e:	4a69      	ldr	r2, [pc, #420]	; (80059c4 <HAL_I2C_Init+0x284>)
 8005820:	fba2 2303 	umull	r2, r3, r2, r3
 8005824:	099b      	lsrs	r3, r3, #6
 8005826:	3301      	adds	r3, #1
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6812      	ldr	r2, [r2, #0]
 800582c:	430b      	orrs	r3, r1
 800582e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800583a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	495c      	ldr	r1, [pc, #368]	; (80059b4 <HAL_I2C_Init+0x274>)
 8005844:	428b      	cmp	r3, r1
 8005846:	d819      	bhi.n	800587c <HAL_I2C_Init+0x13c>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	1e59      	subs	r1, r3, #1
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	fbb1 f3f3 	udiv	r3, r1, r3
 8005856:	1c59      	adds	r1, r3, #1
 8005858:	f640 73fc 	movw	r3, #4092	; 0xffc
 800585c:	400b      	ands	r3, r1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <HAL_I2C_Init+0x138>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	1e59      	subs	r1, r3, #1
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005870:	3301      	adds	r3, #1
 8005872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005876:	e051      	b.n	800591c <HAL_I2C_Init+0x1dc>
 8005878:	2304      	movs	r3, #4
 800587a:	e04f      	b.n	800591c <HAL_I2C_Init+0x1dc>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d111      	bne.n	80058a8 <HAL_I2C_Init+0x168>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	1e58      	subs	r0, r3, #1
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6859      	ldr	r1, [r3, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	440b      	add	r3, r1
 8005892:	fbb0 f3f3 	udiv	r3, r0, r3
 8005896:	3301      	adds	r3, #1
 8005898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800589c:	2b00      	cmp	r3, #0
 800589e:	bf0c      	ite	eq
 80058a0:	2301      	moveq	r3, #1
 80058a2:	2300      	movne	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	e012      	b.n	80058ce <HAL_I2C_Init+0x18e>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	1e58      	subs	r0, r3, #1
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6859      	ldr	r1, [r3, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	0099      	lsls	r1, r3, #2
 80058b8:	440b      	add	r3, r1
 80058ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80058be:	3301      	adds	r3, #1
 80058c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	bf0c      	ite	eq
 80058c8:	2301      	moveq	r3, #1
 80058ca:	2300      	movne	r3, #0
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <HAL_I2C_Init+0x196>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e022      	b.n	800591c <HAL_I2C_Init+0x1dc>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10e      	bne.n	80058fc <HAL_I2C_Init+0x1bc>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	1e58      	subs	r0, r3, #1
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6859      	ldr	r1, [r3, #4]
 80058e6:	460b      	mov	r3, r1
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	440b      	add	r3, r1
 80058ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80058f0:	3301      	adds	r3, #1
 80058f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058fa:	e00f      	b.n	800591c <HAL_I2C_Init+0x1dc>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	1e58      	subs	r0, r3, #1
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6859      	ldr	r1, [r3, #4]
 8005904:	460b      	mov	r3, r1
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	440b      	add	r3, r1
 800590a:	0099      	lsls	r1, r3, #2
 800590c:	440b      	add	r3, r1
 800590e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005912:	3301      	adds	r3, #1
 8005914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	6809      	ldr	r1, [r1, #0]
 8005920:	4313      	orrs	r3, r2
 8005922:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69da      	ldr	r2, [r3, #28]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800594a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	6911      	ldr	r1, [r2, #16]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	68d2      	ldr	r2, [r2, #12]
 8005956:	4311      	orrs	r1, r2
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6812      	ldr	r2, [r2, #0]
 800595c:	430b      	orrs	r3, r1
 800595e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695a      	ldr	r2, [r3, #20]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0201 	orr.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2220      	movs	r2, #32
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	000186a0 	.word	0x000186a0
 80059b8:	001e847f 	.word	0x001e847f
 80059bc:	003d08ff 	.word	0x003d08ff
 80059c0:	431bde83 	.word	0x431bde83
 80059c4:	10624dd3 	.word	0x10624dd3

080059c8 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	4608      	mov	r0, r1
 80059d2:	4611      	mov	r1, r2
 80059d4:	461a      	mov	r2, r3
 80059d6:	4603      	mov	r3, r0
 80059d8:	817b      	strh	r3, [r7, #10]
 80059da:	460b      	mov	r3, r1
 80059dc:	813b      	strh	r3, [r7, #8]
 80059de:	4613      	mov	r3, r2
 80059e0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b20      	cmp	r3, #32
 80059f0:	f040 809a 	bne.w	8005b28 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80059f4:	4b50      	ldr	r3, [pc, #320]	; (8005b38 <HAL_I2C_Mem_Read_IT+0x170>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	08db      	lsrs	r3, r3, #3
 80059fa:	4a50      	ldr	r2, [pc, #320]	; (8005b3c <HAL_I2C_Mem_Read_IT+0x174>)
 80059fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005a00:	0a1a      	lsrs	r2, r3, #8
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	009a      	lsls	r2, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d116      	bne.n	8005a48 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	f043 0220 	orr.w	r2, r3, #32
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e070      	b.n	8005b2a <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d0db      	beq.n	8005a0e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_I2C_Mem_Read_IT+0x9c>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e062      	b.n	8005b2a <HAL_I2C_Mem_Read_IT+0x162>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d007      	beq.n	8005a8a <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 0201 	orr.w	r2, r2, #1
 8005a88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a98:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2222      	movs	r2, #34	; 0x22
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2240      	movs	r2, #64	; 0x40
 8005aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a3a      	ldr	r2, [r7, #32]
 8005ab4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005aba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4a1d      	ldr	r2, [pc, #116]	; (8005b40 <HAL_I2C_Mem_Read_IT+0x178>)
 8005aca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005acc:	897a      	ldrh	r2, [r7, #10]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8005ad2:	893a      	ldrh	r2, [r7, #8]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005ad8:	88fa      	ldrh	r2, [r7, #6]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005af2:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b02:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d007      	beq.n	8005b24 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005b22:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	e000      	b.n	8005b2a <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8005b28:	2302      	movs	r3, #2
  }
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	20000004 	.word	0x20000004
 8005b3c:	14f8b589 	.word	0x14f8b589
 8005b40:	ffff0000 	.word	0xffff0000

08005b44 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b64:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b6c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
 8005b70:	2b10      	cmp	r3, #16
 8005b72:	d003      	beq.n	8005b7c <HAL_I2C_EV_IRQHandler+0x38>
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	2b40      	cmp	r3, #64	; 0x40
 8005b78:	f040 80c1 	bne.w	8005cfe <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10d      	bne.n	8005bb2 <HAL_I2C_EV_IRQHandler+0x6e>
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005b9c:	d003      	beq.n	8005ba6 <HAL_I2C_EV_IRQHandler+0x62>
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005ba4:	d101      	bne.n	8005baa <HAL_I2C_EV_IRQHandler+0x66>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e000      	b.n	8005bac <HAL_I2C_EV_IRQHandler+0x68>
 8005baa:	2300      	movs	r3, #0
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	f000 8132 	beq.w	8005e16 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00c      	beq.n	8005bd6 <HAL_I2C_EV_IRQHandler+0x92>
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	0a5b      	lsrs	r3, r3, #9
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d006      	beq.n	8005bd6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f001 fb51 	bl	8007270 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fcc8 	bl	8006564 <I2C_Master_SB>
 8005bd4:	e092      	b.n	8005cfc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	08db      	lsrs	r3, r3, #3
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d009      	beq.n	8005bf6 <HAL_I2C_EV_IRQHandler+0xb2>
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	0a5b      	lsrs	r3, r3, #9
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fd3e 	bl	8006670 <I2C_Master_ADD10>
 8005bf4:	e082      	b.n	8005cfc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	085b      	lsrs	r3, r3, #1
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d009      	beq.n	8005c16 <HAL_I2C_EV_IRQHandler+0xd2>
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	0a5b      	lsrs	r3, r3, #9
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fd58 	bl	80066c4 <I2C_Master_ADDR>
 8005c14:	e072      	b.n	8005cfc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	089b      	lsrs	r3, r3, #2
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d03b      	beq.n	8005c9a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c30:	f000 80f3 	beq.w	8005e1a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	09db      	lsrs	r3, r3, #7
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00f      	beq.n	8005c60 <HAL_I2C_EV_IRQHandler+0x11c>
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	0a9b      	lsrs	r3, r3, #10
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d009      	beq.n	8005c60 <HAL_I2C_EV_IRQHandler+0x11c>
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	089b      	lsrs	r3, r3, #2
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d103      	bne.n	8005c60 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f942 	bl	8005ee2 <I2C_MasterTransmit_TXE>
 8005c5e:	e04d      	b.n	8005cfc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	089b      	lsrs	r3, r3, #2
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 80d6 	beq.w	8005e1a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	0a5b      	lsrs	r3, r3, #9
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 80cf 	beq.w	8005e1a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005c7c:	7bbb      	ldrb	r3, [r7, #14]
 8005c7e:	2b21      	cmp	r3, #33	; 0x21
 8005c80:	d103      	bne.n	8005c8a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f9c9 	bl	800601a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c88:	e0c7      	b.n	8005e1a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	f040 80c4 	bne.w	8005e1a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fa37 	bl	8006106 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c98:	e0bf      	b.n	8005e1a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ca8:	f000 80b7 	beq.w	8005e1a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	099b      	lsrs	r3, r3, #6
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00f      	beq.n	8005cd8 <HAL_I2C_EV_IRQHandler+0x194>
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	0a9b      	lsrs	r3, r3, #10
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d009      	beq.n	8005cd8 <HAL_I2C_EV_IRQHandler+0x194>
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	089b      	lsrs	r3, r3, #2
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d103      	bne.n	8005cd8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 faac 	bl	800622e <I2C_MasterReceive_RXNE>
 8005cd6:	e011      	b.n	8005cfc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	089b      	lsrs	r3, r3, #2
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 809a 	beq.w	8005e1a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	0a5b      	lsrs	r3, r3, #9
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 8093 	beq.w	8005e1a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fb4b 	bl	8006390 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cfa:	e08e      	b.n	8005e1a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005cfc:	e08d      	b.n	8005e1a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d004      	beq.n	8005d10 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	61fb      	str	r3, [r7, #28]
 8005d0e:	e007      	b.n	8005d20 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	085b      	lsrs	r3, r3, #1
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d012      	beq.n	8005d52 <HAL_I2C_EV_IRQHandler+0x20e>
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	0a5b      	lsrs	r3, r3, #9
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00c      	beq.n	8005d52 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005d48:	69b9      	ldr	r1, [r7, #24]
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 ff09 	bl	8006b62 <I2C_Slave_ADDR>
 8005d50:	e066      	b.n	8005e20 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	091b      	lsrs	r3, r3, #4
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d009      	beq.n	8005d72 <HAL_I2C_EV_IRQHandler+0x22e>
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	0a5b      	lsrs	r3, r3, #9
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 ff44 	bl	8006bf8 <I2C_Slave_STOPF>
 8005d70:	e056      	b.n	8005e20 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005d72:	7bbb      	ldrb	r3, [r7, #14]
 8005d74:	2b21      	cmp	r3, #33	; 0x21
 8005d76:	d002      	beq.n	8005d7e <HAL_I2C_EV_IRQHandler+0x23a>
 8005d78:	7bbb      	ldrb	r3, [r7, #14]
 8005d7a:	2b29      	cmp	r3, #41	; 0x29
 8005d7c:	d125      	bne.n	8005dca <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	09db      	lsrs	r3, r3, #7
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00f      	beq.n	8005daa <HAL_I2C_EV_IRQHandler+0x266>
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	0a9b      	lsrs	r3, r3, #10
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d009      	beq.n	8005daa <HAL_I2C_EV_IRQHandler+0x266>
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	089b      	lsrs	r3, r3, #2
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d103      	bne.n	8005daa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fe1f 	bl	80069e6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005da8:	e039      	b.n	8005e1e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	089b      	lsrs	r3, r3, #2
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d033      	beq.n	8005e1e <HAL_I2C_EV_IRQHandler+0x2da>
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	0a5b      	lsrs	r3, r3, #9
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d02d      	beq.n	8005e1e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fe4c 	bl	8006a60 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005dc8:	e029      	b.n	8005e1e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	099b      	lsrs	r3, r3, #6
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00f      	beq.n	8005df6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	0a9b      	lsrs	r3, r3, #10
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d009      	beq.n	8005df6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	089b      	lsrs	r3, r3, #2
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d103      	bne.n	8005df6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fe57 	bl	8006aa2 <I2C_SlaveReceive_RXNE>
 8005df4:	e014      	b.n	8005e20 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	089b      	lsrs	r3, r3, #2
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00e      	beq.n	8005e20 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	0a5b      	lsrs	r3, r3, #9
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d008      	beq.n	8005e20 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fe85 	bl	8006b1e <I2C_SlaveReceive_BTF>
 8005e14:	e004      	b.n	8005e20 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005e16:	bf00      	nop
 8005e18:	e002      	b.n	8005e20 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e1a:	bf00      	nop
 8005e1c:	e000      	b.n	8005e20 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e1e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005e20:	3720      	adds	r7, #32
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005e2e:	bf00      	nop
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005e42:	bf00      	nop
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005e6a:	bf00      	nop
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b083      	sub	sp, #12
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	460b      	mov	r3, r1
 8005e80:	70fb      	strb	r3, [r7, #3]
 8005e82:	4613      	mov	r3, r2
 8005e84:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005e9a:	bf00      	nop
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005ec2:	bf00      	nop
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ef0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ef8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d150      	bne.n	8005faa <I2C_MasterTransmit_TXE+0xc8>
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	2b21      	cmp	r3, #33	; 0x21
 8005f0c:	d14d      	bne.n	8005faa <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d01d      	beq.n	8005f50 <I2C_MasterTransmit_TXE+0x6e>
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b20      	cmp	r3, #32
 8005f18:	d01a      	beq.n	8005f50 <I2C_MasterTransmit_TXE+0x6e>
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f20:	d016      	beq.n	8005f50 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f30:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2211      	movs	r2, #17
 8005f36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f7ff ff6c 	bl	8005e26 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f4e:	e060      	b.n	8006012 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f5e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b40      	cmp	r3, #64	; 0x40
 8005f88:	d107      	bne.n	8005f9a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff ff87 	bl	8005ea6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f98:	e03b      	b.n	8006012 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7ff ff3f 	bl	8005e26 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005fa8:	e033      	b.n	8006012 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005faa:	7bfb      	ldrb	r3, [r7, #15]
 8005fac:	2b21      	cmp	r3, #33	; 0x21
 8005fae:	d005      	beq.n	8005fbc <I2C_MasterTransmit_TXE+0xda>
 8005fb0:	7bbb      	ldrb	r3, [r7, #14]
 8005fb2:	2b40      	cmp	r3, #64	; 0x40
 8005fb4:	d12d      	bne.n	8006012 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
 8005fb8:	2b22      	cmp	r3, #34	; 0x22
 8005fba:	d12a      	bne.n	8006012 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d108      	bne.n	8005fd8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fd4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005fd6:	e01c      	b.n	8006012 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b40      	cmp	r3, #64	; 0x40
 8005fe2:	d103      	bne.n	8005fec <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f88e 	bl	8006106 <I2C_MemoryTransmit_TXE_BTF>
}
 8005fea:	e012      	b.n	8006012 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	781a      	ldrb	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006006:	b29b      	uxth	r3, r3
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006010:	e7ff      	b.n	8006012 <I2C_MasterTransmit_TXE+0x130>
 8006012:	bf00      	nop
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b21      	cmp	r3, #33	; 0x21
 8006032:	d164      	bne.n	80060fe <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d012      	beq.n	8006064 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	781a      	ldrb	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	1c5a      	adds	r2, r3, #1
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006058:	b29b      	uxth	r3, r3
 800605a:	3b01      	subs	r3, #1
 800605c:	b29a      	uxth	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006062:	e04c      	b.n	80060fe <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b08      	cmp	r3, #8
 8006068:	d01d      	beq.n	80060a6 <I2C_MasterTransmit_BTF+0x8c>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2b20      	cmp	r3, #32
 800606e:	d01a      	beq.n	80060a6 <I2C_MasterTransmit_BTF+0x8c>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006076:	d016      	beq.n	80060a6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006086:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2211      	movs	r2, #17
 800608c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff fec1 	bl	8005e26 <HAL_I2C_MasterTxCpltCallback>
}
 80060a4:	e02b      	b.n	80060fe <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060b4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060c4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b40      	cmp	r3, #64	; 0x40
 80060de:	d107      	bne.n	80060f0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7ff fedc 	bl	8005ea6 <HAL_I2C_MemTxCpltCallback>
}
 80060ee:	e006      	b.n	80060fe <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7ff fe94 	bl	8005e26 <HAL_I2C_MasterTxCpltCallback>
}
 80060fe:	bf00      	nop
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006114:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800611a:	2b00      	cmp	r3, #0
 800611c:	d11d      	bne.n	800615a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006122:	2b01      	cmp	r3, #1
 8006124:	d10b      	bne.n	800613e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800612a:	b2da      	uxtb	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006136:	1c9a      	adds	r2, r3, #2
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800613c:	e073      	b.n	8006226 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006142:	b29b      	uxth	r3, r3
 8006144:	121b      	asrs	r3, r3, #8
 8006146:	b2da      	uxtb	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006158:	e065      	b.n	8006226 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800615e:	2b01      	cmp	r3, #1
 8006160:	d10b      	bne.n	800617a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006166:	b2da      	uxtb	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006178:	e055      	b.n	8006226 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800617e:	2b02      	cmp	r3, #2
 8006180:	d151      	bne.n	8006226 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	2b22      	cmp	r3, #34	; 0x22
 8006186:	d10d      	bne.n	80061a4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006196:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80061a2:	e040      	b.n	8006226 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d015      	beq.n	80061da <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	2b21      	cmp	r3, #33	; 0x21
 80061b2:	d112      	bne.n	80061da <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	781a      	ldrb	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80061d8:	e025      	b.n	8006226 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061de:	b29b      	uxth	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d120      	bne.n	8006226 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	2b21      	cmp	r3, #33	; 0x21
 80061e8:	d11d      	bne.n	8006226 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061f8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006208:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff fe40 	bl	8005ea6 <HAL_I2C_MemTxCpltCallback>
}
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b22      	cmp	r3, #34	; 0x22
 8006240:	f040 80a2 	bne.w	8006388 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006248:	b29b      	uxth	r3, r3
 800624a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b03      	cmp	r3, #3
 8006250:	d921      	bls.n	8006296 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	691a      	ldr	r2, [r3, #16]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625c:	b2d2      	uxtb	r2, r2
 800625e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006264:	1c5a      	adds	r2, r3, #1
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800626e:	b29b      	uxth	r3, r3
 8006270:	3b01      	subs	r3, #1
 8006272:	b29a      	uxth	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b03      	cmp	r3, #3
 8006280:	f040 8082 	bne.w	8006388 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006292:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8006294:	e078      	b.n	8006388 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629a:	2b02      	cmp	r3, #2
 800629c:	d074      	beq.n	8006388 <I2C_MasterReceive_RXNE+0x15a>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d002      	beq.n	80062aa <I2C_MasterReceive_RXNE+0x7c>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d16e      	bne.n	8006388 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 ffae 	bl	800720c <I2C_WaitOnSTOPRequestThroughIT>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d142      	bne.n	800633c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062c4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062d4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2220      	movs	r2, #32
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b40      	cmp	r3, #64	; 0x40
 800630e:	d10a      	bne.n	8006326 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7fb f904 	bl	800152c <HAL_I2C_MemRxCpltCallback>
}
 8006324:	e030      	b.n	8006388 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2212      	movs	r2, #18
 8006332:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff fd80 	bl	8005e3a <HAL_I2C_MasterRxCpltCallback>
}
 800633a:	e025      	b.n	8006388 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800634a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691a      	ldr	r2, [r3, #16]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	b2d2      	uxtb	r2, r2
 8006358:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006368:	b29b      	uxth	r3, r3
 800636a:	3b01      	subs	r3, #1
 800636c:	b29a      	uxth	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2220      	movs	r2, #32
 8006376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7ff fd99 	bl	8005eba <HAL_I2C_ErrorCallback>
}
 8006388:	bf00      	nop
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d11b      	bne.n	80063e0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063b6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691a      	ldr	r2, [r3, #16]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80063de:	e0bd      	b.n	800655c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d129      	bne.n	800643e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063f8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2b04      	cmp	r3, #4
 80063fe:	d00a      	beq.n	8006416 <I2C_MasterReceive_BTF+0x86>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2b02      	cmp	r3, #2
 8006404:	d007      	beq.n	8006416 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006414:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006432:	b29b      	uxth	r3, r3
 8006434:	3b01      	subs	r3, #1
 8006436:	b29a      	uxth	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800643c:	e08e      	b.n	800655c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006442:	b29b      	uxth	r3, r3
 8006444:	2b02      	cmp	r3, #2
 8006446:	d176      	bne.n	8006536 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d002      	beq.n	8006454 <I2C_MasterReceive_BTF+0xc4>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b10      	cmp	r3, #16
 8006452:	d108      	bne.n	8006466 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	e019      	b.n	800649a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2b04      	cmp	r3, #4
 800646a:	d002      	beq.n	8006472 <I2C_MasterReceive_BTF+0xe2>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b02      	cmp	r3, #2
 8006470:	d108      	bne.n	8006484 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	e00a      	b.n	800649a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b10      	cmp	r3, #16
 8006488:	d007      	beq.n	800649a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006498:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	691a      	ldr	r2, [r3, #16]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691a      	ldr	r2, [r3, #16]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064dc:	b29b      	uxth	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80064f4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b40      	cmp	r3, #64	; 0x40
 8006508:	d10a      	bne.n	8006520 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7fb f807 	bl	800152c <HAL_I2C_MemRxCpltCallback>
}
 800651e:	e01d      	b.n	800655c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2212      	movs	r2, #18
 800652c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7ff fc83 	bl	8005e3a <HAL_I2C_MasterRxCpltCallback>
}
 8006534:	e012      	b.n	800655c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	691a      	ldr	r2, [r3, #16]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006552:	b29b      	uxth	r3, r3
 8006554:	3b01      	subs	r3, #1
 8006556:	b29a      	uxth	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800655c:	bf00      	nop
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b40      	cmp	r3, #64	; 0x40
 8006576:	d117      	bne.n	80065a8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800657c:	2b00      	cmp	r3, #0
 800657e:	d109      	bne.n	8006594 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006584:	b2db      	uxtb	r3, r3
 8006586:	461a      	mov	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006590:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006592:	e067      	b.n	8006664 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006598:	b2db      	uxtb	r3, r3
 800659a:	f043 0301 	orr.w	r3, r3, #1
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	611a      	str	r2, [r3, #16]
}
 80065a6:	e05d      	b.n	8006664 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065b0:	d133      	bne.n	800661a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b21      	cmp	r3, #33	; 0x21
 80065bc:	d109      	bne.n	80065d2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	461a      	mov	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065ce:	611a      	str	r2, [r3, #16]
 80065d0:	e008      	b.n	80065e4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	f043 0301 	orr.w	r3, r3, #1
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d004      	beq.n	80065f6 <I2C_Master_SB+0x92>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d108      	bne.n	8006608 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d032      	beq.n	8006664 <I2C_Master_SB+0x100>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006604:	2b00      	cmp	r3, #0
 8006606:	d02d      	beq.n	8006664 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006616:	605a      	str	r2, [r3, #4]
}
 8006618:	e024      	b.n	8006664 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10e      	bne.n	8006640 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006626:	b29b      	uxth	r3, r3
 8006628:	11db      	asrs	r3, r3, #7
 800662a:	b2db      	uxtb	r3, r3
 800662c:	f003 0306 	and.w	r3, r3, #6
 8006630:	b2db      	uxtb	r3, r3
 8006632:	f063 030f 	orn	r3, r3, #15
 8006636:	b2da      	uxtb	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	611a      	str	r2, [r3, #16]
}
 800663e:	e011      	b.n	8006664 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006644:	2b01      	cmp	r3, #1
 8006646:	d10d      	bne.n	8006664 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664c:	b29b      	uxth	r3, r3
 800664e:	11db      	asrs	r3, r3, #7
 8006650:	b2db      	uxtb	r3, r3
 8006652:	f003 0306 	and.w	r3, r3, #6
 8006656:	b2db      	uxtb	r3, r3
 8006658:	f063 030e 	orn	r3, r3, #14
 800665c:	b2da      	uxtb	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	611a      	str	r2, [r3, #16]
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667c:	b2da      	uxtb	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006688:	2b00      	cmp	r3, #0
 800668a:	d004      	beq.n	8006696 <I2C_Master_ADD10+0x26>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d108      	bne.n	80066a8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00c      	beq.n	80066b8 <I2C_Master_ADD10+0x48>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d007      	beq.n	80066b8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066b6:	605a      	str	r2, [r3, #4]
  }
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b091      	sub	sp, #68	; 0x44
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066da:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b22      	cmp	r3, #34	; 0x22
 80066ec:	f040 8169 	bne.w	80069c2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10f      	bne.n	8006718 <I2C_Master_ADDR+0x54>
 80066f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066fc:	2b40      	cmp	r3, #64	; 0x40
 80066fe:	d10b      	bne.n	8006718 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006700:	2300      	movs	r3, #0
 8006702:	633b      	str	r3, [r7, #48]	; 0x30
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	633b      	str	r3, [r7, #48]	; 0x30
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	633b      	str	r3, [r7, #48]	; 0x30
 8006714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006716:	e160      	b.n	80069da <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800671c:	2b00      	cmp	r3, #0
 800671e:	d11d      	bne.n	800675c <I2C_Master_ADDR+0x98>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006728:	d118      	bne.n	800675c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800672a:	2300      	movs	r3, #0
 800672c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800674e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	651a      	str	r2, [r3, #80]	; 0x50
 800675a:	e13e      	b.n	80069da <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006760:	b29b      	uxth	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d113      	bne.n	800678e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006766:	2300      	movs	r3, #0
 8006768:	62bb      	str	r3, [r7, #40]	; 0x28
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	62bb      	str	r3, [r7, #40]	; 0x28
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	62bb      	str	r3, [r7, #40]	; 0x28
 800677a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	e115      	b.n	80069ba <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006792:	b29b      	uxth	r3, r3
 8006794:	2b01      	cmp	r3, #1
 8006796:	f040 808a 	bne.w	80068ae <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800679a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80067a0:	d137      	bne.n	8006812 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067b0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067c0:	d113      	bne.n	80067ea <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067d0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067d2:	2300      	movs	r3, #0
 80067d4:	627b      	str	r3, [r7, #36]	; 0x24
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	627b      	str	r3, [r7, #36]	; 0x24
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	627b      	str	r3, [r7, #36]	; 0x24
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	e0e7      	b.n	80069ba <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ea:	2300      	movs	r3, #0
 80067ec:	623b      	str	r3, [r7, #32]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	623b      	str	r3, [r7, #32]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	623b      	str	r3, [r7, #32]
 80067fe:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800680e:	601a      	str	r2, [r3, #0]
 8006810:	e0d3      	b.n	80069ba <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006814:	2b08      	cmp	r3, #8
 8006816:	d02e      	beq.n	8006876 <I2C_Master_ADDR+0x1b2>
 8006818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681a:	2b20      	cmp	r3, #32
 800681c:	d02b      	beq.n	8006876 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800681e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006820:	2b12      	cmp	r3, #18
 8006822:	d102      	bne.n	800682a <I2C_Master_ADDR+0x166>
 8006824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006826:	2b01      	cmp	r3, #1
 8006828:	d125      	bne.n	8006876 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800682a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682c:	2b04      	cmp	r3, #4
 800682e:	d00e      	beq.n	800684e <I2C_Master_ADDR+0x18a>
 8006830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006832:	2b02      	cmp	r3, #2
 8006834:	d00b      	beq.n	800684e <I2C_Master_ADDR+0x18a>
 8006836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006838:	2b10      	cmp	r3, #16
 800683a:	d008      	beq.n	800684e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	e007      	b.n	800685e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800685c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800685e:	2300      	movs	r3, #0
 8006860:	61fb      	str	r3, [r7, #28]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	61fb      	str	r3, [r7, #28]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	61fb      	str	r3, [r7, #28]
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	e0a1      	b.n	80069ba <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006884:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006886:	2300      	movs	r3, #0
 8006888:	61bb      	str	r3, [r7, #24]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	61bb      	str	r3, [r7, #24]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	61bb      	str	r3, [r7, #24]
 800689a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	e085      	b.n	80069ba <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d14d      	bne.n	8006954 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80068b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d016      	beq.n	80068ec <I2C_Master_ADDR+0x228>
 80068be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d013      	beq.n	80068ec <I2C_Master_ADDR+0x228>
 80068c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c6:	2b10      	cmp	r3, #16
 80068c8:	d010      	beq.n	80068ec <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068d8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	e007      	b.n	80068fc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068fa:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800690a:	d117      	bne.n	800693c <I2C_Master_ADDR+0x278>
 800690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006912:	d00b      	beq.n	800692c <I2C_Master_ADDR+0x268>
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	2b01      	cmp	r3, #1
 8006918:	d008      	beq.n	800692c <I2C_Master_ADDR+0x268>
 800691a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691c:	2b08      	cmp	r3, #8
 800691e:	d005      	beq.n	800692c <I2C_Master_ADDR+0x268>
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	2b10      	cmp	r3, #16
 8006924:	d002      	beq.n	800692c <I2C_Master_ADDR+0x268>
 8006926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006928:	2b20      	cmp	r3, #32
 800692a:	d107      	bne.n	800693c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685a      	ldr	r2, [r3, #4]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800693a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800693c:	2300      	movs	r3, #0
 800693e:	617b      	str	r3, [r7, #20]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	e032      	b.n	80069ba <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006962:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800696e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006972:	d117      	bne.n	80069a4 <I2C_Master_ADDR+0x2e0>
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800697a:	d00b      	beq.n	8006994 <I2C_Master_ADDR+0x2d0>
 800697c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697e:	2b01      	cmp	r3, #1
 8006980:	d008      	beq.n	8006994 <I2C_Master_ADDR+0x2d0>
 8006982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006984:	2b08      	cmp	r3, #8
 8006986:	d005      	beq.n	8006994 <I2C_Master_ADDR+0x2d0>
 8006988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698a:	2b10      	cmp	r3, #16
 800698c:	d002      	beq.n	8006994 <I2C_Master_ADDR+0x2d0>
 800698e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006990:	2b20      	cmp	r3, #32
 8006992:	d107      	bne.n	80069a4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069a2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069a4:	2300      	movs	r3, #0
 80069a6:	613b      	str	r3, [r7, #16]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	613b      	str	r3, [r7, #16]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	613b      	str	r3, [r7, #16]
 80069b8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80069c0:	e00b      	b.n	80069da <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069c2:	2300      	movs	r3, #0
 80069c4:	60fb      	str	r3, [r7, #12]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	60fb      	str	r3, [r7, #12]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	68fb      	ldr	r3, [r7, #12]
}
 80069d8:	e7ff      	b.n	80069da <I2C_Master_ADDR+0x316>
 80069da:	bf00      	nop
 80069dc:	3744      	adds	r7, #68	; 0x44
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d02b      	beq.n	8006a58 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a04:	781a      	ldrb	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d114      	bne.n	8006a58 <I2C_SlaveTransmit_TXE+0x72>
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	2b29      	cmp	r3, #41	; 0x29
 8006a32:	d111      	bne.n	8006a58 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a42:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2221      	movs	r2, #33	; 0x21
 8006a48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2228      	movs	r2, #40	; 0x28
 8006a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7ff f9fb 	bl	8005e4e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006a58:	bf00      	nop
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d011      	beq.n	8006a96 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	781a      	ldrb	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d02c      	beq.n	8006b16 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	691a      	ldr	r2, [r3, #16]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac6:	b2d2      	uxtb	r2, r2
 8006ac8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	3b01      	subs	r3, #1
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d114      	bne.n	8006b16 <I2C_SlaveReceive_RXNE+0x74>
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
 8006aee:	2b2a      	cmp	r3, #42	; 0x2a
 8006af0:	d111      	bne.n	8006b16 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b00:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2222      	movs	r2, #34	; 0x22
 8006b06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2228      	movs	r2, #40	; 0x28
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7ff f9a6 	bl	8005e62 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006b16:	bf00      	nop
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d012      	beq.n	8006b56 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	691a      	ldr	r2, [r3, #16]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	b2d2      	uxtb	r2, r2
 8006b3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	1c5a      	adds	r2, r3, #1
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b7c:	2b28      	cmp	r3, #40	; 0x28
 8006b7e:	d127      	bne.n	8006bd0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b8e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	089b      	lsrs	r3, r3, #2
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	09db      	lsrs	r3, r3, #7
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d103      	bne.n	8006bb4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	81bb      	strh	r3, [r7, #12]
 8006bb2:	e002      	b.n	8006bba <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006bc2:	89ba      	ldrh	r2, [r7, #12]
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7ff f954 	bl	8005e76 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006bce:	e00e      	b.n	8006bee <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	60bb      	str	r3, [r7, #8]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	60bb      	str	r3, [r7, #8]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	60bb      	str	r3, [r7, #8]
 8006be4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006bee:	bf00      	nop
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c06:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c16:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60bb      	str	r3, [r7, #8]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	60bb      	str	r3, [r7, #8]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0201 	orr.w	r2, r2, #1
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c44:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c54:	d172      	bne.n	8006d3c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006c56:	7bfb      	ldrb	r3, [r7, #15]
 8006c58:	2b22      	cmp	r3, #34	; 0x22
 8006c5a:	d002      	beq.n	8006c62 <I2C_Slave_STOPF+0x6a>
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
 8006c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8006c60:	d135      	bne.n	8006cce <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d005      	beq.n	8006c86 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	f043 0204 	orr.w	r2, r3, #4
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fa92 	bl	80051c4 <HAL_DMA_GetState>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d049      	beq.n	8006d3a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006caa:	4a69      	ldr	r2, [pc, #420]	; (8006e50 <I2C_Slave_STOPF+0x258>)
 8006cac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fe f8da 	bl	8004e6c <HAL_DMA_Abort_IT>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d03d      	beq.n	8006d3a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cc8:	4610      	mov	r0, r2
 8006cca:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ccc:	e035      	b.n	8006d3a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d005      	beq.n	8006cf2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	f043 0204 	orr.w	r2, r3, #4
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fe fa5c 	bl	80051c4 <HAL_DMA_GetState>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d014      	beq.n	8006d3c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d16:	4a4e      	ldr	r2, [pc, #312]	; (8006e50 <I2C_Slave_STOPF+0x258>)
 8006d18:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fe f8a4 	bl	8004e6c <HAL_DMA_Abort_IT>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d008      	beq.n	8006d3c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d34:	4610      	mov	r0, r2
 8006d36:	4798      	blx	r3
 8006d38:	e000      	b.n	8006d3c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d3a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d03e      	beq.n	8006dc4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b04      	cmp	r3, #4
 8006d52:	d112      	bne.n	8006d7a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	691a      	ldr	r2, [r3, #16]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	3b01      	subs	r3, #1
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d84:	2b40      	cmp	r3, #64	; 0x40
 8006d86:	d112      	bne.n	8006dae <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	691a      	ldr	r2, [r3, #16]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	b2d2      	uxtb	r2, r2
 8006d94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	3b01      	subs	r3, #1
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d005      	beq.n	8006dc4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbc:	f043 0204 	orr.w	r2, r3, #4
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f843 	bl	8006e58 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006dd2:	e039      	b.n	8006e48 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8006dd8:	d109      	bne.n	8006dee <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2228      	movs	r2, #40	; 0x28
 8006de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7ff f83a 	bl	8005e62 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b28      	cmp	r3, #40	; 0x28
 8006df8:	d111      	bne.n	8006e1e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a15      	ldr	r2, [pc, #84]	; (8006e54 <I2C_Slave_STOPF+0x25c>)
 8006dfe:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7ff f83b 	bl	8005e92 <HAL_I2C_ListenCpltCallback>
}
 8006e1c:	e014      	b.n	8006e48 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e22:	2b22      	cmp	r3, #34	; 0x22
 8006e24:	d002      	beq.n	8006e2c <I2C_Slave_STOPF+0x234>
 8006e26:	7bfb      	ldrb	r3, [r7, #15]
 8006e28:	2b22      	cmp	r3, #34	; 0x22
 8006e2a:	d10d      	bne.n	8006e48 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2220      	movs	r2, #32
 8006e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7ff f80d 	bl	8005e62 <HAL_I2C_SlaveRxCpltCallback>
}
 8006e48:	bf00      	nop
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	080070bd 	.word	0x080070bd
 8006e54:	ffff0000 	.word	0xffff0000

08006e58 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e66:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e6e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	2b10      	cmp	r3, #16
 8006e74:	d002      	beq.n	8006e7c <I2C_ITError+0x24>
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	2b40      	cmp	r3, #64	; 0x40
 8006e7a:	d10a      	bne.n	8006e92 <I2C_ITError+0x3a>
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
 8006e7e:	2b22      	cmp	r3, #34	; 0x22
 8006e80:	d107      	bne.n	8006e92 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e90:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006e98:	2b28      	cmp	r3, #40	; 0x28
 8006e9a:	d107      	bne.n	8006eac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2228      	movs	r2, #40	; 0x28
 8006ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006eaa:	e015      	b.n	8006ed8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eba:	d00a      	beq.n	8006ed2 <I2C_ITError+0x7a>
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
 8006ebe:	2b60      	cmp	r3, #96	; 0x60
 8006ec0:	d007      	beq.n	8006ed2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ee6:	d162      	bne.n	8006fae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ef6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d020      	beq.n	8006f48 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0a:	4a6a      	ldr	r2, [pc, #424]	; (80070b4 <I2C_ITError+0x25c>)
 8006f0c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fd ffaa 	bl	8004e6c <HAL_DMA_Abort_IT>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 8089 	beq.w	8007032 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 0201 	bic.w	r2, r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f42:	4610      	mov	r0, r2
 8006f44:	4798      	blx	r3
 8006f46:	e074      	b.n	8007032 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	4a59      	ldr	r2, [pc, #356]	; (80070b4 <I2C_ITError+0x25c>)
 8006f4e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7fd ff89 	bl	8004e6c <HAL_DMA_Abort_IT>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d068      	beq.n	8007032 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6a:	2b40      	cmp	r3, #64	; 0x40
 8006f6c:	d10b      	bne.n	8006f86 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	691a      	ldr	r2, [r3, #16]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f78:	b2d2      	uxtb	r2, r2
 8006f7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0201 	bic.w	r2, r2, #1
 8006f94:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006fa8:	4610      	mov	r0, r2
 8006faa:	4798      	blx	r3
 8006fac:	e041      	b.n	8007032 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b60      	cmp	r3, #96	; 0x60
 8006fb8:	d125      	bne.n	8007006 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd2:	2b40      	cmp	r3, #64	; 0x40
 8006fd4:	d10b      	bne.n	8006fee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	691a      	ldr	r2, [r3, #16]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	b2d2      	uxtb	r2, r2
 8006fe2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe8:	1c5a      	adds	r2, r3, #1
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 0201 	bic.w	r2, r2, #1
 8006ffc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7fe ff65 	bl	8005ece <HAL_I2C_AbortCpltCallback>
 8007004:	e015      	b.n	8007032 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007010:	2b40      	cmp	r3, #64	; 0x40
 8007012:	d10b      	bne.n	800702c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691a      	ldr	r2, [r3, #16]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	b2d2      	uxtb	r2, r2
 8007020:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007026:	1c5a      	adds	r2, r3, #1
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7fe ff44 	bl	8005eba <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10e      	bne.n	8007060 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007048:	2b00      	cmp	r3, #0
 800704a:	d109      	bne.n	8007060 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007052:	2b00      	cmp	r3, #0
 8007054:	d104      	bne.n	8007060 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800705c:	2b00      	cmp	r3, #0
 800705e:	d007      	beq.n	8007070 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800706e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007076:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707c:	f003 0304 	and.w	r3, r3, #4
 8007080:	2b04      	cmp	r3, #4
 8007082:	d113      	bne.n	80070ac <I2C_ITError+0x254>
 8007084:	7bfb      	ldrb	r3, [r7, #15]
 8007086:	2b28      	cmp	r3, #40	; 0x28
 8007088:	d110      	bne.n	80070ac <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a0a      	ldr	r2, [pc, #40]	; (80070b8 <I2C_ITError+0x260>)
 800708e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2220      	movs	r2, #32
 800709a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7fe fef3 	bl	8005e92 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80070ac:	bf00      	nop
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	080070bd 	.word	0x080070bd
 80070b8:	ffff0000 	.word	0xffff0000

080070bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070c4:	2300      	movs	r3, #0
 80070c6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80070d6:	4b4b      	ldr	r3, [pc, #300]	; (8007204 <I2C_DMAAbort+0x148>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	08db      	lsrs	r3, r3, #3
 80070dc:	4a4a      	ldr	r2, [pc, #296]	; (8007208 <I2C_DMAAbort+0x14c>)
 80070de:	fba2 2303 	umull	r2, r3, r2, r3
 80070e2:	0a1a      	lsrs	r2, r3, #8
 80070e4:	4613      	mov	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	00da      	lsls	r2, r3, #3
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d106      	bne.n	8007104 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	f043 0220 	orr.w	r2, r3, #32
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007102:	e00a      	b.n	800711a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3b01      	subs	r3, #1
 8007108:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007118:	d0ea      	beq.n	80070f0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007126:	2200      	movs	r2, #0
 8007128:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007136:	2200      	movs	r2, #0
 8007138:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007148:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2200      	movs	r2, #0
 800714e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007154:	2b00      	cmp	r3, #0
 8007156:	d003      	beq.n	8007160 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715c:	2200      	movs	r2, #0
 800715e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007164:	2b00      	cmp	r3, #0
 8007166:	d003      	beq.n	8007170 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716c:	2200      	movs	r2, #0
 800716e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 0201 	bic.w	r2, r2, #1
 800717e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b60      	cmp	r3, #96	; 0x60
 800718a:	d10e      	bne.n	80071aa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	2220      	movs	r2, #32
 8007190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	2200      	movs	r2, #0
 80071a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80071a2:	6978      	ldr	r0, [r7, #20]
 80071a4:	f7fe fe93 	bl	8005ece <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80071a8:	e027      	b.n	80071fa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80071aa:	7cfb      	ldrb	r3, [r7, #19]
 80071ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80071b0:	2b28      	cmp	r3, #40	; 0x28
 80071b2:	d117      	bne.n	80071e4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0201 	orr.w	r2, r2, #1
 80071c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	2200      	movs	r2, #0
 80071d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2228      	movs	r2, #40	; 0x28
 80071de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80071e2:	e007      	b.n	80071f4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	2220      	movs	r2, #32
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80071f4:	6978      	ldr	r0, [r7, #20]
 80071f6:	f7fe fe60 	bl	8005eba <HAL_I2C_ErrorCallback>
}
 80071fa:	bf00      	nop
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	20000004 	.word	0x20000004
 8007208:	14f8b589 	.word	0x14f8b589

0800720c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007218:	4b13      	ldr	r3, [pc, #76]	; (8007268 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	08db      	lsrs	r3, r3, #3
 800721e:	4a13      	ldr	r2, [pc, #76]	; (800726c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007220:	fba2 2303 	umull	r2, r3, r2, r3
 8007224:	0a1a      	lsrs	r2, r3, #8
 8007226:	4613      	mov	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	3b01      	subs	r3, #1
 8007232:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d107      	bne.n	800724a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	f043 0220 	orr.w	r2, r3, #32
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e008      	b.n	800725c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007258:	d0e9      	beq.n	800722e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	20000004 	.word	0x20000004
 800726c:	14f8b589 	.word	0x14f8b589

08007270 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007280:	d103      	bne.n	800728a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007288:	e007      	b.n	800729a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007292:	d102      	bne.n	800729a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2208      	movs	r2, #8
 8007298:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800729a:	bf00      	nop
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
	...

080072a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e264      	b.n	8007784 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d075      	beq.n	80073b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072c6:	4ba3      	ldr	r3, [pc, #652]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f003 030c 	and.w	r3, r3, #12
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d00c      	beq.n	80072ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072d2:	4ba0      	ldr	r3, [pc, #640]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072da:	2b08      	cmp	r3, #8
 80072dc:	d112      	bne.n	8007304 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072de:	4b9d      	ldr	r3, [pc, #628]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072ea:	d10b      	bne.n	8007304 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072ec:	4b99      	ldr	r3, [pc, #612]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d05b      	beq.n	80073b0 <HAL_RCC_OscConfig+0x108>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d157      	bne.n	80073b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e23f      	b.n	8007784 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800730c:	d106      	bne.n	800731c <HAL_RCC_OscConfig+0x74>
 800730e:	4b91      	ldr	r3, [pc, #580]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a90      	ldr	r2, [pc, #576]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 8007314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007318:	6013      	str	r3, [r2, #0]
 800731a:	e01d      	b.n	8007358 <HAL_RCC_OscConfig+0xb0>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007324:	d10c      	bne.n	8007340 <HAL_RCC_OscConfig+0x98>
 8007326:	4b8b      	ldr	r3, [pc, #556]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a8a      	ldr	r2, [pc, #552]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 800732c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007330:	6013      	str	r3, [r2, #0]
 8007332:	4b88      	ldr	r3, [pc, #544]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a87      	ldr	r2, [pc, #540]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 8007338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800733c:	6013      	str	r3, [r2, #0]
 800733e:	e00b      	b.n	8007358 <HAL_RCC_OscConfig+0xb0>
 8007340:	4b84      	ldr	r3, [pc, #528]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a83      	ldr	r2, [pc, #524]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 8007346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	4b81      	ldr	r3, [pc, #516]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a80      	ldr	r2, [pc, #512]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 8007352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d013      	beq.n	8007388 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007360:	f7fc feba 	bl	80040d8 <HAL_GetTick>
 8007364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007366:	e008      	b.n	800737a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007368:	f7fc feb6 	bl	80040d8 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	2b64      	cmp	r3, #100	; 0x64
 8007374:	d901      	bls.n	800737a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e204      	b.n	8007784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800737a:	4b76      	ldr	r3, [pc, #472]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d0f0      	beq.n	8007368 <HAL_RCC_OscConfig+0xc0>
 8007386:	e014      	b.n	80073b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007388:	f7fc fea6 	bl	80040d8 <HAL_GetTick>
 800738c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800738e:	e008      	b.n	80073a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007390:	f7fc fea2 	bl	80040d8 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b64      	cmp	r3, #100	; 0x64
 800739c:	d901      	bls.n	80073a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e1f0      	b.n	8007784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073a2:	4b6c      	ldr	r3, [pc, #432]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1f0      	bne.n	8007390 <HAL_RCC_OscConfig+0xe8>
 80073ae:	e000      	b.n	80073b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d063      	beq.n	8007486 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073be:	4b65      	ldr	r3, [pc, #404]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f003 030c 	and.w	r3, r3, #12
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00b      	beq.n	80073e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073ca:	4b62      	ldr	r3, [pc, #392]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073d2:	2b08      	cmp	r3, #8
 80073d4:	d11c      	bne.n	8007410 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073d6:	4b5f      	ldr	r3, [pc, #380]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d116      	bne.n	8007410 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073e2:	4b5c      	ldr	r3, [pc, #368]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d005      	beq.n	80073fa <HAL_RCC_OscConfig+0x152>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d001      	beq.n	80073fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e1c4      	b.n	8007784 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073fa:	4b56      	ldr	r3, [pc, #344]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	4952      	ldr	r1, [pc, #328]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 800740a:	4313      	orrs	r3, r2
 800740c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800740e:	e03a      	b.n	8007486 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d020      	beq.n	800745a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007418:	4b4f      	ldr	r3, [pc, #316]	; (8007558 <HAL_RCC_OscConfig+0x2b0>)
 800741a:	2201      	movs	r2, #1
 800741c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800741e:	f7fc fe5b 	bl	80040d8 <HAL_GetTick>
 8007422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007424:	e008      	b.n	8007438 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007426:	f7fc fe57 	bl	80040d8 <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	2b02      	cmp	r3, #2
 8007432:	d901      	bls.n	8007438 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e1a5      	b.n	8007784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007438:	4b46      	ldr	r3, [pc, #280]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d0f0      	beq.n	8007426 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007444:	4b43      	ldr	r3, [pc, #268]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	00db      	lsls	r3, r3, #3
 8007452:	4940      	ldr	r1, [pc, #256]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 8007454:	4313      	orrs	r3, r2
 8007456:	600b      	str	r3, [r1, #0]
 8007458:	e015      	b.n	8007486 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800745a:	4b3f      	ldr	r3, [pc, #252]	; (8007558 <HAL_RCC_OscConfig+0x2b0>)
 800745c:	2200      	movs	r2, #0
 800745e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007460:	f7fc fe3a 	bl	80040d8 <HAL_GetTick>
 8007464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007466:	e008      	b.n	800747a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007468:	f7fc fe36 	bl	80040d8 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	2b02      	cmp	r3, #2
 8007474:	d901      	bls.n	800747a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e184      	b.n	8007784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800747a:	4b36      	ldr	r3, [pc, #216]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1f0      	bne.n	8007468 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0308 	and.w	r3, r3, #8
 800748e:	2b00      	cmp	r3, #0
 8007490:	d030      	beq.n	80074f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d016      	beq.n	80074c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800749a:	4b30      	ldr	r3, [pc, #192]	; (800755c <HAL_RCC_OscConfig+0x2b4>)
 800749c:	2201      	movs	r2, #1
 800749e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074a0:	f7fc fe1a 	bl	80040d8 <HAL_GetTick>
 80074a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074a6:	e008      	b.n	80074ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074a8:	f7fc fe16 	bl	80040d8 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d901      	bls.n	80074ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e164      	b.n	8007784 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074ba:	4b26      	ldr	r3, [pc, #152]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 80074bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0f0      	beq.n	80074a8 <HAL_RCC_OscConfig+0x200>
 80074c6:	e015      	b.n	80074f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074c8:	4b24      	ldr	r3, [pc, #144]	; (800755c <HAL_RCC_OscConfig+0x2b4>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074ce:	f7fc fe03 	bl	80040d8 <HAL_GetTick>
 80074d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074d4:	e008      	b.n	80074e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074d6:	f7fc fdff 	bl	80040d8 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d901      	bls.n	80074e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e14d      	b.n	8007784 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074e8:	4b1a      	ldr	r3, [pc, #104]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 80074ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1f0      	bne.n	80074d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0304 	and.w	r3, r3, #4
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 80a0 	beq.w	8007642 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007502:	2300      	movs	r3, #0
 8007504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007506:	4b13      	ldr	r3, [pc, #76]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10f      	bne.n	8007532 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007512:	2300      	movs	r3, #0
 8007514:	60bb      	str	r3, [r7, #8]
 8007516:	4b0f      	ldr	r3, [pc, #60]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	4a0e      	ldr	r2, [pc, #56]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 800751c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007520:	6413      	str	r3, [r2, #64]	; 0x40
 8007522:	4b0c      	ldr	r3, [pc, #48]	; (8007554 <HAL_RCC_OscConfig+0x2ac>)
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800752a:	60bb      	str	r3, [r7, #8]
 800752c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800752e:	2301      	movs	r3, #1
 8007530:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007532:	4b0b      	ldr	r3, [pc, #44]	; (8007560 <HAL_RCC_OscConfig+0x2b8>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800753a:	2b00      	cmp	r3, #0
 800753c:	d121      	bne.n	8007582 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800753e:	4b08      	ldr	r3, [pc, #32]	; (8007560 <HAL_RCC_OscConfig+0x2b8>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a07      	ldr	r2, [pc, #28]	; (8007560 <HAL_RCC_OscConfig+0x2b8>)
 8007544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800754a:	f7fc fdc5 	bl	80040d8 <HAL_GetTick>
 800754e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007550:	e011      	b.n	8007576 <HAL_RCC_OscConfig+0x2ce>
 8007552:	bf00      	nop
 8007554:	40023800 	.word	0x40023800
 8007558:	42470000 	.word	0x42470000
 800755c:	42470e80 	.word	0x42470e80
 8007560:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007564:	f7fc fdb8 	bl	80040d8 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b02      	cmp	r3, #2
 8007570:	d901      	bls.n	8007576 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e106      	b.n	8007784 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007576:	4b85      	ldr	r3, [pc, #532]	; (800778c <HAL_RCC_OscConfig+0x4e4>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757e:	2b00      	cmp	r3, #0
 8007580:	d0f0      	beq.n	8007564 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d106      	bne.n	8007598 <HAL_RCC_OscConfig+0x2f0>
 800758a:	4b81      	ldr	r3, [pc, #516]	; (8007790 <HAL_RCC_OscConfig+0x4e8>)
 800758c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800758e:	4a80      	ldr	r2, [pc, #512]	; (8007790 <HAL_RCC_OscConfig+0x4e8>)
 8007590:	f043 0301 	orr.w	r3, r3, #1
 8007594:	6713      	str	r3, [r2, #112]	; 0x70
 8007596:	e01c      	b.n	80075d2 <HAL_RCC_OscConfig+0x32a>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	2b05      	cmp	r3, #5
 800759e:	d10c      	bne.n	80075ba <HAL_RCC_OscConfig+0x312>
 80075a0:	4b7b      	ldr	r3, [pc, #492]	; (8007790 <HAL_RCC_OscConfig+0x4e8>)
 80075a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a4:	4a7a      	ldr	r2, [pc, #488]	; (8007790 <HAL_RCC_OscConfig+0x4e8>)
 80075a6:	f043 0304 	orr.w	r3, r3, #4
 80075aa:	6713      	str	r3, [r2, #112]	; 0x70
 80075ac:	4b78      	ldr	r3, [pc, #480]	; (8007790 <HAL_RCC_OscConfig+0x4e8>)
 80075ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b0:	4a77      	ldr	r2, [pc, #476]	; (8007790 <HAL_RCC_OscConfig+0x4e8>)
 80075b2:	f043 0301 	orr.w	r3, r3, #1
 80075b6:	6713      	str	r3, [r2, #112]	; 0x70
 80075b8:	e00b      	b.n	80075d2 <HAL_RCC_OscConfig+0x32a>
 80075ba:	4b75      	ldr	r3, [pc, #468]	; (8007790 <HAL_RCC_OscConfig+0x4e8>)
 80075bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075be:	4a74      	ldr	r2, [pc, #464]	; (8007790 <HAL_RCC_OscConfig+0x4e8>)
 80075c0:	f023 0301 	bic.w	r3, r3, #1
 80075c4:	6713      	str	r3, [r2, #112]	; 0x70
 80075c6:	4b72      	ldr	r3, [pc, #456]	; (8007790 <HAL_RCC_OscConfig+0x4e8>)
 80075c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ca:	4a71      	ldr	r2, [pc, #452]	; (8007790 <HAL_RCC_OscConfig+0x4e8>)
 80075cc:	f023 0304 	bic.w	r3, r3, #4
 80075d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d015      	beq.n	8007606 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075da:	f7fc fd7d 	bl	80040d8 <HAL_GetTick>
 80075de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075e0:	e00a      	b.n	80075f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075e2:	f7fc fd79 	bl	80040d8 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d901      	bls.n	80075f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e0c5      	b.n	8007784 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075f8:	4b65      	ldr	r3, [pc, #404]	; (8007790 <HAL_RCC_OscConfig+0x4e8>)
 80075fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0ee      	beq.n	80075e2 <HAL_RCC_OscConfig+0x33a>
 8007604:	e014      	b.n	8007630 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007606:	f7fc fd67 	bl	80040d8 <HAL_GetTick>
 800760a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800760c:	e00a      	b.n	8007624 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800760e:	f7fc fd63 	bl	80040d8 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	f241 3288 	movw	r2, #5000	; 0x1388
 800761c:	4293      	cmp	r3, r2
 800761e:	d901      	bls.n	8007624 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e0af      	b.n	8007784 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007624:	4b5a      	ldr	r3, [pc, #360]	; (8007790 <HAL_RCC_OscConfig+0x4e8>)
 8007626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1ee      	bne.n	800760e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007630:	7dfb      	ldrb	r3, [r7, #23]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d105      	bne.n	8007642 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007636:	4b56      	ldr	r3, [pc, #344]	; (8007790 <HAL_RCC_OscConfig+0x4e8>)
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	4a55      	ldr	r2, [pc, #340]	; (8007790 <HAL_RCC_OscConfig+0x4e8>)
 800763c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007640:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 809b 	beq.w	8007782 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800764c:	4b50      	ldr	r3, [pc, #320]	; (8007790 <HAL_RCC_OscConfig+0x4e8>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f003 030c 	and.w	r3, r3, #12
 8007654:	2b08      	cmp	r3, #8
 8007656:	d05c      	beq.n	8007712 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	2b02      	cmp	r3, #2
 800765e:	d141      	bne.n	80076e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007660:	4b4c      	ldr	r3, [pc, #304]	; (8007794 <HAL_RCC_OscConfig+0x4ec>)
 8007662:	2200      	movs	r2, #0
 8007664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007666:	f7fc fd37 	bl	80040d8 <HAL_GetTick>
 800766a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800766c:	e008      	b.n	8007680 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800766e:	f7fc fd33 	bl	80040d8 <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	2b02      	cmp	r3, #2
 800767a:	d901      	bls.n	8007680 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e081      	b.n	8007784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007680:	4b43      	ldr	r3, [pc, #268]	; (8007790 <HAL_RCC_OscConfig+0x4e8>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1f0      	bne.n	800766e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	69da      	ldr	r2, [r3, #28]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	431a      	orrs	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769a:	019b      	lsls	r3, r3, #6
 800769c:	431a      	orrs	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a2:	085b      	lsrs	r3, r3, #1
 80076a4:	3b01      	subs	r3, #1
 80076a6:	041b      	lsls	r3, r3, #16
 80076a8:	431a      	orrs	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ae:	061b      	lsls	r3, r3, #24
 80076b0:	4937      	ldr	r1, [pc, #220]	; (8007790 <HAL_RCC_OscConfig+0x4e8>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076b6:	4b37      	ldr	r3, [pc, #220]	; (8007794 <HAL_RCC_OscConfig+0x4ec>)
 80076b8:	2201      	movs	r2, #1
 80076ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076bc:	f7fc fd0c 	bl	80040d8 <HAL_GetTick>
 80076c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076c2:	e008      	b.n	80076d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076c4:	f7fc fd08 	bl	80040d8 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d901      	bls.n	80076d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e056      	b.n	8007784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076d6:	4b2e      	ldr	r3, [pc, #184]	; (8007790 <HAL_RCC_OscConfig+0x4e8>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0f0      	beq.n	80076c4 <HAL_RCC_OscConfig+0x41c>
 80076e2:	e04e      	b.n	8007782 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076e4:	4b2b      	ldr	r3, [pc, #172]	; (8007794 <HAL_RCC_OscConfig+0x4ec>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076ea:	f7fc fcf5 	bl	80040d8 <HAL_GetTick>
 80076ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076f0:	e008      	b.n	8007704 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076f2:	f7fc fcf1 	bl	80040d8 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d901      	bls.n	8007704 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e03f      	b.n	8007784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007704:	4b22      	ldr	r3, [pc, #136]	; (8007790 <HAL_RCC_OscConfig+0x4e8>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1f0      	bne.n	80076f2 <HAL_RCC_OscConfig+0x44a>
 8007710:	e037      	b.n	8007782 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d101      	bne.n	800771e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e032      	b.n	8007784 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800771e:	4b1c      	ldr	r3, [pc, #112]	; (8007790 <HAL_RCC_OscConfig+0x4e8>)
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d028      	beq.n	800777e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007736:	429a      	cmp	r2, r3
 8007738:	d121      	bne.n	800777e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007744:	429a      	cmp	r2, r3
 8007746:	d11a      	bne.n	800777e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800774e:	4013      	ands	r3, r2
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007754:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007756:	4293      	cmp	r3, r2
 8007758:	d111      	bne.n	800777e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007764:	085b      	lsrs	r3, r3, #1
 8007766:	3b01      	subs	r3, #1
 8007768:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800776a:	429a      	cmp	r2, r3
 800776c:	d107      	bne.n	800777e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007778:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800777a:	429a      	cmp	r2, r3
 800777c:	d001      	beq.n	8007782 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e000      	b.n	8007784 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3718      	adds	r7, #24
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	40007000 	.word	0x40007000
 8007790:	40023800 	.word	0x40023800
 8007794:	42470060 	.word	0x42470060

08007798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e0cc      	b.n	8007946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077ac:	4b68      	ldr	r3, [pc, #416]	; (8007950 <HAL_RCC_ClockConfig+0x1b8>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0307 	and.w	r3, r3, #7
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d90c      	bls.n	80077d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ba:	4b65      	ldr	r3, [pc, #404]	; (8007950 <HAL_RCC_ClockConfig+0x1b8>)
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	b2d2      	uxtb	r2, r2
 80077c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077c2:	4b63      	ldr	r3, [pc, #396]	; (8007950 <HAL_RCC_ClockConfig+0x1b8>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d001      	beq.n	80077d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e0b8      	b.n	8007946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0302 	and.w	r3, r3, #2
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d020      	beq.n	8007822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0304 	and.w	r3, r3, #4
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d005      	beq.n	80077f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077ec:	4b59      	ldr	r3, [pc, #356]	; (8007954 <HAL_RCC_ClockConfig+0x1bc>)
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	4a58      	ldr	r2, [pc, #352]	; (8007954 <HAL_RCC_ClockConfig+0x1bc>)
 80077f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80077f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0308 	and.w	r3, r3, #8
 8007800:	2b00      	cmp	r3, #0
 8007802:	d005      	beq.n	8007810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007804:	4b53      	ldr	r3, [pc, #332]	; (8007954 <HAL_RCC_ClockConfig+0x1bc>)
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	4a52      	ldr	r2, [pc, #328]	; (8007954 <HAL_RCC_ClockConfig+0x1bc>)
 800780a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800780e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007810:	4b50      	ldr	r3, [pc, #320]	; (8007954 <HAL_RCC_ClockConfig+0x1bc>)
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	494d      	ldr	r1, [pc, #308]	; (8007954 <HAL_RCC_ClockConfig+0x1bc>)
 800781e:	4313      	orrs	r3, r2
 8007820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	d044      	beq.n	80078b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d107      	bne.n	8007846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007836:	4b47      	ldr	r3, [pc, #284]	; (8007954 <HAL_RCC_ClockConfig+0x1bc>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d119      	bne.n	8007876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e07f      	b.n	8007946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	2b02      	cmp	r3, #2
 800784c:	d003      	beq.n	8007856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007852:	2b03      	cmp	r3, #3
 8007854:	d107      	bne.n	8007866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007856:	4b3f      	ldr	r3, [pc, #252]	; (8007954 <HAL_RCC_ClockConfig+0x1bc>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d109      	bne.n	8007876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e06f      	b.n	8007946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007866:	4b3b      	ldr	r3, [pc, #236]	; (8007954 <HAL_RCC_ClockConfig+0x1bc>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d101      	bne.n	8007876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e067      	b.n	8007946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007876:	4b37      	ldr	r3, [pc, #220]	; (8007954 <HAL_RCC_ClockConfig+0x1bc>)
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f023 0203 	bic.w	r2, r3, #3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	4934      	ldr	r1, [pc, #208]	; (8007954 <HAL_RCC_ClockConfig+0x1bc>)
 8007884:	4313      	orrs	r3, r2
 8007886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007888:	f7fc fc26 	bl	80040d8 <HAL_GetTick>
 800788c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800788e:	e00a      	b.n	80078a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007890:	f7fc fc22 	bl	80040d8 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	f241 3288 	movw	r2, #5000	; 0x1388
 800789e:	4293      	cmp	r3, r2
 80078a0:	d901      	bls.n	80078a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e04f      	b.n	8007946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078a6:	4b2b      	ldr	r3, [pc, #172]	; (8007954 <HAL_RCC_ClockConfig+0x1bc>)
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f003 020c 	and.w	r2, r3, #12
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d1eb      	bne.n	8007890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078b8:	4b25      	ldr	r3, [pc, #148]	; (8007950 <HAL_RCC_ClockConfig+0x1b8>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0307 	and.w	r3, r3, #7
 80078c0:	683a      	ldr	r2, [r7, #0]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d20c      	bcs.n	80078e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078c6:	4b22      	ldr	r3, [pc, #136]	; (8007950 <HAL_RCC_ClockConfig+0x1b8>)
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	b2d2      	uxtb	r2, r2
 80078cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ce:	4b20      	ldr	r3, [pc, #128]	; (8007950 <HAL_RCC_ClockConfig+0x1b8>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0307 	and.w	r3, r3, #7
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d001      	beq.n	80078e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e032      	b.n	8007946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0304 	and.w	r3, r3, #4
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d008      	beq.n	80078fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078ec:	4b19      	ldr	r3, [pc, #100]	; (8007954 <HAL_RCC_ClockConfig+0x1bc>)
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	4916      	ldr	r1, [pc, #88]	; (8007954 <HAL_RCC_ClockConfig+0x1bc>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0308 	and.w	r3, r3, #8
 8007906:	2b00      	cmp	r3, #0
 8007908:	d009      	beq.n	800791e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800790a:	4b12      	ldr	r3, [pc, #72]	; (8007954 <HAL_RCC_ClockConfig+0x1bc>)
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	00db      	lsls	r3, r3, #3
 8007918:	490e      	ldr	r1, [pc, #56]	; (8007954 <HAL_RCC_ClockConfig+0x1bc>)
 800791a:	4313      	orrs	r3, r2
 800791c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800791e:	f000 f821 	bl	8007964 <HAL_RCC_GetSysClockFreq>
 8007922:	4602      	mov	r2, r0
 8007924:	4b0b      	ldr	r3, [pc, #44]	; (8007954 <HAL_RCC_ClockConfig+0x1bc>)
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	091b      	lsrs	r3, r3, #4
 800792a:	f003 030f 	and.w	r3, r3, #15
 800792e:	490a      	ldr	r1, [pc, #40]	; (8007958 <HAL_RCC_ClockConfig+0x1c0>)
 8007930:	5ccb      	ldrb	r3, [r1, r3]
 8007932:	fa22 f303 	lsr.w	r3, r2, r3
 8007936:	4a09      	ldr	r2, [pc, #36]	; (800795c <HAL_RCC_ClockConfig+0x1c4>)
 8007938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800793a:	4b09      	ldr	r3, [pc, #36]	; (8007960 <HAL_RCC_ClockConfig+0x1c8>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4618      	mov	r0, r3
 8007940:	f7fc fb86 	bl	8004050 <HAL_InitTick>

  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	40023c00 	.word	0x40023c00
 8007954:	40023800 	.word	0x40023800
 8007958:	0801647c 	.word	0x0801647c
 800795c:	20000004 	.word	0x20000004
 8007960:	20000008 	.word	0x20000008

08007964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007964:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007968:	b084      	sub	sp, #16
 800796a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800796c:	2300      	movs	r3, #0
 800796e:	607b      	str	r3, [r7, #4]
 8007970:	2300      	movs	r3, #0
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	2300      	movs	r3, #0
 8007976:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007978:	2300      	movs	r3, #0
 800797a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800797c:	4b67      	ldr	r3, [pc, #412]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f003 030c 	and.w	r3, r3, #12
 8007984:	2b08      	cmp	r3, #8
 8007986:	d00d      	beq.n	80079a4 <HAL_RCC_GetSysClockFreq+0x40>
 8007988:	2b08      	cmp	r3, #8
 800798a:	f200 80bd 	bhi.w	8007b08 <HAL_RCC_GetSysClockFreq+0x1a4>
 800798e:	2b00      	cmp	r3, #0
 8007990:	d002      	beq.n	8007998 <HAL_RCC_GetSysClockFreq+0x34>
 8007992:	2b04      	cmp	r3, #4
 8007994:	d003      	beq.n	800799e <HAL_RCC_GetSysClockFreq+0x3a>
 8007996:	e0b7      	b.n	8007b08 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007998:	4b61      	ldr	r3, [pc, #388]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800799a:	60bb      	str	r3, [r7, #8]
       break;
 800799c:	e0b7      	b.n	8007b0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800799e:	4b61      	ldr	r3, [pc, #388]	; (8007b24 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80079a0:	60bb      	str	r3, [r7, #8]
      break;
 80079a2:	e0b4      	b.n	8007b0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079a4:	4b5d      	ldr	r3, [pc, #372]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079ae:	4b5b      	ldr	r3, [pc, #364]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d04d      	beq.n	8007a56 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079ba:	4b58      	ldr	r3, [pc, #352]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	099b      	lsrs	r3, r3, #6
 80079c0:	461a      	mov	r2, r3
 80079c2:	f04f 0300 	mov.w	r3, #0
 80079c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80079ca:	f04f 0100 	mov.w	r1, #0
 80079ce:	ea02 0800 	and.w	r8, r2, r0
 80079d2:	ea03 0901 	and.w	r9, r3, r1
 80079d6:	4640      	mov	r0, r8
 80079d8:	4649      	mov	r1, r9
 80079da:	f04f 0200 	mov.w	r2, #0
 80079de:	f04f 0300 	mov.w	r3, #0
 80079e2:	014b      	lsls	r3, r1, #5
 80079e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80079e8:	0142      	lsls	r2, r0, #5
 80079ea:	4610      	mov	r0, r2
 80079ec:	4619      	mov	r1, r3
 80079ee:	ebb0 0008 	subs.w	r0, r0, r8
 80079f2:	eb61 0109 	sbc.w	r1, r1, r9
 80079f6:	f04f 0200 	mov.w	r2, #0
 80079fa:	f04f 0300 	mov.w	r3, #0
 80079fe:	018b      	lsls	r3, r1, #6
 8007a00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007a04:	0182      	lsls	r2, r0, #6
 8007a06:	1a12      	subs	r2, r2, r0
 8007a08:	eb63 0301 	sbc.w	r3, r3, r1
 8007a0c:	f04f 0000 	mov.w	r0, #0
 8007a10:	f04f 0100 	mov.w	r1, #0
 8007a14:	00d9      	lsls	r1, r3, #3
 8007a16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a1a:	00d0      	lsls	r0, r2, #3
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	460b      	mov	r3, r1
 8007a20:	eb12 0208 	adds.w	r2, r2, r8
 8007a24:	eb43 0309 	adc.w	r3, r3, r9
 8007a28:	f04f 0000 	mov.w	r0, #0
 8007a2c:	f04f 0100 	mov.w	r1, #0
 8007a30:	0259      	lsls	r1, r3, #9
 8007a32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007a36:	0250      	lsls	r0, r2, #9
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	4619      	mov	r1, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	461a      	mov	r2, r3
 8007a44:	f04f 0300 	mov.w	r3, #0
 8007a48:	f7f9 f8fe 	bl	8000c48 <__aeabi_uldivmod>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4613      	mov	r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]
 8007a54:	e04a      	b.n	8007aec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a56:	4b31      	ldr	r3, [pc, #196]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	099b      	lsrs	r3, r3, #6
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	f04f 0300 	mov.w	r3, #0
 8007a62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007a66:	f04f 0100 	mov.w	r1, #0
 8007a6a:	ea02 0400 	and.w	r4, r2, r0
 8007a6e:	ea03 0501 	and.w	r5, r3, r1
 8007a72:	4620      	mov	r0, r4
 8007a74:	4629      	mov	r1, r5
 8007a76:	f04f 0200 	mov.w	r2, #0
 8007a7a:	f04f 0300 	mov.w	r3, #0
 8007a7e:	014b      	lsls	r3, r1, #5
 8007a80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007a84:	0142      	lsls	r2, r0, #5
 8007a86:	4610      	mov	r0, r2
 8007a88:	4619      	mov	r1, r3
 8007a8a:	1b00      	subs	r0, r0, r4
 8007a8c:	eb61 0105 	sbc.w	r1, r1, r5
 8007a90:	f04f 0200 	mov.w	r2, #0
 8007a94:	f04f 0300 	mov.w	r3, #0
 8007a98:	018b      	lsls	r3, r1, #6
 8007a9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007a9e:	0182      	lsls	r2, r0, #6
 8007aa0:	1a12      	subs	r2, r2, r0
 8007aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8007aa6:	f04f 0000 	mov.w	r0, #0
 8007aaa:	f04f 0100 	mov.w	r1, #0
 8007aae:	00d9      	lsls	r1, r3, #3
 8007ab0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ab4:	00d0      	lsls	r0, r2, #3
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	460b      	mov	r3, r1
 8007aba:	1912      	adds	r2, r2, r4
 8007abc:	eb45 0303 	adc.w	r3, r5, r3
 8007ac0:	f04f 0000 	mov.w	r0, #0
 8007ac4:	f04f 0100 	mov.w	r1, #0
 8007ac8:	0299      	lsls	r1, r3, #10
 8007aca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007ace:	0290      	lsls	r0, r2, #10
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	461a      	mov	r2, r3
 8007adc:	f04f 0300 	mov.w	r3, #0
 8007ae0:	f7f9 f8b2 	bl	8000c48 <__aeabi_uldivmod>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4613      	mov	r3, r2
 8007aea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007aec:	4b0b      	ldr	r3, [pc, #44]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	0c1b      	lsrs	r3, r3, #16
 8007af2:	f003 0303 	and.w	r3, r3, #3
 8007af6:	3301      	adds	r3, #1
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b04:	60bb      	str	r3, [r7, #8]
      break;
 8007b06:	e002      	b.n	8007b0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b08:	4b05      	ldr	r3, [pc, #20]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007b0a:	60bb      	str	r3, [r7, #8]
      break;
 8007b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b0e:	68bb      	ldr	r3, [r7, #8]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007b1a:	bf00      	nop
 8007b1c:	40023800 	.word	0x40023800
 8007b20:	00f42400 	.word	0x00f42400
 8007b24:	007a1200 	.word	0x007a1200

08007b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b2c:	4b03      	ldr	r3, [pc, #12]	; (8007b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	20000004 	.word	0x20000004

08007b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007b44:	f7ff fff0 	bl	8007b28 <HAL_RCC_GetHCLKFreq>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	4b05      	ldr	r3, [pc, #20]	; (8007b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	0a9b      	lsrs	r3, r3, #10
 8007b50:	f003 0307 	and.w	r3, r3, #7
 8007b54:	4903      	ldr	r1, [pc, #12]	; (8007b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b56:	5ccb      	ldrb	r3, [r1, r3]
 8007b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	40023800 	.word	0x40023800
 8007b64:	0801648c 	.word	0x0801648c

08007b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007b6c:	f7ff ffdc 	bl	8007b28 <HAL_RCC_GetHCLKFreq>
 8007b70:	4602      	mov	r2, r0
 8007b72:	4b05      	ldr	r3, [pc, #20]	; (8007b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	0b5b      	lsrs	r3, r3, #13
 8007b78:	f003 0307 	and.w	r3, r3, #7
 8007b7c:	4903      	ldr	r1, [pc, #12]	; (8007b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b7e:	5ccb      	ldrb	r3, [r1, r3]
 8007b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	40023800 	.word	0x40023800
 8007b8c:	0801648c 	.word	0x0801648c

08007b90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e07b      	b.n	8007c9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d108      	bne.n	8007bbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bb2:	d009      	beq.n	8007bc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	61da      	str	r2, [r3, #28]
 8007bba:	e005      	b.n	8007bc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d106      	bne.n	8007be8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f7fb fdae 	bl	8003744 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2202      	movs	r2, #2
 8007bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bfe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c10:	431a      	orrs	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	431a      	orrs	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	f003 0301 	and.w	r3, r3, #1
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c38:	431a      	orrs	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c42:	431a      	orrs	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a1b      	ldr	r3, [r3, #32]
 8007c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c4c:	ea42 0103 	orr.w	r1, r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	430a      	orrs	r2, r1
 8007c5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	0c1b      	lsrs	r3, r3, #16
 8007c66:	f003 0104 	and.w	r1, r3, #4
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	f003 0210 	and.w	r2, r3, #16
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	430a      	orrs	r2, r1
 8007c78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	69da      	ldr	r2, [r3, #28]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b088      	sub	sp, #32
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	60f8      	str	r0, [r7, #12]
 8007caa:	60b9      	str	r1, [r7, #8]
 8007cac:	603b      	str	r3, [r7, #0]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d101      	bne.n	8007cc4 <HAL_SPI_Transmit+0x22>
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	e126      	b.n	8007f12 <HAL_SPI_Transmit+0x270>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ccc:	f7fc fa04 	bl	80040d8 <HAL_GetTick>
 8007cd0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007cd2:	88fb      	ldrh	r3, [r7, #6]
 8007cd4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d002      	beq.n	8007ce8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007ce6:	e10b      	b.n	8007f00 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d002      	beq.n	8007cf4 <HAL_SPI_Transmit+0x52>
 8007cee:	88fb      	ldrh	r3, [r7, #6]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d102      	bne.n	8007cfa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007cf8:	e102      	b.n	8007f00 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2203      	movs	r2, #3
 8007cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	88fa      	ldrh	r2, [r7, #6]
 8007d12:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	88fa      	ldrh	r2, [r7, #6]
 8007d18:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d40:	d10f      	bne.n	8007d62 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6c:	2b40      	cmp	r3, #64	; 0x40
 8007d6e:	d007      	beq.n	8007d80 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d88:	d14b      	bne.n	8007e22 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d002      	beq.n	8007d98 <HAL_SPI_Transmit+0xf6>
 8007d92:	8afb      	ldrh	r3, [r7, #22]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d13e      	bne.n	8007e16 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9c:	881a      	ldrh	r2, [r3, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da8:	1c9a      	adds	r2, r3, #2
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	3b01      	subs	r3, #1
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007dbc:	e02b      	b.n	8007e16 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f003 0302 	and.w	r3, r3, #2
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d112      	bne.n	8007df2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd0:	881a      	ldrh	r2, [r3, #0]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ddc:	1c9a      	adds	r2, r3, #2
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	3b01      	subs	r3, #1
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	86da      	strh	r2, [r3, #54]	; 0x36
 8007df0:	e011      	b.n	8007e16 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007df2:	f7fc f971 	bl	80040d8 <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d803      	bhi.n	8007e0a <HAL_SPI_Transmit+0x168>
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e08:	d102      	bne.n	8007e10 <HAL_SPI_Transmit+0x16e>
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d102      	bne.n	8007e16 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e14:	e074      	b.n	8007f00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1ce      	bne.n	8007dbe <HAL_SPI_Transmit+0x11c>
 8007e20:	e04c      	b.n	8007ebc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <HAL_SPI_Transmit+0x18e>
 8007e2a:	8afb      	ldrh	r3, [r7, #22]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d140      	bne.n	8007eb2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	330c      	adds	r3, #12
 8007e3a:	7812      	ldrb	r2, [r2, #0]
 8007e3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007e56:	e02c      	b.n	8007eb2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f003 0302 	and.w	r3, r3, #2
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d113      	bne.n	8007e8e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	330c      	adds	r3, #12
 8007e70:	7812      	ldrb	r2, [r2, #0]
 8007e72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e78:	1c5a      	adds	r2, r3, #1
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	3b01      	subs	r3, #1
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8007e8c:	e011      	b.n	8007eb2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e8e:	f7fc f923 	bl	80040d8 <HAL_GetTick>
 8007e92:	4602      	mov	r2, r0
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	683a      	ldr	r2, [r7, #0]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d803      	bhi.n	8007ea6 <HAL_SPI_Transmit+0x204>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea4:	d102      	bne.n	8007eac <HAL_SPI_Transmit+0x20a>
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d102      	bne.n	8007eb2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007eb0:	e026      	b.n	8007f00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1cd      	bne.n	8007e58 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ebc:	69ba      	ldr	r2, [r7, #24]
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f000 fce9 	bl	8008898 <SPI_EndRxTxTransaction>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d002      	beq.n	8007ed2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2220      	movs	r2, #32
 8007ed0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10a      	bne.n	8007ef0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007eda:	2300      	movs	r3, #0
 8007edc:	613b      	str	r3, [r7, #16]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	613b      	str	r3, [r7, #16]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	613b      	str	r3, [r7, #16]
 8007eee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d002      	beq.n	8007efe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	77fb      	strb	r3, [r7, #31]
 8007efc:	e000      	b.n	8007f00 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007efe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007f10:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3720      	adds	r7, #32
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b088      	sub	sp, #32
 8007f1e:	af02      	add	r7, sp, #8
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	60b9      	str	r1, [r7, #8]
 8007f24:	603b      	str	r3, [r7, #0]
 8007f26:	4613      	mov	r3, r2
 8007f28:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f36:	d112      	bne.n	8007f5e <HAL_SPI_Receive+0x44>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10e      	bne.n	8007f5e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2204      	movs	r2, #4
 8007f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007f48:	88fa      	ldrh	r2, [r7, #6]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	68b9      	ldr	r1, [r7, #8]
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 f8f1 	bl	800813c <HAL_SPI_TransmitReceive>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	e0ea      	b.n	8008134 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d101      	bne.n	8007f6c <HAL_SPI_Receive+0x52>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e0e3      	b.n	8008134 <HAL_SPI_Receive+0x21a>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f74:	f7fc f8b0 	bl	80040d8 <HAL_GetTick>
 8007f78:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d002      	beq.n	8007f8c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007f86:	2302      	movs	r3, #2
 8007f88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f8a:	e0ca      	b.n	8008122 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d002      	beq.n	8007f98 <HAL_SPI_Receive+0x7e>
 8007f92:	88fb      	ldrh	r3, [r7, #6]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d102      	bne.n	8007f9e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f9c:	e0c1      	b.n	8008122 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2204      	movs	r2, #4
 8007fa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	88fa      	ldrh	r2, [r7, #6]
 8007fb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	88fa      	ldrh	r2, [r7, #6]
 8007fbc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fe4:	d10f      	bne.n	8008006 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ff4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008004:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008010:	2b40      	cmp	r3, #64	; 0x40
 8008012:	d007      	beq.n	8008024 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008022:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d162      	bne.n	80080f2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800802c:	e02e      	b.n	800808c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b01      	cmp	r3, #1
 800803a:	d115      	bne.n	8008068 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f103 020c 	add.w	r2, r3, #12
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008048:	7812      	ldrb	r2, [r2, #0]
 800804a:	b2d2      	uxtb	r2, r2
 800804c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008052:	1c5a      	adds	r2, r3, #1
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800805c:	b29b      	uxth	r3, r3
 800805e:	3b01      	subs	r3, #1
 8008060:	b29a      	uxth	r2, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008066:	e011      	b.n	800808c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008068:	f7fc f836 	bl	80040d8 <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	429a      	cmp	r2, r3
 8008076:	d803      	bhi.n	8008080 <HAL_SPI_Receive+0x166>
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807e:	d102      	bne.n	8008086 <HAL_SPI_Receive+0x16c>
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d102      	bne.n	800808c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	75fb      	strb	r3, [r7, #23]
          goto error;
 800808a:	e04a      	b.n	8008122 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008090:	b29b      	uxth	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1cb      	bne.n	800802e <HAL_SPI_Receive+0x114>
 8008096:	e031      	b.n	80080fc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d113      	bne.n	80080ce <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68da      	ldr	r2, [r3, #12]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b0:	b292      	uxth	r2, r2
 80080b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b8:	1c9a      	adds	r2, r3, #2
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	3b01      	subs	r3, #1
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080cc:	e011      	b.n	80080f2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080ce:	f7fc f803 	bl	80040d8 <HAL_GetTick>
 80080d2:	4602      	mov	r2, r0
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	683a      	ldr	r2, [r7, #0]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d803      	bhi.n	80080e6 <HAL_SPI_Receive+0x1cc>
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e4:	d102      	bne.n	80080ec <HAL_SPI_Receive+0x1d2>
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d102      	bne.n	80080f2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80080f0:	e017      	b.n	8008122 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1cd      	bne.n	8008098 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 fb63 	bl	80087cc <SPI_EndRxTransaction>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d002      	beq.n	8008112 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2220      	movs	r2, #32
 8008110:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	75fb      	strb	r3, [r7, #23]
 800811e:	e000      	b.n	8008122 <HAL_SPI_Receive+0x208>
  }

error :
 8008120:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008132:	7dfb      	ldrb	r3, [r7, #23]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3718      	adds	r7, #24
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b08c      	sub	sp, #48	; 0x30
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]
 8008148:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800814a:	2301      	movs	r3, #1
 800814c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800815a:	2b01      	cmp	r3, #1
 800815c:	d101      	bne.n	8008162 <HAL_SPI_TransmitReceive+0x26>
 800815e:	2302      	movs	r3, #2
 8008160:	e18a      	b.n	8008478 <HAL_SPI_TransmitReceive+0x33c>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800816a:	f7fb ffb5 	bl	80040d8 <HAL_GetTick>
 800816e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008180:	887b      	ldrh	r3, [r7, #2]
 8008182:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008184:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008188:	2b01      	cmp	r3, #1
 800818a:	d00f      	beq.n	80081ac <HAL_SPI_TransmitReceive+0x70>
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008192:	d107      	bne.n	80081a4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d103      	bne.n	80081a4 <HAL_SPI_TransmitReceive+0x68>
 800819c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081a0:	2b04      	cmp	r3, #4
 80081a2:	d003      	beq.n	80081ac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80081a4:	2302      	movs	r3, #2
 80081a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80081aa:	e15b      	b.n	8008464 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d005      	beq.n	80081be <HAL_SPI_TransmitReceive+0x82>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d002      	beq.n	80081be <HAL_SPI_TransmitReceive+0x82>
 80081b8:	887b      	ldrh	r3, [r7, #2]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d103      	bne.n	80081c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80081c4:	e14e      	b.n	8008464 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b04      	cmp	r3, #4
 80081d0:	d003      	beq.n	80081da <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2205      	movs	r2, #5
 80081d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	887a      	ldrh	r2, [r7, #2]
 80081ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	887a      	ldrh	r2, [r7, #2]
 80081f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	887a      	ldrh	r2, [r7, #2]
 80081fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	887a      	ldrh	r2, [r7, #2]
 8008202:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800821a:	2b40      	cmp	r3, #64	; 0x40
 800821c:	d007      	beq.n	800822e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800822c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008236:	d178      	bne.n	800832a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d002      	beq.n	8008246 <HAL_SPI_TransmitReceive+0x10a>
 8008240:	8b7b      	ldrh	r3, [r7, #26]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d166      	bne.n	8008314 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824a:	881a      	ldrh	r2, [r3, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008256:	1c9a      	adds	r2, r3, #2
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008260:	b29b      	uxth	r3, r3
 8008262:	3b01      	subs	r3, #1
 8008264:	b29a      	uxth	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800826a:	e053      	b.n	8008314 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f003 0302 	and.w	r3, r3, #2
 8008276:	2b02      	cmp	r3, #2
 8008278:	d11b      	bne.n	80082b2 <HAL_SPI_TransmitReceive+0x176>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800827e:	b29b      	uxth	r3, r3
 8008280:	2b00      	cmp	r3, #0
 8008282:	d016      	beq.n	80082b2 <HAL_SPI_TransmitReceive+0x176>
 8008284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008286:	2b01      	cmp	r3, #1
 8008288:	d113      	bne.n	80082b2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828e:	881a      	ldrh	r2, [r3, #0]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829a:	1c9a      	adds	r2, r3, #2
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	3b01      	subs	r3, #1
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d119      	bne.n	80082f4 <HAL_SPI_TransmitReceive+0x1b8>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d014      	beq.n	80082f4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68da      	ldr	r2, [r3, #12]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d4:	b292      	uxth	r2, r2
 80082d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082dc:	1c9a      	adds	r2, r3, #2
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	3b01      	subs	r3, #1
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80082f0:	2301      	movs	r3, #1
 80082f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80082f4:	f7fb fef0 	bl	80040d8 <HAL_GetTick>
 80082f8:	4602      	mov	r2, r0
 80082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008300:	429a      	cmp	r2, r3
 8008302:	d807      	bhi.n	8008314 <HAL_SPI_TransmitReceive+0x1d8>
 8008304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830a:	d003      	beq.n	8008314 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800830c:	2303      	movs	r3, #3
 800830e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008312:	e0a7      	b.n	8008464 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008318:	b29b      	uxth	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1a6      	bne.n	800826c <HAL_SPI_TransmitReceive+0x130>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008322:	b29b      	uxth	r3, r3
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1a1      	bne.n	800826c <HAL_SPI_TransmitReceive+0x130>
 8008328:	e07c      	b.n	8008424 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d002      	beq.n	8008338 <HAL_SPI_TransmitReceive+0x1fc>
 8008332:	8b7b      	ldrh	r3, [r7, #26]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d16b      	bne.n	8008410 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	330c      	adds	r3, #12
 8008342:	7812      	ldrb	r2, [r2, #0]
 8008344:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800834a:	1c5a      	adds	r2, r3, #1
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008354:	b29b      	uxth	r3, r3
 8008356:	3b01      	subs	r3, #1
 8008358:	b29a      	uxth	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800835e:	e057      	b.n	8008410 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f003 0302 	and.w	r3, r3, #2
 800836a:	2b02      	cmp	r3, #2
 800836c:	d11c      	bne.n	80083a8 <HAL_SPI_TransmitReceive+0x26c>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008372:	b29b      	uxth	r3, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	d017      	beq.n	80083a8 <HAL_SPI_TransmitReceive+0x26c>
 8008378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837a:	2b01      	cmp	r3, #1
 800837c:	d114      	bne.n	80083a8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	330c      	adds	r3, #12
 8008388:	7812      	ldrb	r2, [r2, #0]
 800838a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008390:	1c5a      	adds	r2, r3, #1
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800839a:	b29b      	uxth	r3, r3
 800839c:	3b01      	subs	r3, #1
 800839e:	b29a      	uxth	r2, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d119      	bne.n	80083ea <HAL_SPI_TransmitReceive+0x2ae>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d014      	beq.n	80083ea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68da      	ldr	r2, [r3, #12]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d2:	1c5a      	adds	r2, r3, #1
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083dc:	b29b      	uxth	r3, r3
 80083de:	3b01      	subs	r3, #1
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80083e6:	2301      	movs	r3, #1
 80083e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80083ea:	f7fb fe75 	bl	80040d8 <HAL_GetTick>
 80083ee:	4602      	mov	r2, r0
 80083f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f2:	1ad3      	subs	r3, r2, r3
 80083f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d803      	bhi.n	8008402 <HAL_SPI_TransmitReceive+0x2c6>
 80083fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008400:	d102      	bne.n	8008408 <HAL_SPI_TransmitReceive+0x2cc>
 8008402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008404:	2b00      	cmp	r3, #0
 8008406:	d103      	bne.n	8008410 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800840e:	e029      	b.n	8008464 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008414:	b29b      	uxth	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1a2      	bne.n	8008360 <HAL_SPI_TransmitReceive+0x224>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800841e:	b29b      	uxth	r3, r3
 8008420:	2b00      	cmp	r3, #0
 8008422:	d19d      	bne.n	8008360 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008426:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 fa35 	bl	8008898 <SPI_EndRxTxTransaction>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d006      	beq.n	8008442 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2220      	movs	r2, #32
 800843e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008440:	e010      	b.n	8008464 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10b      	bne.n	8008462 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800844a:	2300      	movs	r3, #0
 800844c:	617b      	str	r3, [r7, #20]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	617b      	str	r3, [r7, #20]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	617b      	str	r3, [r7, #20]
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	e000      	b.n	8008464 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008462:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008474:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008478:	4618      	mov	r0, r3
 800847a:	3730      	adds	r7, #48	; 0x30
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b088      	sub	sp, #32
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	099b      	lsrs	r3, r3, #6
 800849c:	f003 0301 	and.w	r3, r3, #1
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10f      	bne.n	80084c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00a      	beq.n	80084c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	099b      	lsrs	r3, r3, #6
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d004      	beq.n	80084c4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	4798      	blx	r3
    return;
 80084c2:	e0d7      	b.n	8008674 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	085b      	lsrs	r3, r3, #1
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00a      	beq.n	80084e6 <HAL_SPI_IRQHandler+0x66>
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	09db      	lsrs	r3, r3, #7
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d004      	beq.n	80084e6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	4798      	blx	r3
    return;
 80084e4:	e0c6      	b.n	8008674 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	095b      	lsrs	r3, r3, #5
 80084ea:	f003 0301 	and.w	r3, r3, #1
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10c      	bne.n	800850c <HAL_SPI_IRQHandler+0x8c>
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	099b      	lsrs	r3, r3, #6
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d106      	bne.n	800850c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	0a1b      	lsrs	r3, r3, #8
 8008502:	f003 0301 	and.w	r3, r3, #1
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 80b4 	beq.w	8008674 <HAL_SPI_IRQHandler+0x1f4>
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	095b      	lsrs	r3, r3, #5
 8008510:	f003 0301 	and.w	r3, r3, #1
 8008514:	2b00      	cmp	r3, #0
 8008516:	f000 80ad 	beq.w	8008674 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	099b      	lsrs	r3, r3, #6
 800851e:	f003 0301 	and.w	r3, r3, #1
 8008522:	2b00      	cmp	r3, #0
 8008524:	d023      	beq.n	800856e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b03      	cmp	r3, #3
 8008530:	d011      	beq.n	8008556 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008536:	f043 0204 	orr.w	r2, r3, #4
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800853e:	2300      	movs	r3, #0
 8008540:	617b      	str	r3, [r7, #20]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	617b      	str	r3, [r7, #20]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	617b      	str	r3, [r7, #20]
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	e00b      	b.n	800856e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008556:	2300      	movs	r3, #0
 8008558:	613b      	str	r3, [r7, #16]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	613b      	str	r3, [r7, #16]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	613b      	str	r3, [r7, #16]
 800856a:	693b      	ldr	r3, [r7, #16]
        return;
 800856c:	e082      	b.n	8008674 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	095b      	lsrs	r3, r3, #5
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	2b00      	cmp	r3, #0
 8008578:	d014      	beq.n	80085a4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800857e:	f043 0201 	orr.w	r2, r3, #1
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008586:	2300      	movs	r3, #0
 8008588:	60fb      	str	r3, [r7, #12]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	60fb      	str	r3, [r7, #12]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	0a1b      	lsrs	r3, r3, #8
 80085a8:	f003 0301 	and.w	r3, r3, #1
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00c      	beq.n	80085ca <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b4:	f043 0208 	orr.w	r2, r3, #8
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80085bc:	2300      	movs	r3, #0
 80085be:	60bb      	str	r3, [r7, #8]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	60bb      	str	r3, [r7, #8]
 80085c8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d04f      	beq.n	8008672 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	685a      	ldr	r2, [r3, #4]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80085e0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	f003 0302 	and.w	r3, r3, #2
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d104      	bne.n	80085fe <HAL_SPI_IRQHandler+0x17e>
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d034      	beq.n	8008668 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	685a      	ldr	r2, [r3, #4]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f022 0203 	bic.w	r2, r2, #3
 800860c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008612:	2b00      	cmp	r3, #0
 8008614:	d011      	beq.n	800863a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800861a:	4a18      	ldr	r2, [pc, #96]	; (800867c <HAL_SPI_IRQHandler+0x1fc>)
 800861c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008622:	4618      	mov	r0, r3
 8008624:	f7fc fc22 	bl	8004e6c <HAL_DMA_Abort_IT>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d005      	beq.n	800863a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008632:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800863e:	2b00      	cmp	r3, #0
 8008640:	d016      	beq.n	8008670 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008646:	4a0d      	ldr	r2, [pc, #52]	; (800867c <HAL_SPI_IRQHandler+0x1fc>)
 8008648:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800864e:	4618      	mov	r0, r3
 8008650:	f7fc fc0c 	bl	8004e6c <HAL_DMA_Abort_IT>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00a      	beq.n	8008670 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800865e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008666:	e003      	b.n	8008670 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f809 	bl	8008680 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800866e:	e000      	b.n	8008672 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008670:	bf00      	nop
    return;
 8008672:	bf00      	nop
  }
}
 8008674:	3720      	adds	r7, #32
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	08008695 	.word	0x08008695

08008680 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f7ff ffe6 	bl	8008680 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80086b4:	bf00      	nop
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	603b      	str	r3, [r7, #0]
 80086c8:	4613      	mov	r3, r2
 80086ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086cc:	f7fb fd04 	bl	80040d8 <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d4:	1a9b      	subs	r3, r3, r2
 80086d6:	683a      	ldr	r2, [r7, #0]
 80086d8:	4413      	add	r3, r2
 80086da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086dc:	f7fb fcfc 	bl	80040d8 <HAL_GetTick>
 80086e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086e2:	4b39      	ldr	r3, [pc, #228]	; (80087c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	015b      	lsls	r3, r3, #5
 80086e8:	0d1b      	lsrs	r3, r3, #20
 80086ea:	69fa      	ldr	r2, [r7, #28]
 80086ec:	fb02 f303 	mul.w	r3, r2, r3
 80086f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086f2:	e054      	b.n	800879e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086fa:	d050      	beq.n	800879e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086fc:	f7fb fcec 	bl	80040d8 <HAL_GetTick>
 8008700:	4602      	mov	r2, r0
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	69fa      	ldr	r2, [r7, #28]
 8008708:	429a      	cmp	r2, r3
 800870a:	d902      	bls.n	8008712 <SPI_WaitFlagStateUntilTimeout+0x56>
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d13d      	bne.n	800878e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008720:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800872a:	d111      	bne.n	8008750 <SPI_WaitFlagStateUntilTimeout+0x94>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008734:	d004      	beq.n	8008740 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800873e:	d107      	bne.n	8008750 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800874e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008758:	d10f      	bne.n	800877a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008768:	601a      	str	r2, [r3, #0]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008778:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e017      	b.n	80087be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008794:	2300      	movs	r3, #0
 8008796:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	3b01      	subs	r3, #1
 800879c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	689a      	ldr	r2, [r3, #8]
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	4013      	ands	r3, r2
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	bf0c      	ite	eq
 80087ae:	2301      	moveq	r3, #1
 80087b0:	2300      	movne	r3, #0
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	461a      	mov	r2, r3
 80087b6:	79fb      	ldrb	r3, [r7, #7]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d19b      	bne.n	80086f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3720      	adds	r7, #32
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	20000004 	.word	0x20000004

080087cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af02      	add	r7, sp, #8
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087e0:	d111      	bne.n	8008806 <SPI_EndRxTransaction+0x3a>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087ea:	d004      	beq.n	80087f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087f4:	d107      	bne.n	8008806 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008804:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800880e:	d12a      	bne.n	8008866 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008818:	d012      	beq.n	8008840 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2200      	movs	r2, #0
 8008822:	2180      	movs	r1, #128	; 0x80
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f7ff ff49 	bl	80086bc <SPI_WaitFlagStateUntilTimeout>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d02d      	beq.n	800888c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008834:	f043 0220 	orr.w	r2, r3, #32
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	e026      	b.n	800888e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2200      	movs	r2, #0
 8008848:	2101      	movs	r1, #1
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f7ff ff36 	bl	80086bc <SPI_WaitFlagStateUntilTimeout>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d01a      	beq.n	800888c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800885a:	f043 0220 	orr.w	r2, r3, #32
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e013      	b.n	800888e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2200      	movs	r2, #0
 800886e:	2101      	movs	r1, #1
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f7ff ff23 	bl	80086bc <SPI_WaitFlagStateUntilTimeout>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d007      	beq.n	800888c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008880:	f043 0220 	orr.w	r2, r3, #32
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e000      	b.n	800888e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b088      	sub	sp, #32
 800889c:	af02      	add	r7, sp, #8
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80088a4:	4b1b      	ldr	r3, [pc, #108]	; (8008914 <SPI_EndRxTxTransaction+0x7c>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a1b      	ldr	r2, [pc, #108]	; (8008918 <SPI_EndRxTxTransaction+0x80>)
 80088aa:	fba2 2303 	umull	r2, r3, r2, r3
 80088ae:	0d5b      	lsrs	r3, r3, #21
 80088b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088b4:	fb02 f303 	mul.w	r3, r2, r3
 80088b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088c2:	d112      	bne.n	80088ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	2200      	movs	r2, #0
 80088cc:	2180      	movs	r1, #128	; 0x80
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f7ff fef4 	bl	80086bc <SPI_WaitFlagStateUntilTimeout>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d016      	beq.n	8008908 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088de:	f043 0220 	orr.w	r2, r3, #32
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80088e6:	2303      	movs	r3, #3
 80088e8:	e00f      	b.n	800890a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00a      	beq.n	8008906 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	3b01      	subs	r3, #1
 80088f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008900:	2b80      	cmp	r3, #128	; 0x80
 8008902:	d0f2      	beq.n	80088ea <SPI_EndRxTxTransaction+0x52>
 8008904:	e000      	b.n	8008908 <SPI_EndRxTxTransaction+0x70>
        break;
 8008906:	bf00      	nop
  }

  return HAL_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3718      	adds	r7, #24
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	20000004 	.word	0x20000004
 8008918:	165e9f81 	.word	0x165e9f81

0800891c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e034      	b.n	800899c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d106      	bne.n	800894c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f7fb f8b0 	bl	8003aac <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	3308      	adds	r3, #8
 8008954:	4619      	mov	r1, r3
 8008956:	4610      	mov	r0, r2
 8008958:	f002 f890 	bl	800aa7c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6818      	ldr	r0, [r3, #0]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	461a      	mov	r2, r3
 8008966:	68b9      	ldr	r1, [r7, #8]
 8008968:	f002 f8da 	bl	800ab20 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6858      	ldr	r0, [r3, #4]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	689a      	ldr	r2, [r3, #8]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008978:	6879      	ldr	r1, [r7, #4]
 800897a:	f002 f90f 	bl	800ab9c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	6892      	ldr	r2, [r2, #8]
 8008986:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	6892      	ldr	r2, [r2, #8]
 8008992:	f041 0101 	orr.w	r1, r1, #1
 8008996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e041      	b.n	8008a3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d106      	bne.n	80089d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7fa ff0a 	bl	80037e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	3304      	adds	r3, #4
 80089e0:	4619      	mov	r1, r3
 80089e2:	4610      	mov	r0, r2
 80089e4:	f000 fce2 	bl	80093ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d001      	beq.n	8008a5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e046      	b.n	8008aea <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2202      	movs	r2, #2
 8008a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a23      	ldr	r2, [pc, #140]	; (8008af8 <HAL_TIM_Base_Start+0xb4>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d022      	beq.n	8008ab4 <HAL_TIM_Base_Start+0x70>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a76:	d01d      	beq.n	8008ab4 <HAL_TIM_Base_Start+0x70>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a1f      	ldr	r2, [pc, #124]	; (8008afc <HAL_TIM_Base_Start+0xb8>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d018      	beq.n	8008ab4 <HAL_TIM_Base_Start+0x70>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a1e      	ldr	r2, [pc, #120]	; (8008b00 <HAL_TIM_Base_Start+0xbc>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d013      	beq.n	8008ab4 <HAL_TIM_Base_Start+0x70>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a1c      	ldr	r2, [pc, #112]	; (8008b04 <HAL_TIM_Base_Start+0xc0>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d00e      	beq.n	8008ab4 <HAL_TIM_Base_Start+0x70>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a1b      	ldr	r2, [pc, #108]	; (8008b08 <HAL_TIM_Base_Start+0xc4>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d009      	beq.n	8008ab4 <HAL_TIM_Base_Start+0x70>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a19      	ldr	r2, [pc, #100]	; (8008b0c <HAL_TIM_Base_Start+0xc8>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d004      	beq.n	8008ab4 <HAL_TIM_Base_Start+0x70>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a18      	ldr	r2, [pc, #96]	; (8008b10 <HAL_TIM_Base_Start+0xcc>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d111      	bne.n	8008ad8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f003 0307 	and.w	r3, r3, #7
 8008abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2b06      	cmp	r3, #6
 8008ac4:	d010      	beq.n	8008ae8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f042 0201 	orr.w	r2, r2, #1
 8008ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ad6:	e007      	b.n	8008ae8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f042 0201 	orr.w	r2, r2, #1
 8008ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	40010000 	.word	0x40010000
 8008afc:	40000400 	.word	0x40000400
 8008b00:	40000800 	.word	0x40000800
 8008b04:	40000c00 	.word	0x40000c00
 8008b08:	40010400 	.word	0x40010400
 8008b0c:	40014000 	.word	0x40014000
 8008b10:	40001800 	.word	0x40001800

08008b14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d001      	beq.n	8008b2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e04e      	b.n	8008bca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2202      	movs	r2, #2
 8008b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68da      	ldr	r2, [r3, #12]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f042 0201 	orr.w	r2, r2, #1
 8008b42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a23      	ldr	r2, [pc, #140]	; (8008bd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d022      	beq.n	8008b94 <HAL_TIM_Base_Start_IT+0x80>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b56:	d01d      	beq.n	8008b94 <HAL_TIM_Base_Start_IT+0x80>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a1f      	ldr	r2, [pc, #124]	; (8008bdc <HAL_TIM_Base_Start_IT+0xc8>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d018      	beq.n	8008b94 <HAL_TIM_Base_Start_IT+0x80>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a1e      	ldr	r2, [pc, #120]	; (8008be0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d013      	beq.n	8008b94 <HAL_TIM_Base_Start_IT+0x80>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a1c      	ldr	r2, [pc, #112]	; (8008be4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d00e      	beq.n	8008b94 <HAL_TIM_Base_Start_IT+0x80>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a1b      	ldr	r2, [pc, #108]	; (8008be8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d009      	beq.n	8008b94 <HAL_TIM_Base_Start_IT+0x80>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a19      	ldr	r2, [pc, #100]	; (8008bec <HAL_TIM_Base_Start_IT+0xd8>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d004      	beq.n	8008b94 <HAL_TIM_Base_Start_IT+0x80>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a18      	ldr	r2, [pc, #96]	; (8008bf0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d111      	bne.n	8008bb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f003 0307 	and.w	r3, r3, #7
 8008b9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2b06      	cmp	r3, #6
 8008ba4:	d010      	beq.n	8008bc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f042 0201 	orr.w	r2, r2, #1
 8008bb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bb6:	e007      	b.n	8008bc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f042 0201 	orr.w	r2, r2, #1
 8008bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	40010000 	.word	0x40010000
 8008bdc:	40000400 	.word	0x40000400
 8008be0:	40000800 	.word	0x40000800
 8008be4:	40000c00 	.word	0x40000c00
 8008be8:	40010400 	.word	0x40010400
 8008bec:	40014000 	.word	0x40014000
 8008bf0:	40001800 	.word	0x40001800

08008bf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d101      	bne.n	8008c06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e041      	b.n	8008c8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d106      	bne.n	8008c20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f839 	bl	8008c92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2202      	movs	r2, #2
 8008c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	3304      	adds	r3, #4
 8008c30:	4619      	mov	r1, r3
 8008c32:	4610      	mov	r0, r2
 8008c34:	f000 fbba 	bl	80093ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3708      	adds	r7, #8
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b083      	sub	sp, #12
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c9a:	bf00      	nop
 8008c9c:	370c      	adds	r7, #12
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
	...

08008ca8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d109      	bne.n	8008ccc <HAL_TIM_PWM_Start+0x24>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	bf14      	ite	ne
 8008cc4:	2301      	movne	r3, #1
 8008cc6:	2300      	moveq	r3, #0
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	e022      	b.n	8008d12 <HAL_TIM_PWM_Start+0x6a>
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	2b04      	cmp	r3, #4
 8008cd0:	d109      	bne.n	8008ce6 <HAL_TIM_PWM_Start+0x3e>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	bf14      	ite	ne
 8008cde:	2301      	movne	r3, #1
 8008ce0:	2300      	moveq	r3, #0
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	e015      	b.n	8008d12 <HAL_TIM_PWM_Start+0x6a>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2b08      	cmp	r3, #8
 8008cea:	d109      	bne.n	8008d00 <HAL_TIM_PWM_Start+0x58>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	bf14      	ite	ne
 8008cf8:	2301      	movne	r3, #1
 8008cfa:	2300      	moveq	r3, #0
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	e008      	b.n	8008d12 <HAL_TIM_PWM_Start+0x6a>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	bf14      	ite	ne
 8008d0c:	2301      	movne	r3, #1
 8008d0e:	2300      	moveq	r3, #0
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d001      	beq.n	8008d1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e07c      	b.n	8008e14 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d104      	bne.n	8008d2a <HAL_TIM_PWM_Start+0x82>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2202      	movs	r2, #2
 8008d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d28:	e013      	b.n	8008d52 <HAL_TIM_PWM_Start+0xaa>
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	2b04      	cmp	r3, #4
 8008d2e:	d104      	bne.n	8008d3a <HAL_TIM_PWM_Start+0x92>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2202      	movs	r2, #2
 8008d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d38:	e00b      	b.n	8008d52 <HAL_TIM_PWM_Start+0xaa>
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2b08      	cmp	r3, #8
 8008d3e:	d104      	bne.n	8008d4a <HAL_TIM_PWM_Start+0xa2>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2202      	movs	r2, #2
 8008d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d48:	e003      	b.n	8008d52 <HAL_TIM_PWM_Start+0xaa>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2201      	movs	r2, #1
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 fe10 	bl	8009980 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a2d      	ldr	r2, [pc, #180]	; (8008e1c <HAL_TIM_PWM_Start+0x174>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d004      	beq.n	8008d74 <HAL_TIM_PWM_Start+0xcc>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a2c      	ldr	r2, [pc, #176]	; (8008e20 <HAL_TIM_PWM_Start+0x178>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d101      	bne.n	8008d78 <HAL_TIM_PWM_Start+0xd0>
 8008d74:	2301      	movs	r3, #1
 8008d76:	e000      	b.n	8008d7a <HAL_TIM_PWM_Start+0xd2>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d007      	beq.n	8008d8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a22      	ldr	r2, [pc, #136]	; (8008e1c <HAL_TIM_PWM_Start+0x174>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d022      	beq.n	8008dde <HAL_TIM_PWM_Start+0x136>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008da0:	d01d      	beq.n	8008dde <HAL_TIM_PWM_Start+0x136>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a1f      	ldr	r2, [pc, #124]	; (8008e24 <HAL_TIM_PWM_Start+0x17c>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d018      	beq.n	8008dde <HAL_TIM_PWM_Start+0x136>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a1d      	ldr	r2, [pc, #116]	; (8008e28 <HAL_TIM_PWM_Start+0x180>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d013      	beq.n	8008dde <HAL_TIM_PWM_Start+0x136>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a1c      	ldr	r2, [pc, #112]	; (8008e2c <HAL_TIM_PWM_Start+0x184>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d00e      	beq.n	8008dde <HAL_TIM_PWM_Start+0x136>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a16      	ldr	r2, [pc, #88]	; (8008e20 <HAL_TIM_PWM_Start+0x178>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d009      	beq.n	8008dde <HAL_TIM_PWM_Start+0x136>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a18      	ldr	r2, [pc, #96]	; (8008e30 <HAL_TIM_PWM_Start+0x188>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d004      	beq.n	8008dde <HAL_TIM_PWM_Start+0x136>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a16      	ldr	r2, [pc, #88]	; (8008e34 <HAL_TIM_PWM_Start+0x18c>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d111      	bne.n	8008e02 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f003 0307 	and.w	r3, r3, #7
 8008de8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2b06      	cmp	r3, #6
 8008dee:	d010      	beq.n	8008e12 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f042 0201 	orr.w	r2, r2, #1
 8008dfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e00:	e007      	b.n	8008e12 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f042 0201 	orr.w	r2, r2, #1
 8008e10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	40010000 	.word	0x40010000
 8008e20:	40010400 	.word	0x40010400
 8008e24:	40000400 	.word	0x40000400
 8008e28:	40000800 	.word	0x40000800
 8008e2c:	40000c00 	.word	0x40000c00
 8008e30:	40014000 	.word	0x40014000
 8008e34:	40001800 	.word	0x40001800

08008e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	f003 0302 	and.w	r3, r3, #2
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d122      	bne.n	8008e94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	f003 0302 	and.w	r3, r3, #2
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d11b      	bne.n	8008e94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f06f 0202 	mvn.w	r2, #2
 8008e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	f003 0303 	and.w	r3, r3, #3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 fa77 	bl	800936e <HAL_TIM_IC_CaptureCallback>
 8008e80:	e005      	b.n	8008e8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fa69 	bl	800935a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fa7a 	bl	8009382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	f003 0304 	and.w	r3, r3, #4
 8008e9e:	2b04      	cmp	r3, #4
 8008ea0:	d122      	bne.n	8008ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	f003 0304 	and.w	r3, r3, #4
 8008eac:	2b04      	cmp	r3, #4
 8008eae:	d11b      	bne.n	8008ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f06f 0204 	mvn.w	r2, #4
 8008eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2202      	movs	r2, #2
 8008ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d003      	beq.n	8008ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fa4d 	bl	800936e <HAL_TIM_IC_CaptureCallback>
 8008ed4:	e005      	b.n	8008ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fa3f 	bl	800935a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 fa50 	bl	8009382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	f003 0308 	and.w	r3, r3, #8
 8008ef2:	2b08      	cmp	r3, #8
 8008ef4:	d122      	bne.n	8008f3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	f003 0308 	and.w	r3, r3, #8
 8008f00:	2b08      	cmp	r3, #8
 8008f02:	d11b      	bne.n	8008f3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f06f 0208 	mvn.w	r2, #8
 8008f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2204      	movs	r2, #4
 8008f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	69db      	ldr	r3, [r3, #28]
 8008f1a:	f003 0303 	and.w	r3, r3, #3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d003      	beq.n	8008f2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fa23 	bl	800936e <HAL_TIM_IC_CaptureCallback>
 8008f28:	e005      	b.n	8008f36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fa15 	bl	800935a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fa26 	bl	8009382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	f003 0310 	and.w	r3, r3, #16
 8008f46:	2b10      	cmp	r3, #16
 8008f48:	d122      	bne.n	8008f90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	f003 0310 	and.w	r3, r3, #16
 8008f54:	2b10      	cmp	r3, #16
 8008f56:	d11b      	bne.n	8008f90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f06f 0210 	mvn.w	r2, #16
 8008f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2208      	movs	r2, #8
 8008f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	69db      	ldr	r3, [r3, #28]
 8008f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d003      	beq.n	8008f7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f9f9 	bl	800936e <HAL_TIM_IC_CaptureCallback>
 8008f7c:	e005      	b.n	8008f8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f9eb 	bl	800935a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 f9fc 	bl	8009382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	f003 0301 	and.w	r3, r3, #1
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d10e      	bne.n	8008fbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d107      	bne.n	8008fbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f06f 0201 	mvn.w	r2, #1
 8008fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7fa ff48 	bl	8003e4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fc6:	2b80      	cmp	r3, #128	; 0x80
 8008fc8:	d10e      	bne.n	8008fe8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd4:	2b80      	cmp	r3, #128	; 0x80
 8008fd6:	d107      	bne.n	8008fe8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fd78 	bl	8009ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ff2:	2b40      	cmp	r3, #64	; 0x40
 8008ff4:	d10e      	bne.n	8009014 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009000:	2b40      	cmp	r3, #64	; 0x40
 8009002:	d107      	bne.n	8009014 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800900c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 f9c1 	bl	8009396 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	f003 0320 	and.w	r3, r3, #32
 800901e:	2b20      	cmp	r3, #32
 8009020:	d10e      	bne.n	8009040 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	f003 0320 	and.w	r3, r3, #32
 800902c:	2b20      	cmp	r3, #32
 800902e:	d107      	bne.n	8009040 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f06f 0220 	mvn.w	r2, #32
 8009038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fd42 	bl	8009ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009040:	bf00      	nop
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800905e:	2b01      	cmp	r3, #1
 8009060:	d101      	bne.n	8009066 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009062:	2302      	movs	r3, #2
 8009064:	e0ae      	b.n	80091c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2201      	movs	r2, #1
 800906a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2b0c      	cmp	r3, #12
 8009072:	f200 809f 	bhi.w	80091b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009076:	a201      	add	r2, pc, #4	; (adr r2, 800907c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907c:	080090b1 	.word	0x080090b1
 8009080:	080091b5 	.word	0x080091b5
 8009084:	080091b5 	.word	0x080091b5
 8009088:	080091b5 	.word	0x080091b5
 800908c:	080090f1 	.word	0x080090f1
 8009090:	080091b5 	.word	0x080091b5
 8009094:	080091b5 	.word	0x080091b5
 8009098:	080091b5 	.word	0x080091b5
 800909c:	08009133 	.word	0x08009133
 80090a0:	080091b5 	.word	0x080091b5
 80090a4:	080091b5 	.word	0x080091b5
 80090a8:	080091b5 	.word	0x080091b5
 80090ac:	08009173 	.word	0x08009173
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68b9      	ldr	r1, [r7, #8]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 fa18 	bl	80094ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	699a      	ldr	r2, [r3, #24]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f042 0208 	orr.w	r2, r2, #8
 80090ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	699a      	ldr	r2, [r3, #24]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 0204 	bic.w	r2, r2, #4
 80090da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	6999      	ldr	r1, [r3, #24]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	691a      	ldr	r2, [r3, #16]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	430a      	orrs	r2, r1
 80090ec:	619a      	str	r2, [r3, #24]
      break;
 80090ee:	e064      	b.n	80091ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68b9      	ldr	r1, [r7, #8]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 fa68 	bl	80095cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	699a      	ldr	r2, [r3, #24]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800910a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	699a      	ldr	r2, [r3, #24]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800911a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6999      	ldr	r1, [r3, #24]
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	021a      	lsls	r2, r3, #8
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	430a      	orrs	r2, r1
 800912e:	619a      	str	r2, [r3, #24]
      break;
 8009130:	e043      	b.n	80091ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68b9      	ldr	r1, [r7, #8]
 8009138:	4618      	mov	r0, r3
 800913a:	f000 fabd 	bl	80096b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	69da      	ldr	r2, [r3, #28]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f042 0208 	orr.w	r2, r2, #8
 800914c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	69da      	ldr	r2, [r3, #28]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f022 0204 	bic.w	r2, r2, #4
 800915c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	69d9      	ldr	r1, [r3, #28]
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	691a      	ldr	r2, [r3, #16]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	430a      	orrs	r2, r1
 800916e:	61da      	str	r2, [r3, #28]
      break;
 8009170:	e023      	b.n	80091ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68b9      	ldr	r1, [r7, #8]
 8009178:	4618      	mov	r0, r3
 800917a:	f000 fb11 	bl	80097a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	69da      	ldr	r2, [r3, #28]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800918c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	69da      	ldr	r2, [r3, #28]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800919c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	69d9      	ldr	r1, [r3, #28]
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	021a      	lsls	r2, r3, #8
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	430a      	orrs	r2, r1
 80091b0:	61da      	str	r2, [r3, #28]
      break;
 80091b2:	e002      	b.n	80091ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	75fb      	strb	r3, [r7, #23]
      break;
 80091b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80091c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3718      	adds	r7, #24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091d6:	2300      	movs	r3, #0
 80091d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d101      	bne.n	80091e8 <HAL_TIM_ConfigClockSource+0x1c>
 80091e4:	2302      	movs	r3, #2
 80091e6:	e0b4      	b.n	8009352 <HAL_TIM_ConfigClockSource+0x186>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2202      	movs	r2, #2
 80091f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800920e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009220:	d03e      	beq.n	80092a0 <HAL_TIM_ConfigClockSource+0xd4>
 8009222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009226:	f200 8087 	bhi.w	8009338 <HAL_TIM_ConfigClockSource+0x16c>
 800922a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800922e:	f000 8086 	beq.w	800933e <HAL_TIM_ConfigClockSource+0x172>
 8009232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009236:	d87f      	bhi.n	8009338 <HAL_TIM_ConfigClockSource+0x16c>
 8009238:	2b70      	cmp	r3, #112	; 0x70
 800923a:	d01a      	beq.n	8009272 <HAL_TIM_ConfigClockSource+0xa6>
 800923c:	2b70      	cmp	r3, #112	; 0x70
 800923e:	d87b      	bhi.n	8009338 <HAL_TIM_ConfigClockSource+0x16c>
 8009240:	2b60      	cmp	r3, #96	; 0x60
 8009242:	d050      	beq.n	80092e6 <HAL_TIM_ConfigClockSource+0x11a>
 8009244:	2b60      	cmp	r3, #96	; 0x60
 8009246:	d877      	bhi.n	8009338 <HAL_TIM_ConfigClockSource+0x16c>
 8009248:	2b50      	cmp	r3, #80	; 0x50
 800924a:	d03c      	beq.n	80092c6 <HAL_TIM_ConfigClockSource+0xfa>
 800924c:	2b50      	cmp	r3, #80	; 0x50
 800924e:	d873      	bhi.n	8009338 <HAL_TIM_ConfigClockSource+0x16c>
 8009250:	2b40      	cmp	r3, #64	; 0x40
 8009252:	d058      	beq.n	8009306 <HAL_TIM_ConfigClockSource+0x13a>
 8009254:	2b40      	cmp	r3, #64	; 0x40
 8009256:	d86f      	bhi.n	8009338 <HAL_TIM_ConfigClockSource+0x16c>
 8009258:	2b30      	cmp	r3, #48	; 0x30
 800925a:	d064      	beq.n	8009326 <HAL_TIM_ConfigClockSource+0x15a>
 800925c:	2b30      	cmp	r3, #48	; 0x30
 800925e:	d86b      	bhi.n	8009338 <HAL_TIM_ConfigClockSource+0x16c>
 8009260:	2b20      	cmp	r3, #32
 8009262:	d060      	beq.n	8009326 <HAL_TIM_ConfigClockSource+0x15a>
 8009264:	2b20      	cmp	r3, #32
 8009266:	d867      	bhi.n	8009338 <HAL_TIM_ConfigClockSource+0x16c>
 8009268:	2b00      	cmp	r3, #0
 800926a:	d05c      	beq.n	8009326 <HAL_TIM_ConfigClockSource+0x15a>
 800926c:	2b10      	cmp	r3, #16
 800926e:	d05a      	beq.n	8009326 <HAL_TIM_ConfigClockSource+0x15a>
 8009270:	e062      	b.n	8009338 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6818      	ldr	r0, [r3, #0]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	6899      	ldr	r1, [r3, #8]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	685a      	ldr	r2, [r3, #4]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	f000 fb5d 	bl	8009940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009294:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	609a      	str	r2, [r3, #8]
      break;
 800929e:	e04f      	b.n	8009340 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6818      	ldr	r0, [r3, #0]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	6899      	ldr	r1, [r3, #8]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	685a      	ldr	r2, [r3, #4]
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	f000 fb46 	bl	8009940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	689a      	ldr	r2, [r3, #8]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092c2:	609a      	str	r2, [r3, #8]
      break;
 80092c4:	e03c      	b.n	8009340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6818      	ldr	r0, [r3, #0]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	6859      	ldr	r1, [r3, #4]
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	461a      	mov	r2, r3
 80092d4:	f000 faba 	bl	800984c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2150      	movs	r1, #80	; 0x50
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 fb13 	bl	800990a <TIM_ITRx_SetConfig>
      break;
 80092e4:	e02c      	b.n	8009340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6818      	ldr	r0, [r3, #0]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	6859      	ldr	r1, [r3, #4]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	461a      	mov	r2, r3
 80092f4:	f000 fad9 	bl	80098aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2160      	movs	r1, #96	; 0x60
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 fb03 	bl	800990a <TIM_ITRx_SetConfig>
      break;
 8009304:	e01c      	b.n	8009340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6818      	ldr	r0, [r3, #0]
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	6859      	ldr	r1, [r3, #4]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	461a      	mov	r2, r3
 8009314:	f000 fa9a 	bl	800984c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2140      	movs	r1, #64	; 0x40
 800931e:	4618      	mov	r0, r3
 8009320:	f000 faf3 	bl	800990a <TIM_ITRx_SetConfig>
      break;
 8009324:	e00c      	b.n	8009340 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4619      	mov	r1, r3
 8009330:	4610      	mov	r0, r2
 8009332:	f000 faea 	bl	800990a <TIM_ITRx_SetConfig>
      break;
 8009336:	e003      	b.n	8009340 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	73fb      	strb	r3, [r7, #15]
      break;
 800933c:	e000      	b.n	8009340 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800933e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009350:	7bfb      	ldrb	r3, [r7, #15]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800935a:	b480      	push	{r7}
 800935c:	b083      	sub	sp, #12
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009362:	bf00      	nop
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800936e:	b480      	push	{r7}
 8009370:	b083      	sub	sp, #12
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009376:	bf00      	nop
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800938a:	bf00      	nop
 800938c:	370c      	adds	r7, #12
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009396:	b480      	push	{r7}
 8009398:	b083      	sub	sp, #12
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800939e:	bf00      	nop
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
	...

080093ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a40      	ldr	r2, [pc, #256]	; (80094c0 <TIM_Base_SetConfig+0x114>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d013      	beq.n	80093ec <TIM_Base_SetConfig+0x40>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ca:	d00f      	beq.n	80093ec <TIM_Base_SetConfig+0x40>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a3d      	ldr	r2, [pc, #244]	; (80094c4 <TIM_Base_SetConfig+0x118>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d00b      	beq.n	80093ec <TIM_Base_SetConfig+0x40>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a3c      	ldr	r2, [pc, #240]	; (80094c8 <TIM_Base_SetConfig+0x11c>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d007      	beq.n	80093ec <TIM_Base_SetConfig+0x40>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a3b      	ldr	r2, [pc, #236]	; (80094cc <TIM_Base_SetConfig+0x120>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d003      	beq.n	80093ec <TIM_Base_SetConfig+0x40>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a3a      	ldr	r2, [pc, #232]	; (80094d0 <TIM_Base_SetConfig+0x124>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d108      	bne.n	80093fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a2f      	ldr	r2, [pc, #188]	; (80094c0 <TIM_Base_SetConfig+0x114>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d02b      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800940c:	d027      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a2c      	ldr	r2, [pc, #176]	; (80094c4 <TIM_Base_SetConfig+0x118>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d023      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a2b      	ldr	r2, [pc, #172]	; (80094c8 <TIM_Base_SetConfig+0x11c>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d01f      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a2a      	ldr	r2, [pc, #168]	; (80094cc <TIM_Base_SetConfig+0x120>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d01b      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a29      	ldr	r2, [pc, #164]	; (80094d0 <TIM_Base_SetConfig+0x124>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d017      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a28      	ldr	r2, [pc, #160]	; (80094d4 <TIM_Base_SetConfig+0x128>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d013      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a27      	ldr	r2, [pc, #156]	; (80094d8 <TIM_Base_SetConfig+0x12c>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d00f      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a26      	ldr	r2, [pc, #152]	; (80094dc <TIM_Base_SetConfig+0x130>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d00b      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a25      	ldr	r2, [pc, #148]	; (80094e0 <TIM_Base_SetConfig+0x134>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d007      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a24      	ldr	r2, [pc, #144]	; (80094e4 <TIM_Base_SetConfig+0x138>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d003      	beq.n	800945e <TIM_Base_SetConfig+0xb2>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a23      	ldr	r2, [pc, #140]	; (80094e8 <TIM_Base_SetConfig+0x13c>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d108      	bne.n	8009470 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	4313      	orrs	r3, r2
 800946e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	4313      	orrs	r3, r2
 800947c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	689a      	ldr	r2, [r3, #8]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a0a      	ldr	r2, [pc, #40]	; (80094c0 <TIM_Base_SetConfig+0x114>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d003      	beq.n	80094a4 <TIM_Base_SetConfig+0xf8>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a0c      	ldr	r2, [pc, #48]	; (80094d0 <TIM_Base_SetConfig+0x124>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d103      	bne.n	80094ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	691a      	ldr	r2, [r3, #16]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	615a      	str	r2, [r3, #20]
}
 80094b2:	bf00      	nop
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	40010000 	.word	0x40010000
 80094c4:	40000400 	.word	0x40000400
 80094c8:	40000800 	.word	0x40000800
 80094cc:	40000c00 	.word	0x40000c00
 80094d0:	40010400 	.word	0x40010400
 80094d4:	40014000 	.word	0x40014000
 80094d8:	40014400 	.word	0x40014400
 80094dc:	40014800 	.word	0x40014800
 80094e0:	40001800 	.word	0x40001800
 80094e4:	40001c00 	.word	0x40001c00
 80094e8:	40002000 	.word	0x40002000

080094ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b087      	sub	sp, #28
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a1b      	ldr	r3, [r3, #32]
 80094fa:	f023 0201 	bic.w	r2, r3, #1
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	699b      	ldr	r3, [r3, #24]
 8009512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800951a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f023 0303 	bic.w	r3, r3, #3
 8009522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	4313      	orrs	r3, r2
 800952c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f023 0302 	bic.w	r3, r3, #2
 8009534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	697a      	ldr	r2, [r7, #20]
 800953c:	4313      	orrs	r3, r2
 800953e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a20      	ldr	r2, [pc, #128]	; (80095c4 <TIM_OC1_SetConfig+0xd8>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d003      	beq.n	8009550 <TIM_OC1_SetConfig+0x64>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a1f      	ldr	r2, [pc, #124]	; (80095c8 <TIM_OC1_SetConfig+0xdc>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d10c      	bne.n	800956a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	f023 0308 	bic.w	r3, r3, #8
 8009556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	697a      	ldr	r2, [r7, #20]
 800955e:	4313      	orrs	r3, r2
 8009560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f023 0304 	bic.w	r3, r3, #4
 8009568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a15      	ldr	r2, [pc, #84]	; (80095c4 <TIM_OC1_SetConfig+0xd8>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d003      	beq.n	800957a <TIM_OC1_SetConfig+0x8e>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a14      	ldr	r2, [pc, #80]	; (80095c8 <TIM_OC1_SetConfig+0xdc>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d111      	bne.n	800959e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	4313      	orrs	r3, r2
 8009592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	4313      	orrs	r3, r2
 800959c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	697a      	ldr	r2, [r7, #20]
 80095b6:	621a      	str	r2, [r3, #32]
}
 80095b8:	bf00      	nop
 80095ba:	371c      	adds	r7, #28
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr
 80095c4:	40010000 	.word	0x40010000
 80095c8:	40010400 	.word	0x40010400

080095cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b087      	sub	sp, #28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	f023 0210 	bic.w	r2, r3, #16
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	699b      	ldr	r3, [r3, #24]
 80095f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	021b      	lsls	r3, r3, #8
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	4313      	orrs	r3, r2
 800960e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	f023 0320 	bic.w	r3, r3, #32
 8009616:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	011b      	lsls	r3, r3, #4
 800961e:	697a      	ldr	r2, [r7, #20]
 8009620:	4313      	orrs	r3, r2
 8009622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a22      	ldr	r2, [pc, #136]	; (80096b0 <TIM_OC2_SetConfig+0xe4>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d003      	beq.n	8009634 <TIM_OC2_SetConfig+0x68>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a21      	ldr	r2, [pc, #132]	; (80096b4 <TIM_OC2_SetConfig+0xe8>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d10d      	bne.n	8009650 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800963a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	011b      	lsls	r3, r3, #4
 8009642:	697a      	ldr	r2, [r7, #20]
 8009644:	4313      	orrs	r3, r2
 8009646:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800964e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a17      	ldr	r2, [pc, #92]	; (80096b0 <TIM_OC2_SetConfig+0xe4>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d003      	beq.n	8009660 <TIM_OC2_SetConfig+0x94>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a16      	ldr	r2, [pc, #88]	; (80096b4 <TIM_OC2_SetConfig+0xe8>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d113      	bne.n	8009688 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009666:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800966e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	695b      	ldr	r3, [r3, #20]
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	4313      	orrs	r3, r2
 800967a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	693a      	ldr	r2, [r7, #16]
 8009684:	4313      	orrs	r3, r2
 8009686:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	685a      	ldr	r2, [r3, #4]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	621a      	str	r2, [r3, #32]
}
 80096a2:	bf00      	nop
 80096a4:	371c      	adds	r7, #28
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	40010000 	.word	0x40010000
 80096b4:	40010400 	.word	0x40010400

080096b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b087      	sub	sp, #28
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	69db      	ldr	r3, [r3, #28]
 80096de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f023 0303 	bic.w	r3, r3, #3
 80096ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	021b      	lsls	r3, r3, #8
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	4313      	orrs	r3, r2
 800970c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a21      	ldr	r2, [pc, #132]	; (8009798 <TIM_OC3_SetConfig+0xe0>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d003      	beq.n	800971e <TIM_OC3_SetConfig+0x66>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a20      	ldr	r2, [pc, #128]	; (800979c <TIM_OC3_SetConfig+0xe4>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d10d      	bne.n	800973a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009724:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	021b      	lsls	r3, r3, #8
 800972c:	697a      	ldr	r2, [r7, #20]
 800972e:	4313      	orrs	r3, r2
 8009730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a16      	ldr	r2, [pc, #88]	; (8009798 <TIM_OC3_SetConfig+0xe0>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d003      	beq.n	800974a <TIM_OC3_SetConfig+0x92>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a15      	ldr	r2, [pc, #84]	; (800979c <TIM_OC3_SetConfig+0xe4>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d113      	bne.n	8009772 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	011b      	lsls	r3, r3, #4
 8009760:	693a      	ldr	r2, [r7, #16]
 8009762:	4313      	orrs	r3, r2
 8009764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	699b      	ldr	r3, [r3, #24]
 800976a:	011b      	lsls	r3, r3, #4
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	4313      	orrs	r3, r2
 8009770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	693a      	ldr	r2, [r7, #16]
 8009776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	685a      	ldr	r2, [r3, #4]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	697a      	ldr	r2, [r7, #20]
 800978a:	621a      	str	r2, [r3, #32]
}
 800978c:	bf00      	nop
 800978e:	371c      	adds	r7, #28
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr
 8009798:	40010000 	.word	0x40010000
 800979c:	40010400 	.word	0x40010400

080097a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b087      	sub	sp, #28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	69db      	ldr	r3, [r3, #28]
 80097c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	021b      	lsls	r3, r3, #8
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	031b      	lsls	r3, r3, #12
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a12      	ldr	r2, [pc, #72]	; (8009844 <TIM_OC4_SetConfig+0xa4>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d003      	beq.n	8009808 <TIM_OC4_SetConfig+0x68>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a11      	ldr	r2, [pc, #68]	; (8009848 <TIM_OC4_SetConfig+0xa8>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d109      	bne.n	800981c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800980e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	695b      	ldr	r3, [r3, #20]
 8009814:	019b      	lsls	r3, r3, #6
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	4313      	orrs	r3, r2
 800981a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	621a      	str	r2, [r3, #32]
}
 8009836:	bf00      	nop
 8009838:	371c      	adds	r7, #28
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	40010000 	.word	0x40010000
 8009848:	40010400 	.word	0x40010400

0800984c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800984c:	b480      	push	{r7}
 800984e:	b087      	sub	sp, #28
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6a1b      	ldr	r3, [r3, #32]
 800985c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	f023 0201 	bic.w	r2, r3, #1
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	011b      	lsls	r3, r3, #4
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	4313      	orrs	r3, r2
 8009880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	f023 030a 	bic.w	r3, r3, #10
 8009888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	4313      	orrs	r3, r2
 8009890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	697a      	ldr	r2, [r7, #20]
 800989c:	621a      	str	r2, [r3, #32]
}
 800989e:	bf00      	nop
 80098a0:	371c      	adds	r7, #28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b087      	sub	sp, #28
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	60f8      	str	r0, [r7, #12]
 80098b2:	60b9      	str	r1, [r7, #8]
 80098b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6a1b      	ldr	r3, [r3, #32]
 80098ba:	f023 0210 	bic.w	r2, r3, #16
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	699b      	ldr	r3, [r3, #24]
 80098c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6a1b      	ldr	r3, [r3, #32]
 80098cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	031b      	lsls	r3, r3, #12
 80098da:	697a      	ldr	r2, [r7, #20]
 80098dc:	4313      	orrs	r3, r2
 80098de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	011b      	lsls	r3, r3, #4
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	697a      	ldr	r2, [r7, #20]
 80098f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	693a      	ldr	r2, [r7, #16]
 80098fc:	621a      	str	r2, [r3, #32]
}
 80098fe:	bf00      	nop
 8009900:	371c      	adds	r7, #28
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800990a:	b480      	push	{r7}
 800990c:	b085      	sub	sp, #20
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009920:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009922:	683a      	ldr	r2, [r7, #0]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	4313      	orrs	r3, r2
 8009928:	f043 0307 	orr.w	r3, r3, #7
 800992c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	609a      	str	r2, [r3, #8]
}
 8009934:	bf00      	nop
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009940:	b480      	push	{r7}
 8009942:	b087      	sub	sp, #28
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
 800994c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800995a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	021a      	lsls	r2, r3, #8
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	431a      	orrs	r2, r3
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	4313      	orrs	r3, r2
 8009968:	697a      	ldr	r2, [r7, #20]
 800996a:	4313      	orrs	r3, r2
 800996c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	697a      	ldr	r2, [r7, #20]
 8009972:	609a      	str	r2, [r3, #8]
}
 8009974:	bf00      	nop
 8009976:	371c      	adds	r7, #28
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009980:	b480      	push	{r7}
 8009982:	b087      	sub	sp, #28
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	f003 031f 	and.w	r3, r3, #31
 8009992:	2201      	movs	r2, #1
 8009994:	fa02 f303 	lsl.w	r3, r2, r3
 8009998:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6a1a      	ldr	r2, [r3, #32]
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	43db      	mvns	r3, r3
 80099a2:	401a      	ands	r2, r3
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6a1a      	ldr	r2, [r3, #32]
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	f003 031f 	and.w	r3, r3, #31
 80099b2:	6879      	ldr	r1, [r7, #4]
 80099b4:	fa01 f303 	lsl.w	r3, r1, r3
 80099b8:	431a      	orrs	r2, r3
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	621a      	str	r2, [r3, #32]
}
 80099be:	bf00      	nop
 80099c0:	371c      	adds	r7, #28
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
	...

080099cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d101      	bne.n	80099e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099e0:	2302      	movs	r3, #2
 80099e2:	e05a      	b.n	8009a9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2202      	movs	r2, #2
 80099f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a21      	ldr	r2, [pc, #132]	; (8009aa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d022      	beq.n	8009a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a30:	d01d      	beq.n	8009a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a1d      	ldr	r2, [pc, #116]	; (8009aac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d018      	beq.n	8009a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a1b      	ldr	r2, [pc, #108]	; (8009ab0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d013      	beq.n	8009a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a1a      	ldr	r2, [pc, #104]	; (8009ab4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d00e      	beq.n	8009a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a18      	ldr	r2, [pc, #96]	; (8009ab8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d009      	beq.n	8009a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a17      	ldr	r2, [pc, #92]	; (8009abc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d004      	beq.n	8009a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a15      	ldr	r2, [pc, #84]	; (8009ac0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d10c      	bne.n	8009a88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	68ba      	ldr	r2, [r7, #8]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3714      	adds	r7, #20
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	40010000 	.word	0x40010000
 8009aac:	40000400 	.word	0x40000400
 8009ab0:	40000800 	.word	0x40000800
 8009ab4:	40000c00 	.word	0x40000c00
 8009ab8:	40010400 	.word	0x40010400
 8009abc:	40014000 	.word	0x40014000
 8009ac0:	40001800 	.word	0x40001800

08009ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009acc:	bf00      	nop
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d101      	bne.n	8009afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e03f      	b.n	8009b7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d106      	bne.n	8009b18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7f9 fef2 	bl	80038fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2224      	movs	r2, #36	; 0x24
 8009b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68da      	ldr	r2, [r3, #12]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fddb 	bl	800a6ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	691a      	ldr	r2, [r3, #16]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	695a      	ldr	r2, [r3, #20]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	68da      	ldr	r2, [r3, #12]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2220      	movs	r2, #32
 8009b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2220      	movs	r2, #32
 8009b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b08a      	sub	sp, #40	; 0x28
 8009b8a:	af02      	add	r7, sp, #8
 8009b8c:	60f8      	str	r0, [r7, #12]
 8009b8e:	60b9      	str	r1, [r7, #8]
 8009b90:	603b      	str	r3, [r7, #0]
 8009b92:	4613      	mov	r3, r2
 8009b94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009b96:	2300      	movs	r3, #0
 8009b98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	2b20      	cmp	r3, #32
 8009ba4:	d17c      	bne.n	8009ca0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <HAL_UART_Transmit+0x2c>
 8009bac:	88fb      	ldrh	r3, [r7, #6]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d101      	bne.n	8009bb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e075      	b.n	8009ca2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d101      	bne.n	8009bc4 <HAL_UART_Transmit+0x3e>
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	e06e      	b.n	8009ca2 <HAL_UART_Transmit+0x11c>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2221      	movs	r2, #33	; 0x21
 8009bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009bda:	f7fa fa7d 	bl	80040d8 <HAL_GetTick>
 8009bde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	88fa      	ldrh	r2, [r7, #6]
 8009be4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	88fa      	ldrh	r2, [r7, #6]
 8009bea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bf4:	d108      	bne.n	8009c08 <HAL_UART_Transmit+0x82>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d104      	bne.n	8009c08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	61bb      	str	r3, [r7, #24]
 8009c06:	e003      	b.n	8009c10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009c18:	e02a      	b.n	8009c70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	2200      	movs	r2, #0
 8009c22:	2180      	movs	r1, #128	; 0x80
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f000 fb1f 	bl	800a268 <UART_WaitOnFlagUntilTimeout>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d001      	beq.n	8009c34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009c30:	2303      	movs	r3, #3
 8009c32:	e036      	b.n	8009ca2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d10b      	bne.n	8009c52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	881b      	ldrh	r3, [r3, #0]
 8009c3e:	461a      	mov	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	3302      	adds	r3, #2
 8009c4e:	61bb      	str	r3, [r7, #24]
 8009c50:	e007      	b.n	8009c62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	781a      	ldrb	r2, [r3, #0]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1cf      	bne.n	8009c1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	2200      	movs	r2, #0
 8009c82:	2140      	movs	r1, #64	; 0x40
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f000 faef 	bl	800a268 <UART_WaitOnFlagUntilTimeout>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d001      	beq.n	8009c94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009c90:	2303      	movs	r3, #3
 8009c92:	e006      	b.n	8009ca2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2220      	movs	r2, #32
 8009c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	e000      	b.n	8009ca2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009ca0:	2302      	movs	r3, #2
  }
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3720      	adds	r7, #32
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b084      	sub	sp, #16
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	60f8      	str	r0, [r7, #12]
 8009cb2:	60b9      	str	r1, [r7, #8]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	2b20      	cmp	r3, #32
 8009cc2:	d11d      	bne.n	8009d00 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d002      	beq.n	8009cd0 <HAL_UART_Receive_IT+0x26>
 8009cca:	88fb      	ldrh	r3, [r7, #6]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d101      	bne.n	8009cd4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e016      	b.n	8009d02 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d101      	bne.n	8009ce2 <HAL_UART_Receive_IT+0x38>
 8009cde:	2302      	movs	r3, #2
 8009ce0:	e00f      	b.n	8009d02 <HAL_UART_Receive_IT+0x58>
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009cf0:	88fb      	ldrh	r3, [r7, #6]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	68b9      	ldr	r1, [r7, #8]
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f000 fb24 	bl	800a344 <UART_Start_Receive_IT>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	e000      	b.n	8009d02 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009d00:	2302      	movs	r3, #2
  }
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
	...

08009d0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b0ba      	sub	sp, #232	; 0xe8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009d32:	2300      	movs	r3, #0
 8009d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d42:	f003 030f 	and.w	r3, r3, #15
 8009d46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009d4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10f      	bne.n	8009d72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d56:	f003 0320 	and.w	r3, r3, #32
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d009      	beq.n	8009d72 <HAL_UART_IRQHandler+0x66>
 8009d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d62:	f003 0320 	and.w	r3, r3, #32
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d003      	beq.n	8009d72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fc03 	bl	800a576 <UART_Receive_IT>
      return;
 8009d70:	e256      	b.n	800a220 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009d72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f000 80de 	beq.w	8009f38 <HAL_UART_IRQHandler+0x22c>
 8009d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d80:	f003 0301 	and.w	r3, r3, #1
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d106      	bne.n	8009d96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 80d1 	beq.w	8009f38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00b      	beq.n	8009dba <HAL_UART_IRQHandler+0xae>
 8009da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d005      	beq.n	8009dba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db2:	f043 0201 	orr.w	r2, r3, #1
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dbe:	f003 0304 	and.w	r3, r3, #4
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00b      	beq.n	8009dde <HAL_UART_IRQHandler+0xd2>
 8009dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dca:	f003 0301 	and.w	r3, r3, #1
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d005      	beq.n	8009dde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd6:	f043 0202 	orr.w	r2, r3, #2
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009de2:	f003 0302 	and.w	r3, r3, #2
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00b      	beq.n	8009e02 <HAL_UART_IRQHandler+0xf6>
 8009dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dee:	f003 0301 	and.w	r3, r3, #1
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d005      	beq.n	8009e02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfa:	f043 0204 	orr.w	r2, r3, #4
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e06:	f003 0308 	and.w	r3, r3, #8
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d011      	beq.n	8009e32 <HAL_UART_IRQHandler+0x126>
 8009e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e12:	f003 0320 	and.w	r3, r3, #32
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d105      	bne.n	8009e26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e1e:	f003 0301 	and.w	r3, r3, #1
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d005      	beq.n	8009e32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2a:	f043 0208 	orr.w	r2, r3, #8
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f000 81ed 	beq.w	800a216 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e40:	f003 0320 	and.w	r3, r3, #32
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d008      	beq.n	8009e5a <HAL_UART_IRQHandler+0x14e>
 8009e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e4c:	f003 0320 	and.w	r3, r3, #32
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d002      	beq.n	8009e5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fb8e 	bl	800a576 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	695b      	ldr	r3, [r3, #20]
 8009e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e64:	2b40      	cmp	r3, #64	; 0x40
 8009e66:	bf0c      	ite	eq
 8009e68:	2301      	moveq	r3, #1
 8009e6a:	2300      	movne	r3, #0
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e76:	f003 0308 	and.w	r3, r3, #8
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d103      	bne.n	8009e86 <HAL_UART_IRQHandler+0x17a>
 8009e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d04f      	beq.n	8009f26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fa96 	bl	800a3b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	695b      	ldr	r3, [r3, #20]
 8009e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e96:	2b40      	cmp	r3, #64	; 0x40
 8009e98:	d141      	bne.n	8009f1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	3314      	adds	r3, #20
 8009ea0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ea8:	e853 3f00 	ldrex	r3, [r3]
 8009eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	3314      	adds	r3, #20
 8009ec2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009ec6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009eca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ece:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009ed2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009ed6:	e841 2300 	strex	r3, r2, [r1]
 8009eda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1d9      	bne.n	8009e9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d013      	beq.n	8009f16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef2:	4a7d      	ldr	r2, [pc, #500]	; (800a0e8 <HAL_UART_IRQHandler+0x3dc>)
 8009ef4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7fa ffb6 	bl	8004e6c <HAL_DMA_Abort_IT>
 8009f00:	4603      	mov	r3, r0
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d016      	beq.n	8009f34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f10:	4610      	mov	r0, r2
 8009f12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f14:	e00e      	b.n	8009f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 f990 	bl	800a23c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f1c:	e00a      	b.n	8009f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f98c 	bl	800a23c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f24:	e006      	b.n	8009f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f988 	bl	800a23c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009f32:	e170      	b.n	800a216 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f34:	bf00      	nop
    return;
 8009f36:	e16e      	b.n	800a216 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	f040 814a 	bne.w	800a1d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f46:	f003 0310 	and.w	r3, r3, #16
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f000 8143 	beq.w	800a1d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f54:	f003 0310 	and.w	r3, r3, #16
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	f000 813c 	beq.w	800a1d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f5e:	2300      	movs	r3, #0
 8009f60:	60bb      	str	r3, [r7, #8]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	60bb      	str	r3, [r7, #8]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	60bb      	str	r3, [r7, #8]
 8009f72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	695b      	ldr	r3, [r3, #20]
 8009f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f7e:	2b40      	cmp	r3, #64	; 0x40
 8009f80:	f040 80b4 	bne.w	800a0ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 8140 	beq.w	800a21a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	f080 8139 	bcs.w	800a21a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009fae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb4:	69db      	ldr	r3, [r3, #28]
 8009fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fba:	f000 8088 	beq.w	800a0ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	330c      	adds	r3, #12
 8009fc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009fcc:	e853 3f00 	ldrex	r3, [r3]
 8009fd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009fd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	330c      	adds	r3, #12
 8009fe6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009fea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009fee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009ff6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009ffa:	e841 2300 	strex	r3, r2, [r1]
 8009ffe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a002:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a006:	2b00      	cmp	r3, #0
 800a008:	d1d9      	bne.n	8009fbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	3314      	adds	r3, #20
 800a010:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a014:	e853 3f00 	ldrex	r3, [r3]
 800a018:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a01a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a01c:	f023 0301 	bic.w	r3, r3, #1
 800a020:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	3314      	adds	r3, #20
 800a02a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a02e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a032:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a034:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a036:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a03a:	e841 2300 	strex	r3, r2, [r1]
 800a03e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1e1      	bne.n	800a00a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	3314      	adds	r3, #20
 800a04c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a050:	e853 3f00 	ldrex	r3, [r3]
 800a054:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a05c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	3314      	adds	r3, #20
 800a066:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a06a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a06c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a070:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a072:	e841 2300 	strex	r3, r2, [r1]
 800a076:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a078:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1e3      	bne.n	800a046 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2220      	movs	r2, #32
 800a082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	330c      	adds	r3, #12
 800a092:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a096:	e853 3f00 	ldrex	r3, [r3]
 800a09a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a09c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a09e:	f023 0310 	bic.w	r3, r3, #16
 800a0a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	330c      	adds	r3, #12
 800a0ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a0b0:	65ba      	str	r2, [r7, #88]	; 0x58
 800a0b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a0b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0b8:	e841 2300 	strex	r3, r2, [r1]
 800a0bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a0be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d1e3      	bne.n	800a08c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7fa fe5f 	bl	8004d8c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	4619      	mov	r1, r3
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f8b6 	bl	800a250 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a0e4:	e099      	b.n	800a21a <HAL_UART_IRQHandler+0x50e>
 800a0e6:	bf00      	nop
 800a0e8:	0800a47f 	.word	0x0800a47f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a100:	b29b      	uxth	r3, r3
 800a102:	2b00      	cmp	r3, #0
 800a104:	f000 808b 	beq.w	800a21e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a108:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f000 8086 	beq.w	800a21e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	330c      	adds	r3, #12
 800a118:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11c:	e853 3f00 	ldrex	r3, [r3]
 800a120:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a124:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a128:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	330c      	adds	r3, #12
 800a132:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a136:	647a      	str	r2, [r7, #68]	; 0x44
 800a138:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a13a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a13c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a13e:	e841 2300 	strex	r3, r2, [r1]
 800a142:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a146:	2b00      	cmp	r3, #0
 800a148:	d1e3      	bne.n	800a112 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	3314      	adds	r3, #20
 800a150:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	e853 3f00 	ldrex	r3, [r3]
 800a158:	623b      	str	r3, [r7, #32]
   return(result);
 800a15a:	6a3b      	ldr	r3, [r7, #32]
 800a15c:	f023 0301 	bic.w	r3, r3, #1
 800a160:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	3314      	adds	r3, #20
 800a16a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a16e:	633a      	str	r2, [r7, #48]	; 0x30
 800a170:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a176:	e841 2300 	strex	r3, r2, [r1]
 800a17a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1e3      	bne.n	800a14a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2220      	movs	r2, #32
 800a186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	330c      	adds	r3, #12
 800a196:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	e853 3f00 	ldrex	r3, [r3]
 800a19e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f023 0310 	bic.w	r3, r3, #16
 800a1a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	330c      	adds	r3, #12
 800a1b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a1b4:	61fa      	str	r2, [r7, #28]
 800a1b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b8:	69b9      	ldr	r1, [r7, #24]
 800a1ba:	69fa      	ldr	r2, [r7, #28]
 800a1bc:	e841 2300 	strex	r3, r2, [r1]
 800a1c0:	617b      	str	r3, [r7, #20]
   return(result);
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1e3      	bne.n	800a190 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a1c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f83e 	bl	800a250 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a1d4:	e023      	b.n	800a21e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a1d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d009      	beq.n	800a1f6 <HAL_UART_IRQHandler+0x4ea>
 800a1e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d003      	beq.n	800a1f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 f959 	bl	800a4a6 <UART_Transmit_IT>
    return;
 800a1f4:	e014      	b.n	800a220 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a1f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00e      	beq.n	800a220 <HAL_UART_IRQHandler+0x514>
 800a202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d008      	beq.n	800a220 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f999 	bl	800a546 <UART_EndTransmit_IT>
    return;
 800a214:	e004      	b.n	800a220 <HAL_UART_IRQHandler+0x514>
    return;
 800a216:	bf00      	nop
 800a218:	e002      	b.n	800a220 <HAL_UART_IRQHandler+0x514>
      return;
 800a21a:	bf00      	nop
 800a21c:	e000      	b.n	800a220 <HAL_UART_IRQHandler+0x514>
      return;
 800a21e:	bf00      	nop
  }
}
 800a220:	37e8      	adds	r7, #232	; 0xe8
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop

0800a228 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a230:	bf00      	nop
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr

0800a23c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a244:	bf00      	nop
 800a246:	370c      	adds	r7, #12
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	460b      	mov	r3, r1
 800a25a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b090      	sub	sp, #64	; 0x40
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	603b      	str	r3, [r7, #0]
 800a274:	4613      	mov	r3, r2
 800a276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a278:	e050      	b.n	800a31c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a27a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a280:	d04c      	beq.n	800a31c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a284:	2b00      	cmp	r3, #0
 800a286:	d007      	beq.n	800a298 <UART_WaitOnFlagUntilTimeout+0x30>
 800a288:	f7f9 ff26 	bl	80040d8 <HAL_GetTick>
 800a28c:	4602      	mov	r2, r0
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a294:	429a      	cmp	r2, r3
 800a296:	d241      	bcs.n	800a31c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	330c      	adds	r3, #12
 800a29e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a2:	e853 3f00 	ldrex	r3, [r3]
 800a2a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	330c      	adds	r3, #12
 800a2b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2b8:	637a      	str	r2, [r7, #52]	; 0x34
 800a2ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2c0:	e841 2300 	strex	r3, r2, [r1]
 800a2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1e5      	bne.n	800a298 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	3314      	adds	r3, #20
 800a2d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	e853 3f00 	ldrex	r3, [r3]
 800a2da:	613b      	str	r3, [r7, #16]
   return(result);
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	f023 0301 	bic.w	r3, r3, #1
 800a2e2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	3314      	adds	r3, #20
 800a2ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2ec:	623a      	str	r2, [r7, #32]
 800a2ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f0:	69f9      	ldr	r1, [r7, #28]
 800a2f2:	6a3a      	ldr	r2, [r7, #32]
 800a2f4:	e841 2300 	strex	r3, r2, [r1]
 800a2f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1e5      	bne.n	800a2cc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2220      	movs	r2, #32
 800a304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2220      	movs	r2, #32
 800a30c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a318:	2303      	movs	r3, #3
 800a31a:	e00f      	b.n	800a33c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	4013      	ands	r3, r2
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	429a      	cmp	r2, r3
 800a32a:	bf0c      	ite	eq
 800a32c:	2301      	moveq	r3, #1
 800a32e:	2300      	movne	r3, #0
 800a330:	b2db      	uxtb	r3, r3
 800a332:	461a      	mov	r2, r3
 800a334:	79fb      	ldrb	r3, [r7, #7]
 800a336:	429a      	cmp	r2, r3
 800a338:	d09f      	beq.n	800a27a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3740      	adds	r7, #64	; 0x40
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	4613      	mov	r3, r2
 800a350:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	68ba      	ldr	r2, [r7, #8]
 800a356:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	88fa      	ldrh	r2, [r7, #6]
 800a35c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	88fa      	ldrh	r2, [r7, #6]
 800a362:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2222      	movs	r2, #34	; 0x22
 800a36e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2200      	movs	r2, #0
 800a376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68da      	ldr	r2, [r3, #12]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a388:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	695a      	ldr	r2, [r3, #20]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f042 0201 	orr.w	r2, r2, #1
 800a398:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68da      	ldr	r2, [r3, #12]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f042 0220 	orr.w	r2, r2, #32
 800a3a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3714      	adds	r7, #20
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b095      	sub	sp, #84	; 0x54
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	330c      	adds	r3, #12
 800a3c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ca:	e853 3f00 	ldrex	r3, [r3]
 800a3ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	330c      	adds	r3, #12
 800a3de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a3e0:	643a      	str	r2, [r7, #64]	; 0x40
 800a3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3e8:	e841 2300 	strex	r3, r2, [r1]
 800a3ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1e5      	bne.n	800a3c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	3314      	adds	r3, #20
 800a3fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fc:	6a3b      	ldr	r3, [r7, #32]
 800a3fe:	e853 3f00 	ldrex	r3, [r3]
 800a402:	61fb      	str	r3, [r7, #28]
   return(result);
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	f023 0301 	bic.w	r3, r3, #1
 800a40a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	3314      	adds	r3, #20
 800a412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a414:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a41a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a41c:	e841 2300 	strex	r3, r2, [r1]
 800a420:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a424:	2b00      	cmp	r3, #0
 800a426:	d1e5      	bne.n	800a3f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d119      	bne.n	800a464 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	330c      	adds	r3, #12
 800a436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	e853 3f00 	ldrex	r3, [r3]
 800a43e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	f023 0310 	bic.w	r3, r3, #16
 800a446:	647b      	str	r3, [r7, #68]	; 0x44
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	330c      	adds	r3, #12
 800a44e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a450:	61ba      	str	r2, [r7, #24]
 800a452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a454:	6979      	ldr	r1, [r7, #20]
 800a456:	69ba      	ldr	r2, [r7, #24]
 800a458:	e841 2300 	strex	r3, r2, [r1]
 800a45c:	613b      	str	r3, [r7, #16]
   return(result);
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1e5      	bne.n	800a430 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2220      	movs	r2, #32
 800a468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a472:	bf00      	nop
 800a474:	3754      	adds	r7, #84	; 0x54
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b084      	sub	sp, #16
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a48a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f7ff fecf 	bl	800a23c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a49e:	bf00      	nop
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a4a6:	b480      	push	{r7}
 800a4a8:	b085      	sub	sp, #20
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	2b21      	cmp	r3, #33	; 0x21
 800a4b8:	d13e      	bne.n	800a538 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4c2:	d114      	bne.n	800a4ee <UART_Transmit_IT+0x48>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	691b      	ldr	r3, [r3, #16]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d110      	bne.n	800a4ee <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6a1b      	ldr	r3, [r3, #32]
 800a4d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	881b      	ldrh	r3, [r3, #0]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a1b      	ldr	r3, [r3, #32]
 800a4e6:	1c9a      	adds	r2, r3, #2
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	621a      	str	r2, [r3, #32]
 800a4ec:	e008      	b.n	800a500 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6a1b      	ldr	r3, [r3, #32]
 800a4f2:	1c59      	adds	r1, r3, #1
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	6211      	str	r1, [r2, #32]
 800a4f8:	781a      	ldrb	r2, [r3, #0]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a504:	b29b      	uxth	r3, r3
 800a506:	3b01      	subs	r3, #1
 800a508:	b29b      	uxth	r3, r3
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	4619      	mov	r1, r3
 800a50e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a510:	2b00      	cmp	r3, #0
 800a512:	d10f      	bne.n	800a534 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68da      	ldr	r2, [r3, #12]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a522:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68da      	ldr	r2, [r3, #12]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a532:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a534:	2300      	movs	r3, #0
 800a536:	e000      	b.n	800a53a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a538:	2302      	movs	r3, #2
  }
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3714      	adds	r7, #20
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr

0800a546 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b082      	sub	sp, #8
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	68da      	ldr	r2, [r3, #12]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a55c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2220      	movs	r2, #32
 800a562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f7ff fe5e 	bl	800a228 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3708      	adds	r7, #8
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b08c      	sub	sp, #48	; 0x30
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a584:	b2db      	uxtb	r3, r3
 800a586:	2b22      	cmp	r3, #34	; 0x22
 800a588:	f040 80ab 	bne.w	800a6e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a594:	d117      	bne.n	800a5c6 <UART_Receive_IT+0x50>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d113      	bne.n	800a5c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5be:	1c9a      	adds	r2, r3, #2
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	629a      	str	r2, [r3, #40]	; 0x28
 800a5c4:	e026      	b.n	800a614 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5d8:	d007      	beq.n	800a5ea <UART_Receive_IT+0x74>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10a      	bne.n	800a5f8 <UART_Receive_IT+0x82>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	691b      	ldr	r3, [r3, #16]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d106      	bne.n	800a5f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	b2da      	uxtb	r2, r3
 800a5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f4:	701a      	strb	r2, [r3, #0]
 800a5f6:	e008      	b.n	800a60a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a604:	b2da      	uxtb	r2, r3
 800a606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a608:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a60e:	1c5a      	adds	r2, r3, #1
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a618:	b29b      	uxth	r3, r3
 800a61a:	3b01      	subs	r3, #1
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	4619      	mov	r1, r3
 800a622:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a624:	2b00      	cmp	r3, #0
 800a626:	d15a      	bne.n	800a6de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	68da      	ldr	r2, [r3, #12]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f022 0220 	bic.w	r2, r2, #32
 800a636:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68da      	ldr	r2, [r3, #12]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a646:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	695a      	ldr	r2, [r3, #20]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f022 0201 	bic.w	r2, r2, #1
 800a656:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2220      	movs	r2, #32
 800a65c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a664:	2b01      	cmp	r3, #1
 800a666:	d135      	bne.n	800a6d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	330c      	adds	r3, #12
 800a674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	e853 3f00 	ldrex	r3, [r3]
 800a67c:	613b      	str	r3, [r7, #16]
   return(result);
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	f023 0310 	bic.w	r3, r3, #16
 800a684:	627b      	str	r3, [r7, #36]	; 0x24
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	330c      	adds	r3, #12
 800a68c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a68e:	623a      	str	r2, [r7, #32]
 800a690:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a692:	69f9      	ldr	r1, [r7, #28]
 800a694:	6a3a      	ldr	r2, [r7, #32]
 800a696:	e841 2300 	strex	r3, r2, [r1]
 800a69a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1e5      	bne.n	800a66e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f003 0310 	and.w	r3, r3, #16
 800a6ac:	2b10      	cmp	r3, #16
 800a6ae:	d10a      	bne.n	800a6c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	60fb      	str	r3, [r7, #12]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	60fb      	str	r3, [r7, #12]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	60fb      	str	r3, [r7, #12]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f7ff fdbf 	bl	800a250 <HAL_UARTEx_RxEventCallback>
 800a6d2:	e002      	b.n	800a6da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f7f9 fbfb 	bl	8003ed0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	e002      	b.n	800a6e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	e000      	b.n	800a6e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a6e2:	2302      	movs	r3, #2
  }
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3730      	adds	r7, #48	; 0x30
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f0:	b09f      	sub	sp, #124	; 0x7c
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a702:	68d9      	ldr	r1, [r3, #12]
 800a704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	ea40 0301 	orr.w	r3, r0, r1
 800a70c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a70e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a710:	689a      	ldr	r2, [r3, #8]
 800a712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	431a      	orrs	r2, r3
 800a718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a71a:	695b      	ldr	r3, [r3, #20]
 800a71c:	431a      	orrs	r2, r3
 800a71e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a720:	69db      	ldr	r3, [r3, #28]
 800a722:	4313      	orrs	r3, r2
 800a724:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a730:	f021 010c 	bic.w	r1, r1, #12
 800a734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a73a:	430b      	orrs	r3, r1
 800a73c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a73e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	695b      	ldr	r3, [r3, #20]
 800a744:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a74a:	6999      	ldr	r1, [r3, #24]
 800a74c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	ea40 0301 	orr.w	r3, r0, r1
 800a754:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	4bc5      	ldr	r3, [pc, #788]	; (800aa70 <UART_SetConfig+0x384>)
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d004      	beq.n	800a76a <UART_SetConfig+0x7e>
 800a760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	4bc3      	ldr	r3, [pc, #780]	; (800aa74 <UART_SetConfig+0x388>)
 800a766:	429a      	cmp	r2, r3
 800a768:	d103      	bne.n	800a772 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a76a:	f7fd f9fd 	bl	8007b68 <HAL_RCC_GetPCLK2Freq>
 800a76e:	6778      	str	r0, [r7, #116]	; 0x74
 800a770:	e002      	b.n	800a778 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a772:	f7fd f9e5 	bl	8007b40 <HAL_RCC_GetPCLK1Freq>
 800a776:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a77a:	69db      	ldr	r3, [r3, #28]
 800a77c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a780:	f040 80b6 	bne.w	800a8f0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a786:	461c      	mov	r4, r3
 800a788:	f04f 0500 	mov.w	r5, #0
 800a78c:	4622      	mov	r2, r4
 800a78e:	462b      	mov	r3, r5
 800a790:	1891      	adds	r1, r2, r2
 800a792:	6439      	str	r1, [r7, #64]	; 0x40
 800a794:	415b      	adcs	r3, r3
 800a796:	647b      	str	r3, [r7, #68]	; 0x44
 800a798:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a79c:	1912      	adds	r2, r2, r4
 800a79e:	eb45 0303 	adc.w	r3, r5, r3
 800a7a2:	f04f 0000 	mov.w	r0, #0
 800a7a6:	f04f 0100 	mov.w	r1, #0
 800a7aa:	00d9      	lsls	r1, r3, #3
 800a7ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a7b0:	00d0      	lsls	r0, r2, #3
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	1911      	adds	r1, r2, r4
 800a7b8:	6639      	str	r1, [r7, #96]	; 0x60
 800a7ba:	416b      	adcs	r3, r5
 800a7bc:	667b      	str	r3, [r7, #100]	; 0x64
 800a7be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	f04f 0300 	mov.w	r3, #0
 800a7c8:	1891      	adds	r1, r2, r2
 800a7ca:	63b9      	str	r1, [r7, #56]	; 0x38
 800a7cc:	415b      	adcs	r3, r3
 800a7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a7d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a7d8:	f7f6 fa36 	bl	8000c48 <__aeabi_uldivmod>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	460b      	mov	r3, r1
 800a7e0:	4ba5      	ldr	r3, [pc, #660]	; (800aa78 <UART_SetConfig+0x38c>)
 800a7e2:	fba3 2302 	umull	r2, r3, r3, r2
 800a7e6:	095b      	lsrs	r3, r3, #5
 800a7e8:	011e      	lsls	r6, r3, #4
 800a7ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7ec:	461c      	mov	r4, r3
 800a7ee:	f04f 0500 	mov.w	r5, #0
 800a7f2:	4622      	mov	r2, r4
 800a7f4:	462b      	mov	r3, r5
 800a7f6:	1891      	adds	r1, r2, r2
 800a7f8:	6339      	str	r1, [r7, #48]	; 0x30
 800a7fa:	415b      	adcs	r3, r3
 800a7fc:	637b      	str	r3, [r7, #52]	; 0x34
 800a7fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a802:	1912      	adds	r2, r2, r4
 800a804:	eb45 0303 	adc.w	r3, r5, r3
 800a808:	f04f 0000 	mov.w	r0, #0
 800a80c:	f04f 0100 	mov.w	r1, #0
 800a810:	00d9      	lsls	r1, r3, #3
 800a812:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a816:	00d0      	lsls	r0, r2, #3
 800a818:	4602      	mov	r2, r0
 800a81a:	460b      	mov	r3, r1
 800a81c:	1911      	adds	r1, r2, r4
 800a81e:	65b9      	str	r1, [r7, #88]	; 0x58
 800a820:	416b      	adcs	r3, r5
 800a822:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	461a      	mov	r2, r3
 800a82a:	f04f 0300 	mov.w	r3, #0
 800a82e:	1891      	adds	r1, r2, r2
 800a830:	62b9      	str	r1, [r7, #40]	; 0x28
 800a832:	415b      	adcs	r3, r3
 800a834:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a836:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a83a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a83e:	f7f6 fa03 	bl	8000c48 <__aeabi_uldivmod>
 800a842:	4602      	mov	r2, r0
 800a844:	460b      	mov	r3, r1
 800a846:	4b8c      	ldr	r3, [pc, #560]	; (800aa78 <UART_SetConfig+0x38c>)
 800a848:	fba3 1302 	umull	r1, r3, r3, r2
 800a84c:	095b      	lsrs	r3, r3, #5
 800a84e:	2164      	movs	r1, #100	; 0x64
 800a850:	fb01 f303 	mul.w	r3, r1, r3
 800a854:	1ad3      	subs	r3, r2, r3
 800a856:	00db      	lsls	r3, r3, #3
 800a858:	3332      	adds	r3, #50	; 0x32
 800a85a:	4a87      	ldr	r2, [pc, #540]	; (800aa78 <UART_SetConfig+0x38c>)
 800a85c:	fba2 2303 	umull	r2, r3, r2, r3
 800a860:	095b      	lsrs	r3, r3, #5
 800a862:	005b      	lsls	r3, r3, #1
 800a864:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a868:	441e      	add	r6, r3
 800a86a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a86c:	4618      	mov	r0, r3
 800a86e:	f04f 0100 	mov.w	r1, #0
 800a872:	4602      	mov	r2, r0
 800a874:	460b      	mov	r3, r1
 800a876:	1894      	adds	r4, r2, r2
 800a878:	623c      	str	r4, [r7, #32]
 800a87a:	415b      	adcs	r3, r3
 800a87c:	627b      	str	r3, [r7, #36]	; 0x24
 800a87e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a882:	1812      	adds	r2, r2, r0
 800a884:	eb41 0303 	adc.w	r3, r1, r3
 800a888:	f04f 0400 	mov.w	r4, #0
 800a88c:	f04f 0500 	mov.w	r5, #0
 800a890:	00dd      	lsls	r5, r3, #3
 800a892:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a896:	00d4      	lsls	r4, r2, #3
 800a898:	4622      	mov	r2, r4
 800a89a:	462b      	mov	r3, r5
 800a89c:	1814      	adds	r4, r2, r0
 800a89e:	653c      	str	r4, [r7, #80]	; 0x50
 800a8a0:	414b      	adcs	r3, r1
 800a8a2:	657b      	str	r3, [r7, #84]	; 0x54
 800a8a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	f04f 0300 	mov.w	r3, #0
 800a8ae:	1891      	adds	r1, r2, r2
 800a8b0:	61b9      	str	r1, [r7, #24]
 800a8b2:	415b      	adcs	r3, r3
 800a8b4:	61fb      	str	r3, [r7, #28]
 800a8b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a8ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a8be:	f7f6 f9c3 	bl	8000c48 <__aeabi_uldivmod>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	4b6c      	ldr	r3, [pc, #432]	; (800aa78 <UART_SetConfig+0x38c>)
 800a8c8:	fba3 1302 	umull	r1, r3, r3, r2
 800a8cc:	095b      	lsrs	r3, r3, #5
 800a8ce:	2164      	movs	r1, #100	; 0x64
 800a8d0:	fb01 f303 	mul.w	r3, r1, r3
 800a8d4:	1ad3      	subs	r3, r2, r3
 800a8d6:	00db      	lsls	r3, r3, #3
 800a8d8:	3332      	adds	r3, #50	; 0x32
 800a8da:	4a67      	ldr	r2, [pc, #412]	; (800aa78 <UART_SetConfig+0x38c>)
 800a8dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a8e0:	095b      	lsrs	r3, r3, #5
 800a8e2:	f003 0207 	and.w	r2, r3, #7
 800a8e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4432      	add	r2, r6
 800a8ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a8ee:	e0b9      	b.n	800aa64 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a8f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8f2:	461c      	mov	r4, r3
 800a8f4:	f04f 0500 	mov.w	r5, #0
 800a8f8:	4622      	mov	r2, r4
 800a8fa:	462b      	mov	r3, r5
 800a8fc:	1891      	adds	r1, r2, r2
 800a8fe:	6139      	str	r1, [r7, #16]
 800a900:	415b      	adcs	r3, r3
 800a902:	617b      	str	r3, [r7, #20]
 800a904:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a908:	1912      	adds	r2, r2, r4
 800a90a:	eb45 0303 	adc.w	r3, r5, r3
 800a90e:	f04f 0000 	mov.w	r0, #0
 800a912:	f04f 0100 	mov.w	r1, #0
 800a916:	00d9      	lsls	r1, r3, #3
 800a918:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a91c:	00d0      	lsls	r0, r2, #3
 800a91e:	4602      	mov	r2, r0
 800a920:	460b      	mov	r3, r1
 800a922:	eb12 0804 	adds.w	r8, r2, r4
 800a926:	eb43 0905 	adc.w	r9, r3, r5
 800a92a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	4618      	mov	r0, r3
 800a930:	f04f 0100 	mov.w	r1, #0
 800a934:	f04f 0200 	mov.w	r2, #0
 800a938:	f04f 0300 	mov.w	r3, #0
 800a93c:	008b      	lsls	r3, r1, #2
 800a93e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a942:	0082      	lsls	r2, r0, #2
 800a944:	4640      	mov	r0, r8
 800a946:	4649      	mov	r1, r9
 800a948:	f7f6 f97e 	bl	8000c48 <__aeabi_uldivmod>
 800a94c:	4602      	mov	r2, r0
 800a94e:	460b      	mov	r3, r1
 800a950:	4b49      	ldr	r3, [pc, #292]	; (800aa78 <UART_SetConfig+0x38c>)
 800a952:	fba3 2302 	umull	r2, r3, r3, r2
 800a956:	095b      	lsrs	r3, r3, #5
 800a958:	011e      	lsls	r6, r3, #4
 800a95a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a95c:	4618      	mov	r0, r3
 800a95e:	f04f 0100 	mov.w	r1, #0
 800a962:	4602      	mov	r2, r0
 800a964:	460b      	mov	r3, r1
 800a966:	1894      	adds	r4, r2, r2
 800a968:	60bc      	str	r4, [r7, #8]
 800a96a:	415b      	adcs	r3, r3
 800a96c:	60fb      	str	r3, [r7, #12]
 800a96e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a972:	1812      	adds	r2, r2, r0
 800a974:	eb41 0303 	adc.w	r3, r1, r3
 800a978:	f04f 0400 	mov.w	r4, #0
 800a97c:	f04f 0500 	mov.w	r5, #0
 800a980:	00dd      	lsls	r5, r3, #3
 800a982:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a986:	00d4      	lsls	r4, r2, #3
 800a988:	4622      	mov	r2, r4
 800a98a:	462b      	mov	r3, r5
 800a98c:	1814      	adds	r4, r2, r0
 800a98e:	64bc      	str	r4, [r7, #72]	; 0x48
 800a990:	414b      	adcs	r3, r1
 800a992:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	4618      	mov	r0, r3
 800a99a:	f04f 0100 	mov.w	r1, #0
 800a99e:	f04f 0200 	mov.w	r2, #0
 800a9a2:	f04f 0300 	mov.w	r3, #0
 800a9a6:	008b      	lsls	r3, r1, #2
 800a9a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a9ac:	0082      	lsls	r2, r0, #2
 800a9ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a9b2:	f7f6 f949 	bl	8000c48 <__aeabi_uldivmod>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	4b2f      	ldr	r3, [pc, #188]	; (800aa78 <UART_SetConfig+0x38c>)
 800a9bc:	fba3 1302 	umull	r1, r3, r3, r2
 800a9c0:	095b      	lsrs	r3, r3, #5
 800a9c2:	2164      	movs	r1, #100	; 0x64
 800a9c4:	fb01 f303 	mul.w	r3, r1, r3
 800a9c8:	1ad3      	subs	r3, r2, r3
 800a9ca:	011b      	lsls	r3, r3, #4
 800a9cc:	3332      	adds	r3, #50	; 0x32
 800a9ce:	4a2a      	ldr	r2, [pc, #168]	; (800aa78 <UART_SetConfig+0x38c>)
 800a9d0:	fba2 2303 	umull	r2, r3, r2, r3
 800a9d4:	095b      	lsrs	r3, r3, #5
 800a9d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9da:	441e      	add	r6, r3
 800a9dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f04f 0100 	mov.w	r1, #0
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	1894      	adds	r4, r2, r2
 800a9ea:	603c      	str	r4, [r7, #0]
 800a9ec:	415b      	adcs	r3, r3
 800a9ee:	607b      	str	r3, [r7, #4]
 800a9f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9f4:	1812      	adds	r2, r2, r0
 800a9f6:	eb41 0303 	adc.w	r3, r1, r3
 800a9fa:	f04f 0400 	mov.w	r4, #0
 800a9fe:	f04f 0500 	mov.w	r5, #0
 800aa02:	00dd      	lsls	r5, r3, #3
 800aa04:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aa08:	00d4      	lsls	r4, r2, #3
 800aa0a:	4622      	mov	r2, r4
 800aa0c:	462b      	mov	r3, r5
 800aa0e:	eb12 0a00 	adds.w	sl, r2, r0
 800aa12:	eb43 0b01 	adc.w	fp, r3, r1
 800aa16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f04f 0100 	mov.w	r1, #0
 800aa20:	f04f 0200 	mov.w	r2, #0
 800aa24:	f04f 0300 	mov.w	r3, #0
 800aa28:	008b      	lsls	r3, r1, #2
 800aa2a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aa2e:	0082      	lsls	r2, r0, #2
 800aa30:	4650      	mov	r0, sl
 800aa32:	4659      	mov	r1, fp
 800aa34:	f7f6 f908 	bl	8000c48 <__aeabi_uldivmod>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	4b0e      	ldr	r3, [pc, #56]	; (800aa78 <UART_SetConfig+0x38c>)
 800aa3e:	fba3 1302 	umull	r1, r3, r3, r2
 800aa42:	095b      	lsrs	r3, r3, #5
 800aa44:	2164      	movs	r1, #100	; 0x64
 800aa46:	fb01 f303 	mul.w	r3, r1, r3
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	011b      	lsls	r3, r3, #4
 800aa4e:	3332      	adds	r3, #50	; 0x32
 800aa50:	4a09      	ldr	r2, [pc, #36]	; (800aa78 <UART_SetConfig+0x38c>)
 800aa52:	fba2 2303 	umull	r2, r3, r2, r3
 800aa56:	095b      	lsrs	r3, r3, #5
 800aa58:	f003 020f 	and.w	r2, r3, #15
 800aa5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4432      	add	r2, r6
 800aa62:	609a      	str	r2, [r3, #8]
}
 800aa64:	bf00      	nop
 800aa66:	377c      	adds	r7, #124	; 0x7c
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa6e:	bf00      	nop
 800aa70:	40011000 	.word	0x40011000
 800aa74:	40011400 	.word	0x40011400
 800aa78:	51eb851f 	.word	0x51eb851f

0800aa7c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800aa86:	2300      	movs	r3, #0
 800aa88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa94:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	4b20      	ldr	r3, [pc, #128]	; (800ab1c <FSMC_NORSRAM_Init+0xa0>)
 800aa9a:	4013      	ands	r3, r2
 800aa9c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800aaa6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800aaac:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800aab2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800aab8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800aabe:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800aac4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800aaca:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800aad0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800aad6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800aadc:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800aae2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800aae8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	2b08      	cmp	r3, #8
 800aaf6:	d103      	bne.n	800ab00 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aafe:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	68f9      	ldr	r1, [r7, #12]
 800ab08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3714      	adds	r7, #20
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	fff00080 	.word	0xfff00080

0800ab20 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b087      	sub	sp, #28
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	1c5a      	adds	r2, r3, #1
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab3a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800ab42:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ab4e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ab56:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	68db      	ldr	r3, [r3, #12]
 800ab5c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800ab5e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	691b      	ldr	r3, [r3, #16]
 800ab64:	3b01      	subs	r3, #1
 800ab66:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ab68:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	695b      	ldr	r3, [r3, #20]
 800ab6e:	3b02      	subs	r3, #2
 800ab70:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ab72:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	697a      	ldr	r2, [r7, #20]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	1c5a      	adds	r2, r3, #1
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6979      	ldr	r1, [r7, #20]
 800ab88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	371c      	adds	r7, #28
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr
	...

0800ab9c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b087      	sub	sp, #28
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	607a      	str	r2, [r7, #4]
 800aba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800abaa:	2300      	movs	r3, #0
 800abac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abb4:	d122      	bne.n	800abfc <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abbe:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800abc0:	697a      	ldr	r2, [r7, #20]
 800abc2:	4b15      	ldr	r3, [pc, #84]	; (800ac18 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800abc4:	4013      	ands	r3, r2
 800abc6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800abd2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800abda:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800abe2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800abe8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800abea:	697a      	ldr	r2, [r7, #20]
 800abec:	4313      	orrs	r3, r2
 800abee:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	6979      	ldr	r1, [r7, #20]
 800abf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800abfa:	e005      	b.n	800ac08 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ac04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800ac08:	2300      	movs	r3, #0
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	371c      	adds	r7, #28
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr
 800ac16:	bf00      	nop
 800ac18:	cff00000 	.word	0xcff00000

0800ac1c <__errno>:
 800ac1c:	4b01      	ldr	r3, [pc, #4]	; (800ac24 <__errno+0x8>)
 800ac1e:	6818      	ldr	r0, [r3, #0]
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	20000010 	.word	0x20000010

0800ac28 <__libc_init_array>:
 800ac28:	b570      	push	{r4, r5, r6, lr}
 800ac2a:	4d0d      	ldr	r5, [pc, #52]	; (800ac60 <__libc_init_array+0x38>)
 800ac2c:	4c0d      	ldr	r4, [pc, #52]	; (800ac64 <__libc_init_array+0x3c>)
 800ac2e:	1b64      	subs	r4, r4, r5
 800ac30:	10a4      	asrs	r4, r4, #2
 800ac32:	2600      	movs	r6, #0
 800ac34:	42a6      	cmp	r6, r4
 800ac36:	d109      	bne.n	800ac4c <__libc_init_array+0x24>
 800ac38:	4d0b      	ldr	r5, [pc, #44]	; (800ac68 <__libc_init_array+0x40>)
 800ac3a:	4c0c      	ldr	r4, [pc, #48]	; (800ac6c <__libc_init_array+0x44>)
 800ac3c:	f002 feb6 	bl	800d9ac <_init>
 800ac40:	1b64      	subs	r4, r4, r5
 800ac42:	10a4      	asrs	r4, r4, #2
 800ac44:	2600      	movs	r6, #0
 800ac46:	42a6      	cmp	r6, r4
 800ac48:	d105      	bne.n	800ac56 <__libc_init_array+0x2e>
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}
 800ac4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac50:	4798      	blx	r3
 800ac52:	3601      	adds	r6, #1
 800ac54:	e7ee      	b.n	800ac34 <__libc_init_array+0xc>
 800ac56:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac5a:	4798      	blx	r3
 800ac5c:	3601      	adds	r6, #1
 800ac5e:	e7f2      	b.n	800ac46 <__libc_init_array+0x1e>
 800ac60:	08016884 	.word	0x08016884
 800ac64:	08016884 	.word	0x08016884
 800ac68:	08016884 	.word	0x08016884
 800ac6c:	08016888 	.word	0x08016888

0800ac70 <memset>:
 800ac70:	4402      	add	r2, r0
 800ac72:	4603      	mov	r3, r0
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d100      	bne.n	800ac7a <memset+0xa>
 800ac78:	4770      	bx	lr
 800ac7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac7e:	e7f9      	b.n	800ac74 <memset+0x4>

0800ac80 <__cvt>:
 800ac80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac84:	ec55 4b10 	vmov	r4, r5, d0
 800ac88:	2d00      	cmp	r5, #0
 800ac8a:	460e      	mov	r6, r1
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	462b      	mov	r3, r5
 800ac90:	bfbb      	ittet	lt
 800ac92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ac96:	461d      	movlt	r5, r3
 800ac98:	2300      	movge	r3, #0
 800ac9a:	232d      	movlt	r3, #45	; 0x2d
 800ac9c:	700b      	strb	r3, [r1, #0]
 800ac9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aca0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aca4:	4691      	mov	r9, r2
 800aca6:	f023 0820 	bic.w	r8, r3, #32
 800acaa:	bfbc      	itt	lt
 800acac:	4622      	movlt	r2, r4
 800acae:	4614      	movlt	r4, r2
 800acb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800acb4:	d005      	beq.n	800acc2 <__cvt+0x42>
 800acb6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800acba:	d100      	bne.n	800acbe <__cvt+0x3e>
 800acbc:	3601      	adds	r6, #1
 800acbe:	2102      	movs	r1, #2
 800acc0:	e000      	b.n	800acc4 <__cvt+0x44>
 800acc2:	2103      	movs	r1, #3
 800acc4:	ab03      	add	r3, sp, #12
 800acc6:	9301      	str	r3, [sp, #4]
 800acc8:	ab02      	add	r3, sp, #8
 800acca:	9300      	str	r3, [sp, #0]
 800accc:	ec45 4b10 	vmov	d0, r4, r5
 800acd0:	4653      	mov	r3, sl
 800acd2:	4632      	mov	r2, r6
 800acd4:	f000 fcec 	bl	800b6b0 <_dtoa_r>
 800acd8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800acdc:	4607      	mov	r7, r0
 800acde:	d102      	bne.n	800ace6 <__cvt+0x66>
 800ace0:	f019 0f01 	tst.w	r9, #1
 800ace4:	d022      	beq.n	800ad2c <__cvt+0xac>
 800ace6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800acea:	eb07 0906 	add.w	r9, r7, r6
 800acee:	d110      	bne.n	800ad12 <__cvt+0x92>
 800acf0:	783b      	ldrb	r3, [r7, #0]
 800acf2:	2b30      	cmp	r3, #48	; 0x30
 800acf4:	d10a      	bne.n	800ad0c <__cvt+0x8c>
 800acf6:	2200      	movs	r2, #0
 800acf8:	2300      	movs	r3, #0
 800acfa:	4620      	mov	r0, r4
 800acfc:	4629      	mov	r1, r5
 800acfe:	f7f5 fee3 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad02:	b918      	cbnz	r0, 800ad0c <__cvt+0x8c>
 800ad04:	f1c6 0601 	rsb	r6, r6, #1
 800ad08:	f8ca 6000 	str.w	r6, [sl]
 800ad0c:	f8da 3000 	ldr.w	r3, [sl]
 800ad10:	4499      	add	r9, r3
 800ad12:	2200      	movs	r2, #0
 800ad14:	2300      	movs	r3, #0
 800ad16:	4620      	mov	r0, r4
 800ad18:	4629      	mov	r1, r5
 800ad1a:	f7f5 fed5 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad1e:	b108      	cbz	r0, 800ad24 <__cvt+0xa4>
 800ad20:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad24:	2230      	movs	r2, #48	; 0x30
 800ad26:	9b03      	ldr	r3, [sp, #12]
 800ad28:	454b      	cmp	r3, r9
 800ad2a:	d307      	bcc.n	800ad3c <__cvt+0xbc>
 800ad2c:	9b03      	ldr	r3, [sp, #12]
 800ad2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad30:	1bdb      	subs	r3, r3, r7
 800ad32:	4638      	mov	r0, r7
 800ad34:	6013      	str	r3, [r2, #0]
 800ad36:	b004      	add	sp, #16
 800ad38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad3c:	1c59      	adds	r1, r3, #1
 800ad3e:	9103      	str	r1, [sp, #12]
 800ad40:	701a      	strb	r2, [r3, #0]
 800ad42:	e7f0      	b.n	800ad26 <__cvt+0xa6>

0800ad44 <__exponent>:
 800ad44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad46:	4603      	mov	r3, r0
 800ad48:	2900      	cmp	r1, #0
 800ad4a:	bfb8      	it	lt
 800ad4c:	4249      	neglt	r1, r1
 800ad4e:	f803 2b02 	strb.w	r2, [r3], #2
 800ad52:	bfb4      	ite	lt
 800ad54:	222d      	movlt	r2, #45	; 0x2d
 800ad56:	222b      	movge	r2, #43	; 0x2b
 800ad58:	2909      	cmp	r1, #9
 800ad5a:	7042      	strb	r2, [r0, #1]
 800ad5c:	dd2a      	ble.n	800adb4 <__exponent+0x70>
 800ad5e:	f10d 0407 	add.w	r4, sp, #7
 800ad62:	46a4      	mov	ip, r4
 800ad64:	270a      	movs	r7, #10
 800ad66:	46a6      	mov	lr, r4
 800ad68:	460a      	mov	r2, r1
 800ad6a:	fb91 f6f7 	sdiv	r6, r1, r7
 800ad6e:	fb07 1516 	mls	r5, r7, r6, r1
 800ad72:	3530      	adds	r5, #48	; 0x30
 800ad74:	2a63      	cmp	r2, #99	; 0x63
 800ad76:	f104 34ff 	add.w	r4, r4, #4294967295
 800ad7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ad7e:	4631      	mov	r1, r6
 800ad80:	dcf1      	bgt.n	800ad66 <__exponent+0x22>
 800ad82:	3130      	adds	r1, #48	; 0x30
 800ad84:	f1ae 0502 	sub.w	r5, lr, #2
 800ad88:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ad8c:	1c44      	adds	r4, r0, #1
 800ad8e:	4629      	mov	r1, r5
 800ad90:	4561      	cmp	r1, ip
 800ad92:	d30a      	bcc.n	800adaa <__exponent+0x66>
 800ad94:	f10d 0209 	add.w	r2, sp, #9
 800ad98:	eba2 020e 	sub.w	r2, r2, lr
 800ad9c:	4565      	cmp	r5, ip
 800ad9e:	bf88      	it	hi
 800ada0:	2200      	movhi	r2, #0
 800ada2:	4413      	add	r3, r2
 800ada4:	1a18      	subs	r0, r3, r0
 800ada6:	b003      	add	sp, #12
 800ada8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adae:	f804 2f01 	strb.w	r2, [r4, #1]!
 800adb2:	e7ed      	b.n	800ad90 <__exponent+0x4c>
 800adb4:	2330      	movs	r3, #48	; 0x30
 800adb6:	3130      	adds	r1, #48	; 0x30
 800adb8:	7083      	strb	r3, [r0, #2]
 800adba:	70c1      	strb	r1, [r0, #3]
 800adbc:	1d03      	adds	r3, r0, #4
 800adbe:	e7f1      	b.n	800ada4 <__exponent+0x60>

0800adc0 <_printf_float>:
 800adc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc4:	ed2d 8b02 	vpush	{d8}
 800adc8:	b08d      	sub	sp, #52	; 0x34
 800adca:	460c      	mov	r4, r1
 800adcc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800add0:	4616      	mov	r6, r2
 800add2:	461f      	mov	r7, r3
 800add4:	4605      	mov	r5, r0
 800add6:	f001 fa57 	bl	800c288 <_localeconv_r>
 800adda:	f8d0 a000 	ldr.w	sl, [r0]
 800adde:	4650      	mov	r0, sl
 800ade0:	f7f5 f9f6 	bl	80001d0 <strlen>
 800ade4:	2300      	movs	r3, #0
 800ade6:	930a      	str	r3, [sp, #40]	; 0x28
 800ade8:	6823      	ldr	r3, [r4, #0]
 800adea:	9305      	str	r3, [sp, #20]
 800adec:	f8d8 3000 	ldr.w	r3, [r8]
 800adf0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800adf4:	3307      	adds	r3, #7
 800adf6:	f023 0307 	bic.w	r3, r3, #7
 800adfa:	f103 0208 	add.w	r2, r3, #8
 800adfe:	f8c8 2000 	str.w	r2, [r8]
 800ae02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ae0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ae0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae12:	9307      	str	r3, [sp, #28]
 800ae14:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae18:	ee08 0a10 	vmov	s16, r0
 800ae1c:	4b9f      	ldr	r3, [pc, #636]	; (800b09c <_printf_float+0x2dc>)
 800ae1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae22:	f04f 32ff 	mov.w	r2, #4294967295
 800ae26:	f7f5 fe81 	bl	8000b2c <__aeabi_dcmpun>
 800ae2a:	bb88      	cbnz	r0, 800ae90 <_printf_float+0xd0>
 800ae2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae30:	4b9a      	ldr	r3, [pc, #616]	; (800b09c <_printf_float+0x2dc>)
 800ae32:	f04f 32ff 	mov.w	r2, #4294967295
 800ae36:	f7f5 fe5b 	bl	8000af0 <__aeabi_dcmple>
 800ae3a:	bb48      	cbnz	r0, 800ae90 <_printf_float+0xd0>
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	2300      	movs	r3, #0
 800ae40:	4640      	mov	r0, r8
 800ae42:	4649      	mov	r1, r9
 800ae44:	f7f5 fe4a 	bl	8000adc <__aeabi_dcmplt>
 800ae48:	b110      	cbz	r0, 800ae50 <_printf_float+0x90>
 800ae4a:	232d      	movs	r3, #45	; 0x2d
 800ae4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae50:	4b93      	ldr	r3, [pc, #588]	; (800b0a0 <_printf_float+0x2e0>)
 800ae52:	4894      	ldr	r0, [pc, #592]	; (800b0a4 <_printf_float+0x2e4>)
 800ae54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ae58:	bf94      	ite	ls
 800ae5a:	4698      	movls	r8, r3
 800ae5c:	4680      	movhi	r8, r0
 800ae5e:	2303      	movs	r3, #3
 800ae60:	6123      	str	r3, [r4, #16]
 800ae62:	9b05      	ldr	r3, [sp, #20]
 800ae64:	f023 0204 	bic.w	r2, r3, #4
 800ae68:	6022      	str	r2, [r4, #0]
 800ae6a:	f04f 0900 	mov.w	r9, #0
 800ae6e:	9700      	str	r7, [sp, #0]
 800ae70:	4633      	mov	r3, r6
 800ae72:	aa0b      	add	r2, sp, #44	; 0x2c
 800ae74:	4621      	mov	r1, r4
 800ae76:	4628      	mov	r0, r5
 800ae78:	f000 f9d8 	bl	800b22c <_printf_common>
 800ae7c:	3001      	adds	r0, #1
 800ae7e:	f040 8090 	bne.w	800afa2 <_printf_float+0x1e2>
 800ae82:	f04f 30ff 	mov.w	r0, #4294967295
 800ae86:	b00d      	add	sp, #52	; 0x34
 800ae88:	ecbd 8b02 	vpop	{d8}
 800ae8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae90:	4642      	mov	r2, r8
 800ae92:	464b      	mov	r3, r9
 800ae94:	4640      	mov	r0, r8
 800ae96:	4649      	mov	r1, r9
 800ae98:	f7f5 fe48 	bl	8000b2c <__aeabi_dcmpun>
 800ae9c:	b140      	cbz	r0, 800aeb0 <_printf_float+0xf0>
 800ae9e:	464b      	mov	r3, r9
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	bfbc      	itt	lt
 800aea4:	232d      	movlt	r3, #45	; 0x2d
 800aea6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aeaa:	487f      	ldr	r0, [pc, #508]	; (800b0a8 <_printf_float+0x2e8>)
 800aeac:	4b7f      	ldr	r3, [pc, #508]	; (800b0ac <_printf_float+0x2ec>)
 800aeae:	e7d1      	b.n	800ae54 <_printf_float+0x94>
 800aeb0:	6863      	ldr	r3, [r4, #4]
 800aeb2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aeb6:	9206      	str	r2, [sp, #24]
 800aeb8:	1c5a      	adds	r2, r3, #1
 800aeba:	d13f      	bne.n	800af3c <_printf_float+0x17c>
 800aebc:	2306      	movs	r3, #6
 800aebe:	6063      	str	r3, [r4, #4]
 800aec0:	9b05      	ldr	r3, [sp, #20]
 800aec2:	6861      	ldr	r1, [r4, #4]
 800aec4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aec8:	2300      	movs	r3, #0
 800aeca:	9303      	str	r3, [sp, #12]
 800aecc:	ab0a      	add	r3, sp, #40	; 0x28
 800aece:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aed2:	ab09      	add	r3, sp, #36	; 0x24
 800aed4:	ec49 8b10 	vmov	d0, r8, r9
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	6022      	str	r2, [r4, #0]
 800aedc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aee0:	4628      	mov	r0, r5
 800aee2:	f7ff fecd 	bl	800ac80 <__cvt>
 800aee6:	9b06      	ldr	r3, [sp, #24]
 800aee8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aeea:	2b47      	cmp	r3, #71	; 0x47
 800aeec:	4680      	mov	r8, r0
 800aeee:	d108      	bne.n	800af02 <_printf_float+0x142>
 800aef0:	1cc8      	adds	r0, r1, #3
 800aef2:	db02      	blt.n	800aefa <_printf_float+0x13a>
 800aef4:	6863      	ldr	r3, [r4, #4]
 800aef6:	4299      	cmp	r1, r3
 800aef8:	dd41      	ble.n	800af7e <_printf_float+0x1be>
 800aefa:	f1ab 0b02 	sub.w	fp, fp, #2
 800aefe:	fa5f fb8b 	uxtb.w	fp, fp
 800af02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800af06:	d820      	bhi.n	800af4a <_printf_float+0x18a>
 800af08:	3901      	subs	r1, #1
 800af0a:	465a      	mov	r2, fp
 800af0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800af10:	9109      	str	r1, [sp, #36]	; 0x24
 800af12:	f7ff ff17 	bl	800ad44 <__exponent>
 800af16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af18:	1813      	adds	r3, r2, r0
 800af1a:	2a01      	cmp	r2, #1
 800af1c:	4681      	mov	r9, r0
 800af1e:	6123      	str	r3, [r4, #16]
 800af20:	dc02      	bgt.n	800af28 <_printf_float+0x168>
 800af22:	6822      	ldr	r2, [r4, #0]
 800af24:	07d2      	lsls	r2, r2, #31
 800af26:	d501      	bpl.n	800af2c <_printf_float+0x16c>
 800af28:	3301      	adds	r3, #1
 800af2a:	6123      	str	r3, [r4, #16]
 800af2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800af30:	2b00      	cmp	r3, #0
 800af32:	d09c      	beq.n	800ae6e <_printf_float+0xae>
 800af34:	232d      	movs	r3, #45	; 0x2d
 800af36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af3a:	e798      	b.n	800ae6e <_printf_float+0xae>
 800af3c:	9a06      	ldr	r2, [sp, #24]
 800af3e:	2a47      	cmp	r2, #71	; 0x47
 800af40:	d1be      	bne.n	800aec0 <_printf_float+0x100>
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1bc      	bne.n	800aec0 <_printf_float+0x100>
 800af46:	2301      	movs	r3, #1
 800af48:	e7b9      	b.n	800aebe <_printf_float+0xfe>
 800af4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800af4e:	d118      	bne.n	800af82 <_printf_float+0x1c2>
 800af50:	2900      	cmp	r1, #0
 800af52:	6863      	ldr	r3, [r4, #4]
 800af54:	dd0b      	ble.n	800af6e <_printf_float+0x1ae>
 800af56:	6121      	str	r1, [r4, #16]
 800af58:	b913      	cbnz	r3, 800af60 <_printf_float+0x1a0>
 800af5a:	6822      	ldr	r2, [r4, #0]
 800af5c:	07d0      	lsls	r0, r2, #31
 800af5e:	d502      	bpl.n	800af66 <_printf_float+0x1a6>
 800af60:	3301      	adds	r3, #1
 800af62:	440b      	add	r3, r1
 800af64:	6123      	str	r3, [r4, #16]
 800af66:	65a1      	str	r1, [r4, #88]	; 0x58
 800af68:	f04f 0900 	mov.w	r9, #0
 800af6c:	e7de      	b.n	800af2c <_printf_float+0x16c>
 800af6e:	b913      	cbnz	r3, 800af76 <_printf_float+0x1b6>
 800af70:	6822      	ldr	r2, [r4, #0]
 800af72:	07d2      	lsls	r2, r2, #31
 800af74:	d501      	bpl.n	800af7a <_printf_float+0x1ba>
 800af76:	3302      	adds	r3, #2
 800af78:	e7f4      	b.n	800af64 <_printf_float+0x1a4>
 800af7a:	2301      	movs	r3, #1
 800af7c:	e7f2      	b.n	800af64 <_printf_float+0x1a4>
 800af7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800af82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af84:	4299      	cmp	r1, r3
 800af86:	db05      	blt.n	800af94 <_printf_float+0x1d4>
 800af88:	6823      	ldr	r3, [r4, #0]
 800af8a:	6121      	str	r1, [r4, #16]
 800af8c:	07d8      	lsls	r0, r3, #31
 800af8e:	d5ea      	bpl.n	800af66 <_printf_float+0x1a6>
 800af90:	1c4b      	adds	r3, r1, #1
 800af92:	e7e7      	b.n	800af64 <_printf_float+0x1a4>
 800af94:	2900      	cmp	r1, #0
 800af96:	bfd4      	ite	le
 800af98:	f1c1 0202 	rsble	r2, r1, #2
 800af9c:	2201      	movgt	r2, #1
 800af9e:	4413      	add	r3, r2
 800afa0:	e7e0      	b.n	800af64 <_printf_float+0x1a4>
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	055a      	lsls	r2, r3, #21
 800afa6:	d407      	bmi.n	800afb8 <_printf_float+0x1f8>
 800afa8:	6923      	ldr	r3, [r4, #16]
 800afaa:	4642      	mov	r2, r8
 800afac:	4631      	mov	r1, r6
 800afae:	4628      	mov	r0, r5
 800afb0:	47b8      	blx	r7
 800afb2:	3001      	adds	r0, #1
 800afb4:	d12c      	bne.n	800b010 <_printf_float+0x250>
 800afb6:	e764      	b.n	800ae82 <_printf_float+0xc2>
 800afb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800afbc:	f240 80e0 	bls.w	800b180 <_printf_float+0x3c0>
 800afc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800afc4:	2200      	movs	r2, #0
 800afc6:	2300      	movs	r3, #0
 800afc8:	f7f5 fd7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800afcc:	2800      	cmp	r0, #0
 800afce:	d034      	beq.n	800b03a <_printf_float+0x27a>
 800afd0:	4a37      	ldr	r2, [pc, #220]	; (800b0b0 <_printf_float+0x2f0>)
 800afd2:	2301      	movs	r3, #1
 800afd4:	4631      	mov	r1, r6
 800afd6:	4628      	mov	r0, r5
 800afd8:	47b8      	blx	r7
 800afda:	3001      	adds	r0, #1
 800afdc:	f43f af51 	beq.w	800ae82 <_printf_float+0xc2>
 800afe0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800afe4:	429a      	cmp	r2, r3
 800afe6:	db02      	blt.n	800afee <_printf_float+0x22e>
 800afe8:	6823      	ldr	r3, [r4, #0]
 800afea:	07d8      	lsls	r0, r3, #31
 800afec:	d510      	bpl.n	800b010 <_printf_float+0x250>
 800afee:	ee18 3a10 	vmov	r3, s16
 800aff2:	4652      	mov	r2, sl
 800aff4:	4631      	mov	r1, r6
 800aff6:	4628      	mov	r0, r5
 800aff8:	47b8      	blx	r7
 800affa:	3001      	adds	r0, #1
 800affc:	f43f af41 	beq.w	800ae82 <_printf_float+0xc2>
 800b000:	f04f 0800 	mov.w	r8, #0
 800b004:	f104 091a 	add.w	r9, r4, #26
 800b008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b00a:	3b01      	subs	r3, #1
 800b00c:	4543      	cmp	r3, r8
 800b00e:	dc09      	bgt.n	800b024 <_printf_float+0x264>
 800b010:	6823      	ldr	r3, [r4, #0]
 800b012:	079b      	lsls	r3, r3, #30
 800b014:	f100 8105 	bmi.w	800b222 <_printf_float+0x462>
 800b018:	68e0      	ldr	r0, [r4, #12]
 800b01a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b01c:	4298      	cmp	r0, r3
 800b01e:	bfb8      	it	lt
 800b020:	4618      	movlt	r0, r3
 800b022:	e730      	b.n	800ae86 <_printf_float+0xc6>
 800b024:	2301      	movs	r3, #1
 800b026:	464a      	mov	r2, r9
 800b028:	4631      	mov	r1, r6
 800b02a:	4628      	mov	r0, r5
 800b02c:	47b8      	blx	r7
 800b02e:	3001      	adds	r0, #1
 800b030:	f43f af27 	beq.w	800ae82 <_printf_float+0xc2>
 800b034:	f108 0801 	add.w	r8, r8, #1
 800b038:	e7e6      	b.n	800b008 <_printf_float+0x248>
 800b03a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	dc39      	bgt.n	800b0b4 <_printf_float+0x2f4>
 800b040:	4a1b      	ldr	r2, [pc, #108]	; (800b0b0 <_printf_float+0x2f0>)
 800b042:	2301      	movs	r3, #1
 800b044:	4631      	mov	r1, r6
 800b046:	4628      	mov	r0, r5
 800b048:	47b8      	blx	r7
 800b04a:	3001      	adds	r0, #1
 800b04c:	f43f af19 	beq.w	800ae82 <_printf_float+0xc2>
 800b050:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b054:	4313      	orrs	r3, r2
 800b056:	d102      	bne.n	800b05e <_printf_float+0x29e>
 800b058:	6823      	ldr	r3, [r4, #0]
 800b05a:	07d9      	lsls	r1, r3, #31
 800b05c:	d5d8      	bpl.n	800b010 <_printf_float+0x250>
 800b05e:	ee18 3a10 	vmov	r3, s16
 800b062:	4652      	mov	r2, sl
 800b064:	4631      	mov	r1, r6
 800b066:	4628      	mov	r0, r5
 800b068:	47b8      	blx	r7
 800b06a:	3001      	adds	r0, #1
 800b06c:	f43f af09 	beq.w	800ae82 <_printf_float+0xc2>
 800b070:	f04f 0900 	mov.w	r9, #0
 800b074:	f104 0a1a 	add.w	sl, r4, #26
 800b078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b07a:	425b      	negs	r3, r3
 800b07c:	454b      	cmp	r3, r9
 800b07e:	dc01      	bgt.n	800b084 <_printf_float+0x2c4>
 800b080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b082:	e792      	b.n	800afaa <_printf_float+0x1ea>
 800b084:	2301      	movs	r3, #1
 800b086:	4652      	mov	r2, sl
 800b088:	4631      	mov	r1, r6
 800b08a:	4628      	mov	r0, r5
 800b08c:	47b8      	blx	r7
 800b08e:	3001      	adds	r0, #1
 800b090:	f43f aef7 	beq.w	800ae82 <_printf_float+0xc2>
 800b094:	f109 0901 	add.w	r9, r9, #1
 800b098:	e7ee      	b.n	800b078 <_printf_float+0x2b8>
 800b09a:	bf00      	nop
 800b09c:	7fefffff 	.word	0x7fefffff
 800b0a0:	080164a0 	.word	0x080164a0
 800b0a4:	080164a4 	.word	0x080164a4
 800b0a8:	080164ac 	.word	0x080164ac
 800b0ac:	080164a8 	.word	0x080164a8
 800b0b0:	080164b0 	.word	0x080164b0
 800b0b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	bfa8      	it	ge
 800b0bc:	461a      	movge	r2, r3
 800b0be:	2a00      	cmp	r2, #0
 800b0c0:	4691      	mov	r9, r2
 800b0c2:	dc37      	bgt.n	800b134 <_printf_float+0x374>
 800b0c4:	f04f 0b00 	mov.w	fp, #0
 800b0c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0cc:	f104 021a 	add.w	r2, r4, #26
 800b0d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b0d2:	9305      	str	r3, [sp, #20]
 800b0d4:	eba3 0309 	sub.w	r3, r3, r9
 800b0d8:	455b      	cmp	r3, fp
 800b0da:	dc33      	bgt.n	800b144 <_printf_float+0x384>
 800b0dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	db3b      	blt.n	800b15c <_printf_float+0x39c>
 800b0e4:	6823      	ldr	r3, [r4, #0]
 800b0e6:	07da      	lsls	r2, r3, #31
 800b0e8:	d438      	bmi.n	800b15c <_printf_float+0x39c>
 800b0ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0ec:	9b05      	ldr	r3, [sp, #20]
 800b0ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	eba2 0901 	sub.w	r9, r2, r1
 800b0f6:	4599      	cmp	r9, r3
 800b0f8:	bfa8      	it	ge
 800b0fa:	4699      	movge	r9, r3
 800b0fc:	f1b9 0f00 	cmp.w	r9, #0
 800b100:	dc35      	bgt.n	800b16e <_printf_float+0x3ae>
 800b102:	f04f 0800 	mov.w	r8, #0
 800b106:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b10a:	f104 0a1a 	add.w	sl, r4, #26
 800b10e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b112:	1a9b      	subs	r3, r3, r2
 800b114:	eba3 0309 	sub.w	r3, r3, r9
 800b118:	4543      	cmp	r3, r8
 800b11a:	f77f af79 	ble.w	800b010 <_printf_float+0x250>
 800b11e:	2301      	movs	r3, #1
 800b120:	4652      	mov	r2, sl
 800b122:	4631      	mov	r1, r6
 800b124:	4628      	mov	r0, r5
 800b126:	47b8      	blx	r7
 800b128:	3001      	adds	r0, #1
 800b12a:	f43f aeaa 	beq.w	800ae82 <_printf_float+0xc2>
 800b12e:	f108 0801 	add.w	r8, r8, #1
 800b132:	e7ec      	b.n	800b10e <_printf_float+0x34e>
 800b134:	4613      	mov	r3, r2
 800b136:	4631      	mov	r1, r6
 800b138:	4642      	mov	r2, r8
 800b13a:	4628      	mov	r0, r5
 800b13c:	47b8      	blx	r7
 800b13e:	3001      	adds	r0, #1
 800b140:	d1c0      	bne.n	800b0c4 <_printf_float+0x304>
 800b142:	e69e      	b.n	800ae82 <_printf_float+0xc2>
 800b144:	2301      	movs	r3, #1
 800b146:	4631      	mov	r1, r6
 800b148:	4628      	mov	r0, r5
 800b14a:	9205      	str	r2, [sp, #20]
 800b14c:	47b8      	blx	r7
 800b14e:	3001      	adds	r0, #1
 800b150:	f43f ae97 	beq.w	800ae82 <_printf_float+0xc2>
 800b154:	9a05      	ldr	r2, [sp, #20]
 800b156:	f10b 0b01 	add.w	fp, fp, #1
 800b15a:	e7b9      	b.n	800b0d0 <_printf_float+0x310>
 800b15c:	ee18 3a10 	vmov	r3, s16
 800b160:	4652      	mov	r2, sl
 800b162:	4631      	mov	r1, r6
 800b164:	4628      	mov	r0, r5
 800b166:	47b8      	blx	r7
 800b168:	3001      	adds	r0, #1
 800b16a:	d1be      	bne.n	800b0ea <_printf_float+0x32a>
 800b16c:	e689      	b.n	800ae82 <_printf_float+0xc2>
 800b16e:	9a05      	ldr	r2, [sp, #20]
 800b170:	464b      	mov	r3, r9
 800b172:	4442      	add	r2, r8
 800b174:	4631      	mov	r1, r6
 800b176:	4628      	mov	r0, r5
 800b178:	47b8      	blx	r7
 800b17a:	3001      	adds	r0, #1
 800b17c:	d1c1      	bne.n	800b102 <_printf_float+0x342>
 800b17e:	e680      	b.n	800ae82 <_printf_float+0xc2>
 800b180:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b182:	2a01      	cmp	r2, #1
 800b184:	dc01      	bgt.n	800b18a <_printf_float+0x3ca>
 800b186:	07db      	lsls	r3, r3, #31
 800b188:	d538      	bpl.n	800b1fc <_printf_float+0x43c>
 800b18a:	2301      	movs	r3, #1
 800b18c:	4642      	mov	r2, r8
 800b18e:	4631      	mov	r1, r6
 800b190:	4628      	mov	r0, r5
 800b192:	47b8      	blx	r7
 800b194:	3001      	adds	r0, #1
 800b196:	f43f ae74 	beq.w	800ae82 <_printf_float+0xc2>
 800b19a:	ee18 3a10 	vmov	r3, s16
 800b19e:	4652      	mov	r2, sl
 800b1a0:	4631      	mov	r1, r6
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	47b8      	blx	r7
 800b1a6:	3001      	adds	r0, #1
 800b1a8:	f43f ae6b 	beq.w	800ae82 <_printf_float+0xc2>
 800b1ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	f7f5 fc88 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1b8:	b9d8      	cbnz	r0, 800b1f2 <_printf_float+0x432>
 800b1ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1bc:	f108 0201 	add.w	r2, r8, #1
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	4631      	mov	r1, r6
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	47b8      	blx	r7
 800b1c8:	3001      	adds	r0, #1
 800b1ca:	d10e      	bne.n	800b1ea <_printf_float+0x42a>
 800b1cc:	e659      	b.n	800ae82 <_printf_float+0xc2>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	4652      	mov	r2, sl
 800b1d2:	4631      	mov	r1, r6
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	47b8      	blx	r7
 800b1d8:	3001      	adds	r0, #1
 800b1da:	f43f ae52 	beq.w	800ae82 <_printf_float+0xc2>
 800b1de:	f108 0801 	add.w	r8, r8, #1
 800b1e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	4543      	cmp	r3, r8
 800b1e8:	dcf1      	bgt.n	800b1ce <_printf_float+0x40e>
 800b1ea:	464b      	mov	r3, r9
 800b1ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b1f0:	e6dc      	b.n	800afac <_printf_float+0x1ec>
 800b1f2:	f04f 0800 	mov.w	r8, #0
 800b1f6:	f104 0a1a 	add.w	sl, r4, #26
 800b1fa:	e7f2      	b.n	800b1e2 <_printf_float+0x422>
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	4642      	mov	r2, r8
 800b200:	e7df      	b.n	800b1c2 <_printf_float+0x402>
 800b202:	2301      	movs	r3, #1
 800b204:	464a      	mov	r2, r9
 800b206:	4631      	mov	r1, r6
 800b208:	4628      	mov	r0, r5
 800b20a:	47b8      	blx	r7
 800b20c:	3001      	adds	r0, #1
 800b20e:	f43f ae38 	beq.w	800ae82 <_printf_float+0xc2>
 800b212:	f108 0801 	add.w	r8, r8, #1
 800b216:	68e3      	ldr	r3, [r4, #12]
 800b218:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b21a:	1a5b      	subs	r3, r3, r1
 800b21c:	4543      	cmp	r3, r8
 800b21e:	dcf0      	bgt.n	800b202 <_printf_float+0x442>
 800b220:	e6fa      	b.n	800b018 <_printf_float+0x258>
 800b222:	f04f 0800 	mov.w	r8, #0
 800b226:	f104 0919 	add.w	r9, r4, #25
 800b22a:	e7f4      	b.n	800b216 <_printf_float+0x456>

0800b22c <_printf_common>:
 800b22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b230:	4616      	mov	r6, r2
 800b232:	4699      	mov	r9, r3
 800b234:	688a      	ldr	r2, [r1, #8]
 800b236:	690b      	ldr	r3, [r1, #16]
 800b238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b23c:	4293      	cmp	r3, r2
 800b23e:	bfb8      	it	lt
 800b240:	4613      	movlt	r3, r2
 800b242:	6033      	str	r3, [r6, #0]
 800b244:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b248:	4607      	mov	r7, r0
 800b24a:	460c      	mov	r4, r1
 800b24c:	b10a      	cbz	r2, 800b252 <_printf_common+0x26>
 800b24e:	3301      	adds	r3, #1
 800b250:	6033      	str	r3, [r6, #0]
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	0699      	lsls	r1, r3, #26
 800b256:	bf42      	ittt	mi
 800b258:	6833      	ldrmi	r3, [r6, #0]
 800b25a:	3302      	addmi	r3, #2
 800b25c:	6033      	strmi	r3, [r6, #0]
 800b25e:	6825      	ldr	r5, [r4, #0]
 800b260:	f015 0506 	ands.w	r5, r5, #6
 800b264:	d106      	bne.n	800b274 <_printf_common+0x48>
 800b266:	f104 0a19 	add.w	sl, r4, #25
 800b26a:	68e3      	ldr	r3, [r4, #12]
 800b26c:	6832      	ldr	r2, [r6, #0]
 800b26e:	1a9b      	subs	r3, r3, r2
 800b270:	42ab      	cmp	r3, r5
 800b272:	dc26      	bgt.n	800b2c2 <_printf_common+0x96>
 800b274:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b278:	1e13      	subs	r3, r2, #0
 800b27a:	6822      	ldr	r2, [r4, #0]
 800b27c:	bf18      	it	ne
 800b27e:	2301      	movne	r3, #1
 800b280:	0692      	lsls	r2, r2, #26
 800b282:	d42b      	bmi.n	800b2dc <_printf_common+0xb0>
 800b284:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b288:	4649      	mov	r1, r9
 800b28a:	4638      	mov	r0, r7
 800b28c:	47c0      	blx	r8
 800b28e:	3001      	adds	r0, #1
 800b290:	d01e      	beq.n	800b2d0 <_printf_common+0xa4>
 800b292:	6823      	ldr	r3, [r4, #0]
 800b294:	68e5      	ldr	r5, [r4, #12]
 800b296:	6832      	ldr	r2, [r6, #0]
 800b298:	f003 0306 	and.w	r3, r3, #6
 800b29c:	2b04      	cmp	r3, #4
 800b29e:	bf08      	it	eq
 800b2a0:	1aad      	subeq	r5, r5, r2
 800b2a2:	68a3      	ldr	r3, [r4, #8]
 800b2a4:	6922      	ldr	r2, [r4, #16]
 800b2a6:	bf0c      	ite	eq
 800b2a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2ac:	2500      	movne	r5, #0
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	bfc4      	itt	gt
 800b2b2:	1a9b      	subgt	r3, r3, r2
 800b2b4:	18ed      	addgt	r5, r5, r3
 800b2b6:	2600      	movs	r6, #0
 800b2b8:	341a      	adds	r4, #26
 800b2ba:	42b5      	cmp	r5, r6
 800b2bc:	d11a      	bne.n	800b2f4 <_printf_common+0xc8>
 800b2be:	2000      	movs	r0, #0
 800b2c0:	e008      	b.n	800b2d4 <_printf_common+0xa8>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	4652      	mov	r2, sl
 800b2c6:	4649      	mov	r1, r9
 800b2c8:	4638      	mov	r0, r7
 800b2ca:	47c0      	blx	r8
 800b2cc:	3001      	adds	r0, #1
 800b2ce:	d103      	bne.n	800b2d8 <_printf_common+0xac>
 800b2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2d8:	3501      	adds	r5, #1
 800b2da:	e7c6      	b.n	800b26a <_printf_common+0x3e>
 800b2dc:	18e1      	adds	r1, r4, r3
 800b2de:	1c5a      	adds	r2, r3, #1
 800b2e0:	2030      	movs	r0, #48	; 0x30
 800b2e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b2e6:	4422      	add	r2, r4
 800b2e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b2ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2f0:	3302      	adds	r3, #2
 800b2f2:	e7c7      	b.n	800b284 <_printf_common+0x58>
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	4622      	mov	r2, r4
 800b2f8:	4649      	mov	r1, r9
 800b2fa:	4638      	mov	r0, r7
 800b2fc:	47c0      	blx	r8
 800b2fe:	3001      	adds	r0, #1
 800b300:	d0e6      	beq.n	800b2d0 <_printf_common+0xa4>
 800b302:	3601      	adds	r6, #1
 800b304:	e7d9      	b.n	800b2ba <_printf_common+0x8e>
	...

0800b308 <_printf_i>:
 800b308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b30c:	460c      	mov	r4, r1
 800b30e:	4691      	mov	r9, r2
 800b310:	7e27      	ldrb	r7, [r4, #24]
 800b312:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b314:	2f78      	cmp	r7, #120	; 0x78
 800b316:	4680      	mov	r8, r0
 800b318:	469a      	mov	sl, r3
 800b31a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b31e:	d807      	bhi.n	800b330 <_printf_i+0x28>
 800b320:	2f62      	cmp	r7, #98	; 0x62
 800b322:	d80a      	bhi.n	800b33a <_printf_i+0x32>
 800b324:	2f00      	cmp	r7, #0
 800b326:	f000 80d8 	beq.w	800b4da <_printf_i+0x1d2>
 800b32a:	2f58      	cmp	r7, #88	; 0x58
 800b32c:	f000 80a3 	beq.w	800b476 <_printf_i+0x16e>
 800b330:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b338:	e03a      	b.n	800b3b0 <_printf_i+0xa8>
 800b33a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b33e:	2b15      	cmp	r3, #21
 800b340:	d8f6      	bhi.n	800b330 <_printf_i+0x28>
 800b342:	a001      	add	r0, pc, #4	; (adr r0, 800b348 <_printf_i+0x40>)
 800b344:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b348:	0800b3a1 	.word	0x0800b3a1
 800b34c:	0800b3b5 	.word	0x0800b3b5
 800b350:	0800b331 	.word	0x0800b331
 800b354:	0800b331 	.word	0x0800b331
 800b358:	0800b331 	.word	0x0800b331
 800b35c:	0800b331 	.word	0x0800b331
 800b360:	0800b3b5 	.word	0x0800b3b5
 800b364:	0800b331 	.word	0x0800b331
 800b368:	0800b331 	.word	0x0800b331
 800b36c:	0800b331 	.word	0x0800b331
 800b370:	0800b331 	.word	0x0800b331
 800b374:	0800b4c1 	.word	0x0800b4c1
 800b378:	0800b3e5 	.word	0x0800b3e5
 800b37c:	0800b4a3 	.word	0x0800b4a3
 800b380:	0800b331 	.word	0x0800b331
 800b384:	0800b331 	.word	0x0800b331
 800b388:	0800b4e3 	.word	0x0800b4e3
 800b38c:	0800b331 	.word	0x0800b331
 800b390:	0800b3e5 	.word	0x0800b3e5
 800b394:	0800b331 	.word	0x0800b331
 800b398:	0800b331 	.word	0x0800b331
 800b39c:	0800b4ab 	.word	0x0800b4ab
 800b3a0:	680b      	ldr	r3, [r1, #0]
 800b3a2:	1d1a      	adds	r2, r3, #4
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	600a      	str	r2, [r1, #0]
 800b3a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b3ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e0a3      	b.n	800b4fc <_printf_i+0x1f4>
 800b3b4:	6825      	ldr	r5, [r4, #0]
 800b3b6:	6808      	ldr	r0, [r1, #0]
 800b3b8:	062e      	lsls	r6, r5, #24
 800b3ba:	f100 0304 	add.w	r3, r0, #4
 800b3be:	d50a      	bpl.n	800b3d6 <_printf_i+0xce>
 800b3c0:	6805      	ldr	r5, [r0, #0]
 800b3c2:	600b      	str	r3, [r1, #0]
 800b3c4:	2d00      	cmp	r5, #0
 800b3c6:	da03      	bge.n	800b3d0 <_printf_i+0xc8>
 800b3c8:	232d      	movs	r3, #45	; 0x2d
 800b3ca:	426d      	negs	r5, r5
 800b3cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3d0:	485e      	ldr	r0, [pc, #376]	; (800b54c <_printf_i+0x244>)
 800b3d2:	230a      	movs	r3, #10
 800b3d4:	e019      	b.n	800b40a <_printf_i+0x102>
 800b3d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b3da:	6805      	ldr	r5, [r0, #0]
 800b3dc:	600b      	str	r3, [r1, #0]
 800b3de:	bf18      	it	ne
 800b3e0:	b22d      	sxthne	r5, r5
 800b3e2:	e7ef      	b.n	800b3c4 <_printf_i+0xbc>
 800b3e4:	680b      	ldr	r3, [r1, #0]
 800b3e6:	6825      	ldr	r5, [r4, #0]
 800b3e8:	1d18      	adds	r0, r3, #4
 800b3ea:	6008      	str	r0, [r1, #0]
 800b3ec:	0628      	lsls	r0, r5, #24
 800b3ee:	d501      	bpl.n	800b3f4 <_printf_i+0xec>
 800b3f0:	681d      	ldr	r5, [r3, #0]
 800b3f2:	e002      	b.n	800b3fa <_printf_i+0xf2>
 800b3f4:	0669      	lsls	r1, r5, #25
 800b3f6:	d5fb      	bpl.n	800b3f0 <_printf_i+0xe8>
 800b3f8:	881d      	ldrh	r5, [r3, #0]
 800b3fa:	4854      	ldr	r0, [pc, #336]	; (800b54c <_printf_i+0x244>)
 800b3fc:	2f6f      	cmp	r7, #111	; 0x6f
 800b3fe:	bf0c      	ite	eq
 800b400:	2308      	moveq	r3, #8
 800b402:	230a      	movne	r3, #10
 800b404:	2100      	movs	r1, #0
 800b406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b40a:	6866      	ldr	r6, [r4, #4]
 800b40c:	60a6      	str	r6, [r4, #8]
 800b40e:	2e00      	cmp	r6, #0
 800b410:	bfa2      	ittt	ge
 800b412:	6821      	ldrge	r1, [r4, #0]
 800b414:	f021 0104 	bicge.w	r1, r1, #4
 800b418:	6021      	strge	r1, [r4, #0]
 800b41a:	b90d      	cbnz	r5, 800b420 <_printf_i+0x118>
 800b41c:	2e00      	cmp	r6, #0
 800b41e:	d04d      	beq.n	800b4bc <_printf_i+0x1b4>
 800b420:	4616      	mov	r6, r2
 800b422:	fbb5 f1f3 	udiv	r1, r5, r3
 800b426:	fb03 5711 	mls	r7, r3, r1, r5
 800b42a:	5dc7      	ldrb	r7, [r0, r7]
 800b42c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b430:	462f      	mov	r7, r5
 800b432:	42bb      	cmp	r3, r7
 800b434:	460d      	mov	r5, r1
 800b436:	d9f4      	bls.n	800b422 <_printf_i+0x11a>
 800b438:	2b08      	cmp	r3, #8
 800b43a:	d10b      	bne.n	800b454 <_printf_i+0x14c>
 800b43c:	6823      	ldr	r3, [r4, #0]
 800b43e:	07df      	lsls	r7, r3, #31
 800b440:	d508      	bpl.n	800b454 <_printf_i+0x14c>
 800b442:	6923      	ldr	r3, [r4, #16]
 800b444:	6861      	ldr	r1, [r4, #4]
 800b446:	4299      	cmp	r1, r3
 800b448:	bfde      	ittt	le
 800b44a:	2330      	movle	r3, #48	; 0x30
 800b44c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b450:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b454:	1b92      	subs	r2, r2, r6
 800b456:	6122      	str	r2, [r4, #16]
 800b458:	f8cd a000 	str.w	sl, [sp]
 800b45c:	464b      	mov	r3, r9
 800b45e:	aa03      	add	r2, sp, #12
 800b460:	4621      	mov	r1, r4
 800b462:	4640      	mov	r0, r8
 800b464:	f7ff fee2 	bl	800b22c <_printf_common>
 800b468:	3001      	adds	r0, #1
 800b46a:	d14c      	bne.n	800b506 <_printf_i+0x1fe>
 800b46c:	f04f 30ff 	mov.w	r0, #4294967295
 800b470:	b004      	add	sp, #16
 800b472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b476:	4835      	ldr	r0, [pc, #212]	; (800b54c <_printf_i+0x244>)
 800b478:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b47c:	6823      	ldr	r3, [r4, #0]
 800b47e:	680e      	ldr	r6, [r1, #0]
 800b480:	061f      	lsls	r7, r3, #24
 800b482:	f856 5b04 	ldr.w	r5, [r6], #4
 800b486:	600e      	str	r6, [r1, #0]
 800b488:	d514      	bpl.n	800b4b4 <_printf_i+0x1ac>
 800b48a:	07d9      	lsls	r1, r3, #31
 800b48c:	bf44      	itt	mi
 800b48e:	f043 0320 	orrmi.w	r3, r3, #32
 800b492:	6023      	strmi	r3, [r4, #0]
 800b494:	b91d      	cbnz	r5, 800b49e <_printf_i+0x196>
 800b496:	6823      	ldr	r3, [r4, #0]
 800b498:	f023 0320 	bic.w	r3, r3, #32
 800b49c:	6023      	str	r3, [r4, #0]
 800b49e:	2310      	movs	r3, #16
 800b4a0:	e7b0      	b.n	800b404 <_printf_i+0xfc>
 800b4a2:	6823      	ldr	r3, [r4, #0]
 800b4a4:	f043 0320 	orr.w	r3, r3, #32
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	2378      	movs	r3, #120	; 0x78
 800b4ac:	4828      	ldr	r0, [pc, #160]	; (800b550 <_printf_i+0x248>)
 800b4ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b4b2:	e7e3      	b.n	800b47c <_printf_i+0x174>
 800b4b4:	065e      	lsls	r6, r3, #25
 800b4b6:	bf48      	it	mi
 800b4b8:	b2ad      	uxthmi	r5, r5
 800b4ba:	e7e6      	b.n	800b48a <_printf_i+0x182>
 800b4bc:	4616      	mov	r6, r2
 800b4be:	e7bb      	b.n	800b438 <_printf_i+0x130>
 800b4c0:	680b      	ldr	r3, [r1, #0]
 800b4c2:	6826      	ldr	r6, [r4, #0]
 800b4c4:	6960      	ldr	r0, [r4, #20]
 800b4c6:	1d1d      	adds	r5, r3, #4
 800b4c8:	600d      	str	r5, [r1, #0]
 800b4ca:	0635      	lsls	r5, r6, #24
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	d501      	bpl.n	800b4d4 <_printf_i+0x1cc>
 800b4d0:	6018      	str	r0, [r3, #0]
 800b4d2:	e002      	b.n	800b4da <_printf_i+0x1d2>
 800b4d4:	0671      	lsls	r1, r6, #25
 800b4d6:	d5fb      	bpl.n	800b4d0 <_printf_i+0x1c8>
 800b4d8:	8018      	strh	r0, [r3, #0]
 800b4da:	2300      	movs	r3, #0
 800b4dc:	6123      	str	r3, [r4, #16]
 800b4de:	4616      	mov	r6, r2
 800b4e0:	e7ba      	b.n	800b458 <_printf_i+0x150>
 800b4e2:	680b      	ldr	r3, [r1, #0]
 800b4e4:	1d1a      	adds	r2, r3, #4
 800b4e6:	600a      	str	r2, [r1, #0]
 800b4e8:	681e      	ldr	r6, [r3, #0]
 800b4ea:	6862      	ldr	r2, [r4, #4]
 800b4ec:	2100      	movs	r1, #0
 800b4ee:	4630      	mov	r0, r6
 800b4f0:	f7f4 fe76 	bl	80001e0 <memchr>
 800b4f4:	b108      	cbz	r0, 800b4fa <_printf_i+0x1f2>
 800b4f6:	1b80      	subs	r0, r0, r6
 800b4f8:	6060      	str	r0, [r4, #4]
 800b4fa:	6863      	ldr	r3, [r4, #4]
 800b4fc:	6123      	str	r3, [r4, #16]
 800b4fe:	2300      	movs	r3, #0
 800b500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b504:	e7a8      	b.n	800b458 <_printf_i+0x150>
 800b506:	6923      	ldr	r3, [r4, #16]
 800b508:	4632      	mov	r2, r6
 800b50a:	4649      	mov	r1, r9
 800b50c:	4640      	mov	r0, r8
 800b50e:	47d0      	blx	sl
 800b510:	3001      	adds	r0, #1
 800b512:	d0ab      	beq.n	800b46c <_printf_i+0x164>
 800b514:	6823      	ldr	r3, [r4, #0]
 800b516:	079b      	lsls	r3, r3, #30
 800b518:	d413      	bmi.n	800b542 <_printf_i+0x23a>
 800b51a:	68e0      	ldr	r0, [r4, #12]
 800b51c:	9b03      	ldr	r3, [sp, #12]
 800b51e:	4298      	cmp	r0, r3
 800b520:	bfb8      	it	lt
 800b522:	4618      	movlt	r0, r3
 800b524:	e7a4      	b.n	800b470 <_printf_i+0x168>
 800b526:	2301      	movs	r3, #1
 800b528:	4632      	mov	r2, r6
 800b52a:	4649      	mov	r1, r9
 800b52c:	4640      	mov	r0, r8
 800b52e:	47d0      	blx	sl
 800b530:	3001      	adds	r0, #1
 800b532:	d09b      	beq.n	800b46c <_printf_i+0x164>
 800b534:	3501      	adds	r5, #1
 800b536:	68e3      	ldr	r3, [r4, #12]
 800b538:	9903      	ldr	r1, [sp, #12]
 800b53a:	1a5b      	subs	r3, r3, r1
 800b53c:	42ab      	cmp	r3, r5
 800b53e:	dcf2      	bgt.n	800b526 <_printf_i+0x21e>
 800b540:	e7eb      	b.n	800b51a <_printf_i+0x212>
 800b542:	2500      	movs	r5, #0
 800b544:	f104 0619 	add.w	r6, r4, #25
 800b548:	e7f5      	b.n	800b536 <_printf_i+0x22e>
 800b54a:	bf00      	nop
 800b54c:	080164b2 	.word	0x080164b2
 800b550:	080164c3 	.word	0x080164c3

0800b554 <siprintf>:
 800b554:	b40e      	push	{r1, r2, r3}
 800b556:	b500      	push	{lr}
 800b558:	b09c      	sub	sp, #112	; 0x70
 800b55a:	ab1d      	add	r3, sp, #116	; 0x74
 800b55c:	9002      	str	r0, [sp, #8]
 800b55e:	9006      	str	r0, [sp, #24]
 800b560:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b564:	4809      	ldr	r0, [pc, #36]	; (800b58c <siprintf+0x38>)
 800b566:	9107      	str	r1, [sp, #28]
 800b568:	9104      	str	r1, [sp, #16]
 800b56a:	4909      	ldr	r1, [pc, #36]	; (800b590 <siprintf+0x3c>)
 800b56c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b570:	9105      	str	r1, [sp, #20]
 800b572:	6800      	ldr	r0, [r0, #0]
 800b574:	9301      	str	r3, [sp, #4]
 800b576:	a902      	add	r1, sp, #8
 800b578:	f001 fb34 	bl	800cbe4 <_svfiprintf_r>
 800b57c:	9b02      	ldr	r3, [sp, #8]
 800b57e:	2200      	movs	r2, #0
 800b580:	701a      	strb	r2, [r3, #0]
 800b582:	b01c      	add	sp, #112	; 0x70
 800b584:	f85d eb04 	ldr.w	lr, [sp], #4
 800b588:	b003      	add	sp, #12
 800b58a:	4770      	bx	lr
 800b58c:	20000010 	.word	0x20000010
 800b590:	ffff0208 	.word	0xffff0208

0800b594 <quorem>:
 800b594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b598:	6903      	ldr	r3, [r0, #16]
 800b59a:	690c      	ldr	r4, [r1, #16]
 800b59c:	42a3      	cmp	r3, r4
 800b59e:	4607      	mov	r7, r0
 800b5a0:	f2c0 8081 	blt.w	800b6a6 <quorem+0x112>
 800b5a4:	3c01      	subs	r4, #1
 800b5a6:	f101 0814 	add.w	r8, r1, #20
 800b5aa:	f100 0514 	add.w	r5, r0, #20
 800b5ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5b2:	9301      	str	r3, [sp, #4]
 800b5b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b5b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b5c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b5c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5cc:	d331      	bcc.n	800b632 <quorem+0x9e>
 800b5ce:	f04f 0e00 	mov.w	lr, #0
 800b5d2:	4640      	mov	r0, r8
 800b5d4:	46ac      	mov	ip, r5
 800b5d6:	46f2      	mov	sl, lr
 800b5d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800b5dc:	b293      	uxth	r3, r2
 800b5de:	fb06 e303 	mla	r3, r6, r3, lr
 800b5e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	ebaa 0303 	sub.w	r3, sl, r3
 800b5ec:	0c12      	lsrs	r2, r2, #16
 800b5ee:	f8dc a000 	ldr.w	sl, [ip]
 800b5f2:	fb06 e202 	mla	r2, r6, r2, lr
 800b5f6:	fa13 f38a 	uxtah	r3, r3, sl
 800b5fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b5fe:	fa1f fa82 	uxth.w	sl, r2
 800b602:	f8dc 2000 	ldr.w	r2, [ip]
 800b606:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b60a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b60e:	b29b      	uxth	r3, r3
 800b610:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b614:	4581      	cmp	r9, r0
 800b616:	f84c 3b04 	str.w	r3, [ip], #4
 800b61a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b61e:	d2db      	bcs.n	800b5d8 <quorem+0x44>
 800b620:	f855 300b 	ldr.w	r3, [r5, fp]
 800b624:	b92b      	cbnz	r3, 800b632 <quorem+0x9e>
 800b626:	9b01      	ldr	r3, [sp, #4]
 800b628:	3b04      	subs	r3, #4
 800b62a:	429d      	cmp	r5, r3
 800b62c:	461a      	mov	r2, r3
 800b62e:	d32e      	bcc.n	800b68e <quorem+0xfa>
 800b630:	613c      	str	r4, [r7, #16]
 800b632:	4638      	mov	r0, r7
 800b634:	f001 f8c0 	bl	800c7b8 <__mcmp>
 800b638:	2800      	cmp	r0, #0
 800b63a:	db24      	blt.n	800b686 <quorem+0xf2>
 800b63c:	3601      	adds	r6, #1
 800b63e:	4628      	mov	r0, r5
 800b640:	f04f 0c00 	mov.w	ip, #0
 800b644:	f858 2b04 	ldr.w	r2, [r8], #4
 800b648:	f8d0 e000 	ldr.w	lr, [r0]
 800b64c:	b293      	uxth	r3, r2
 800b64e:	ebac 0303 	sub.w	r3, ip, r3
 800b652:	0c12      	lsrs	r2, r2, #16
 800b654:	fa13 f38e 	uxtah	r3, r3, lr
 800b658:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b65c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b660:	b29b      	uxth	r3, r3
 800b662:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b666:	45c1      	cmp	r9, r8
 800b668:	f840 3b04 	str.w	r3, [r0], #4
 800b66c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b670:	d2e8      	bcs.n	800b644 <quorem+0xb0>
 800b672:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b676:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b67a:	b922      	cbnz	r2, 800b686 <quorem+0xf2>
 800b67c:	3b04      	subs	r3, #4
 800b67e:	429d      	cmp	r5, r3
 800b680:	461a      	mov	r2, r3
 800b682:	d30a      	bcc.n	800b69a <quorem+0x106>
 800b684:	613c      	str	r4, [r7, #16]
 800b686:	4630      	mov	r0, r6
 800b688:	b003      	add	sp, #12
 800b68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b68e:	6812      	ldr	r2, [r2, #0]
 800b690:	3b04      	subs	r3, #4
 800b692:	2a00      	cmp	r2, #0
 800b694:	d1cc      	bne.n	800b630 <quorem+0x9c>
 800b696:	3c01      	subs	r4, #1
 800b698:	e7c7      	b.n	800b62a <quorem+0x96>
 800b69a:	6812      	ldr	r2, [r2, #0]
 800b69c:	3b04      	subs	r3, #4
 800b69e:	2a00      	cmp	r2, #0
 800b6a0:	d1f0      	bne.n	800b684 <quorem+0xf0>
 800b6a2:	3c01      	subs	r4, #1
 800b6a4:	e7eb      	b.n	800b67e <quorem+0xea>
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	e7ee      	b.n	800b688 <quorem+0xf4>
 800b6aa:	0000      	movs	r0, r0
 800b6ac:	0000      	movs	r0, r0
	...

0800b6b0 <_dtoa_r>:
 800b6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	ed2d 8b02 	vpush	{d8}
 800b6b8:	ec57 6b10 	vmov	r6, r7, d0
 800b6bc:	b095      	sub	sp, #84	; 0x54
 800b6be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b6c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b6c4:	9105      	str	r1, [sp, #20]
 800b6c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	9209      	str	r2, [sp, #36]	; 0x24
 800b6ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6d0:	b975      	cbnz	r5, 800b6f0 <_dtoa_r+0x40>
 800b6d2:	2010      	movs	r0, #16
 800b6d4:	f000 fddc 	bl	800c290 <malloc>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	6260      	str	r0, [r4, #36]	; 0x24
 800b6dc:	b920      	cbnz	r0, 800b6e8 <_dtoa_r+0x38>
 800b6de:	4bb2      	ldr	r3, [pc, #712]	; (800b9a8 <_dtoa_r+0x2f8>)
 800b6e0:	21ea      	movs	r1, #234	; 0xea
 800b6e2:	48b2      	ldr	r0, [pc, #712]	; (800b9ac <_dtoa_r+0x2fc>)
 800b6e4:	f001 fb8e 	bl	800ce04 <__assert_func>
 800b6e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b6ec:	6005      	str	r5, [r0, #0]
 800b6ee:	60c5      	str	r5, [r0, #12]
 800b6f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6f2:	6819      	ldr	r1, [r3, #0]
 800b6f4:	b151      	cbz	r1, 800b70c <_dtoa_r+0x5c>
 800b6f6:	685a      	ldr	r2, [r3, #4]
 800b6f8:	604a      	str	r2, [r1, #4]
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	4093      	lsls	r3, r2
 800b6fe:	608b      	str	r3, [r1, #8]
 800b700:	4620      	mov	r0, r4
 800b702:	f000 fe1b 	bl	800c33c <_Bfree>
 800b706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b708:	2200      	movs	r2, #0
 800b70a:	601a      	str	r2, [r3, #0]
 800b70c:	1e3b      	subs	r3, r7, #0
 800b70e:	bfb9      	ittee	lt
 800b710:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b714:	9303      	strlt	r3, [sp, #12]
 800b716:	2300      	movge	r3, #0
 800b718:	f8c8 3000 	strge.w	r3, [r8]
 800b71c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b720:	4ba3      	ldr	r3, [pc, #652]	; (800b9b0 <_dtoa_r+0x300>)
 800b722:	bfbc      	itt	lt
 800b724:	2201      	movlt	r2, #1
 800b726:	f8c8 2000 	strlt.w	r2, [r8]
 800b72a:	ea33 0309 	bics.w	r3, r3, r9
 800b72e:	d11b      	bne.n	800b768 <_dtoa_r+0xb8>
 800b730:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b732:	f242 730f 	movw	r3, #9999	; 0x270f
 800b736:	6013      	str	r3, [r2, #0]
 800b738:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b73c:	4333      	orrs	r3, r6
 800b73e:	f000 857a 	beq.w	800c236 <_dtoa_r+0xb86>
 800b742:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b744:	b963      	cbnz	r3, 800b760 <_dtoa_r+0xb0>
 800b746:	4b9b      	ldr	r3, [pc, #620]	; (800b9b4 <_dtoa_r+0x304>)
 800b748:	e024      	b.n	800b794 <_dtoa_r+0xe4>
 800b74a:	4b9b      	ldr	r3, [pc, #620]	; (800b9b8 <_dtoa_r+0x308>)
 800b74c:	9300      	str	r3, [sp, #0]
 800b74e:	3308      	adds	r3, #8
 800b750:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b752:	6013      	str	r3, [r2, #0]
 800b754:	9800      	ldr	r0, [sp, #0]
 800b756:	b015      	add	sp, #84	; 0x54
 800b758:	ecbd 8b02 	vpop	{d8}
 800b75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b760:	4b94      	ldr	r3, [pc, #592]	; (800b9b4 <_dtoa_r+0x304>)
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	3303      	adds	r3, #3
 800b766:	e7f3      	b.n	800b750 <_dtoa_r+0xa0>
 800b768:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b76c:	2200      	movs	r2, #0
 800b76e:	ec51 0b17 	vmov	r0, r1, d7
 800b772:	2300      	movs	r3, #0
 800b774:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b778:	f7f5 f9a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b77c:	4680      	mov	r8, r0
 800b77e:	b158      	cbz	r0, 800b798 <_dtoa_r+0xe8>
 800b780:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b782:	2301      	movs	r3, #1
 800b784:	6013      	str	r3, [r2, #0]
 800b786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b788:	2b00      	cmp	r3, #0
 800b78a:	f000 8551 	beq.w	800c230 <_dtoa_r+0xb80>
 800b78e:	488b      	ldr	r0, [pc, #556]	; (800b9bc <_dtoa_r+0x30c>)
 800b790:	6018      	str	r0, [r3, #0]
 800b792:	1e43      	subs	r3, r0, #1
 800b794:	9300      	str	r3, [sp, #0]
 800b796:	e7dd      	b.n	800b754 <_dtoa_r+0xa4>
 800b798:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b79c:	aa12      	add	r2, sp, #72	; 0x48
 800b79e:	a913      	add	r1, sp, #76	; 0x4c
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	f001 f8ad 	bl	800c900 <__d2b>
 800b7a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b7aa:	4683      	mov	fp, r0
 800b7ac:	2d00      	cmp	r5, #0
 800b7ae:	d07c      	beq.n	800b8aa <_dtoa_r+0x1fa>
 800b7b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b7b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b7be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b7c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b7c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b7ca:	4b7d      	ldr	r3, [pc, #500]	; (800b9c0 <_dtoa_r+0x310>)
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	4630      	mov	r0, r6
 800b7d0:	4639      	mov	r1, r7
 800b7d2:	f7f4 fd59 	bl	8000288 <__aeabi_dsub>
 800b7d6:	a36e      	add	r3, pc, #440	; (adr r3, 800b990 <_dtoa_r+0x2e0>)
 800b7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7dc:	f7f4 ff0c 	bl	80005f8 <__aeabi_dmul>
 800b7e0:	a36d      	add	r3, pc, #436	; (adr r3, 800b998 <_dtoa_r+0x2e8>)
 800b7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e6:	f7f4 fd51 	bl	800028c <__adddf3>
 800b7ea:	4606      	mov	r6, r0
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	460f      	mov	r7, r1
 800b7f0:	f7f4 fe98 	bl	8000524 <__aeabi_i2d>
 800b7f4:	a36a      	add	r3, pc, #424	; (adr r3, 800b9a0 <_dtoa_r+0x2f0>)
 800b7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fa:	f7f4 fefd 	bl	80005f8 <__aeabi_dmul>
 800b7fe:	4602      	mov	r2, r0
 800b800:	460b      	mov	r3, r1
 800b802:	4630      	mov	r0, r6
 800b804:	4639      	mov	r1, r7
 800b806:	f7f4 fd41 	bl	800028c <__adddf3>
 800b80a:	4606      	mov	r6, r0
 800b80c:	460f      	mov	r7, r1
 800b80e:	f7f5 f9a3 	bl	8000b58 <__aeabi_d2iz>
 800b812:	2200      	movs	r2, #0
 800b814:	4682      	mov	sl, r0
 800b816:	2300      	movs	r3, #0
 800b818:	4630      	mov	r0, r6
 800b81a:	4639      	mov	r1, r7
 800b81c:	f7f5 f95e 	bl	8000adc <__aeabi_dcmplt>
 800b820:	b148      	cbz	r0, 800b836 <_dtoa_r+0x186>
 800b822:	4650      	mov	r0, sl
 800b824:	f7f4 fe7e 	bl	8000524 <__aeabi_i2d>
 800b828:	4632      	mov	r2, r6
 800b82a:	463b      	mov	r3, r7
 800b82c:	f7f5 f94c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b830:	b908      	cbnz	r0, 800b836 <_dtoa_r+0x186>
 800b832:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b836:	f1ba 0f16 	cmp.w	sl, #22
 800b83a:	d854      	bhi.n	800b8e6 <_dtoa_r+0x236>
 800b83c:	4b61      	ldr	r3, [pc, #388]	; (800b9c4 <_dtoa_r+0x314>)
 800b83e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b846:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b84a:	f7f5 f947 	bl	8000adc <__aeabi_dcmplt>
 800b84e:	2800      	cmp	r0, #0
 800b850:	d04b      	beq.n	800b8ea <_dtoa_r+0x23a>
 800b852:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b856:	2300      	movs	r3, #0
 800b858:	930e      	str	r3, [sp, #56]	; 0x38
 800b85a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b85c:	1b5d      	subs	r5, r3, r5
 800b85e:	1e6b      	subs	r3, r5, #1
 800b860:	9304      	str	r3, [sp, #16]
 800b862:	bf43      	ittte	mi
 800b864:	2300      	movmi	r3, #0
 800b866:	f1c5 0801 	rsbmi	r8, r5, #1
 800b86a:	9304      	strmi	r3, [sp, #16]
 800b86c:	f04f 0800 	movpl.w	r8, #0
 800b870:	f1ba 0f00 	cmp.w	sl, #0
 800b874:	db3b      	blt.n	800b8ee <_dtoa_r+0x23e>
 800b876:	9b04      	ldr	r3, [sp, #16]
 800b878:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b87c:	4453      	add	r3, sl
 800b87e:	9304      	str	r3, [sp, #16]
 800b880:	2300      	movs	r3, #0
 800b882:	9306      	str	r3, [sp, #24]
 800b884:	9b05      	ldr	r3, [sp, #20]
 800b886:	2b09      	cmp	r3, #9
 800b888:	d869      	bhi.n	800b95e <_dtoa_r+0x2ae>
 800b88a:	2b05      	cmp	r3, #5
 800b88c:	bfc4      	itt	gt
 800b88e:	3b04      	subgt	r3, #4
 800b890:	9305      	strgt	r3, [sp, #20]
 800b892:	9b05      	ldr	r3, [sp, #20]
 800b894:	f1a3 0302 	sub.w	r3, r3, #2
 800b898:	bfcc      	ite	gt
 800b89a:	2500      	movgt	r5, #0
 800b89c:	2501      	movle	r5, #1
 800b89e:	2b03      	cmp	r3, #3
 800b8a0:	d869      	bhi.n	800b976 <_dtoa_r+0x2c6>
 800b8a2:	e8df f003 	tbb	[pc, r3]
 800b8a6:	4e2c      	.short	0x4e2c
 800b8a8:	5a4c      	.short	0x5a4c
 800b8aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b8ae:	441d      	add	r5, r3
 800b8b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b8b4:	2b20      	cmp	r3, #32
 800b8b6:	bfc1      	itttt	gt
 800b8b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b8bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b8c0:	fa09 f303 	lslgt.w	r3, r9, r3
 800b8c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b8c8:	bfda      	itte	le
 800b8ca:	f1c3 0320 	rsble	r3, r3, #32
 800b8ce:	fa06 f003 	lslle.w	r0, r6, r3
 800b8d2:	4318      	orrgt	r0, r3
 800b8d4:	f7f4 fe16 	bl	8000504 <__aeabi_ui2d>
 800b8d8:	2301      	movs	r3, #1
 800b8da:	4606      	mov	r6, r0
 800b8dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b8e0:	3d01      	subs	r5, #1
 800b8e2:	9310      	str	r3, [sp, #64]	; 0x40
 800b8e4:	e771      	b.n	800b7ca <_dtoa_r+0x11a>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	e7b6      	b.n	800b858 <_dtoa_r+0x1a8>
 800b8ea:	900e      	str	r0, [sp, #56]	; 0x38
 800b8ec:	e7b5      	b.n	800b85a <_dtoa_r+0x1aa>
 800b8ee:	f1ca 0300 	rsb	r3, sl, #0
 800b8f2:	9306      	str	r3, [sp, #24]
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	eba8 080a 	sub.w	r8, r8, sl
 800b8fa:	930d      	str	r3, [sp, #52]	; 0x34
 800b8fc:	e7c2      	b.n	800b884 <_dtoa_r+0x1d4>
 800b8fe:	2300      	movs	r3, #0
 800b900:	9308      	str	r3, [sp, #32]
 800b902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b904:	2b00      	cmp	r3, #0
 800b906:	dc39      	bgt.n	800b97c <_dtoa_r+0x2cc>
 800b908:	f04f 0901 	mov.w	r9, #1
 800b90c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b910:	464b      	mov	r3, r9
 800b912:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b916:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b918:	2200      	movs	r2, #0
 800b91a:	6042      	str	r2, [r0, #4]
 800b91c:	2204      	movs	r2, #4
 800b91e:	f102 0614 	add.w	r6, r2, #20
 800b922:	429e      	cmp	r6, r3
 800b924:	6841      	ldr	r1, [r0, #4]
 800b926:	d92f      	bls.n	800b988 <_dtoa_r+0x2d8>
 800b928:	4620      	mov	r0, r4
 800b92a:	f000 fcc7 	bl	800c2bc <_Balloc>
 800b92e:	9000      	str	r0, [sp, #0]
 800b930:	2800      	cmp	r0, #0
 800b932:	d14b      	bne.n	800b9cc <_dtoa_r+0x31c>
 800b934:	4b24      	ldr	r3, [pc, #144]	; (800b9c8 <_dtoa_r+0x318>)
 800b936:	4602      	mov	r2, r0
 800b938:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b93c:	e6d1      	b.n	800b6e2 <_dtoa_r+0x32>
 800b93e:	2301      	movs	r3, #1
 800b940:	e7de      	b.n	800b900 <_dtoa_r+0x250>
 800b942:	2300      	movs	r3, #0
 800b944:	9308      	str	r3, [sp, #32]
 800b946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b948:	eb0a 0903 	add.w	r9, sl, r3
 800b94c:	f109 0301 	add.w	r3, r9, #1
 800b950:	2b01      	cmp	r3, #1
 800b952:	9301      	str	r3, [sp, #4]
 800b954:	bfb8      	it	lt
 800b956:	2301      	movlt	r3, #1
 800b958:	e7dd      	b.n	800b916 <_dtoa_r+0x266>
 800b95a:	2301      	movs	r3, #1
 800b95c:	e7f2      	b.n	800b944 <_dtoa_r+0x294>
 800b95e:	2501      	movs	r5, #1
 800b960:	2300      	movs	r3, #0
 800b962:	9305      	str	r3, [sp, #20]
 800b964:	9508      	str	r5, [sp, #32]
 800b966:	f04f 39ff 	mov.w	r9, #4294967295
 800b96a:	2200      	movs	r2, #0
 800b96c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b970:	2312      	movs	r3, #18
 800b972:	9209      	str	r2, [sp, #36]	; 0x24
 800b974:	e7cf      	b.n	800b916 <_dtoa_r+0x266>
 800b976:	2301      	movs	r3, #1
 800b978:	9308      	str	r3, [sp, #32]
 800b97a:	e7f4      	b.n	800b966 <_dtoa_r+0x2b6>
 800b97c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b980:	f8cd 9004 	str.w	r9, [sp, #4]
 800b984:	464b      	mov	r3, r9
 800b986:	e7c6      	b.n	800b916 <_dtoa_r+0x266>
 800b988:	3101      	adds	r1, #1
 800b98a:	6041      	str	r1, [r0, #4]
 800b98c:	0052      	lsls	r2, r2, #1
 800b98e:	e7c6      	b.n	800b91e <_dtoa_r+0x26e>
 800b990:	636f4361 	.word	0x636f4361
 800b994:	3fd287a7 	.word	0x3fd287a7
 800b998:	8b60c8b3 	.word	0x8b60c8b3
 800b99c:	3fc68a28 	.word	0x3fc68a28
 800b9a0:	509f79fb 	.word	0x509f79fb
 800b9a4:	3fd34413 	.word	0x3fd34413
 800b9a8:	080164e1 	.word	0x080164e1
 800b9ac:	080164f8 	.word	0x080164f8
 800b9b0:	7ff00000 	.word	0x7ff00000
 800b9b4:	080164dd 	.word	0x080164dd
 800b9b8:	080164d4 	.word	0x080164d4
 800b9bc:	080164b1 	.word	0x080164b1
 800b9c0:	3ff80000 	.word	0x3ff80000
 800b9c4:	080165f0 	.word	0x080165f0
 800b9c8:	08016557 	.word	0x08016557
 800b9cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9ce:	9a00      	ldr	r2, [sp, #0]
 800b9d0:	601a      	str	r2, [r3, #0]
 800b9d2:	9b01      	ldr	r3, [sp, #4]
 800b9d4:	2b0e      	cmp	r3, #14
 800b9d6:	f200 80ad 	bhi.w	800bb34 <_dtoa_r+0x484>
 800b9da:	2d00      	cmp	r5, #0
 800b9dc:	f000 80aa 	beq.w	800bb34 <_dtoa_r+0x484>
 800b9e0:	f1ba 0f00 	cmp.w	sl, #0
 800b9e4:	dd36      	ble.n	800ba54 <_dtoa_r+0x3a4>
 800b9e6:	4ac3      	ldr	r2, [pc, #780]	; (800bcf4 <_dtoa_r+0x644>)
 800b9e8:	f00a 030f 	and.w	r3, sl, #15
 800b9ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b9f0:	ed93 7b00 	vldr	d7, [r3]
 800b9f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b9f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b9fc:	eeb0 8a47 	vmov.f32	s16, s14
 800ba00:	eef0 8a67 	vmov.f32	s17, s15
 800ba04:	d016      	beq.n	800ba34 <_dtoa_r+0x384>
 800ba06:	4bbc      	ldr	r3, [pc, #752]	; (800bcf8 <_dtoa_r+0x648>)
 800ba08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ba0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba10:	f7f4 ff1c 	bl	800084c <__aeabi_ddiv>
 800ba14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba18:	f007 070f 	and.w	r7, r7, #15
 800ba1c:	2503      	movs	r5, #3
 800ba1e:	4eb6      	ldr	r6, [pc, #728]	; (800bcf8 <_dtoa_r+0x648>)
 800ba20:	b957      	cbnz	r7, 800ba38 <_dtoa_r+0x388>
 800ba22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba26:	ec53 2b18 	vmov	r2, r3, d8
 800ba2a:	f7f4 ff0f 	bl	800084c <__aeabi_ddiv>
 800ba2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba32:	e029      	b.n	800ba88 <_dtoa_r+0x3d8>
 800ba34:	2502      	movs	r5, #2
 800ba36:	e7f2      	b.n	800ba1e <_dtoa_r+0x36e>
 800ba38:	07f9      	lsls	r1, r7, #31
 800ba3a:	d508      	bpl.n	800ba4e <_dtoa_r+0x39e>
 800ba3c:	ec51 0b18 	vmov	r0, r1, d8
 800ba40:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba44:	f7f4 fdd8 	bl	80005f8 <__aeabi_dmul>
 800ba48:	ec41 0b18 	vmov	d8, r0, r1
 800ba4c:	3501      	adds	r5, #1
 800ba4e:	107f      	asrs	r7, r7, #1
 800ba50:	3608      	adds	r6, #8
 800ba52:	e7e5      	b.n	800ba20 <_dtoa_r+0x370>
 800ba54:	f000 80a6 	beq.w	800bba4 <_dtoa_r+0x4f4>
 800ba58:	f1ca 0600 	rsb	r6, sl, #0
 800ba5c:	4ba5      	ldr	r3, [pc, #660]	; (800bcf4 <_dtoa_r+0x644>)
 800ba5e:	4fa6      	ldr	r7, [pc, #664]	; (800bcf8 <_dtoa_r+0x648>)
 800ba60:	f006 020f 	and.w	r2, r6, #15
 800ba64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ba70:	f7f4 fdc2 	bl	80005f8 <__aeabi_dmul>
 800ba74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba78:	1136      	asrs	r6, r6, #4
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	2502      	movs	r5, #2
 800ba7e:	2e00      	cmp	r6, #0
 800ba80:	f040 8085 	bne.w	800bb8e <_dtoa_r+0x4de>
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d1d2      	bne.n	800ba2e <_dtoa_r+0x37e>
 800ba88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f000 808c 	beq.w	800bba8 <_dtoa_r+0x4f8>
 800ba90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ba94:	4b99      	ldr	r3, [pc, #612]	; (800bcfc <_dtoa_r+0x64c>)
 800ba96:	2200      	movs	r2, #0
 800ba98:	4630      	mov	r0, r6
 800ba9a:	4639      	mov	r1, r7
 800ba9c:	f7f5 f81e 	bl	8000adc <__aeabi_dcmplt>
 800baa0:	2800      	cmp	r0, #0
 800baa2:	f000 8081 	beq.w	800bba8 <_dtoa_r+0x4f8>
 800baa6:	9b01      	ldr	r3, [sp, #4]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d07d      	beq.n	800bba8 <_dtoa_r+0x4f8>
 800baac:	f1b9 0f00 	cmp.w	r9, #0
 800bab0:	dd3c      	ble.n	800bb2c <_dtoa_r+0x47c>
 800bab2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bab6:	9307      	str	r3, [sp, #28]
 800bab8:	2200      	movs	r2, #0
 800baba:	4b91      	ldr	r3, [pc, #580]	; (800bd00 <_dtoa_r+0x650>)
 800babc:	4630      	mov	r0, r6
 800babe:	4639      	mov	r1, r7
 800bac0:	f7f4 fd9a 	bl	80005f8 <__aeabi_dmul>
 800bac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bac8:	3501      	adds	r5, #1
 800baca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800bace:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bad2:	4628      	mov	r0, r5
 800bad4:	f7f4 fd26 	bl	8000524 <__aeabi_i2d>
 800bad8:	4632      	mov	r2, r6
 800bada:	463b      	mov	r3, r7
 800badc:	f7f4 fd8c 	bl	80005f8 <__aeabi_dmul>
 800bae0:	4b88      	ldr	r3, [pc, #544]	; (800bd04 <_dtoa_r+0x654>)
 800bae2:	2200      	movs	r2, #0
 800bae4:	f7f4 fbd2 	bl	800028c <__adddf3>
 800bae8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800baec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baf0:	9303      	str	r3, [sp, #12]
 800baf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d15c      	bne.n	800bbb2 <_dtoa_r+0x502>
 800baf8:	4b83      	ldr	r3, [pc, #524]	; (800bd08 <_dtoa_r+0x658>)
 800bafa:	2200      	movs	r2, #0
 800bafc:	4630      	mov	r0, r6
 800bafe:	4639      	mov	r1, r7
 800bb00:	f7f4 fbc2 	bl	8000288 <__aeabi_dsub>
 800bb04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb08:	4606      	mov	r6, r0
 800bb0a:	460f      	mov	r7, r1
 800bb0c:	f7f5 f804 	bl	8000b18 <__aeabi_dcmpgt>
 800bb10:	2800      	cmp	r0, #0
 800bb12:	f040 8296 	bne.w	800c042 <_dtoa_r+0x992>
 800bb16:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bb1a:	4630      	mov	r0, r6
 800bb1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb20:	4639      	mov	r1, r7
 800bb22:	f7f4 ffdb 	bl	8000adc <__aeabi_dcmplt>
 800bb26:	2800      	cmp	r0, #0
 800bb28:	f040 8288 	bne.w	800c03c <_dtoa_r+0x98c>
 800bb2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bb30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bb34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f2c0 8158 	blt.w	800bdec <_dtoa_r+0x73c>
 800bb3c:	f1ba 0f0e 	cmp.w	sl, #14
 800bb40:	f300 8154 	bgt.w	800bdec <_dtoa_r+0x73c>
 800bb44:	4b6b      	ldr	r3, [pc, #428]	; (800bcf4 <_dtoa_r+0x644>)
 800bb46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bb4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	f280 80e3 	bge.w	800bd1c <_dtoa_r+0x66c>
 800bb56:	9b01      	ldr	r3, [sp, #4]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	f300 80df 	bgt.w	800bd1c <_dtoa_r+0x66c>
 800bb5e:	f040 826d 	bne.w	800c03c <_dtoa_r+0x98c>
 800bb62:	4b69      	ldr	r3, [pc, #420]	; (800bd08 <_dtoa_r+0x658>)
 800bb64:	2200      	movs	r2, #0
 800bb66:	4640      	mov	r0, r8
 800bb68:	4649      	mov	r1, r9
 800bb6a:	f7f4 fd45 	bl	80005f8 <__aeabi_dmul>
 800bb6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb72:	f7f4 ffc7 	bl	8000b04 <__aeabi_dcmpge>
 800bb76:	9e01      	ldr	r6, [sp, #4]
 800bb78:	4637      	mov	r7, r6
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	f040 8243 	bne.w	800c006 <_dtoa_r+0x956>
 800bb80:	9d00      	ldr	r5, [sp, #0]
 800bb82:	2331      	movs	r3, #49	; 0x31
 800bb84:	f805 3b01 	strb.w	r3, [r5], #1
 800bb88:	f10a 0a01 	add.w	sl, sl, #1
 800bb8c:	e23f      	b.n	800c00e <_dtoa_r+0x95e>
 800bb8e:	07f2      	lsls	r2, r6, #31
 800bb90:	d505      	bpl.n	800bb9e <_dtoa_r+0x4ee>
 800bb92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb96:	f7f4 fd2f 	bl	80005f8 <__aeabi_dmul>
 800bb9a:	3501      	adds	r5, #1
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	1076      	asrs	r6, r6, #1
 800bba0:	3708      	adds	r7, #8
 800bba2:	e76c      	b.n	800ba7e <_dtoa_r+0x3ce>
 800bba4:	2502      	movs	r5, #2
 800bba6:	e76f      	b.n	800ba88 <_dtoa_r+0x3d8>
 800bba8:	9b01      	ldr	r3, [sp, #4]
 800bbaa:	f8cd a01c 	str.w	sl, [sp, #28]
 800bbae:	930c      	str	r3, [sp, #48]	; 0x30
 800bbb0:	e78d      	b.n	800bace <_dtoa_r+0x41e>
 800bbb2:	9900      	ldr	r1, [sp, #0]
 800bbb4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bbb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bbb8:	4b4e      	ldr	r3, [pc, #312]	; (800bcf4 <_dtoa_r+0x644>)
 800bbba:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bbbe:	4401      	add	r1, r0
 800bbc0:	9102      	str	r1, [sp, #8]
 800bbc2:	9908      	ldr	r1, [sp, #32]
 800bbc4:	eeb0 8a47 	vmov.f32	s16, s14
 800bbc8:	eef0 8a67 	vmov.f32	s17, s15
 800bbcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bbd4:	2900      	cmp	r1, #0
 800bbd6:	d045      	beq.n	800bc64 <_dtoa_r+0x5b4>
 800bbd8:	494c      	ldr	r1, [pc, #304]	; (800bd0c <_dtoa_r+0x65c>)
 800bbda:	2000      	movs	r0, #0
 800bbdc:	f7f4 fe36 	bl	800084c <__aeabi_ddiv>
 800bbe0:	ec53 2b18 	vmov	r2, r3, d8
 800bbe4:	f7f4 fb50 	bl	8000288 <__aeabi_dsub>
 800bbe8:	9d00      	ldr	r5, [sp, #0]
 800bbea:	ec41 0b18 	vmov	d8, r0, r1
 800bbee:	4639      	mov	r1, r7
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	f7f4 ffb1 	bl	8000b58 <__aeabi_d2iz>
 800bbf6:	900c      	str	r0, [sp, #48]	; 0x30
 800bbf8:	f7f4 fc94 	bl	8000524 <__aeabi_i2d>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	460b      	mov	r3, r1
 800bc00:	4630      	mov	r0, r6
 800bc02:	4639      	mov	r1, r7
 800bc04:	f7f4 fb40 	bl	8000288 <__aeabi_dsub>
 800bc08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc0a:	3330      	adds	r3, #48	; 0x30
 800bc0c:	f805 3b01 	strb.w	r3, [r5], #1
 800bc10:	ec53 2b18 	vmov	r2, r3, d8
 800bc14:	4606      	mov	r6, r0
 800bc16:	460f      	mov	r7, r1
 800bc18:	f7f4 ff60 	bl	8000adc <__aeabi_dcmplt>
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	d165      	bne.n	800bcec <_dtoa_r+0x63c>
 800bc20:	4632      	mov	r2, r6
 800bc22:	463b      	mov	r3, r7
 800bc24:	4935      	ldr	r1, [pc, #212]	; (800bcfc <_dtoa_r+0x64c>)
 800bc26:	2000      	movs	r0, #0
 800bc28:	f7f4 fb2e 	bl	8000288 <__aeabi_dsub>
 800bc2c:	ec53 2b18 	vmov	r2, r3, d8
 800bc30:	f7f4 ff54 	bl	8000adc <__aeabi_dcmplt>
 800bc34:	2800      	cmp	r0, #0
 800bc36:	f040 80b9 	bne.w	800bdac <_dtoa_r+0x6fc>
 800bc3a:	9b02      	ldr	r3, [sp, #8]
 800bc3c:	429d      	cmp	r5, r3
 800bc3e:	f43f af75 	beq.w	800bb2c <_dtoa_r+0x47c>
 800bc42:	4b2f      	ldr	r3, [pc, #188]	; (800bd00 <_dtoa_r+0x650>)
 800bc44:	ec51 0b18 	vmov	r0, r1, d8
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f7f4 fcd5 	bl	80005f8 <__aeabi_dmul>
 800bc4e:	4b2c      	ldr	r3, [pc, #176]	; (800bd00 <_dtoa_r+0x650>)
 800bc50:	ec41 0b18 	vmov	d8, r0, r1
 800bc54:	2200      	movs	r2, #0
 800bc56:	4630      	mov	r0, r6
 800bc58:	4639      	mov	r1, r7
 800bc5a:	f7f4 fccd 	bl	80005f8 <__aeabi_dmul>
 800bc5e:	4606      	mov	r6, r0
 800bc60:	460f      	mov	r7, r1
 800bc62:	e7c4      	b.n	800bbee <_dtoa_r+0x53e>
 800bc64:	ec51 0b17 	vmov	r0, r1, d7
 800bc68:	f7f4 fcc6 	bl	80005f8 <__aeabi_dmul>
 800bc6c:	9b02      	ldr	r3, [sp, #8]
 800bc6e:	9d00      	ldr	r5, [sp, #0]
 800bc70:	930c      	str	r3, [sp, #48]	; 0x30
 800bc72:	ec41 0b18 	vmov	d8, r0, r1
 800bc76:	4639      	mov	r1, r7
 800bc78:	4630      	mov	r0, r6
 800bc7a:	f7f4 ff6d 	bl	8000b58 <__aeabi_d2iz>
 800bc7e:	9011      	str	r0, [sp, #68]	; 0x44
 800bc80:	f7f4 fc50 	bl	8000524 <__aeabi_i2d>
 800bc84:	4602      	mov	r2, r0
 800bc86:	460b      	mov	r3, r1
 800bc88:	4630      	mov	r0, r6
 800bc8a:	4639      	mov	r1, r7
 800bc8c:	f7f4 fafc 	bl	8000288 <__aeabi_dsub>
 800bc90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc92:	3330      	adds	r3, #48	; 0x30
 800bc94:	f805 3b01 	strb.w	r3, [r5], #1
 800bc98:	9b02      	ldr	r3, [sp, #8]
 800bc9a:	429d      	cmp	r5, r3
 800bc9c:	4606      	mov	r6, r0
 800bc9e:	460f      	mov	r7, r1
 800bca0:	f04f 0200 	mov.w	r2, #0
 800bca4:	d134      	bne.n	800bd10 <_dtoa_r+0x660>
 800bca6:	4b19      	ldr	r3, [pc, #100]	; (800bd0c <_dtoa_r+0x65c>)
 800bca8:	ec51 0b18 	vmov	r0, r1, d8
 800bcac:	f7f4 faee 	bl	800028c <__adddf3>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	4639      	mov	r1, r7
 800bcb8:	f7f4 ff2e 	bl	8000b18 <__aeabi_dcmpgt>
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	d175      	bne.n	800bdac <_dtoa_r+0x6fc>
 800bcc0:	ec53 2b18 	vmov	r2, r3, d8
 800bcc4:	4911      	ldr	r1, [pc, #68]	; (800bd0c <_dtoa_r+0x65c>)
 800bcc6:	2000      	movs	r0, #0
 800bcc8:	f7f4 fade 	bl	8000288 <__aeabi_dsub>
 800bccc:	4602      	mov	r2, r0
 800bcce:	460b      	mov	r3, r1
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	4639      	mov	r1, r7
 800bcd4:	f7f4 ff02 	bl	8000adc <__aeabi_dcmplt>
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	f43f af27 	beq.w	800bb2c <_dtoa_r+0x47c>
 800bcde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bce0:	1e6b      	subs	r3, r5, #1
 800bce2:	930c      	str	r3, [sp, #48]	; 0x30
 800bce4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bce8:	2b30      	cmp	r3, #48	; 0x30
 800bcea:	d0f8      	beq.n	800bcde <_dtoa_r+0x62e>
 800bcec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bcf0:	e04a      	b.n	800bd88 <_dtoa_r+0x6d8>
 800bcf2:	bf00      	nop
 800bcf4:	080165f0 	.word	0x080165f0
 800bcf8:	080165c8 	.word	0x080165c8
 800bcfc:	3ff00000 	.word	0x3ff00000
 800bd00:	40240000 	.word	0x40240000
 800bd04:	401c0000 	.word	0x401c0000
 800bd08:	40140000 	.word	0x40140000
 800bd0c:	3fe00000 	.word	0x3fe00000
 800bd10:	4baf      	ldr	r3, [pc, #700]	; (800bfd0 <_dtoa_r+0x920>)
 800bd12:	f7f4 fc71 	bl	80005f8 <__aeabi_dmul>
 800bd16:	4606      	mov	r6, r0
 800bd18:	460f      	mov	r7, r1
 800bd1a:	e7ac      	b.n	800bc76 <_dtoa_r+0x5c6>
 800bd1c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bd20:	9d00      	ldr	r5, [sp, #0]
 800bd22:	4642      	mov	r2, r8
 800bd24:	464b      	mov	r3, r9
 800bd26:	4630      	mov	r0, r6
 800bd28:	4639      	mov	r1, r7
 800bd2a:	f7f4 fd8f 	bl	800084c <__aeabi_ddiv>
 800bd2e:	f7f4 ff13 	bl	8000b58 <__aeabi_d2iz>
 800bd32:	9002      	str	r0, [sp, #8]
 800bd34:	f7f4 fbf6 	bl	8000524 <__aeabi_i2d>
 800bd38:	4642      	mov	r2, r8
 800bd3a:	464b      	mov	r3, r9
 800bd3c:	f7f4 fc5c 	bl	80005f8 <__aeabi_dmul>
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	4630      	mov	r0, r6
 800bd46:	4639      	mov	r1, r7
 800bd48:	f7f4 fa9e 	bl	8000288 <__aeabi_dsub>
 800bd4c:	9e02      	ldr	r6, [sp, #8]
 800bd4e:	9f01      	ldr	r7, [sp, #4]
 800bd50:	3630      	adds	r6, #48	; 0x30
 800bd52:	f805 6b01 	strb.w	r6, [r5], #1
 800bd56:	9e00      	ldr	r6, [sp, #0]
 800bd58:	1bae      	subs	r6, r5, r6
 800bd5a:	42b7      	cmp	r7, r6
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	d137      	bne.n	800bdd2 <_dtoa_r+0x722>
 800bd62:	f7f4 fa93 	bl	800028c <__adddf3>
 800bd66:	4642      	mov	r2, r8
 800bd68:	464b      	mov	r3, r9
 800bd6a:	4606      	mov	r6, r0
 800bd6c:	460f      	mov	r7, r1
 800bd6e:	f7f4 fed3 	bl	8000b18 <__aeabi_dcmpgt>
 800bd72:	b9c8      	cbnz	r0, 800bda8 <_dtoa_r+0x6f8>
 800bd74:	4642      	mov	r2, r8
 800bd76:	464b      	mov	r3, r9
 800bd78:	4630      	mov	r0, r6
 800bd7a:	4639      	mov	r1, r7
 800bd7c:	f7f4 fea4 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd80:	b110      	cbz	r0, 800bd88 <_dtoa_r+0x6d8>
 800bd82:	9b02      	ldr	r3, [sp, #8]
 800bd84:	07d9      	lsls	r1, r3, #31
 800bd86:	d40f      	bmi.n	800bda8 <_dtoa_r+0x6f8>
 800bd88:	4620      	mov	r0, r4
 800bd8a:	4659      	mov	r1, fp
 800bd8c:	f000 fad6 	bl	800c33c <_Bfree>
 800bd90:	2300      	movs	r3, #0
 800bd92:	702b      	strb	r3, [r5, #0]
 800bd94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd96:	f10a 0001 	add.w	r0, sl, #1
 800bd9a:	6018      	str	r0, [r3, #0]
 800bd9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	f43f acd8 	beq.w	800b754 <_dtoa_r+0xa4>
 800bda4:	601d      	str	r5, [r3, #0]
 800bda6:	e4d5      	b.n	800b754 <_dtoa_r+0xa4>
 800bda8:	f8cd a01c 	str.w	sl, [sp, #28]
 800bdac:	462b      	mov	r3, r5
 800bdae:	461d      	mov	r5, r3
 800bdb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdb4:	2a39      	cmp	r2, #57	; 0x39
 800bdb6:	d108      	bne.n	800bdca <_dtoa_r+0x71a>
 800bdb8:	9a00      	ldr	r2, [sp, #0]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d1f7      	bne.n	800bdae <_dtoa_r+0x6fe>
 800bdbe:	9a07      	ldr	r2, [sp, #28]
 800bdc0:	9900      	ldr	r1, [sp, #0]
 800bdc2:	3201      	adds	r2, #1
 800bdc4:	9207      	str	r2, [sp, #28]
 800bdc6:	2230      	movs	r2, #48	; 0x30
 800bdc8:	700a      	strb	r2, [r1, #0]
 800bdca:	781a      	ldrb	r2, [r3, #0]
 800bdcc:	3201      	adds	r2, #1
 800bdce:	701a      	strb	r2, [r3, #0]
 800bdd0:	e78c      	b.n	800bcec <_dtoa_r+0x63c>
 800bdd2:	4b7f      	ldr	r3, [pc, #508]	; (800bfd0 <_dtoa_r+0x920>)
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f7f4 fc0f 	bl	80005f8 <__aeabi_dmul>
 800bdda:	2200      	movs	r2, #0
 800bddc:	2300      	movs	r3, #0
 800bdde:	4606      	mov	r6, r0
 800bde0:	460f      	mov	r7, r1
 800bde2:	f7f4 fe71 	bl	8000ac8 <__aeabi_dcmpeq>
 800bde6:	2800      	cmp	r0, #0
 800bde8:	d09b      	beq.n	800bd22 <_dtoa_r+0x672>
 800bdea:	e7cd      	b.n	800bd88 <_dtoa_r+0x6d8>
 800bdec:	9a08      	ldr	r2, [sp, #32]
 800bdee:	2a00      	cmp	r2, #0
 800bdf0:	f000 80c4 	beq.w	800bf7c <_dtoa_r+0x8cc>
 800bdf4:	9a05      	ldr	r2, [sp, #20]
 800bdf6:	2a01      	cmp	r2, #1
 800bdf8:	f300 80a8 	bgt.w	800bf4c <_dtoa_r+0x89c>
 800bdfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bdfe:	2a00      	cmp	r2, #0
 800be00:	f000 80a0 	beq.w	800bf44 <_dtoa_r+0x894>
 800be04:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800be08:	9e06      	ldr	r6, [sp, #24]
 800be0a:	4645      	mov	r5, r8
 800be0c:	9a04      	ldr	r2, [sp, #16]
 800be0e:	2101      	movs	r1, #1
 800be10:	441a      	add	r2, r3
 800be12:	4620      	mov	r0, r4
 800be14:	4498      	add	r8, r3
 800be16:	9204      	str	r2, [sp, #16]
 800be18:	f000 fb4c 	bl	800c4b4 <__i2b>
 800be1c:	4607      	mov	r7, r0
 800be1e:	2d00      	cmp	r5, #0
 800be20:	dd0b      	ble.n	800be3a <_dtoa_r+0x78a>
 800be22:	9b04      	ldr	r3, [sp, #16]
 800be24:	2b00      	cmp	r3, #0
 800be26:	dd08      	ble.n	800be3a <_dtoa_r+0x78a>
 800be28:	42ab      	cmp	r3, r5
 800be2a:	9a04      	ldr	r2, [sp, #16]
 800be2c:	bfa8      	it	ge
 800be2e:	462b      	movge	r3, r5
 800be30:	eba8 0803 	sub.w	r8, r8, r3
 800be34:	1aed      	subs	r5, r5, r3
 800be36:	1ad3      	subs	r3, r2, r3
 800be38:	9304      	str	r3, [sp, #16]
 800be3a:	9b06      	ldr	r3, [sp, #24]
 800be3c:	b1fb      	cbz	r3, 800be7e <_dtoa_r+0x7ce>
 800be3e:	9b08      	ldr	r3, [sp, #32]
 800be40:	2b00      	cmp	r3, #0
 800be42:	f000 809f 	beq.w	800bf84 <_dtoa_r+0x8d4>
 800be46:	2e00      	cmp	r6, #0
 800be48:	dd11      	ble.n	800be6e <_dtoa_r+0x7be>
 800be4a:	4639      	mov	r1, r7
 800be4c:	4632      	mov	r2, r6
 800be4e:	4620      	mov	r0, r4
 800be50:	f000 fbec 	bl	800c62c <__pow5mult>
 800be54:	465a      	mov	r2, fp
 800be56:	4601      	mov	r1, r0
 800be58:	4607      	mov	r7, r0
 800be5a:	4620      	mov	r0, r4
 800be5c:	f000 fb40 	bl	800c4e0 <__multiply>
 800be60:	4659      	mov	r1, fp
 800be62:	9007      	str	r0, [sp, #28]
 800be64:	4620      	mov	r0, r4
 800be66:	f000 fa69 	bl	800c33c <_Bfree>
 800be6a:	9b07      	ldr	r3, [sp, #28]
 800be6c:	469b      	mov	fp, r3
 800be6e:	9b06      	ldr	r3, [sp, #24]
 800be70:	1b9a      	subs	r2, r3, r6
 800be72:	d004      	beq.n	800be7e <_dtoa_r+0x7ce>
 800be74:	4659      	mov	r1, fp
 800be76:	4620      	mov	r0, r4
 800be78:	f000 fbd8 	bl	800c62c <__pow5mult>
 800be7c:	4683      	mov	fp, r0
 800be7e:	2101      	movs	r1, #1
 800be80:	4620      	mov	r0, r4
 800be82:	f000 fb17 	bl	800c4b4 <__i2b>
 800be86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be88:	2b00      	cmp	r3, #0
 800be8a:	4606      	mov	r6, r0
 800be8c:	dd7c      	ble.n	800bf88 <_dtoa_r+0x8d8>
 800be8e:	461a      	mov	r2, r3
 800be90:	4601      	mov	r1, r0
 800be92:	4620      	mov	r0, r4
 800be94:	f000 fbca 	bl	800c62c <__pow5mult>
 800be98:	9b05      	ldr	r3, [sp, #20]
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	4606      	mov	r6, r0
 800be9e:	dd76      	ble.n	800bf8e <_dtoa_r+0x8de>
 800bea0:	2300      	movs	r3, #0
 800bea2:	9306      	str	r3, [sp, #24]
 800bea4:	6933      	ldr	r3, [r6, #16]
 800bea6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800beaa:	6918      	ldr	r0, [r3, #16]
 800beac:	f000 fab2 	bl	800c414 <__hi0bits>
 800beb0:	f1c0 0020 	rsb	r0, r0, #32
 800beb4:	9b04      	ldr	r3, [sp, #16]
 800beb6:	4418      	add	r0, r3
 800beb8:	f010 001f 	ands.w	r0, r0, #31
 800bebc:	f000 8086 	beq.w	800bfcc <_dtoa_r+0x91c>
 800bec0:	f1c0 0320 	rsb	r3, r0, #32
 800bec4:	2b04      	cmp	r3, #4
 800bec6:	dd7f      	ble.n	800bfc8 <_dtoa_r+0x918>
 800bec8:	f1c0 001c 	rsb	r0, r0, #28
 800becc:	9b04      	ldr	r3, [sp, #16]
 800bece:	4403      	add	r3, r0
 800bed0:	4480      	add	r8, r0
 800bed2:	4405      	add	r5, r0
 800bed4:	9304      	str	r3, [sp, #16]
 800bed6:	f1b8 0f00 	cmp.w	r8, #0
 800beda:	dd05      	ble.n	800bee8 <_dtoa_r+0x838>
 800bedc:	4659      	mov	r1, fp
 800bede:	4642      	mov	r2, r8
 800bee0:	4620      	mov	r0, r4
 800bee2:	f000 fbfd 	bl	800c6e0 <__lshift>
 800bee6:	4683      	mov	fp, r0
 800bee8:	9b04      	ldr	r3, [sp, #16]
 800beea:	2b00      	cmp	r3, #0
 800beec:	dd05      	ble.n	800befa <_dtoa_r+0x84a>
 800beee:	4631      	mov	r1, r6
 800bef0:	461a      	mov	r2, r3
 800bef2:	4620      	mov	r0, r4
 800bef4:	f000 fbf4 	bl	800c6e0 <__lshift>
 800bef8:	4606      	mov	r6, r0
 800befa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800befc:	2b00      	cmp	r3, #0
 800befe:	d069      	beq.n	800bfd4 <_dtoa_r+0x924>
 800bf00:	4631      	mov	r1, r6
 800bf02:	4658      	mov	r0, fp
 800bf04:	f000 fc58 	bl	800c7b8 <__mcmp>
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	da63      	bge.n	800bfd4 <_dtoa_r+0x924>
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	4659      	mov	r1, fp
 800bf10:	220a      	movs	r2, #10
 800bf12:	4620      	mov	r0, r4
 800bf14:	f000 fa34 	bl	800c380 <__multadd>
 800bf18:	9b08      	ldr	r3, [sp, #32]
 800bf1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf1e:	4683      	mov	fp, r0
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	f000 818f 	beq.w	800c244 <_dtoa_r+0xb94>
 800bf26:	4639      	mov	r1, r7
 800bf28:	2300      	movs	r3, #0
 800bf2a:	220a      	movs	r2, #10
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f000 fa27 	bl	800c380 <__multadd>
 800bf32:	f1b9 0f00 	cmp.w	r9, #0
 800bf36:	4607      	mov	r7, r0
 800bf38:	f300 808e 	bgt.w	800c058 <_dtoa_r+0x9a8>
 800bf3c:	9b05      	ldr	r3, [sp, #20]
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	dc50      	bgt.n	800bfe4 <_dtoa_r+0x934>
 800bf42:	e089      	b.n	800c058 <_dtoa_r+0x9a8>
 800bf44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf4a:	e75d      	b.n	800be08 <_dtoa_r+0x758>
 800bf4c:	9b01      	ldr	r3, [sp, #4]
 800bf4e:	1e5e      	subs	r6, r3, #1
 800bf50:	9b06      	ldr	r3, [sp, #24]
 800bf52:	42b3      	cmp	r3, r6
 800bf54:	bfbf      	itttt	lt
 800bf56:	9b06      	ldrlt	r3, [sp, #24]
 800bf58:	9606      	strlt	r6, [sp, #24]
 800bf5a:	1af2      	sublt	r2, r6, r3
 800bf5c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800bf5e:	bfb6      	itet	lt
 800bf60:	189b      	addlt	r3, r3, r2
 800bf62:	1b9e      	subge	r6, r3, r6
 800bf64:	930d      	strlt	r3, [sp, #52]	; 0x34
 800bf66:	9b01      	ldr	r3, [sp, #4]
 800bf68:	bfb8      	it	lt
 800bf6a:	2600      	movlt	r6, #0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	bfb5      	itete	lt
 800bf70:	eba8 0503 	sublt.w	r5, r8, r3
 800bf74:	9b01      	ldrge	r3, [sp, #4]
 800bf76:	2300      	movlt	r3, #0
 800bf78:	4645      	movge	r5, r8
 800bf7a:	e747      	b.n	800be0c <_dtoa_r+0x75c>
 800bf7c:	9e06      	ldr	r6, [sp, #24]
 800bf7e:	9f08      	ldr	r7, [sp, #32]
 800bf80:	4645      	mov	r5, r8
 800bf82:	e74c      	b.n	800be1e <_dtoa_r+0x76e>
 800bf84:	9a06      	ldr	r2, [sp, #24]
 800bf86:	e775      	b.n	800be74 <_dtoa_r+0x7c4>
 800bf88:	9b05      	ldr	r3, [sp, #20]
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	dc18      	bgt.n	800bfc0 <_dtoa_r+0x910>
 800bf8e:	9b02      	ldr	r3, [sp, #8]
 800bf90:	b9b3      	cbnz	r3, 800bfc0 <_dtoa_r+0x910>
 800bf92:	9b03      	ldr	r3, [sp, #12]
 800bf94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf98:	b9a3      	cbnz	r3, 800bfc4 <_dtoa_r+0x914>
 800bf9a:	9b03      	ldr	r3, [sp, #12]
 800bf9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bfa0:	0d1b      	lsrs	r3, r3, #20
 800bfa2:	051b      	lsls	r3, r3, #20
 800bfa4:	b12b      	cbz	r3, 800bfb2 <_dtoa_r+0x902>
 800bfa6:	9b04      	ldr	r3, [sp, #16]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	9304      	str	r3, [sp, #16]
 800bfac:	f108 0801 	add.w	r8, r8, #1
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	9306      	str	r3, [sp, #24]
 800bfb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	f47f af74 	bne.w	800bea4 <_dtoa_r+0x7f4>
 800bfbc:	2001      	movs	r0, #1
 800bfbe:	e779      	b.n	800beb4 <_dtoa_r+0x804>
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	e7f6      	b.n	800bfb2 <_dtoa_r+0x902>
 800bfc4:	9b02      	ldr	r3, [sp, #8]
 800bfc6:	e7f4      	b.n	800bfb2 <_dtoa_r+0x902>
 800bfc8:	d085      	beq.n	800bed6 <_dtoa_r+0x826>
 800bfca:	4618      	mov	r0, r3
 800bfcc:	301c      	adds	r0, #28
 800bfce:	e77d      	b.n	800becc <_dtoa_r+0x81c>
 800bfd0:	40240000 	.word	0x40240000
 800bfd4:	9b01      	ldr	r3, [sp, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	dc38      	bgt.n	800c04c <_dtoa_r+0x99c>
 800bfda:	9b05      	ldr	r3, [sp, #20]
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	dd35      	ble.n	800c04c <_dtoa_r+0x99c>
 800bfe0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bfe4:	f1b9 0f00 	cmp.w	r9, #0
 800bfe8:	d10d      	bne.n	800c006 <_dtoa_r+0x956>
 800bfea:	4631      	mov	r1, r6
 800bfec:	464b      	mov	r3, r9
 800bfee:	2205      	movs	r2, #5
 800bff0:	4620      	mov	r0, r4
 800bff2:	f000 f9c5 	bl	800c380 <__multadd>
 800bff6:	4601      	mov	r1, r0
 800bff8:	4606      	mov	r6, r0
 800bffa:	4658      	mov	r0, fp
 800bffc:	f000 fbdc 	bl	800c7b8 <__mcmp>
 800c000:	2800      	cmp	r0, #0
 800c002:	f73f adbd 	bgt.w	800bb80 <_dtoa_r+0x4d0>
 800c006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c008:	9d00      	ldr	r5, [sp, #0]
 800c00a:	ea6f 0a03 	mvn.w	sl, r3
 800c00e:	f04f 0800 	mov.w	r8, #0
 800c012:	4631      	mov	r1, r6
 800c014:	4620      	mov	r0, r4
 800c016:	f000 f991 	bl	800c33c <_Bfree>
 800c01a:	2f00      	cmp	r7, #0
 800c01c:	f43f aeb4 	beq.w	800bd88 <_dtoa_r+0x6d8>
 800c020:	f1b8 0f00 	cmp.w	r8, #0
 800c024:	d005      	beq.n	800c032 <_dtoa_r+0x982>
 800c026:	45b8      	cmp	r8, r7
 800c028:	d003      	beq.n	800c032 <_dtoa_r+0x982>
 800c02a:	4641      	mov	r1, r8
 800c02c:	4620      	mov	r0, r4
 800c02e:	f000 f985 	bl	800c33c <_Bfree>
 800c032:	4639      	mov	r1, r7
 800c034:	4620      	mov	r0, r4
 800c036:	f000 f981 	bl	800c33c <_Bfree>
 800c03a:	e6a5      	b.n	800bd88 <_dtoa_r+0x6d8>
 800c03c:	2600      	movs	r6, #0
 800c03e:	4637      	mov	r7, r6
 800c040:	e7e1      	b.n	800c006 <_dtoa_r+0x956>
 800c042:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c044:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c048:	4637      	mov	r7, r6
 800c04a:	e599      	b.n	800bb80 <_dtoa_r+0x4d0>
 800c04c:	9b08      	ldr	r3, [sp, #32]
 800c04e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c052:	2b00      	cmp	r3, #0
 800c054:	f000 80fd 	beq.w	800c252 <_dtoa_r+0xba2>
 800c058:	2d00      	cmp	r5, #0
 800c05a:	dd05      	ble.n	800c068 <_dtoa_r+0x9b8>
 800c05c:	4639      	mov	r1, r7
 800c05e:	462a      	mov	r2, r5
 800c060:	4620      	mov	r0, r4
 800c062:	f000 fb3d 	bl	800c6e0 <__lshift>
 800c066:	4607      	mov	r7, r0
 800c068:	9b06      	ldr	r3, [sp, #24]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d05c      	beq.n	800c128 <_dtoa_r+0xa78>
 800c06e:	6879      	ldr	r1, [r7, #4]
 800c070:	4620      	mov	r0, r4
 800c072:	f000 f923 	bl	800c2bc <_Balloc>
 800c076:	4605      	mov	r5, r0
 800c078:	b928      	cbnz	r0, 800c086 <_dtoa_r+0x9d6>
 800c07a:	4b80      	ldr	r3, [pc, #512]	; (800c27c <_dtoa_r+0xbcc>)
 800c07c:	4602      	mov	r2, r0
 800c07e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c082:	f7ff bb2e 	b.w	800b6e2 <_dtoa_r+0x32>
 800c086:	693a      	ldr	r2, [r7, #16]
 800c088:	3202      	adds	r2, #2
 800c08a:	0092      	lsls	r2, r2, #2
 800c08c:	f107 010c 	add.w	r1, r7, #12
 800c090:	300c      	adds	r0, #12
 800c092:	f000 f905 	bl	800c2a0 <memcpy>
 800c096:	2201      	movs	r2, #1
 800c098:	4629      	mov	r1, r5
 800c09a:	4620      	mov	r0, r4
 800c09c:	f000 fb20 	bl	800c6e0 <__lshift>
 800c0a0:	9b00      	ldr	r3, [sp, #0]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	9301      	str	r3, [sp, #4]
 800c0a6:	9b00      	ldr	r3, [sp, #0]
 800c0a8:	444b      	add	r3, r9
 800c0aa:	9307      	str	r3, [sp, #28]
 800c0ac:	9b02      	ldr	r3, [sp, #8]
 800c0ae:	f003 0301 	and.w	r3, r3, #1
 800c0b2:	46b8      	mov	r8, r7
 800c0b4:	9306      	str	r3, [sp, #24]
 800c0b6:	4607      	mov	r7, r0
 800c0b8:	9b01      	ldr	r3, [sp, #4]
 800c0ba:	4631      	mov	r1, r6
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	4658      	mov	r0, fp
 800c0c0:	9302      	str	r3, [sp, #8]
 800c0c2:	f7ff fa67 	bl	800b594 <quorem>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	3330      	adds	r3, #48	; 0x30
 800c0ca:	9004      	str	r0, [sp, #16]
 800c0cc:	4641      	mov	r1, r8
 800c0ce:	4658      	mov	r0, fp
 800c0d0:	9308      	str	r3, [sp, #32]
 800c0d2:	f000 fb71 	bl	800c7b8 <__mcmp>
 800c0d6:	463a      	mov	r2, r7
 800c0d8:	4681      	mov	r9, r0
 800c0da:	4631      	mov	r1, r6
 800c0dc:	4620      	mov	r0, r4
 800c0de:	f000 fb87 	bl	800c7f0 <__mdiff>
 800c0e2:	68c2      	ldr	r2, [r0, #12]
 800c0e4:	9b08      	ldr	r3, [sp, #32]
 800c0e6:	4605      	mov	r5, r0
 800c0e8:	bb02      	cbnz	r2, 800c12c <_dtoa_r+0xa7c>
 800c0ea:	4601      	mov	r1, r0
 800c0ec:	4658      	mov	r0, fp
 800c0ee:	f000 fb63 	bl	800c7b8 <__mcmp>
 800c0f2:	9b08      	ldr	r3, [sp, #32]
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	4629      	mov	r1, r5
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c0fe:	f000 f91d 	bl	800c33c <_Bfree>
 800c102:	9b05      	ldr	r3, [sp, #20]
 800c104:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c106:	9d01      	ldr	r5, [sp, #4]
 800c108:	ea43 0102 	orr.w	r1, r3, r2
 800c10c:	9b06      	ldr	r3, [sp, #24]
 800c10e:	430b      	orrs	r3, r1
 800c110:	9b08      	ldr	r3, [sp, #32]
 800c112:	d10d      	bne.n	800c130 <_dtoa_r+0xa80>
 800c114:	2b39      	cmp	r3, #57	; 0x39
 800c116:	d029      	beq.n	800c16c <_dtoa_r+0xabc>
 800c118:	f1b9 0f00 	cmp.w	r9, #0
 800c11c:	dd01      	ble.n	800c122 <_dtoa_r+0xa72>
 800c11e:	9b04      	ldr	r3, [sp, #16]
 800c120:	3331      	adds	r3, #49	; 0x31
 800c122:	9a02      	ldr	r2, [sp, #8]
 800c124:	7013      	strb	r3, [r2, #0]
 800c126:	e774      	b.n	800c012 <_dtoa_r+0x962>
 800c128:	4638      	mov	r0, r7
 800c12a:	e7b9      	b.n	800c0a0 <_dtoa_r+0x9f0>
 800c12c:	2201      	movs	r2, #1
 800c12e:	e7e2      	b.n	800c0f6 <_dtoa_r+0xa46>
 800c130:	f1b9 0f00 	cmp.w	r9, #0
 800c134:	db06      	blt.n	800c144 <_dtoa_r+0xa94>
 800c136:	9905      	ldr	r1, [sp, #20]
 800c138:	ea41 0909 	orr.w	r9, r1, r9
 800c13c:	9906      	ldr	r1, [sp, #24]
 800c13e:	ea59 0101 	orrs.w	r1, r9, r1
 800c142:	d120      	bne.n	800c186 <_dtoa_r+0xad6>
 800c144:	2a00      	cmp	r2, #0
 800c146:	ddec      	ble.n	800c122 <_dtoa_r+0xa72>
 800c148:	4659      	mov	r1, fp
 800c14a:	2201      	movs	r2, #1
 800c14c:	4620      	mov	r0, r4
 800c14e:	9301      	str	r3, [sp, #4]
 800c150:	f000 fac6 	bl	800c6e0 <__lshift>
 800c154:	4631      	mov	r1, r6
 800c156:	4683      	mov	fp, r0
 800c158:	f000 fb2e 	bl	800c7b8 <__mcmp>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	9b01      	ldr	r3, [sp, #4]
 800c160:	dc02      	bgt.n	800c168 <_dtoa_r+0xab8>
 800c162:	d1de      	bne.n	800c122 <_dtoa_r+0xa72>
 800c164:	07da      	lsls	r2, r3, #31
 800c166:	d5dc      	bpl.n	800c122 <_dtoa_r+0xa72>
 800c168:	2b39      	cmp	r3, #57	; 0x39
 800c16a:	d1d8      	bne.n	800c11e <_dtoa_r+0xa6e>
 800c16c:	9a02      	ldr	r2, [sp, #8]
 800c16e:	2339      	movs	r3, #57	; 0x39
 800c170:	7013      	strb	r3, [r2, #0]
 800c172:	462b      	mov	r3, r5
 800c174:	461d      	mov	r5, r3
 800c176:	3b01      	subs	r3, #1
 800c178:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c17c:	2a39      	cmp	r2, #57	; 0x39
 800c17e:	d050      	beq.n	800c222 <_dtoa_r+0xb72>
 800c180:	3201      	adds	r2, #1
 800c182:	701a      	strb	r2, [r3, #0]
 800c184:	e745      	b.n	800c012 <_dtoa_r+0x962>
 800c186:	2a00      	cmp	r2, #0
 800c188:	dd03      	ble.n	800c192 <_dtoa_r+0xae2>
 800c18a:	2b39      	cmp	r3, #57	; 0x39
 800c18c:	d0ee      	beq.n	800c16c <_dtoa_r+0xabc>
 800c18e:	3301      	adds	r3, #1
 800c190:	e7c7      	b.n	800c122 <_dtoa_r+0xa72>
 800c192:	9a01      	ldr	r2, [sp, #4]
 800c194:	9907      	ldr	r1, [sp, #28]
 800c196:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c19a:	428a      	cmp	r2, r1
 800c19c:	d02a      	beq.n	800c1f4 <_dtoa_r+0xb44>
 800c19e:	4659      	mov	r1, fp
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	220a      	movs	r2, #10
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	f000 f8eb 	bl	800c380 <__multadd>
 800c1aa:	45b8      	cmp	r8, r7
 800c1ac:	4683      	mov	fp, r0
 800c1ae:	f04f 0300 	mov.w	r3, #0
 800c1b2:	f04f 020a 	mov.w	r2, #10
 800c1b6:	4641      	mov	r1, r8
 800c1b8:	4620      	mov	r0, r4
 800c1ba:	d107      	bne.n	800c1cc <_dtoa_r+0xb1c>
 800c1bc:	f000 f8e0 	bl	800c380 <__multadd>
 800c1c0:	4680      	mov	r8, r0
 800c1c2:	4607      	mov	r7, r0
 800c1c4:	9b01      	ldr	r3, [sp, #4]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	9301      	str	r3, [sp, #4]
 800c1ca:	e775      	b.n	800c0b8 <_dtoa_r+0xa08>
 800c1cc:	f000 f8d8 	bl	800c380 <__multadd>
 800c1d0:	4639      	mov	r1, r7
 800c1d2:	4680      	mov	r8, r0
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	220a      	movs	r2, #10
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f000 f8d1 	bl	800c380 <__multadd>
 800c1de:	4607      	mov	r7, r0
 800c1e0:	e7f0      	b.n	800c1c4 <_dtoa_r+0xb14>
 800c1e2:	f1b9 0f00 	cmp.w	r9, #0
 800c1e6:	9a00      	ldr	r2, [sp, #0]
 800c1e8:	bfcc      	ite	gt
 800c1ea:	464d      	movgt	r5, r9
 800c1ec:	2501      	movle	r5, #1
 800c1ee:	4415      	add	r5, r2
 800c1f0:	f04f 0800 	mov.w	r8, #0
 800c1f4:	4659      	mov	r1, fp
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	9301      	str	r3, [sp, #4]
 800c1fc:	f000 fa70 	bl	800c6e0 <__lshift>
 800c200:	4631      	mov	r1, r6
 800c202:	4683      	mov	fp, r0
 800c204:	f000 fad8 	bl	800c7b8 <__mcmp>
 800c208:	2800      	cmp	r0, #0
 800c20a:	dcb2      	bgt.n	800c172 <_dtoa_r+0xac2>
 800c20c:	d102      	bne.n	800c214 <_dtoa_r+0xb64>
 800c20e:	9b01      	ldr	r3, [sp, #4]
 800c210:	07db      	lsls	r3, r3, #31
 800c212:	d4ae      	bmi.n	800c172 <_dtoa_r+0xac2>
 800c214:	462b      	mov	r3, r5
 800c216:	461d      	mov	r5, r3
 800c218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c21c:	2a30      	cmp	r2, #48	; 0x30
 800c21e:	d0fa      	beq.n	800c216 <_dtoa_r+0xb66>
 800c220:	e6f7      	b.n	800c012 <_dtoa_r+0x962>
 800c222:	9a00      	ldr	r2, [sp, #0]
 800c224:	429a      	cmp	r2, r3
 800c226:	d1a5      	bne.n	800c174 <_dtoa_r+0xac4>
 800c228:	f10a 0a01 	add.w	sl, sl, #1
 800c22c:	2331      	movs	r3, #49	; 0x31
 800c22e:	e779      	b.n	800c124 <_dtoa_r+0xa74>
 800c230:	4b13      	ldr	r3, [pc, #76]	; (800c280 <_dtoa_r+0xbd0>)
 800c232:	f7ff baaf 	b.w	800b794 <_dtoa_r+0xe4>
 800c236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c238:	2b00      	cmp	r3, #0
 800c23a:	f47f aa86 	bne.w	800b74a <_dtoa_r+0x9a>
 800c23e:	4b11      	ldr	r3, [pc, #68]	; (800c284 <_dtoa_r+0xbd4>)
 800c240:	f7ff baa8 	b.w	800b794 <_dtoa_r+0xe4>
 800c244:	f1b9 0f00 	cmp.w	r9, #0
 800c248:	dc03      	bgt.n	800c252 <_dtoa_r+0xba2>
 800c24a:	9b05      	ldr	r3, [sp, #20]
 800c24c:	2b02      	cmp	r3, #2
 800c24e:	f73f aec9 	bgt.w	800bfe4 <_dtoa_r+0x934>
 800c252:	9d00      	ldr	r5, [sp, #0]
 800c254:	4631      	mov	r1, r6
 800c256:	4658      	mov	r0, fp
 800c258:	f7ff f99c 	bl	800b594 <quorem>
 800c25c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c260:	f805 3b01 	strb.w	r3, [r5], #1
 800c264:	9a00      	ldr	r2, [sp, #0]
 800c266:	1aaa      	subs	r2, r5, r2
 800c268:	4591      	cmp	r9, r2
 800c26a:	ddba      	ble.n	800c1e2 <_dtoa_r+0xb32>
 800c26c:	4659      	mov	r1, fp
 800c26e:	2300      	movs	r3, #0
 800c270:	220a      	movs	r2, #10
 800c272:	4620      	mov	r0, r4
 800c274:	f000 f884 	bl	800c380 <__multadd>
 800c278:	4683      	mov	fp, r0
 800c27a:	e7eb      	b.n	800c254 <_dtoa_r+0xba4>
 800c27c:	08016557 	.word	0x08016557
 800c280:	080164b0 	.word	0x080164b0
 800c284:	080164d4 	.word	0x080164d4

0800c288 <_localeconv_r>:
 800c288:	4800      	ldr	r0, [pc, #0]	; (800c28c <_localeconv_r+0x4>)
 800c28a:	4770      	bx	lr
 800c28c:	20000164 	.word	0x20000164

0800c290 <malloc>:
 800c290:	4b02      	ldr	r3, [pc, #8]	; (800c29c <malloc+0xc>)
 800c292:	4601      	mov	r1, r0
 800c294:	6818      	ldr	r0, [r3, #0]
 800c296:	f000 bbef 	b.w	800ca78 <_malloc_r>
 800c29a:	bf00      	nop
 800c29c:	20000010 	.word	0x20000010

0800c2a0 <memcpy>:
 800c2a0:	440a      	add	r2, r1
 800c2a2:	4291      	cmp	r1, r2
 800c2a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2a8:	d100      	bne.n	800c2ac <memcpy+0xc>
 800c2aa:	4770      	bx	lr
 800c2ac:	b510      	push	{r4, lr}
 800c2ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2b6:	4291      	cmp	r1, r2
 800c2b8:	d1f9      	bne.n	800c2ae <memcpy+0xe>
 800c2ba:	bd10      	pop	{r4, pc}

0800c2bc <_Balloc>:
 800c2bc:	b570      	push	{r4, r5, r6, lr}
 800c2be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c2c0:	4604      	mov	r4, r0
 800c2c2:	460d      	mov	r5, r1
 800c2c4:	b976      	cbnz	r6, 800c2e4 <_Balloc+0x28>
 800c2c6:	2010      	movs	r0, #16
 800c2c8:	f7ff ffe2 	bl	800c290 <malloc>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	6260      	str	r0, [r4, #36]	; 0x24
 800c2d0:	b920      	cbnz	r0, 800c2dc <_Balloc+0x20>
 800c2d2:	4b18      	ldr	r3, [pc, #96]	; (800c334 <_Balloc+0x78>)
 800c2d4:	4818      	ldr	r0, [pc, #96]	; (800c338 <_Balloc+0x7c>)
 800c2d6:	2166      	movs	r1, #102	; 0x66
 800c2d8:	f000 fd94 	bl	800ce04 <__assert_func>
 800c2dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2e0:	6006      	str	r6, [r0, #0]
 800c2e2:	60c6      	str	r6, [r0, #12]
 800c2e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c2e6:	68f3      	ldr	r3, [r6, #12]
 800c2e8:	b183      	cbz	r3, 800c30c <_Balloc+0x50>
 800c2ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2ec:	68db      	ldr	r3, [r3, #12]
 800c2ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2f2:	b9b8      	cbnz	r0, 800c324 <_Balloc+0x68>
 800c2f4:	2101      	movs	r1, #1
 800c2f6:	fa01 f605 	lsl.w	r6, r1, r5
 800c2fa:	1d72      	adds	r2, r6, #5
 800c2fc:	0092      	lsls	r2, r2, #2
 800c2fe:	4620      	mov	r0, r4
 800c300:	f000 fb5a 	bl	800c9b8 <_calloc_r>
 800c304:	b160      	cbz	r0, 800c320 <_Balloc+0x64>
 800c306:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c30a:	e00e      	b.n	800c32a <_Balloc+0x6e>
 800c30c:	2221      	movs	r2, #33	; 0x21
 800c30e:	2104      	movs	r1, #4
 800c310:	4620      	mov	r0, r4
 800c312:	f000 fb51 	bl	800c9b8 <_calloc_r>
 800c316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c318:	60f0      	str	r0, [r6, #12]
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d1e4      	bne.n	800c2ea <_Balloc+0x2e>
 800c320:	2000      	movs	r0, #0
 800c322:	bd70      	pop	{r4, r5, r6, pc}
 800c324:	6802      	ldr	r2, [r0, #0]
 800c326:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c32a:	2300      	movs	r3, #0
 800c32c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c330:	e7f7      	b.n	800c322 <_Balloc+0x66>
 800c332:	bf00      	nop
 800c334:	080164e1 	.word	0x080164e1
 800c338:	08016568 	.word	0x08016568

0800c33c <_Bfree>:
 800c33c:	b570      	push	{r4, r5, r6, lr}
 800c33e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c340:	4605      	mov	r5, r0
 800c342:	460c      	mov	r4, r1
 800c344:	b976      	cbnz	r6, 800c364 <_Bfree+0x28>
 800c346:	2010      	movs	r0, #16
 800c348:	f7ff ffa2 	bl	800c290 <malloc>
 800c34c:	4602      	mov	r2, r0
 800c34e:	6268      	str	r0, [r5, #36]	; 0x24
 800c350:	b920      	cbnz	r0, 800c35c <_Bfree+0x20>
 800c352:	4b09      	ldr	r3, [pc, #36]	; (800c378 <_Bfree+0x3c>)
 800c354:	4809      	ldr	r0, [pc, #36]	; (800c37c <_Bfree+0x40>)
 800c356:	218a      	movs	r1, #138	; 0x8a
 800c358:	f000 fd54 	bl	800ce04 <__assert_func>
 800c35c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c360:	6006      	str	r6, [r0, #0]
 800c362:	60c6      	str	r6, [r0, #12]
 800c364:	b13c      	cbz	r4, 800c376 <_Bfree+0x3a>
 800c366:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c368:	6862      	ldr	r2, [r4, #4]
 800c36a:	68db      	ldr	r3, [r3, #12]
 800c36c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c370:	6021      	str	r1, [r4, #0]
 800c372:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c376:	bd70      	pop	{r4, r5, r6, pc}
 800c378:	080164e1 	.word	0x080164e1
 800c37c:	08016568 	.word	0x08016568

0800c380 <__multadd>:
 800c380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c384:	690e      	ldr	r6, [r1, #16]
 800c386:	4607      	mov	r7, r0
 800c388:	4698      	mov	r8, r3
 800c38a:	460c      	mov	r4, r1
 800c38c:	f101 0014 	add.w	r0, r1, #20
 800c390:	2300      	movs	r3, #0
 800c392:	6805      	ldr	r5, [r0, #0]
 800c394:	b2a9      	uxth	r1, r5
 800c396:	fb02 8101 	mla	r1, r2, r1, r8
 800c39a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c39e:	0c2d      	lsrs	r5, r5, #16
 800c3a0:	fb02 c505 	mla	r5, r2, r5, ip
 800c3a4:	b289      	uxth	r1, r1
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c3ac:	429e      	cmp	r6, r3
 800c3ae:	f840 1b04 	str.w	r1, [r0], #4
 800c3b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c3b6:	dcec      	bgt.n	800c392 <__multadd+0x12>
 800c3b8:	f1b8 0f00 	cmp.w	r8, #0
 800c3bc:	d022      	beq.n	800c404 <__multadd+0x84>
 800c3be:	68a3      	ldr	r3, [r4, #8]
 800c3c0:	42b3      	cmp	r3, r6
 800c3c2:	dc19      	bgt.n	800c3f8 <__multadd+0x78>
 800c3c4:	6861      	ldr	r1, [r4, #4]
 800c3c6:	4638      	mov	r0, r7
 800c3c8:	3101      	adds	r1, #1
 800c3ca:	f7ff ff77 	bl	800c2bc <_Balloc>
 800c3ce:	4605      	mov	r5, r0
 800c3d0:	b928      	cbnz	r0, 800c3de <__multadd+0x5e>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	4b0d      	ldr	r3, [pc, #52]	; (800c40c <__multadd+0x8c>)
 800c3d6:	480e      	ldr	r0, [pc, #56]	; (800c410 <__multadd+0x90>)
 800c3d8:	21b5      	movs	r1, #181	; 0xb5
 800c3da:	f000 fd13 	bl	800ce04 <__assert_func>
 800c3de:	6922      	ldr	r2, [r4, #16]
 800c3e0:	3202      	adds	r2, #2
 800c3e2:	f104 010c 	add.w	r1, r4, #12
 800c3e6:	0092      	lsls	r2, r2, #2
 800c3e8:	300c      	adds	r0, #12
 800c3ea:	f7ff ff59 	bl	800c2a0 <memcpy>
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	4638      	mov	r0, r7
 800c3f2:	f7ff ffa3 	bl	800c33c <_Bfree>
 800c3f6:	462c      	mov	r4, r5
 800c3f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c3fc:	3601      	adds	r6, #1
 800c3fe:	f8c3 8014 	str.w	r8, [r3, #20]
 800c402:	6126      	str	r6, [r4, #16]
 800c404:	4620      	mov	r0, r4
 800c406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c40a:	bf00      	nop
 800c40c:	08016557 	.word	0x08016557
 800c410:	08016568 	.word	0x08016568

0800c414 <__hi0bits>:
 800c414:	0c03      	lsrs	r3, r0, #16
 800c416:	041b      	lsls	r3, r3, #16
 800c418:	b9d3      	cbnz	r3, 800c450 <__hi0bits+0x3c>
 800c41a:	0400      	lsls	r0, r0, #16
 800c41c:	2310      	movs	r3, #16
 800c41e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c422:	bf04      	itt	eq
 800c424:	0200      	lsleq	r0, r0, #8
 800c426:	3308      	addeq	r3, #8
 800c428:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c42c:	bf04      	itt	eq
 800c42e:	0100      	lsleq	r0, r0, #4
 800c430:	3304      	addeq	r3, #4
 800c432:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c436:	bf04      	itt	eq
 800c438:	0080      	lsleq	r0, r0, #2
 800c43a:	3302      	addeq	r3, #2
 800c43c:	2800      	cmp	r0, #0
 800c43e:	db05      	blt.n	800c44c <__hi0bits+0x38>
 800c440:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c444:	f103 0301 	add.w	r3, r3, #1
 800c448:	bf08      	it	eq
 800c44a:	2320      	moveq	r3, #32
 800c44c:	4618      	mov	r0, r3
 800c44e:	4770      	bx	lr
 800c450:	2300      	movs	r3, #0
 800c452:	e7e4      	b.n	800c41e <__hi0bits+0xa>

0800c454 <__lo0bits>:
 800c454:	6803      	ldr	r3, [r0, #0]
 800c456:	f013 0207 	ands.w	r2, r3, #7
 800c45a:	4601      	mov	r1, r0
 800c45c:	d00b      	beq.n	800c476 <__lo0bits+0x22>
 800c45e:	07da      	lsls	r2, r3, #31
 800c460:	d424      	bmi.n	800c4ac <__lo0bits+0x58>
 800c462:	0798      	lsls	r0, r3, #30
 800c464:	bf49      	itett	mi
 800c466:	085b      	lsrmi	r3, r3, #1
 800c468:	089b      	lsrpl	r3, r3, #2
 800c46a:	2001      	movmi	r0, #1
 800c46c:	600b      	strmi	r3, [r1, #0]
 800c46e:	bf5c      	itt	pl
 800c470:	600b      	strpl	r3, [r1, #0]
 800c472:	2002      	movpl	r0, #2
 800c474:	4770      	bx	lr
 800c476:	b298      	uxth	r0, r3
 800c478:	b9b0      	cbnz	r0, 800c4a8 <__lo0bits+0x54>
 800c47a:	0c1b      	lsrs	r3, r3, #16
 800c47c:	2010      	movs	r0, #16
 800c47e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c482:	bf04      	itt	eq
 800c484:	0a1b      	lsreq	r3, r3, #8
 800c486:	3008      	addeq	r0, #8
 800c488:	071a      	lsls	r2, r3, #28
 800c48a:	bf04      	itt	eq
 800c48c:	091b      	lsreq	r3, r3, #4
 800c48e:	3004      	addeq	r0, #4
 800c490:	079a      	lsls	r2, r3, #30
 800c492:	bf04      	itt	eq
 800c494:	089b      	lsreq	r3, r3, #2
 800c496:	3002      	addeq	r0, #2
 800c498:	07da      	lsls	r2, r3, #31
 800c49a:	d403      	bmi.n	800c4a4 <__lo0bits+0x50>
 800c49c:	085b      	lsrs	r3, r3, #1
 800c49e:	f100 0001 	add.w	r0, r0, #1
 800c4a2:	d005      	beq.n	800c4b0 <__lo0bits+0x5c>
 800c4a4:	600b      	str	r3, [r1, #0]
 800c4a6:	4770      	bx	lr
 800c4a8:	4610      	mov	r0, r2
 800c4aa:	e7e8      	b.n	800c47e <__lo0bits+0x2a>
 800c4ac:	2000      	movs	r0, #0
 800c4ae:	4770      	bx	lr
 800c4b0:	2020      	movs	r0, #32
 800c4b2:	4770      	bx	lr

0800c4b4 <__i2b>:
 800c4b4:	b510      	push	{r4, lr}
 800c4b6:	460c      	mov	r4, r1
 800c4b8:	2101      	movs	r1, #1
 800c4ba:	f7ff feff 	bl	800c2bc <_Balloc>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	b928      	cbnz	r0, 800c4ce <__i2b+0x1a>
 800c4c2:	4b05      	ldr	r3, [pc, #20]	; (800c4d8 <__i2b+0x24>)
 800c4c4:	4805      	ldr	r0, [pc, #20]	; (800c4dc <__i2b+0x28>)
 800c4c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c4ca:	f000 fc9b 	bl	800ce04 <__assert_func>
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	6144      	str	r4, [r0, #20]
 800c4d2:	6103      	str	r3, [r0, #16]
 800c4d4:	bd10      	pop	{r4, pc}
 800c4d6:	bf00      	nop
 800c4d8:	08016557 	.word	0x08016557
 800c4dc:	08016568 	.word	0x08016568

0800c4e0 <__multiply>:
 800c4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e4:	4614      	mov	r4, r2
 800c4e6:	690a      	ldr	r2, [r1, #16]
 800c4e8:	6923      	ldr	r3, [r4, #16]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	bfb8      	it	lt
 800c4ee:	460b      	movlt	r3, r1
 800c4f0:	460d      	mov	r5, r1
 800c4f2:	bfbc      	itt	lt
 800c4f4:	4625      	movlt	r5, r4
 800c4f6:	461c      	movlt	r4, r3
 800c4f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c4fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c500:	68ab      	ldr	r3, [r5, #8]
 800c502:	6869      	ldr	r1, [r5, #4]
 800c504:	eb0a 0709 	add.w	r7, sl, r9
 800c508:	42bb      	cmp	r3, r7
 800c50a:	b085      	sub	sp, #20
 800c50c:	bfb8      	it	lt
 800c50e:	3101      	addlt	r1, #1
 800c510:	f7ff fed4 	bl	800c2bc <_Balloc>
 800c514:	b930      	cbnz	r0, 800c524 <__multiply+0x44>
 800c516:	4602      	mov	r2, r0
 800c518:	4b42      	ldr	r3, [pc, #264]	; (800c624 <__multiply+0x144>)
 800c51a:	4843      	ldr	r0, [pc, #268]	; (800c628 <__multiply+0x148>)
 800c51c:	f240 115d 	movw	r1, #349	; 0x15d
 800c520:	f000 fc70 	bl	800ce04 <__assert_func>
 800c524:	f100 0614 	add.w	r6, r0, #20
 800c528:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c52c:	4633      	mov	r3, r6
 800c52e:	2200      	movs	r2, #0
 800c530:	4543      	cmp	r3, r8
 800c532:	d31e      	bcc.n	800c572 <__multiply+0x92>
 800c534:	f105 0c14 	add.w	ip, r5, #20
 800c538:	f104 0314 	add.w	r3, r4, #20
 800c53c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c540:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c544:	9202      	str	r2, [sp, #8]
 800c546:	ebac 0205 	sub.w	r2, ip, r5
 800c54a:	3a15      	subs	r2, #21
 800c54c:	f022 0203 	bic.w	r2, r2, #3
 800c550:	3204      	adds	r2, #4
 800c552:	f105 0115 	add.w	r1, r5, #21
 800c556:	458c      	cmp	ip, r1
 800c558:	bf38      	it	cc
 800c55a:	2204      	movcc	r2, #4
 800c55c:	9201      	str	r2, [sp, #4]
 800c55e:	9a02      	ldr	r2, [sp, #8]
 800c560:	9303      	str	r3, [sp, #12]
 800c562:	429a      	cmp	r2, r3
 800c564:	d808      	bhi.n	800c578 <__multiply+0x98>
 800c566:	2f00      	cmp	r7, #0
 800c568:	dc55      	bgt.n	800c616 <__multiply+0x136>
 800c56a:	6107      	str	r7, [r0, #16]
 800c56c:	b005      	add	sp, #20
 800c56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c572:	f843 2b04 	str.w	r2, [r3], #4
 800c576:	e7db      	b.n	800c530 <__multiply+0x50>
 800c578:	f8b3 a000 	ldrh.w	sl, [r3]
 800c57c:	f1ba 0f00 	cmp.w	sl, #0
 800c580:	d020      	beq.n	800c5c4 <__multiply+0xe4>
 800c582:	f105 0e14 	add.w	lr, r5, #20
 800c586:	46b1      	mov	r9, r6
 800c588:	2200      	movs	r2, #0
 800c58a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c58e:	f8d9 b000 	ldr.w	fp, [r9]
 800c592:	b2a1      	uxth	r1, r4
 800c594:	fa1f fb8b 	uxth.w	fp, fp
 800c598:	fb0a b101 	mla	r1, sl, r1, fp
 800c59c:	4411      	add	r1, r2
 800c59e:	f8d9 2000 	ldr.w	r2, [r9]
 800c5a2:	0c24      	lsrs	r4, r4, #16
 800c5a4:	0c12      	lsrs	r2, r2, #16
 800c5a6:	fb0a 2404 	mla	r4, sl, r4, r2
 800c5aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c5ae:	b289      	uxth	r1, r1
 800c5b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c5b4:	45f4      	cmp	ip, lr
 800c5b6:	f849 1b04 	str.w	r1, [r9], #4
 800c5ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c5be:	d8e4      	bhi.n	800c58a <__multiply+0xaa>
 800c5c0:	9901      	ldr	r1, [sp, #4]
 800c5c2:	5072      	str	r2, [r6, r1]
 800c5c4:	9a03      	ldr	r2, [sp, #12]
 800c5c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c5ca:	3304      	adds	r3, #4
 800c5cc:	f1b9 0f00 	cmp.w	r9, #0
 800c5d0:	d01f      	beq.n	800c612 <__multiply+0x132>
 800c5d2:	6834      	ldr	r4, [r6, #0]
 800c5d4:	f105 0114 	add.w	r1, r5, #20
 800c5d8:	46b6      	mov	lr, r6
 800c5da:	f04f 0a00 	mov.w	sl, #0
 800c5de:	880a      	ldrh	r2, [r1, #0]
 800c5e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c5e4:	fb09 b202 	mla	r2, r9, r2, fp
 800c5e8:	4492      	add	sl, r2
 800c5ea:	b2a4      	uxth	r4, r4
 800c5ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c5f0:	f84e 4b04 	str.w	r4, [lr], #4
 800c5f4:	f851 4b04 	ldr.w	r4, [r1], #4
 800c5f8:	f8be 2000 	ldrh.w	r2, [lr]
 800c5fc:	0c24      	lsrs	r4, r4, #16
 800c5fe:	fb09 2404 	mla	r4, r9, r4, r2
 800c602:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c606:	458c      	cmp	ip, r1
 800c608:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c60c:	d8e7      	bhi.n	800c5de <__multiply+0xfe>
 800c60e:	9a01      	ldr	r2, [sp, #4]
 800c610:	50b4      	str	r4, [r6, r2]
 800c612:	3604      	adds	r6, #4
 800c614:	e7a3      	b.n	800c55e <__multiply+0x7e>
 800c616:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d1a5      	bne.n	800c56a <__multiply+0x8a>
 800c61e:	3f01      	subs	r7, #1
 800c620:	e7a1      	b.n	800c566 <__multiply+0x86>
 800c622:	bf00      	nop
 800c624:	08016557 	.word	0x08016557
 800c628:	08016568 	.word	0x08016568

0800c62c <__pow5mult>:
 800c62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c630:	4615      	mov	r5, r2
 800c632:	f012 0203 	ands.w	r2, r2, #3
 800c636:	4606      	mov	r6, r0
 800c638:	460f      	mov	r7, r1
 800c63a:	d007      	beq.n	800c64c <__pow5mult+0x20>
 800c63c:	4c25      	ldr	r4, [pc, #148]	; (800c6d4 <__pow5mult+0xa8>)
 800c63e:	3a01      	subs	r2, #1
 800c640:	2300      	movs	r3, #0
 800c642:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c646:	f7ff fe9b 	bl	800c380 <__multadd>
 800c64a:	4607      	mov	r7, r0
 800c64c:	10ad      	asrs	r5, r5, #2
 800c64e:	d03d      	beq.n	800c6cc <__pow5mult+0xa0>
 800c650:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c652:	b97c      	cbnz	r4, 800c674 <__pow5mult+0x48>
 800c654:	2010      	movs	r0, #16
 800c656:	f7ff fe1b 	bl	800c290 <malloc>
 800c65a:	4602      	mov	r2, r0
 800c65c:	6270      	str	r0, [r6, #36]	; 0x24
 800c65e:	b928      	cbnz	r0, 800c66c <__pow5mult+0x40>
 800c660:	4b1d      	ldr	r3, [pc, #116]	; (800c6d8 <__pow5mult+0xac>)
 800c662:	481e      	ldr	r0, [pc, #120]	; (800c6dc <__pow5mult+0xb0>)
 800c664:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c668:	f000 fbcc 	bl	800ce04 <__assert_func>
 800c66c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c670:	6004      	str	r4, [r0, #0]
 800c672:	60c4      	str	r4, [r0, #12]
 800c674:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c678:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c67c:	b94c      	cbnz	r4, 800c692 <__pow5mult+0x66>
 800c67e:	f240 2171 	movw	r1, #625	; 0x271
 800c682:	4630      	mov	r0, r6
 800c684:	f7ff ff16 	bl	800c4b4 <__i2b>
 800c688:	2300      	movs	r3, #0
 800c68a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c68e:	4604      	mov	r4, r0
 800c690:	6003      	str	r3, [r0, #0]
 800c692:	f04f 0900 	mov.w	r9, #0
 800c696:	07eb      	lsls	r3, r5, #31
 800c698:	d50a      	bpl.n	800c6b0 <__pow5mult+0x84>
 800c69a:	4639      	mov	r1, r7
 800c69c:	4622      	mov	r2, r4
 800c69e:	4630      	mov	r0, r6
 800c6a0:	f7ff ff1e 	bl	800c4e0 <__multiply>
 800c6a4:	4639      	mov	r1, r7
 800c6a6:	4680      	mov	r8, r0
 800c6a8:	4630      	mov	r0, r6
 800c6aa:	f7ff fe47 	bl	800c33c <_Bfree>
 800c6ae:	4647      	mov	r7, r8
 800c6b0:	106d      	asrs	r5, r5, #1
 800c6b2:	d00b      	beq.n	800c6cc <__pow5mult+0xa0>
 800c6b4:	6820      	ldr	r0, [r4, #0]
 800c6b6:	b938      	cbnz	r0, 800c6c8 <__pow5mult+0x9c>
 800c6b8:	4622      	mov	r2, r4
 800c6ba:	4621      	mov	r1, r4
 800c6bc:	4630      	mov	r0, r6
 800c6be:	f7ff ff0f 	bl	800c4e0 <__multiply>
 800c6c2:	6020      	str	r0, [r4, #0]
 800c6c4:	f8c0 9000 	str.w	r9, [r0]
 800c6c8:	4604      	mov	r4, r0
 800c6ca:	e7e4      	b.n	800c696 <__pow5mult+0x6a>
 800c6cc:	4638      	mov	r0, r7
 800c6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6d2:	bf00      	nop
 800c6d4:	080166b8 	.word	0x080166b8
 800c6d8:	080164e1 	.word	0x080164e1
 800c6dc:	08016568 	.word	0x08016568

0800c6e0 <__lshift>:
 800c6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6e4:	460c      	mov	r4, r1
 800c6e6:	6849      	ldr	r1, [r1, #4]
 800c6e8:	6923      	ldr	r3, [r4, #16]
 800c6ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c6ee:	68a3      	ldr	r3, [r4, #8]
 800c6f0:	4607      	mov	r7, r0
 800c6f2:	4691      	mov	r9, r2
 800c6f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6f8:	f108 0601 	add.w	r6, r8, #1
 800c6fc:	42b3      	cmp	r3, r6
 800c6fe:	db0b      	blt.n	800c718 <__lshift+0x38>
 800c700:	4638      	mov	r0, r7
 800c702:	f7ff fddb 	bl	800c2bc <_Balloc>
 800c706:	4605      	mov	r5, r0
 800c708:	b948      	cbnz	r0, 800c71e <__lshift+0x3e>
 800c70a:	4602      	mov	r2, r0
 800c70c:	4b28      	ldr	r3, [pc, #160]	; (800c7b0 <__lshift+0xd0>)
 800c70e:	4829      	ldr	r0, [pc, #164]	; (800c7b4 <__lshift+0xd4>)
 800c710:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c714:	f000 fb76 	bl	800ce04 <__assert_func>
 800c718:	3101      	adds	r1, #1
 800c71a:	005b      	lsls	r3, r3, #1
 800c71c:	e7ee      	b.n	800c6fc <__lshift+0x1c>
 800c71e:	2300      	movs	r3, #0
 800c720:	f100 0114 	add.w	r1, r0, #20
 800c724:	f100 0210 	add.w	r2, r0, #16
 800c728:	4618      	mov	r0, r3
 800c72a:	4553      	cmp	r3, sl
 800c72c:	db33      	blt.n	800c796 <__lshift+0xb6>
 800c72e:	6920      	ldr	r0, [r4, #16]
 800c730:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c734:	f104 0314 	add.w	r3, r4, #20
 800c738:	f019 091f 	ands.w	r9, r9, #31
 800c73c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c740:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c744:	d02b      	beq.n	800c79e <__lshift+0xbe>
 800c746:	f1c9 0e20 	rsb	lr, r9, #32
 800c74a:	468a      	mov	sl, r1
 800c74c:	2200      	movs	r2, #0
 800c74e:	6818      	ldr	r0, [r3, #0]
 800c750:	fa00 f009 	lsl.w	r0, r0, r9
 800c754:	4302      	orrs	r2, r0
 800c756:	f84a 2b04 	str.w	r2, [sl], #4
 800c75a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c75e:	459c      	cmp	ip, r3
 800c760:	fa22 f20e 	lsr.w	r2, r2, lr
 800c764:	d8f3      	bhi.n	800c74e <__lshift+0x6e>
 800c766:	ebac 0304 	sub.w	r3, ip, r4
 800c76a:	3b15      	subs	r3, #21
 800c76c:	f023 0303 	bic.w	r3, r3, #3
 800c770:	3304      	adds	r3, #4
 800c772:	f104 0015 	add.w	r0, r4, #21
 800c776:	4584      	cmp	ip, r0
 800c778:	bf38      	it	cc
 800c77a:	2304      	movcc	r3, #4
 800c77c:	50ca      	str	r2, [r1, r3]
 800c77e:	b10a      	cbz	r2, 800c784 <__lshift+0xa4>
 800c780:	f108 0602 	add.w	r6, r8, #2
 800c784:	3e01      	subs	r6, #1
 800c786:	4638      	mov	r0, r7
 800c788:	612e      	str	r6, [r5, #16]
 800c78a:	4621      	mov	r1, r4
 800c78c:	f7ff fdd6 	bl	800c33c <_Bfree>
 800c790:	4628      	mov	r0, r5
 800c792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c796:	f842 0f04 	str.w	r0, [r2, #4]!
 800c79a:	3301      	adds	r3, #1
 800c79c:	e7c5      	b.n	800c72a <__lshift+0x4a>
 800c79e:	3904      	subs	r1, #4
 800c7a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c7a8:	459c      	cmp	ip, r3
 800c7aa:	d8f9      	bhi.n	800c7a0 <__lshift+0xc0>
 800c7ac:	e7ea      	b.n	800c784 <__lshift+0xa4>
 800c7ae:	bf00      	nop
 800c7b0:	08016557 	.word	0x08016557
 800c7b4:	08016568 	.word	0x08016568

0800c7b8 <__mcmp>:
 800c7b8:	b530      	push	{r4, r5, lr}
 800c7ba:	6902      	ldr	r2, [r0, #16]
 800c7bc:	690c      	ldr	r4, [r1, #16]
 800c7be:	1b12      	subs	r2, r2, r4
 800c7c0:	d10e      	bne.n	800c7e0 <__mcmp+0x28>
 800c7c2:	f100 0314 	add.w	r3, r0, #20
 800c7c6:	3114      	adds	r1, #20
 800c7c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c7cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c7d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c7d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c7d8:	42a5      	cmp	r5, r4
 800c7da:	d003      	beq.n	800c7e4 <__mcmp+0x2c>
 800c7dc:	d305      	bcc.n	800c7ea <__mcmp+0x32>
 800c7de:	2201      	movs	r2, #1
 800c7e0:	4610      	mov	r0, r2
 800c7e2:	bd30      	pop	{r4, r5, pc}
 800c7e4:	4283      	cmp	r3, r0
 800c7e6:	d3f3      	bcc.n	800c7d0 <__mcmp+0x18>
 800c7e8:	e7fa      	b.n	800c7e0 <__mcmp+0x28>
 800c7ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c7ee:	e7f7      	b.n	800c7e0 <__mcmp+0x28>

0800c7f0 <__mdiff>:
 800c7f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f4:	460c      	mov	r4, r1
 800c7f6:	4606      	mov	r6, r0
 800c7f8:	4611      	mov	r1, r2
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	4617      	mov	r7, r2
 800c7fe:	f7ff ffdb 	bl	800c7b8 <__mcmp>
 800c802:	1e05      	subs	r5, r0, #0
 800c804:	d110      	bne.n	800c828 <__mdiff+0x38>
 800c806:	4629      	mov	r1, r5
 800c808:	4630      	mov	r0, r6
 800c80a:	f7ff fd57 	bl	800c2bc <_Balloc>
 800c80e:	b930      	cbnz	r0, 800c81e <__mdiff+0x2e>
 800c810:	4b39      	ldr	r3, [pc, #228]	; (800c8f8 <__mdiff+0x108>)
 800c812:	4602      	mov	r2, r0
 800c814:	f240 2132 	movw	r1, #562	; 0x232
 800c818:	4838      	ldr	r0, [pc, #224]	; (800c8fc <__mdiff+0x10c>)
 800c81a:	f000 faf3 	bl	800ce04 <__assert_func>
 800c81e:	2301      	movs	r3, #1
 800c820:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c824:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c828:	bfa4      	itt	ge
 800c82a:	463b      	movge	r3, r7
 800c82c:	4627      	movge	r7, r4
 800c82e:	4630      	mov	r0, r6
 800c830:	6879      	ldr	r1, [r7, #4]
 800c832:	bfa6      	itte	ge
 800c834:	461c      	movge	r4, r3
 800c836:	2500      	movge	r5, #0
 800c838:	2501      	movlt	r5, #1
 800c83a:	f7ff fd3f 	bl	800c2bc <_Balloc>
 800c83e:	b920      	cbnz	r0, 800c84a <__mdiff+0x5a>
 800c840:	4b2d      	ldr	r3, [pc, #180]	; (800c8f8 <__mdiff+0x108>)
 800c842:	4602      	mov	r2, r0
 800c844:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c848:	e7e6      	b.n	800c818 <__mdiff+0x28>
 800c84a:	693e      	ldr	r6, [r7, #16]
 800c84c:	60c5      	str	r5, [r0, #12]
 800c84e:	6925      	ldr	r5, [r4, #16]
 800c850:	f107 0114 	add.w	r1, r7, #20
 800c854:	f104 0914 	add.w	r9, r4, #20
 800c858:	f100 0e14 	add.w	lr, r0, #20
 800c85c:	f107 0210 	add.w	r2, r7, #16
 800c860:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c864:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c868:	46f2      	mov	sl, lr
 800c86a:	2700      	movs	r7, #0
 800c86c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c870:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c874:	fa1f f883 	uxth.w	r8, r3
 800c878:	fa17 f78b 	uxtah	r7, r7, fp
 800c87c:	0c1b      	lsrs	r3, r3, #16
 800c87e:	eba7 0808 	sub.w	r8, r7, r8
 800c882:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c886:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c88a:	fa1f f888 	uxth.w	r8, r8
 800c88e:	141f      	asrs	r7, r3, #16
 800c890:	454d      	cmp	r5, r9
 800c892:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c896:	f84a 3b04 	str.w	r3, [sl], #4
 800c89a:	d8e7      	bhi.n	800c86c <__mdiff+0x7c>
 800c89c:	1b2b      	subs	r3, r5, r4
 800c89e:	3b15      	subs	r3, #21
 800c8a0:	f023 0303 	bic.w	r3, r3, #3
 800c8a4:	3304      	adds	r3, #4
 800c8a6:	3415      	adds	r4, #21
 800c8a8:	42a5      	cmp	r5, r4
 800c8aa:	bf38      	it	cc
 800c8ac:	2304      	movcc	r3, #4
 800c8ae:	4419      	add	r1, r3
 800c8b0:	4473      	add	r3, lr
 800c8b2:	469e      	mov	lr, r3
 800c8b4:	460d      	mov	r5, r1
 800c8b6:	4565      	cmp	r5, ip
 800c8b8:	d30e      	bcc.n	800c8d8 <__mdiff+0xe8>
 800c8ba:	f10c 0203 	add.w	r2, ip, #3
 800c8be:	1a52      	subs	r2, r2, r1
 800c8c0:	f022 0203 	bic.w	r2, r2, #3
 800c8c4:	3903      	subs	r1, #3
 800c8c6:	458c      	cmp	ip, r1
 800c8c8:	bf38      	it	cc
 800c8ca:	2200      	movcc	r2, #0
 800c8cc:	441a      	add	r2, r3
 800c8ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c8d2:	b17b      	cbz	r3, 800c8f4 <__mdiff+0x104>
 800c8d4:	6106      	str	r6, [r0, #16]
 800c8d6:	e7a5      	b.n	800c824 <__mdiff+0x34>
 800c8d8:	f855 8b04 	ldr.w	r8, [r5], #4
 800c8dc:	fa17 f488 	uxtah	r4, r7, r8
 800c8e0:	1422      	asrs	r2, r4, #16
 800c8e2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c8e6:	b2a4      	uxth	r4, r4
 800c8e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c8ec:	f84e 4b04 	str.w	r4, [lr], #4
 800c8f0:	1417      	asrs	r7, r2, #16
 800c8f2:	e7e0      	b.n	800c8b6 <__mdiff+0xc6>
 800c8f4:	3e01      	subs	r6, #1
 800c8f6:	e7ea      	b.n	800c8ce <__mdiff+0xde>
 800c8f8:	08016557 	.word	0x08016557
 800c8fc:	08016568 	.word	0x08016568

0800c900 <__d2b>:
 800c900:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c904:	4689      	mov	r9, r1
 800c906:	2101      	movs	r1, #1
 800c908:	ec57 6b10 	vmov	r6, r7, d0
 800c90c:	4690      	mov	r8, r2
 800c90e:	f7ff fcd5 	bl	800c2bc <_Balloc>
 800c912:	4604      	mov	r4, r0
 800c914:	b930      	cbnz	r0, 800c924 <__d2b+0x24>
 800c916:	4602      	mov	r2, r0
 800c918:	4b25      	ldr	r3, [pc, #148]	; (800c9b0 <__d2b+0xb0>)
 800c91a:	4826      	ldr	r0, [pc, #152]	; (800c9b4 <__d2b+0xb4>)
 800c91c:	f240 310a 	movw	r1, #778	; 0x30a
 800c920:	f000 fa70 	bl	800ce04 <__assert_func>
 800c924:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c928:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c92c:	bb35      	cbnz	r5, 800c97c <__d2b+0x7c>
 800c92e:	2e00      	cmp	r6, #0
 800c930:	9301      	str	r3, [sp, #4]
 800c932:	d028      	beq.n	800c986 <__d2b+0x86>
 800c934:	4668      	mov	r0, sp
 800c936:	9600      	str	r6, [sp, #0]
 800c938:	f7ff fd8c 	bl	800c454 <__lo0bits>
 800c93c:	9900      	ldr	r1, [sp, #0]
 800c93e:	b300      	cbz	r0, 800c982 <__d2b+0x82>
 800c940:	9a01      	ldr	r2, [sp, #4]
 800c942:	f1c0 0320 	rsb	r3, r0, #32
 800c946:	fa02 f303 	lsl.w	r3, r2, r3
 800c94a:	430b      	orrs	r3, r1
 800c94c:	40c2      	lsrs	r2, r0
 800c94e:	6163      	str	r3, [r4, #20]
 800c950:	9201      	str	r2, [sp, #4]
 800c952:	9b01      	ldr	r3, [sp, #4]
 800c954:	61a3      	str	r3, [r4, #24]
 800c956:	2b00      	cmp	r3, #0
 800c958:	bf14      	ite	ne
 800c95a:	2202      	movne	r2, #2
 800c95c:	2201      	moveq	r2, #1
 800c95e:	6122      	str	r2, [r4, #16]
 800c960:	b1d5      	cbz	r5, 800c998 <__d2b+0x98>
 800c962:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c966:	4405      	add	r5, r0
 800c968:	f8c9 5000 	str.w	r5, [r9]
 800c96c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c970:	f8c8 0000 	str.w	r0, [r8]
 800c974:	4620      	mov	r0, r4
 800c976:	b003      	add	sp, #12
 800c978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c97c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c980:	e7d5      	b.n	800c92e <__d2b+0x2e>
 800c982:	6161      	str	r1, [r4, #20]
 800c984:	e7e5      	b.n	800c952 <__d2b+0x52>
 800c986:	a801      	add	r0, sp, #4
 800c988:	f7ff fd64 	bl	800c454 <__lo0bits>
 800c98c:	9b01      	ldr	r3, [sp, #4]
 800c98e:	6163      	str	r3, [r4, #20]
 800c990:	2201      	movs	r2, #1
 800c992:	6122      	str	r2, [r4, #16]
 800c994:	3020      	adds	r0, #32
 800c996:	e7e3      	b.n	800c960 <__d2b+0x60>
 800c998:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c99c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c9a0:	f8c9 0000 	str.w	r0, [r9]
 800c9a4:	6918      	ldr	r0, [r3, #16]
 800c9a6:	f7ff fd35 	bl	800c414 <__hi0bits>
 800c9aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c9ae:	e7df      	b.n	800c970 <__d2b+0x70>
 800c9b0:	08016557 	.word	0x08016557
 800c9b4:	08016568 	.word	0x08016568

0800c9b8 <_calloc_r>:
 800c9b8:	b513      	push	{r0, r1, r4, lr}
 800c9ba:	434a      	muls	r2, r1
 800c9bc:	4611      	mov	r1, r2
 800c9be:	9201      	str	r2, [sp, #4]
 800c9c0:	f000 f85a 	bl	800ca78 <_malloc_r>
 800c9c4:	4604      	mov	r4, r0
 800c9c6:	b118      	cbz	r0, 800c9d0 <_calloc_r+0x18>
 800c9c8:	9a01      	ldr	r2, [sp, #4]
 800c9ca:	2100      	movs	r1, #0
 800c9cc:	f7fe f950 	bl	800ac70 <memset>
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	b002      	add	sp, #8
 800c9d4:	bd10      	pop	{r4, pc}
	...

0800c9d8 <_free_r>:
 800c9d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9da:	2900      	cmp	r1, #0
 800c9dc:	d048      	beq.n	800ca70 <_free_r+0x98>
 800c9de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9e2:	9001      	str	r0, [sp, #4]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	f1a1 0404 	sub.w	r4, r1, #4
 800c9ea:	bfb8      	it	lt
 800c9ec:	18e4      	addlt	r4, r4, r3
 800c9ee:	f000 fa65 	bl	800cebc <__malloc_lock>
 800c9f2:	4a20      	ldr	r2, [pc, #128]	; (800ca74 <_free_r+0x9c>)
 800c9f4:	9801      	ldr	r0, [sp, #4]
 800c9f6:	6813      	ldr	r3, [r2, #0]
 800c9f8:	4615      	mov	r5, r2
 800c9fa:	b933      	cbnz	r3, 800ca0a <_free_r+0x32>
 800c9fc:	6063      	str	r3, [r4, #4]
 800c9fe:	6014      	str	r4, [r2, #0]
 800ca00:	b003      	add	sp, #12
 800ca02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca06:	f000 ba5f 	b.w	800cec8 <__malloc_unlock>
 800ca0a:	42a3      	cmp	r3, r4
 800ca0c:	d90b      	bls.n	800ca26 <_free_r+0x4e>
 800ca0e:	6821      	ldr	r1, [r4, #0]
 800ca10:	1862      	adds	r2, r4, r1
 800ca12:	4293      	cmp	r3, r2
 800ca14:	bf04      	itt	eq
 800ca16:	681a      	ldreq	r2, [r3, #0]
 800ca18:	685b      	ldreq	r3, [r3, #4]
 800ca1a:	6063      	str	r3, [r4, #4]
 800ca1c:	bf04      	itt	eq
 800ca1e:	1852      	addeq	r2, r2, r1
 800ca20:	6022      	streq	r2, [r4, #0]
 800ca22:	602c      	str	r4, [r5, #0]
 800ca24:	e7ec      	b.n	800ca00 <_free_r+0x28>
 800ca26:	461a      	mov	r2, r3
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	b10b      	cbz	r3, 800ca30 <_free_r+0x58>
 800ca2c:	42a3      	cmp	r3, r4
 800ca2e:	d9fa      	bls.n	800ca26 <_free_r+0x4e>
 800ca30:	6811      	ldr	r1, [r2, #0]
 800ca32:	1855      	adds	r5, r2, r1
 800ca34:	42a5      	cmp	r5, r4
 800ca36:	d10b      	bne.n	800ca50 <_free_r+0x78>
 800ca38:	6824      	ldr	r4, [r4, #0]
 800ca3a:	4421      	add	r1, r4
 800ca3c:	1854      	adds	r4, r2, r1
 800ca3e:	42a3      	cmp	r3, r4
 800ca40:	6011      	str	r1, [r2, #0]
 800ca42:	d1dd      	bne.n	800ca00 <_free_r+0x28>
 800ca44:	681c      	ldr	r4, [r3, #0]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	6053      	str	r3, [r2, #4]
 800ca4a:	4421      	add	r1, r4
 800ca4c:	6011      	str	r1, [r2, #0]
 800ca4e:	e7d7      	b.n	800ca00 <_free_r+0x28>
 800ca50:	d902      	bls.n	800ca58 <_free_r+0x80>
 800ca52:	230c      	movs	r3, #12
 800ca54:	6003      	str	r3, [r0, #0]
 800ca56:	e7d3      	b.n	800ca00 <_free_r+0x28>
 800ca58:	6825      	ldr	r5, [r4, #0]
 800ca5a:	1961      	adds	r1, r4, r5
 800ca5c:	428b      	cmp	r3, r1
 800ca5e:	bf04      	itt	eq
 800ca60:	6819      	ldreq	r1, [r3, #0]
 800ca62:	685b      	ldreq	r3, [r3, #4]
 800ca64:	6063      	str	r3, [r4, #4]
 800ca66:	bf04      	itt	eq
 800ca68:	1949      	addeq	r1, r1, r5
 800ca6a:	6021      	streq	r1, [r4, #0]
 800ca6c:	6054      	str	r4, [r2, #4]
 800ca6e:	e7c7      	b.n	800ca00 <_free_r+0x28>
 800ca70:	b003      	add	sp, #12
 800ca72:	bd30      	pop	{r4, r5, pc}
 800ca74:	20000248 	.word	0x20000248

0800ca78 <_malloc_r>:
 800ca78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca7a:	1ccd      	adds	r5, r1, #3
 800ca7c:	f025 0503 	bic.w	r5, r5, #3
 800ca80:	3508      	adds	r5, #8
 800ca82:	2d0c      	cmp	r5, #12
 800ca84:	bf38      	it	cc
 800ca86:	250c      	movcc	r5, #12
 800ca88:	2d00      	cmp	r5, #0
 800ca8a:	4606      	mov	r6, r0
 800ca8c:	db01      	blt.n	800ca92 <_malloc_r+0x1a>
 800ca8e:	42a9      	cmp	r1, r5
 800ca90:	d903      	bls.n	800ca9a <_malloc_r+0x22>
 800ca92:	230c      	movs	r3, #12
 800ca94:	6033      	str	r3, [r6, #0]
 800ca96:	2000      	movs	r0, #0
 800ca98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca9a:	f000 fa0f 	bl	800cebc <__malloc_lock>
 800ca9e:	4921      	ldr	r1, [pc, #132]	; (800cb24 <_malloc_r+0xac>)
 800caa0:	680a      	ldr	r2, [r1, #0]
 800caa2:	4614      	mov	r4, r2
 800caa4:	b99c      	cbnz	r4, 800cace <_malloc_r+0x56>
 800caa6:	4f20      	ldr	r7, [pc, #128]	; (800cb28 <_malloc_r+0xb0>)
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	b923      	cbnz	r3, 800cab6 <_malloc_r+0x3e>
 800caac:	4621      	mov	r1, r4
 800caae:	4630      	mov	r0, r6
 800cab0:	f000 f998 	bl	800cde4 <_sbrk_r>
 800cab4:	6038      	str	r0, [r7, #0]
 800cab6:	4629      	mov	r1, r5
 800cab8:	4630      	mov	r0, r6
 800caba:	f000 f993 	bl	800cde4 <_sbrk_r>
 800cabe:	1c43      	adds	r3, r0, #1
 800cac0:	d123      	bne.n	800cb0a <_malloc_r+0x92>
 800cac2:	230c      	movs	r3, #12
 800cac4:	6033      	str	r3, [r6, #0]
 800cac6:	4630      	mov	r0, r6
 800cac8:	f000 f9fe 	bl	800cec8 <__malloc_unlock>
 800cacc:	e7e3      	b.n	800ca96 <_malloc_r+0x1e>
 800cace:	6823      	ldr	r3, [r4, #0]
 800cad0:	1b5b      	subs	r3, r3, r5
 800cad2:	d417      	bmi.n	800cb04 <_malloc_r+0x8c>
 800cad4:	2b0b      	cmp	r3, #11
 800cad6:	d903      	bls.n	800cae0 <_malloc_r+0x68>
 800cad8:	6023      	str	r3, [r4, #0]
 800cada:	441c      	add	r4, r3
 800cadc:	6025      	str	r5, [r4, #0]
 800cade:	e004      	b.n	800caea <_malloc_r+0x72>
 800cae0:	6863      	ldr	r3, [r4, #4]
 800cae2:	42a2      	cmp	r2, r4
 800cae4:	bf0c      	ite	eq
 800cae6:	600b      	streq	r3, [r1, #0]
 800cae8:	6053      	strne	r3, [r2, #4]
 800caea:	4630      	mov	r0, r6
 800caec:	f000 f9ec 	bl	800cec8 <__malloc_unlock>
 800caf0:	f104 000b 	add.w	r0, r4, #11
 800caf4:	1d23      	adds	r3, r4, #4
 800caf6:	f020 0007 	bic.w	r0, r0, #7
 800cafa:	1ac2      	subs	r2, r0, r3
 800cafc:	d0cc      	beq.n	800ca98 <_malloc_r+0x20>
 800cafe:	1a1b      	subs	r3, r3, r0
 800cb00:	50a3      	str	r3, [r4, r2]
 800cb02:	e7c9      	b.n	800ca98 <_malloc_r+0x20>
 800cb04:	4622      	mov	r2, r4
 800cb06:	6864      	ldr	r4, [r4, #4]
 800cb08:	e7cc      	b.n	800caa4 <_malloc_r+0x2c>
 800cb0a:	1cc4      	adds	r4, r0, #3
 800cb0c:	f024 0403 	bic.w	r4, r4, #3
 800cb10:	42a0      	cmp	r0, r4
 800cb12:	d0e3      	beq.n	800cadc <_malloc_r+0x64>
 800cb14:	1a21      	subs	r1, r4, r0
 800cb16:	4630      	mov	r0, r6
 800cb18:	f000 f964 	bl	800cde4 <_sbrk_r>
 800cb1c:	3001      	adds	r0, #1
 800cb1e:	d1dd      	bne.n	800cadc <_malloc_r+0x64>
 800cb20:	e7cf      	b.n	800cac2 <_malloc_r+0x4a>
 800cb22:	bf00      	nop
 800cb24:	20000248 	.word	0x20000248
 800cb28:	2000024c 	.word	0x2000024c

0800cb2c <__ssputs_r>:
 800cb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb30:	688e      	ldr	r6, [r1, #8]
 800cb32:	429e      	cmp	r6, r3
 800cb34:	4682      	mov	sl, r0
 800cb36:	460c      	mov	r4, r1
 800cb38:	4690      	mov	r8, r2
 800cb3a:	461f      	mov	r7, r3
 800cb3c:	d838      	bhi.n	800cbb0 <__ssputs_r+0x84>
 800cb3e:	898a      	ldrh	r2, [r1, #12]
 800cb40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb44:	d032      	beq.n	800cbac <__ssputs_r+0x80>
 800cb46:	6825      	ldr	r5, [r4, #0]
 800cb48:	6909      	ldr	r1, [r1, #16]
 800cb4a:	eba5 0901 	sub.w	r9, r5, r1
 800cb4e:	6965      	ldr	r5, [r4, #20]
 800cb50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb58:	3301      	adds	r3, #1
 800cb5a:	444b      	add	r3, r9
 800cb5c:	106d      	asrs	r5, r5, #1
 800cb5e:	429d      	cmp	r5, r3
 800cb60:	bf38      	it	cc
 800cb62:	461d      	movcc	r5, r3
 800cb64:	0553      	lsls	r3, r2, #21
 800cb66:	d531      	bpl.n	800cbcc <__ssputs_r+0xa0>
 800cb68:	4629      	mov	r1, r5
 800cb6a:	f7ff ff85 	bl	800ca78 <_malloc_r>
 800cb6e:	4606      	mov	r6, r0
 800cb70:	b950      	cbnz	r0, 800cb88 <__ssputs_r+0x5c>
 800cb72:	230c      	movs	r3, #12
 800cb74:	f8ca 3000 	str.w	r3, [sl]
 800cb78:	89a3      	ldrh	r3, [r4, #12]
 800cb7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb7e:	81a3      	strh	r3, [r4, #12]
 800cb80:	f04f 30ff 	mov.w	r0, #4294967295
 800cb84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb88:	6921      	ldr	r1, [r4, #16]
 800cb8a:	464a      	mov	r2, r9
 800cb8c:	f7ff fb88 	bl	800c2a0 <memcpy>
 800cb90:	89a3      	ldrh	r3, [r4, #12]
 800cb92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb9a:	81a3      	strh	r3, [r4, #12]
 800cb9c:	6126      	str	r6, [r4, #16]
 800cb9e:	6165      	str	r5, [r4, #20]
 800cba0:	444e      	add	r6, r9
 800cba2:	eba5 0509 	sub.w	r5, r5, r9
 800cba6:	6026      	str	r6, [r4, #0]
 800cba8:	60a5      	str	r5, [r4, #8]
 800cbaa:	463e      	mov	r6, r7
 800cbac:	42be      	cmp	r6, r7
 800cbae:	d900      	bls.n	800cbb2 <__ssputs_r+0x86>
 800cbb0:	463e      	mov	r6, r7
 800cbb2:	4632      	mov	r2, r6
 800cbb4:	6820      	ldr	r0, [r4, #0]
 800cbb6:	4641      	mov	r1, r8
 800cbb8:	f000 f966 	bl	800ce88 <memmove>
 800cbbc:	68a3      	ldr	r3, [r4, #8]
 800cbbe:	6822      	ldr	r2, [r4, #0]
 800cbc0:	1b9b      	subs	r3, r3, r6
 800cbc2:	4432      	add	r2, r6
 800cbc4:	60a3      	str	r3, [r4, #8]
 800cbc6:	6022      	str	r2, [r4, #0]
 800cbc8:	2000      	movs	r0, #0
 800cbca:	e7db      	b.n	800cb84 <__ssputs_r+0x58>
 800cbcc:	462a      	mov	r2, r5
 800cbce:	f000 f981 	bl	800ced4 <_realloc_r>
 800cbd2:	4606      	mov	r6, r0
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	d1e1      	bne.n	800cb9c <__ssputs_r+0x70>
 800cbd8:	6921      	ldr	r1, [r4, #16]
 800cbda:	4650      	mov	r0, sl
 800cbdc:	f7ff fefc 	bl	800c9d8 <_free_r>
 800cbe0:	e7c7      	b.n	800cb72 <__ssputs_r+0x46>
	...

0800cbe4 <_svfiprintf_r>:
 800cbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe8:	4698      	mov	r8, r3
 800cbea:	898b      	ldrh	r3, [r1, #12]
 800cbec:	061b      	lsls	r3, r3, #24
 800cbee:	b09d      	sub	sp, #116	; 0x74
 800cbf0:	4607      	mov	r7, r0
 800cbf2:	460d      	mov	r5, r1
 800cbf4:	4614      	mov	r4, r2
 800cbf6:	d50e      	bpl.n	800cc16 <_svfiprintf_r+0x32>
 800cbf8:	690b      	ldr	r3, [r1, #16]
 800cbfa:	b963      	cbnz	r3, 800cc16 <_svfiprintf_r+0x32>
 800cbfc:	2140      	movs	r1, #64	; 0x40
 800cbfe:	f7ff ff3b 	bl	800ca78 <_malloc_r>
 800cc02:	6028      	str	r0, [r5, #0]
 800cc04:	6128      	str	r0, [r5, #16]
 800cc06:	b920      	cbnz	r0, 800cc12 <_svfiprintf_r+0x2e>
 800cc08:	230c      	movs	r3, #12
 800cc0a:	603b      	str	r3, [r7, #0]
 800cc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc10:	e0d1      	b.n	800cdb6 <_svfiprintf_r+0x1d2>
 800cc12:	2340      	movs	r3, #64	; 0x40
 800cc14:	616b      	str	r3, [r5, #20]
 800cc16:	2300      	movs	r3, #0
 800cc18:	9309      	str	r3, [sp, #36]	; 0x24
 800cc1a:	2320      	movs	r3, #32
 800cc1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc20:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc24:	2330      	movs	r3, #48	; 0x30
 800cc26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cdd0 <_svfiprintf_r+0x1ec>
 800cc2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc2e:	f04f 0901 	mov.w	r9, #1
 800cc32:	4623      	mov	r3, r4
 800cc34:	469a      	mov	sl, r3
 800cc36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc3a:	b10a      	cbz	r2, 800cc40 <_svfiprintf_r+0x5c>
 800cc3c:	2a25      	cmp	r2, #37	; 0x25
 800cc3e:	d1f9      	bne.n	800cc34 <_svfiprintf_r+0x50>
 800cc40:	ebba 0b04 	subs.w	fp, sl, r4
 800cc44:	d00b      	beq.n	800cc5e <_svfiprintf_r+0x7a>
 800cc46:	465b      	mov	r3, fp
 800cc48:	4622      	mov	r2, r4
 800cc4a:	4629      	mov	r1, r5
 800cc4c:	4638      	mov	r0, r7
 800cc4e:	f7ff ff6d 	bl	800cb2c <__ssputs_r>
 800cc52:	3001      	adds	r0, #1
 800cc54:	f000 80aa 	beq.w	800cdac <_svfiprintf_r+0x1c8>
 800cc58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc5a:	445a      	add	r2, fp
 800cc5c:	9209      	str	r2, [sp, #36]	; 0x24
 800cc5e:	f89a 3000 	ldrb.w	r3, [sl]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	f000 80a2 	beq.w	800cdac <_svfiprintf_r+0x1c8>
 800cc68:	2300      	movs	r3, #0
 800cc6a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc72:	f10a 0a01 	add.w	sl, sl, #1
 800cc76:	9304      	str	r3, [sp, #16]
 800cc78:	9307      	str	r3, [sp, #28]
 800cc7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc7e:	931a      	str	r3, [sp, #104]	; 0x68
 800cc80:	4654      	mov	r4, sl
 800cc82:	2205      	movs	r2, #5
 800cc84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc88:	4851      	ldr	r0, [pc, #324]	; (800cdd0 <_svfiprintf_r+0x1ec>)
 800cc8a:	f7f3 faa9 	bl	80001e0 <memchr>
 800cc8e:	9a04      	ldr	r2, [sp, #16]
 800cc90:	b9d8      	cbnz	r0, 800ccca <_svfiprintf_r+0xe6>
 800cc92:	06d0      	lsls	r0, r2, #27
 800cc94:	bf44      	itt	mi
 800cc96:	2320      	movmi	r3, #32
 800cc98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc9c:	0711      	lsls	r1, r2, #28
 800cc9e:	bf44      	itt	mi
 800cca0:	232b      	movmi	r3, #43	; 0x2b
 800cca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cca6:	f89a 3000 	ldrb.w	r3, [sl]
 800ccaa:	2b2a      	cmp	r3, #42	; 0x2a
 800ccac:	d015      	beq.n	800ccda <_svfiprintf_r+0xf6>
 800ccae:	9a07      	ldr	r2, [sp, #28]
 800ccb0:	4654      	mov	r4, sl
 800ccb2:	2000      	movs	r0, #0
 800ccb4:	f04f 0c0a 	mov.w	ip, #10
 800ccb8:	4621      	mov	r1, r4
 800ccba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccbe:	3b30      	subs	r3, #48	; 0x30
 800ccc0:	2b09      	cmp	r3, #9
 800ccc2:	d94e      	bls.n	800cd62 <_svfiprintf_r+0x17e>
 800ccc4:	b1b0      	cbz	r0, 800ccf4 <_svfiprintf_r+0x110>
 800ccc6:	9207      	str	r2, [sp, #28]
 800ccc8:	e014      	b.n	800ccf4 <_svfiprintf_r+0x110>
 800ccca:	eba0 0308 	sub.w	r3, r0, r8
 800ccce:	fa09 f303 	lsl.w	r3, r9, r3
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	9304      	str	r3, [sp, #16]
 800ccd6:	46a2      	mov	sl, r4
 800ccd8:	e7d2      	b.n	800cc80 <_svfiprintf_r+0x9c>
 800ccda:	9b03      	ldr	r3, [sp, #12]
 800ccdc:	1d19      	adds	r1, r3, #4
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	9103      	str	r1, [sp, #12]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	bfbb      	ittet	lt
 800cce6:	425b      	neglt	r3, r3
 800cce8:	f042 0202 	orrlt.w	r2, r2, #2
 800ccec:	9307      	strge	r3, [sp, #28]
 800ccee:	9307      	strlt	r3, [sp, #28]
 800ccf0:	bfb8      	it	lt
 800ccf2:	9204      	strlt	r2, [sp, #16]
 800ccf4:	7823      	ldrb	r3, [r4, #0]
 800ccf6:	2b2e      	cmp	r3, #46	; 0x2e
 800ccf8:	d10c      	bne.n	800cd14 <_svfiprintf_r+0x130>
 800ccfa:	7863      	ldrb	r3, [r4, #1]
 800ccfc:	2b2a      	cmp	r3, #42	; 0x2a
 800ccfe:	d135      	bne.n	800cd6c <_svfiprintf_r+0x188>
 800cd00:	9b03      	ldr	r3, [sp, #12]
 800cd02:	1d1a      	adds	r2, r3, #4
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	9203      	str	r2, [sp, #12]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	bfb8      	it	lt
 800cd0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd10:	3402      	adds	r4, #2
 800cd12:	9305      	str	r3, [sp, #20]
 800cd14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cde0 <_svfiprintf_r+0x1fc>
 800cd18:	7821      	ldrb	r1, [r4, #0]
 800cd1a:	2203      	movs	r2, #3
 800cd1c:	4650      	mov	r0, sl
 800cd1e:	f7f3 fa5f 	bl	80001e0 <memchr>
 800cd22:	b140      	cbz	r0, 800cd36 <_svfiprintf_r+0x152>
 800cd24:	2340      	movs	r3, #64	; 0x40
 800cd26:	eba0 000a 	sub.w	r0, r0, sl
 800cd2a:	fa03 f000 	lsl.w	r0, r3, r0
 800cd2e:	9b04      	ldr	r3, [sp, #16]
 800cd30:	4303      	orrs	r3, r0
 800cd32:	3401      	adds	r4, #1
 800cd34:	9304      	str	r3, [sp, #16]
 800cd36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd3a:	4826      	ldr	r0, [pc, #152]	; (800cdd4 <_svfiprintf_r+0x1f0>)
 800cd3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd40:	2206      	movs	r2, #6
 800cd42:	f7f3 fa4d 	bl	80001e0 <memchr>
 800cd46:	2800      	cmp	r0, #0
 800cd48:	d038      	beq.n	800cdbc <_svfiprintf_r+0x1d8>
 800cd4a:	4b23      	ldr	r3, [pc, #140]	; (800cdd8 <_svfiprintf_r+0x1f4>)
 800cd4c:	bb1b      	cbnz	r3, 800cd96 <_svfiprintf_r+0x1b2>
 800cd4e:	9b03      	ldr	r3, [sp, #12]
 800cd50:	3307      	adds	r3, #7
 800cd52:	f023 0307 	bic.w	r3, r3, #7
 800cd56:	3308      	adds	r3, #8
 800cd58:	9303      	str	r3, [sp, #12]
 800cd5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd5c:	4433      	add	r3, r6
 800cd5e:	9309      	str	r3, [sp, #36]	; 0x24
 800cd60:	e767      	b.n	800cc32 <_svfiprintf_r+0x4e>
 800cd62:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd66:	460c      	mov	r4, r1
 800cd68:	2001      	movs	r0, #1
 800cd6a:	e7a5      	b.n	800ccb8 <_svfiprintf_r+0xd4>
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	3401      	adds	r4, #1
 800cd70:	9305      	str	r3, [sp, #20]
 800cd72:	4619      	mov	r1, r3
 800cd74:	f04f 0c0a 	mov.w	ip, #10
 800cd78:	4620      	mov	r0, r4
 800cd7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd7e:	3a30      	subs	r2, #48	; 0x30
 800cd80:	2a09      	cmp	r2, #9
 800cd82:	d903      	bls.n	800cd8c <_svfiprintf_r+0x1a8>
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d0c5      	beq.n	800cd14 <_svfiprintf_r+0x130>
 800cd88:	9105      	str	r1, [sp, #20]
 800cd8a:	e7c3      	b.n	800cd14 <_svfiprintf_r+0x130>
 800cd8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd90:	4604      	mov	r4, r0
 800cd92:	2301      	movs	r3, #1
 800cd94:	e7f0      	b.n	800cd78 <_svfiprintf_r+0x194>
 800cd96:	ab03      	add	r3, sp, #12
 800cd98:	9300      	str	r3, [sp, #0]
 800cd9a:	462a      	mov	r2, r5
 800cd9c:	4b0f      	ldr	r3, [pc, #60]	; (800cddc <_svfiprintf_r+0x1f8>)
 800cd9e:	a904      	add	r1, sp, #16
 800cda0:	4638      	mov	r0, r7
 800cda2:	f7fe f80d 	bl	800adc0 <_printf_float>
 800cda6:	1c42      	adds	r2, r0, #1
 800cda8:	4606      	mov	r6, r0
 800cdaa:	d1d6      	bne.n	800cd5a <_svfiprintf_r+0x176>
 800cdac:	89ab      	ldrh	r3, [r5, #12]
 800cdae:	065b      	lsls	r3, r3, #25
 800cdb0:	f53f af2c 	bmi.w	800cc0c <_svfiprintf_r+0x28>
 800cdb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdb6:	b01d      	add	sp, #116	; 0x74
 800cdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdbc:	ab03      	add	r3, sp, #12
 800cdbe:	9300      	str	r3, [sp, #0]
 800cdc0:	462a      	mov	r2, r5
 800cdc2:	4b06      	ldr	r3, [pc, #24]	; (800cddc <_svfiprintf_r+0x1f8>)
 800cdc4:	a904      	add	r1, sp, #16
 800cdc6:	4638      	mov	r0, r7
 800cdc8:	f7fe fa9e 	bl	800b308 <_printf_i>
 800cdcc:	e7eb      	b.n	800cda6 <_svfiprintf_r+0x1c2>
 800cdce:	bf00      	nop
 800cdd0:	080166c4 	.word	0x080166c4
 800cdd4:	080166ce 	.word	0x080166ce
 800cdd8:	0800adc1 	.word	0x0800adc1
 800cddc:	0800cb2d 	.word	0x0800cb2d
 800cde0:	080166ca 	.word	0x080166ca

0800cde4 <_sbrk_r>:
 800cde4:	b538      	push	{r3, r4, r5, lr}
 800cde6:	4d06      	ldr	r5, [pc, #24]	; (800ce00 <_sbrk_r+0x1c>)
 800cde8:	2300      	movs	r3, #0
 800cdea:	4604      	mov	r4, r0
 800cdec:	4608      	mov	r0, r1
 800cdee:	602b      	str	r3, [r5, #0]
 800cdf0:	f7f6 ff5c 	bl	8003cac <_sbrk>
 800cdf4:	1c43      	adds	r3, r0, #1
 800cdf6:	d102      	bne.n	800cdfe <_sbrk_r+0x1a>
 800cdf8:	682b      	ldr	r3, [r5, #0]
 800cdfa:	b103      	cbz	r3, 800cdfe <_sbrk_r+0x1a>
 800cdfc:	6023      	str	r3, [r4, #0]
 800cdfe:	bd38      	pop	{r3, r4, r5, pc}
 800ce00:	20000628 	.word	0x20000628

0800ce04 <__assert_func>:
 800ce04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce06:	4614      	mov	r4, r2
 800ce08:	461a      	mov	r2, r3
 800ce0a:	4b09      	ldr	r3, [pc, #36]	; (800ce30 <__assert_func+0x2c>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4605      	mov	r5, r0
 800ce10:	68d8      	ldr	r0, [r3, #12]
 800ce12:	b14c      	cbz	r4, 800ce28 <__assert_func+0x24>
 800ce14:	4b07      	ldr	r3, [pc, #28]	; (800ce34 <__assert_func+0x30>)
 800ce16:	9100      	str	r1, [sp, #0]
 800ce18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce1c:	4906      	ldr	r1, [pc, #24]	; (800ce38 <__assert_func+0x34>)
 800ce1e:	462b      	mov	r3, r5
 800ce20:	f000 f80e 	bl	800ce40 <fiprintf>
 800ce24:	f000 faa4 	bl	800d370 <abort>
 800ce28:	4b04      	ldr	r3, [pc, #16]	; (800ce3c <__assert_func+0x38>)
 800ce2a:	461c      	mov	r4, r3
 800ce2c:	e7f3      	b.n	800ce16 <__assert_func+0x12>
 800ce2e:	bf00      	nop
 800ce30:	20000010 	.word	0x20000010
 800ce34:	080166d5 	.word	0x080166d5
 800ce38:	080166e2 	.word	0x080166e2
 800ce3c:	08016710 	.word	0x08016710

0800ce40 <fiprintf>:
 800ce40:	b40e      	push	{r1, r2, r3}
 800ce42:	b503      	push	{r0, r1, lr}
 800ce44:	4601      	mov	r1, r0
 800ce46:	ab03      	add	r3, sp, #12
 800ce48:	4805      	ldr	r0, [pc, #20]	; (800ce60 <fiprintf+0x20>)
 800ce4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce4e:	6800      	ldr	r0, [r0, #0]
 800ce50:	9301      	str	r3, [sp, #4]
 800ce52:	f000 f88f 	bl	800cf74 <_vfiprintf_r>
 800ce56:	b002      	add	sp, #8
 800ce58:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce5c:	b003      	add	sp, #12
 800ce5e:	4770      	bx	lr
 800ce60:	20000010 	.word	0x20000010

0800ce64 <__ascii_mbtowc>:
 800ce64:	b082      	sub	sp, #8
 800ce66:	b901      	cbnz	r1, 800ce6a <__ascii_mbtowc+0x6>
 800ce68:	a901      	add	r1, sp, #4
 800ce6a:	b142      	cbz	r2, 800ce7e <__ascii_mbtowc+0x1a>
 800ce6c:	b14b      	cbz	r3, 800ce82 <__ascii_mbtowc+0x1e>
 800ce6e:	7813      	ldrb	r3, [r2, #0]
 800ce70:	600b      	str	r3, [r1, #0]
 800ce72:	7812      	ldrb	r2, [r2, #0]
 800ce74:	1e10      	subs	r0, r2, #0
 800ce76:	bf18      	it	ne
 800ce78:	2001      	movne	r0, #1
 800ce7a:	b002      	add	sp, #8
 800ce7c:	4770      	bx	lr
 800ce7e:	4610      	mov	r0, r2
 800ce80:	e7fb      	b.n	800ce7a <__ascii_mbtowc+0x16>
 800ce82:	f06f 0001 	mvn.w	r0, #1
 800ce86:	e7f8      	b.n	800ce7a <__ascii_mbtowc+0x16>

0800ce88 <memmove>:
 800ce88:	4288      	cmp	r0, r1
 800ce8a:	b510      	push	{r4, lr}
 800ce8c:	eb01 0402 	add.w	r4, r1, r2
 800ce90:	d902      	bls.n	800ce98 <memmove+0x10>
 800ce92:	4284      	cmp	r4, r0
 800ce94:	4623      	mov	r3, r4
 800ce96:	d807      	bhi.n	800cea8 <memmove+0x20>
 800ce98:	1e43      	subs	r3, r0, #1
 800ce9a:	42a1      	cmp	r1, r4
 800ce9c:	d008      	beq.n	800ceb0 <memmove+0x28>
 800ce9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cea2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cea6:	e7f8      	b.n	800ce9a <memmove+0x12>
 800cea8:	4402      	add	r2, r0
 800ceaa:	4601      	mov	r1, r0
 800ceac:	428a      	cmp	r2, r1
 800ceae:	d100      	bne.n	800ceb2 <memmove+0x2a>
 800ceb0:	bd10      	pop	{r4, pc}
 800ceb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ceb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ceba:	e7f7      	b.n	800ceac <memmove+0x24>

0800cebc <__malloc_lock>:
 800cebc:	4801      	ldr	r0, [pc, #4]	; (800cec4 <__malloc_lock+0x8>)
 800cebe:	f000 bc17 	b.w	800d6f0 <__retarget_lock_acquire_recursive>
 800cec2:	bf00      	nop
 800cec4:	20000630 	.word	0x20000630

0800cec8 <__malloc_unlock>:
 800cec8:	4801      	ldr	r0, [pc, #4]	; (800ced0 <__malloc_unlock+0x8>)
 800ceca:	f000 bc12 	b.w	800d6f2 <__retarget_lock_release_recursive>
 800cece:	bf00      	nop
 800ced0:	20000630 	.word	0x20000630

0800ced4 <_realloc_r>:
 800ced4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced6:	4607      	mov	r7, r0
 800ced8:	4614      	mov	r4, r2
 800ceda:	460e      	mov	r6, r1
 800cedc:	b921      	cbnz	r1, 800cee8 <_realloc_r+0x14>
 800cede:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cee2:	4611      	mov	r1, r2
 800cee4:	f7ff bdc8 	b.w	800ca78 <_malloc_r>
 800cee8:	b922      	cbnz	r2, 800cef4 <_realloc_r+0x20>
 800ceea:	f7ff fd75 	bl	800c9d8 <_free_r>
 800ceee:	4625      	mov	r5, r4
 800cef0:	4628      	mov	r0, r5
 800cef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cef4:	f000 fc62 	bl	800d7bc <_malloc_usable_size_r>
 800cef8:	42a0      	cmp	r0, r4
 800cefa:	d20f      	bcs.n	800cf1c <_realloc_r+0x48>
 800cefc:	4621      	mov	r1, r4
 800cefe:	4638      	mov	r0, r7
 800cf00:	f7ff fdba 	bl	800ca78 <_malloc_r>
 800cf04:	4605      	mov	r5, r0
 800cf06:	2800      	cmp	r0, #0
 800cf08:	d0f2      	beq.n	800cef0 <_realloc_r+0x1c>
 800cf0a:	4631      	mov	r1, r6
 800cf0c:	4622      	mov	r2, r4
 800cf0e:	f7ff f9c7 	bl	800c2a0 <memcpy>
 800cf12:	4631      	mov	r1, r6
 800cf14:	4638      	mov	r0, r7
 800cf16:	f7ff fd5f 	bl	800c9d8 <_free_r>
 800cf1a:	e7e9      	b.n	800cef0 <_realloc_r+0x1c>
 800cf1c:	4635      	mov	r5, r6
 800cf1e:	e7e7      	b.n	800cef0 <_realloc_r+0x1c>

0800cf20 <__sfputc_r>:
 800cf20:	6893      	ldr	r3, [r2, #8]
 800cf22:	3b01      	subs	r3, #1
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	b410      	push	{r4}
 800cf28:	6093      	str	r3, [r2, #8]
 800cf2a:	da08      	bge.n	800cf3e <__sfputc_r+0x1e>
 800cf2c:	6994      	ldr	r4, [r2, #24]
 800cf2e:	42a3      	cmp	r3, r4
 800cf30:	db01      	blt.n	800cf36 <__sfputc_r+0x16>
 800cf32:	290a      	cmp	r1, #10
 800cf34:	d103      	bne.n	800cf3e <__sfputc_r+0x1e>
 800cf36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf3a:	f000 b94b 	b.w	800d1d4 <__swbuf_r>
 800cf3e:	6813      	ldr	r3, [r2, #0]
 800cf40:	1c58      	adds	r0, r3, #1
 800cf42:	6010      	str	r0, [r2, #0]
 800cf44:	7019      	strb	r1, [r3, #0]
 800cf46:	4608      	mov	r0, r1
 800cf48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf4c:	4770      	bx	lr

0800cf4e <__sfputs_r>:
 800cf4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf50:	4606      	mov	r6, r0
 800cf52:	460f      	mov	r7, r1
 800cf54:	4614      	mov	r4, r2
 800cf56:	18d5      	adds	r5, r2, r3
 800cf58:	42ac      	cmp	r4, r5
 800cf5a:	d101      	bne.n	800cf60 <__sfputs_r+0x12>
 800cf5c:	2000      	movs	r0, #0
 800cf5e:	e007      	b.n	800cf70 <__sfputs_r+0x22>
 800cf60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf64:	463a      	mov	r2, r7
 800cf66:	4630      	mov	r0, r6
 800cf68:	f7ff ffda 	bl	800cf20 <__sfputc_r>
 800cf6c:	1c43      	adds	r3, r0, #1
 800cf6e:	d1f3      	bne.n	800cf58 <__sfputs_r+0xa>
 800cf70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf74 <_vfiprintf_r>:
 800cf74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf78:	460d      	mov	r5, r1
 800cf7a:	b09d      	sub	sp, #116	; 0x74
 800cf7c:	4614      	mov	r4, r2
 800cf7e:	4698      	mov	r8, r3
 800cf80:	4606      	mov	r6, r0
 800cf82:	b118      	cbz	r0, 800cf8c <_vfiprintf_r+0x18>
 800cf84:	6983      	ldr	r3, [r0, #24]
 800cf86:	b90b      	cbnz	r3, 800cf8c <_vfiprintf_r+0x18>
 800cf88:	f000 fb14 	bl	800d5b4 <__sinit>
 800cf8c:	4b89      	ldr	r3, [pc, #548]	; (800d1b4 <_vfiprintf_r+0x240>)
 800cf8e:	429d      	cmp	r5, r3
 800cf90:	d11b      	bne.n	800cfca <_vfiprintf_r+0x56>
 800cf92:	6875      	ldr	r5, [r6, #4]
 800cf94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf96:	07d9      	lsls	r1, r3, #31
 800cf98:	d405      	bmi.n	800cfa6 <_vfiprintf_r+0x32>
 800cf9a:	89ab      	ldrh	r3, [r5, #12]
 800cf9c:	059a      	lsls	r2, r3, #22
 800cf9e:	d402      	bmi.n	800cfa6 <_vfiprintf_r+0x32>
 800cfa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfa2:	f000 fba5 	bl	800d6f0 <__retarget_lock_acquire_recursive>
 800cfa6:	89ab      	ldrh	r3, [r5, #12]
 800cfa8:	071b      	lsls	r3, r3, #28
 800cfaa:	d501      	bpl.n	800cfb0 <_vfiprintf_r+0x3c>
 800cfac:	692b      	ldr	r3, [r5, #16]
 800cfae:	b9eb      	cbnz	r3, 800cfec <_vfiprintf_r+0x78>
 800cfb0:	4629      	mov	r1, r5
 800cfb2:	4630      	mov	r0, r6
 800cfb4:	f000 f96e 	bl	800d294 <__swsetup_r>
 800cfb8:	b1c0      	cbz	r0, 800cfec <_vfiprintf_r+0x78>
 800cfba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfbc:	07dc      	lsls	r4, r3, #31
 800cfbe:	d50e      	bpl.n	800cfde <_vfiprintf_r+0x6a>
 800cfc0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc4:	b01d      	add	sp, #116	; 0x74
 800cfc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfca:	4b7b      	ldr	r3, [pc, #492]	; (800d1b8 <_vfiprintf_r+0x244>)
 800cfcc:	429d      	cmp	r5, r3
 800cfce:	d101      	bne.n	800cfd4 <_vfiprintf_r+0x60>
 800cfd0:	68b5      	ldr	r5, [r6, #8]
 800cfd2:	e7df      	b.n	800cf94 <_vfiprintf_r+0x20>
 800cfd4:	4b79      	ldr	r3, [pc, #484]	; (800d1bc <_vfiprintf_r+0x248>)
 800cfd6:	429d      	cmp	r5, r3
 800cfd8:	bf08      	it	eq
 800cfda:	68f5      	ldreq	r5, [r6, #12]
 800cfdc:	e7da      	b.n	800cf94 <_vfiprintf_r+0x20>
 800cfde:	89ab      	ldrh	r3, [r5, #12]
 800cfe0:	0598      	lsls	r0, r3, #22
 800cfe2:	d4ed      	bmi.n	800cfc0 <_vfiprintf_r+0x4c>
 800cfe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfe6:	f000 fb84 	bl	800d6f2 <__retarget_lock_release_recursive>
 800cfea:	e7e9      	b.n	800cfc0 <_vfiprintf_r+0x4c>
 800cfec:	2300      	movs	r3, #0
 800cfee:	9309      	str	r3, [sp, #36]	; 0x24
 800cff0:	2320      	movs	r3, #32
 800cff2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cff6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cffa:	2330      	movs	r3, #48	; 0x30
 800cffc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d1c0 <_vfiprintf_r+0x24c>
 800d000:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d004:	f04f 0901 	mov.w	r9, #1
 800d008:	4623      	mov	r3, r4
 800d00a:	469a      	mov	sl, r3
 800d00c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d010:	b10a      	cbz	r2, 800d016 <_vfiprintf_r+0xa2>
 800d012:	2a25      	cmp	r2, #37	; 0x25
 800d014:	d1f9      	bne.n	800d00a <_vfiprintf_r+0x96>
 800d016:	ebba 0b04 	subs.w	fp, sl, r4
 800d01a:	d00b      	beq.n	800d034 <_vfiprintf_r+0xc0>
 800d01c:	465b      	mov	r3, fp
 800d01e:	4622      	mov	r2, r4
 800d020:	4629      	mov	r1, r5
 800d022:	4630      	mov	r0, r6
 800d024:	f7ff ff93 	bl	800cf4e <__sfputs_r>
 800d028:	3001      	adds	r0, #1
 800d02a:	f000 80aa 	beq.w	800d182 <_vfiprintf_r+0x20e>
 800d02e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d030:	445a      	add	r2, fp
 800d032:	9209      	str	r2, [sp, #36]	; 0x24
 800d034:	f89a 3000 	ldrb.w	r3, [sl]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	f000 80a2 	beq.w	800d182 <_vfiprintf_r+0x20e>
 800d03e:	2300      	movs	r3, #0
 800d040:	f04f 32ff 	mov.w	r2, #4294967295
 800d044:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d048:	f10a 0a01 	add.w	sl, sl, #1
 800d04c:	9304      	str	r3, [sp, #16]
 800d04e:	9307      	str	r3, [sp, #28]
 800d050:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d054:	931a      	str	r3, [sp, #104]	; 0x68
 800d056:	4654      	mov	r4, sl
 800d058:	2205      	movs	r2, #5
 800d05a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d05e:	4858      	ldr	r0, [pc, #352]	; (800d1c0 <_vfiprintf_r+0x24c>)
 800d060:	f7f3 f8be 	bl	80001e0 <memchr>
 800d064:	9a04      	ldr	r2, [sp, #16]
 800d066:	b9d8      	cbnz	r0, 800d0a0 <_vfiprintf_r+0x12c>
 800d068:	06d1      	lsls	r1, r2, #27
 800d06a:	bf44      	itt	mi
 800d06c:	2320      	movmi	r3, #32
 800d06e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d072:	0713      	lsls	r3, r2, #28
 800d074:	bf44      	itt	mi
 800d076:	232b      	movmi	r3, #43	; 0x2b
 800d078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d07c:	f89a 3000 	ldrb.w	r3, [sl]
 800d080:	2b2a      	cmp	r3, #42	; 0x2a
 800d082:	d015      	beq.n	800d0b0 <_vfiprintf_r+0x13c>
 800d084:	9a07      	ldr	r2, [sp, #28]
 800d086:	4654      	mov	r4, sl
 800d088:	2000      	movs	r0, #0
 800d08a:	f04f 0c0a 	mov.w	ip, #10
 800d08e:	4621      	mov	r1, r4
 800d090:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d094:	3b30      	subs	r3, #48	; 0x30
 800d096:	2b09      	cmp	r3, #9
 800d098:	d94e      	bls.n	800d138 <_vfiprintf_r+0x1c4>
 800d09a:	b1b0      	cbz	r0, 800d0ca <_vfiprintf_r+0x156>
 800d09c:	9207      	str	r2, [sp, #28]
 800d09e:	e014      	b.n	800d0ca <_vfiprintf_r+0x156>
 800d0a0:	eba0 0308 	sub.w	r3, r0, r8
 800d0a4:	fa09 f303 	lsl.w	r3, r9, r3
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	9304      	str	r3, [sp, #16]
 800d0ac:	46a2      	mov	sl, r4
 800d0ae:	e7d2      	b.n	800d056 <_vfiprintf_r+0xe2>
 800d0b0:	9b03      	ldr	r3, [sp, #12]
 800d0b2:	1d19      	adds	r1, r3, #4
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	9103      	str	r1, [sp, #12]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	bfbb      	ittet	lt
 800d0bc:	425b      	neglt	r3, r3
 800d0be:	f042 0202 	orrlt.w	r2, r2, #2
 800d0c2:	9307      	strge	r3, [sp, #28]
 800d0c4:	9307      	strlt	r3, [sp, #28]
 800d0c6:	bfb8      	it	lt
 800d0c8:	9204      	strlt	r2, [sp, #16]
 800d0ca:	7823      	ldrb	r3, [r4, #0]
 800d0cc:	2b2e      	cmp	r3, #46	; 0x2e
 800d0ce:	d10c      	bne.n	800d0ea <_vfiprintf_r+0x176>
 800d0d0:	7863      	ldrb	r3, [r4, #1]
 800d0d2:	2b2a      	cmp	r3, #42	; 0x2a
 800d0d4:	d135      	bne.n	800d142 <_vfiprintf_r+0x1ce>
 800d0d6:	9b03      	ldr	r3, [sp, #12]
 800d0d8:	1d1a      	adds	r2, r3, #4
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	9203      	str	r2, [sp, #12]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	bfb8      	it	lt
 800d0e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0e6:	3402      	adds	r4, #2
 800d0e8:	9305      	str	r3, [sp, #20]
 800d0ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d1d0 <_vfiprintf_r+0x25c>
 800d0ee:	7821      	ldrb	r1, [r4, #0]
 800d0f0:	2203      	movs	r2, #3
 800d0f2:	4650      	mov	r0, sl
 800d0f4:	f7f3 f874 	bl	80001e0 <memchr>
 800d0f8:	b140      	cbz	r0, 800d10c <_vfiprintf_r+0x198>
 800d0fa:	2340      	movs	r3, #64	; 0x40
 800d0fc:	eba0 000a 	sub.w	r0, r0, sl
 800d100:	fa03 f000 	lsl.w	r0, r3, r0
 800d104:	9b04      	ldr	r3, [sp, #16]
 800d106:	4303      	orrs	r3, r0
 800d108:	3401      	adds	r4, #1
 800d10a:	9304      	str	r3, [sp, #16]
 800d10c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d110:	482c      	ldr	r0, [pc, #176]	; (800d1c4 <_vfiprintf_r+0x250>)
 800d112:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d116:	2206      	movs	r2, #6
 800d118:	f7f3 f862 	bl	80001e0 <memchr>
 800d11c:	2800      	cmp	r0, #0
 800d11e:	d03f      	beq.n	800d1a0 <_vfiprintf_r+0x22c>
 800d120:	4b29      	ldr	r3, [pc, #164]	; (800d1c8 <_vfiprintf_r+0x254>)
 800d122:	bb1b      	cbnz	r3, 800d16c <_vfiprintf_r+0x1f8>
 800d124:	9b03      	ldr	r3, [sp, #12]
 800d126:	3307      	adds	r3, #7
 800d128:	f023 0307 	bic.w	r3, r3, #7
 800d12c:	3308      	adds	r3, #8
 800d12e:	9303      	str	r3, [sp, #12]
 800d130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d132:	443b      	add	r3, r7
 800d134:	9309      	str	r3, [sp, #36]	; 0x24
 800d136:	e767      	b.n	800d008 <_vfiprintf_r+0x94>
 800d138:	fb0c 3202 	mla	r2, ip, r2, r3
 800d13c:	460c      	mov	r4, r1
 800d13e:	2001      	movs	r0, #1
 800d140:	e7a5      	b.n	800d08e <_vfiprintf_r+0x11a>
 800d142:	2300      	movs	r3, #0
 800d144:	3401      	adds	r4, #1
 800d146:	9305      	str	r3, [sp, #20]
 800d148:	4619      	mov	r1, r3
 800d14a:	f04f 0c0a 	mov.w	ip, #10
 800d14e:	4620      	mov	r0, r4
 800d150:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d154:	3a30      	subs	r2, #48	; 0x30
 800d156:	2a09      	cmp	r2, #9
 800d158:	d903      	bls.n	800d162 <_vfiprintf_r+0x1ee>
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d0c5      	beq.n	800d0ea <_vfiprintf_r+0x176>
 800d15e:	9105      	str	r1, [sp, #20]
 800d160:	e7c3      	b.n	800d0ea <_vfiprintf_r+0x176>
 800d162:	fb0c 2101 	mla	r1, ip, r1, r2
 800d166:	4604      	mov	r4, r0
 800d168:	2301      	movs	r3, #1
 800d16a:	e7f0      	b.n	800d14e <_vfiprintf_r+0x1da>
 800d16c:	ab03      	add	r3, sp, #12
 800d16e:	9300      	str	r3, [sp, #0]
 800d170:	462a      	mov	r2, r5
 800d172:	4b16      	ldr	r3, [pc, #88]	; (800d1cc <_vfiprintf_r+0x258>)
 800d174:	a904      	add	r1, sp, #16
 800d176:	4630      	mov	r0, r6
 800d178:	f7fd fe22 	bl	800adc0 <_printf_float>
 800d17c:	4607      	mov	r7, r0
 800d17e:	1c78      	adds	r0, r7, #1
 800d180:	d1d6      	bne.n	800d130 <_vfiprintf_r+0x1bc>
 800d182:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d184:	07d9      	lsls	r1, r3, #31
 800d186:	d405      	bmi.n	800d194 <_vfiprintf_r+0x220>
 800d188:	89ab      	ldrh	r3, [r5, #12]
 800d18a:	059a      	lsls	r2, r3, #22
 800d18c:	d402      	bmi.n	800d194 <_vfiprintf_r+0x220>
 800d18e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d190:	f000 faaf 	bl	800d6f2 <__retarget_lock_release_recursive>
 800d194:	89ab      	ldrh	r3, [r5, #12]
 800d196:	065b      	lsls	r3, r3, #25
 800d198:	f53f af12 	bmi.w	800cfc0 <_vfiprintf_r+0x4c>
 800d19c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d19e:	e711      	b.n	800cfc4 <_vfiprintf_r+0x50>
 800d1a0:	ab03      	add	r3, sp, #12
 800d1a2:	9300      	str	r3, [sp, #0]
 800d1a4:	462a      	mov	r2, r5
 800d1a6:	4b09      	ldr	r3, [pc, #36]	; (800d1cc <_vfiprintf_r+0x258>)
 800d1a8:	a904      	add	r1, sp, #16
 800d1aa:	4630      	mov	r0, r6
 800d1ac:	f7fe f8ac 	bl	800b308 <_printf_i>
 800d1b0:	e7e4      	b.n	800d17c <_vfiprintf_r+0x208>
 800d1b2:	bf00      	nop
 800d1b4:	0801683c 	.word	0x0801683c
 800d1b8:	0801685c 	.word	0x0801685c
 800d1bc:	0801681c 	.word	0x0801681c
 800d1c0:	080166c4 	.word	0x080166c4
 800d1c4:	080166ce 	.word	0x080166ce
 800d1c8:	0800adc1 	.word	0x0800adc1
 800d1cc:	0800cf4f 	.word	0x0800cf4f
 800d1d0:	080166ca 	.word	0x080166ca

0800d1d4 <__swbuf_r>:
 800d1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1d6:	460e      	mov	r6, r1
 800d1d8:	4614      	mov	r4, r2
 800d1da:	4605      	mov	r5, r0
 800d1dc:	b118      	cbz	r0, 800d1e6 <__swbuf_r+0x12>
 800d1de:	6983      	ldr	r3, [r0, #24]
 800d1e0:	b90b      	cbnz	r3, 800d1e6 <__swbuf_r+0x12>
 800d1e2:	f000 f9e7 	bl	800d5b4 <__sinit>
 800d1e6:	4b21      	ldr	r3, [pc, #132]	; (800d26c <__swbuf_r+0x98>)
 800d1e8:	429c      	cmp	r4, r3
 800d1ea:	d12b      	bne.n	800d244 <__swbuf_r+0x70>
 800d1ec:	686c      	ldr	r4, [r5, #4]
 800d1ee:	69a3      	ldr	r3, [r4, #24]
 800d1f0:	60a3      	str	r3, [r4, #8]
 800d1f2:	89a3      	ldrh	r3, [r4, #12]
 800d1f4:	071a      	lsls	r2, r3, #28
 800d1f6:	d52f      	bpl.n	800d258 <__swbuf_r+0x84>
 800d1f8:	6923      	ldr	r3, [r4, #16]
 800d1fa:	b36b      	cbz	r3, 800d258 <__swbuf_r+0x84>
 800d1fc:	6923      	ldr	r3, [r4, #16]
 800d1fe:	6820      	ldr	r0, [r4, #0]
 800d200:	1ac0      	subs	r0, r0, r3
 800d202:	6963      	ldr	r3, [r4, #20]
 800d204:	b2f6      	uxtb	r6, r6
 800d206:	4283      	cmp	r3, r0
 800d208:	4637      	mov	r7, r6
 800d20a:	dc04      	bgt.n	800d216 <__swbuf_r+0x42>
 800d20c:	4621      	mov	r1, r4
 800d20e:	4628      	mov	r0, r5
 800d210:	f000 f93c 	bl	800d48c <_fflush_r>
 800d214:	bb30      	cbnz	r0, 800d264 <__swbuf_r+0x90>
 800d216:	68a3      	ldr	r3, [r4, #8]
 800d218:	3b01      	subs	r3, #1
 800d21a:	60a3      	str	r3, [r4, #8]
 800d21c:	6823      	ldr	r3, [r4, #0]
 800d21e:	1c5a      	adds	r2, r3, #1
 800d220:	6022      	str	r2, [r4, #0]
 800d222:	701e      	strb	r6, [r3, #0]
 800d224:	6963      	ldr	r3, [r4, #20]
 800d226:	3001      	adds	r0, #1
 800d228:	4283      	cmp	r3, r0
 800d22a:	d004      	beq.n	800d236 <__swbuf_r+0x62>
 800d22c:	89a3      	ldrh	r3, [r4, #12]
 800d22e:	07db      	lsls	r3, r3, #31
 800d230:	d506      	bpl.n	800d240 <__swbuf_r+0x6c>
 800d232:	2e0a      	cmp	r6, #10
 800d234:	d104      	bne.n	800d240 <__swbuf_r+0x6c>
 800d236:	4621      	mov	r1, r4
 800d238:	4628      	mov	r0, r5
 800d23a:	f000 f927 	bl	800d48c <_fflush_r>
 800d23e:	b988      	cbnz	r0, 800d264 <__swbuf_r+0x90>
 800d240:	4638      	mov	r0, r7
 800d242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d244:	4b0a      	ldr	r3, [pc, #40]	; (800d270 <__swbuf_r+0x9c>)
 800d246:	429c      	cmp	r4, r3
 800d248:	d101      	bne.n	800d24e <__swbuf_r+0x7a>
 800d24a:	68ac      	ldr	r4, [r5, #8]
 800d24c:	e7cf      	b.n	800d1ee <__swbuf_r+0x1a>
 800d24e:	4b09      	ldr	r3, [pc, #36]	; (800d274 <__swbuf_r+0xa0>)
 800d250:	429c      	cmp	r4, r3
 800d252:	bf08      	it	eq
 800d254:	68ec      	ldreq	r4, [r5, #12]
 800d256:	e7ca      	b.n	800d1ee <__swbuf_r+0x1a>
 800d258:	4621      	mov	r1, r4
 800d25a:	4628      	mov	r0, r5
 800d25c:	f000 f81a 	bl	800d294 <__swsetup_r>
 800d260:	2800      	cmp	r0, #0
 800d262:	d0cb      	beq.n	800d1fc <__swbuf_r+0x28>
 800d264:	f04f 37ff 	mov.w	r7, #4294967295
 800d268:	e7ea      	b.n	800d240 <__swbuf_r+0x6c>
 800d26a:	bf00      	nop
 800d26c:	0801683c 	.word	0x0801683c
 800d270:	0801685c 	.word	0x0801685c
 800d274:	0801681c 	.word	0x0801681c

0800d278 <__ascii_wctomb>:
 800d278:	b149      	cbz	r1, 800d28e <__ascii_wctomb+0x16>
 800d27a:	2aff      	cmp	r2, #255	; 0xff
 800d27c:	bf85      	ittet	hi
 800d27e:	238a      	movhi	r3, #138	; 0x8a
 800d280:	6003      	strhi	r3, [r0, #0]
 800d282:	700a      	strbls	r2, [r1, #0]
 800d284:	f04f 30ff 	movhi.w	r0, #4294967295
 800d288:	bf98      	it	ls
 800d28a:	2001      	movls	r0, #1
 800d28c:	4770      	bx	lr
 800d28e:	4608      	mov	r0, r1
 800d290:	4770      	bx	lr
	...

0800d294 <__swsetup_r>:
 800d294:	4b32      	ldr	r3, [pc, #200]	; (800d360 <__swsetup_r+0xcc>)
 800d296:	b570      	push	{r4, r5, r6, lr}
 800d298:	681d      	ldr	r5, [r3, #0]
 800d29a:	4606      	mov	r6, r0
 800d29c:	460c      	mov	r4, r1
 800d29e:	b125      	cbz	r5, 800d2aa <__swsetup_r+0x16>
 800d2a0:	69ab      	ldr	r3, [r5, #24]
 800d2a2:	b913      	cbnz	r3, 800d2aa <__swsetup_r+0x16>
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	f000 f985 	bl	800d5b4 <__sinit>
 800d2aa:	4b2e      	ldr	r3, [pc, #184]	; (800d364 <__swsetup_r+0xd0>)
 800d2ac:	429c      	cmp	r4, r3
 800d2ae:	d10f      	bne.n	800d2d0 <__swsetup_r+0x3c>
 800d2b0:	686c      	ldr	r4, [r5, #4]
 800d2b2:	89a3      	ldrh	r3, [r4, #12]
 800d2b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2b8:	0719      	lsls	r1, r3, #28
 800d2ba:	d42c      	bmi.n	800d316 <__swsetup_r+0x82>
 800d2bc:	06dd      	lsls	r5, r3, #27
 800d2be:	d411      	bmi.n	800d2e4 <__swsetup_r+0x50>
 800d2c0:	2309      	movs	r3, #9
 800d2c2:	6033      	str	r3, [r6, #0]
 800d2c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d2c8:	81a3      	strh	r3, [r4, #12]
 800d2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ce:	e03e      	b.n	800d34e <__swsetup_r+0xba>
 800d2d0:	4b25      	ldr	r3, [pc, #148]	; (800d368 <__swsetup_r+0xd4>)
 800d2d2:	429c      	cmp	r4, r3
 800d2d4:	d101      	bne.n	800d2da <__swsetup_r+0x46>
 800d2d6:	68ac      	ldr	r4, [r5, #8]
 800d2d8:	e7eb      	b.n	800d2b2 <__swsetup_r+0x1e>
 800d2da:	4b24      	ldr	r3, [pc, #144]	; (800d36c <__swsetup_r+0xd8>)
 800d2dc:	429c      	cmp	r4, r3
 800d2de:	bf08      	it	eq
 800d2e0:	68ec      	ldreq	r4, [r5, #12]
 800d2e2:	e7e6      	b.n	800d2b2 <__swsetup_r+0x1e>
 800d2e4:	0758      	lsls	r0, r3, #29
 800d2e6:	d512      	bpl.n	800d30e <__swsetup_r+0x7a>
 800d2e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2ea:	b141      	cbz	r1, 800d2fe <__swsetup_r+0x6a>
 800d2ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2f0:	4299      	cmp	r1, r3
 800d2f2:	d002      	beq.n	800d2fa <__swsetup_r+0x66>
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	f7ff fb6f 	bl	800c9d8 <_free_r>
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	6363      	str	r3, [r4, #52]	; 0x34
 800d2fe:	89a3      	ldrh	r3, [r4, #12]
 800d300:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d304:	81a3      	strh	r3, [r4, #12]
 800d306:	2300      	movs	r3, #0
 800d308:	6063      	str	r3, [r4, #4]
 800d30a:	6923      	ldr	r3, [r4, #16]
 800d30c:	6023      	str	r3, [r4, #0]
 800d30e:	89a3      	ldrh	r3, [r4, #12]
 800d310:	f043 0308 	orr.w	r3, r3, #8
 800d314:	81a3      	strh	r3, [r4, #12]
 800d316:	6923      	ldr	r3, [r4, #16]
 800d318:	b94b      	cbnz	r3, 800d32e <__swsetup_r+0x9a>
 800d31a:	89a3      	ldrh	r3, [r4, #12]
 800d31c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d324:	d003      	beq.n	800d32e <__swsetup_r+0x9a>
 800d326:	4621      	mov	r1, r4
 800d328:	4630      	mov	r0, r6
 800d32a:	f000 fa07 	bl	800d73c <__smakebuf_r>
 800d32e:	89a0      	ldrh	r0, [r4, #12]
 800d330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d334:	f010 0301 	ands.w	r3, r0, #1
 800d338:	d00a      	beq.n	800d350 <__swsetup_r+0xbc>
 800d33a:	2300      	movs	r3, #0
 800d33c:	60a3      	str	r3, [r4, #8]
 800d33e:	6963      	ldr	r3, [r4, #20]
 800d340:	425b      	negs	r3, r3
 800d342:	61a3      	str	r3, [r4, #24]
 800d344:	6923      	ldr	r3, [r4, #16]
 800d346:	b943      	cbnz	r3, 800d35a <__swsetup_r+0xc6>
 800d348:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d34c:	d1ba      	bne.n	800d2c4 <__swsetup_r+0x30>
 800d34e:	bd70      	pop	{r4, r5, r6, pc}
 800d350:	0781      	lsls	r1, r0, #30
 800d352:	bf58      	it	pl
 800d354:	6963      	ldrpl	r3, [r4, #20]
 800d356:	60a3      	str	r3, [r4, #8]
 800d358:	e7f4      	b.n	800d344 <__swsetup_r+0xb0>
 800d35a:	2000      	movs	r0, #0
 800d35c:	e7f7      	b.n	800d34e <__swsetup_r+0xba>
 800d35e:	bf00      	nop
 800d360:	20000010 	.word	0x20000010
 800d364:	0801683c 	.word	0x0801683c
 800d368:	0801685c 	.word	0x0801685c
 800d36c:	0801681c 	.word	0x0801681c

0800d370 <abort>:
 800d370:	b508      	push	{r3, lr}
 800d372:	2006      	movs	r0, #6
 800d374:	f000 fa52 	bl	800d81c <raise>
 800d378:	2001      	movs	r0, #1
 800d37a:	f7f6 fc1f 	bl	8003bbc <_exit>
	...

0800d380 <__sflush_r>:
 800d380:	898a      	ldrh	r2, [r1, #12]
 800d382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d386:	4605      	mov	r5, r0
 800d388:	0710      	lsls	r0, r2, #28
 800d38a:	460c      	mov	r4, r1
 800d38c:	d458      	bmi.n	800d440 <__sflush_r+0xc0>
 800d38e:	684b      	ldr	r3, [r1, #4]
 800d390:	2b00      	cmp	r3, #0
 800d392:	dc05      	bgt.n	800d3a0 <__sflush_r+0x20>
 800d394:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d396:	2b00      	cmp	r3, #0
 800d398:	dc02      	bgt.n	800d3a0 <__sflush_r+0x20>
 800d39a:	2000      	movs	r0, #0
 800d39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3a2:	2e00      	cmp	r6, #0
 800d3a4:	d0f9      	beq.n	800d39a <__sflush_r+0x1a>
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d3ac:	682f      	ldr	r7, [r5, #0]
 800d3ae:	602b      	str	r3, [r5, #0]
 800d3b0:	d032      	beq.n	800d418 <__sflush_r+0x98>
 800d3b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d3b4:	89a3      	ldrh	r3, [r4, #12]
 800d3b6:	075a      	lsls	r2, r3, #29
 800d3b8:	d505      	bpl.n	800d3c6 <__sflush_r+0x46>
 800d3ba:	6863      	ldr	r3, [r4, #4]
 800d3bc:	1ac0      	subs	r0, r0, r3
 800d3be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d3c0:	b10b      	cbz	r3, 800d3c6 <__sflush_r+0x46>
 800d3c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d3c4:	1ac0      	subs	r0, r0, r3
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3cc:	6a21      	ldr	r1, [r4, #32]
 800d3ce:	4628      	mov	r0, r5
 800d3d0:	47b0      	blx	r6
 800d3d2:	1c43      	adds	r3, r0, #1
 800d3d4:	89a3      	ldrh	r3, [r4, #12]
 800d3d6:	d106      	bne.n	800d3e6 <__sflush_r+0x66>
 800d3d8:	6829      	ldr	r1, [r5, #0]
 800d3da:	291d      	cmp	r1, #29
 800d3dc:	d82c      	bhi.n	800d438 <__sflush_r+0xb8>
 800d3de:	4a2a      	ldr	r2, [pc, #168]	; (800d488 <__sflush_r+0x108>)
 800d3e0:	40ca      	lsrs	r2, r1
 800d3e2:	07d6      	lsls	r6, r2, #31
 800d3e4:	d528      	bpl.n	800d438 <__sflush_r+0xb8>
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	6062      	str	r2, [r4, #4]
 800d3ea:	04d9      	lsls	r1, r3, #19
 800d3ec:	6922      	ldr	r2, [r4, #16]
 800d3ee:	6022      	str	r2, [r4, #0]
 800d3f0:	d504      	bpl.n	800d3fc <__sflush_r+0x7c>
 800d3f2:	1c42      	adds	r2, r0, #1
 800d3f4:	d101      	bne.n	800d3fa <__sflush_r+0x7a>
 800d3f6:	682b      	ldr	r3, [r5, #0]
 800d3f8:	b903      	cbnz	r3, 800d3fc <__sflush_r+0x7c>
 800d3fa:	6560      	str	r0, [r4, #84]	; 0x54
 800d3fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3fe:	602f      	str	r7, [r5, #0]
 800d400:	2900      	cmp	r1, #0
 800d402:	d0ca      	beq.n	800d39a <__sflush_r+0x1a>
 800d404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d408:	4299      	cmp	r1, r3
 800d40a:	d002      	beq.n	800d412 <__sflush_r+0x92>
 800d40c:	4628      	mov	r0, r5
 800d40e:	f7ff fae3 	bl	800c9d8 <_free_r>
 800d412:	2000      	movs	r0, #0
 800d414:	6360      	str	r0, [r4, #52]	; 0x34
 800d416:	e7c1      	b.n	800d39c <__sflush_r+0x1c>
 800d418:	6a21      	ldr	r1, [r4, #32]
 800d41a:	2301      	movs	r3, #1
 800d41c:	4628      	mov	r0, r5
 800d41e:	47b0      	blx	r6
 800d420:	1c41      	adds	r1, r0, #1
 800d422:	d1c7      	bne.n	800d3b4 <__sflush_r+0x34>
 800d424:	682b      	ldr	r3, [r5, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d0c4      	beq.n	800d3b4 <__sflush_r+0x34>
 800d42a:	2b1d      	cmp	r3, #29
 800d42c:	d001      	beq.n	800d432 <__sflush_r+0xb2>
 800d42e:	2b16      	cmp	r3, #22
 800d430:	d101      	bne.n	800d436 <__sflush_r+0xb6>
 800d432:	602f      	str	r7, [r5, #0]
 800d434:	e7b1      	b.n	800d39a <__sflush_r+0x1a>
 800d436:	89a3      	ldrh	r3, [r4, #12]
 800d438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d43c:	81a3      	strh	r3, [r4, #12]
 800d43e:	e7ad      	b.n	800d39c <__sflush_r+0x1c>
 800d440:	690f      	ldr	r7, [r1, #16]
 800d442:	2f00      	cmp	r7, #0
 800d444:	d0a9      	beq.n	800d39a <__sflush_r+0x1a>
 800d446:	0793      	lsls	r3, r2, #30
 800d448:	680e      	ldr	r6, [r1, #0]
 800d44a:	bf08      	it	eq
 800d44c:	694b      	ldreq	r3, [r1, #20]
 800d44e:	600f      	str	r7, [r1, #0]
 800d450:	bf18      	it	ne
 800d452:	2300      	movne	r3, #0
 800d454:	eba6 0807 	sub.w	r8, r6, r7
 800d458:	608b      	str	r3, [r1, #8]
 800d45a:	f1b8 0f00 	cmp.w	r8, #0
 800d45e:	dd9c      	ble.n	800d39a <__sflush_r+0x1a>
 800d460:	6a21      	ldr	r1, [r4, #32]
 800d462:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d464:	4643      	mov	r3, r8
 800d466:	463a      	mov	r2, r7
 800d468:	4628      	mov	r0, r5
 800d46a:	47b0      	blx	r6
 800d46c:	2800      	cmp	r0, #0
 800d46e:	dc06      	bgt.n	800d47e <__sflush_r+0xfe>
 800d470:	89a3      	ldrh	r3, [r4, #12]
 800d472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d476:	81a3      	strh	r3, [r4, #12]
 800d478:	f04f 30ff 	mov.w	r0, #4294967295
 800d47c:	e78e      	b.n	800d39c <__sflush_r+0x1c>
 800d47e:	4407      	add	r7, r0
 800d480:	eba8 0800 	sub.w	r8, r8, r0
 800d484:	e7e9      	b.n	800d45a <__sflush_r+0xda>
 800d486:	bf00      	nop
 800d488:	20400001 	.word	0x20400001

0800d48c <_fflush_r>:
 800d48c:	b538      	push	{r3, r4, r5, lr}
 800d48e:	690b      	ldr	r3, [r1, #16]
 800d490:	4605      	mov	r5, r0
 800d492:	460c      	mov	r4, r1
 800d494:	b913      	cbnz	r3, 800d49c <_fflush_r+0x10>
 800d496:	2500      	movs	r5, #0
 800d498:	4628      	mov	r0, r5
 800d49a:	bd38      	pop	{r3, r4, r5, pc}
 800d49c:	b118      	cbz	r0, 800d4a6 <_fflush_r+0x1a>
 800d49e:	6983      	ldr	r3, [r0, #24]
 800d4a0:	b90b      	cbnz	r3, 800d4a6 <_fflush_r+0x1a>
 800d4a2:	f000 f887 	bl	800d5b4 <__sinit>
 800d4a6:	4b14      	ldr	r3, [pc, #80]	; (800d4f8 <_fflush_r+0x6c>)
 800d4a8:	429c      	cmp	r4, r3
 800d4aa:	d11b      	bne.n	800d4e4 <_fflush_r+0x58>
 800d4ac:	686c      	ldr	r4, [r5, #4]
 800d4ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d0ef      	beq.n	800d496 <_fflush_r+0xa>
 800d4b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d4b8:	07d0      	lsls	r0, r2, #31
 800d4ba:	d404      	bmi.n	800d4c6 <_fflush_r+0x3a>
 800d4bc:	0599      	lsls	r1, r3, #22
 800d4be:	d402      	bmi.n	800d4c6 <_fflush_r+0x3a>
 800d4c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4c2:	f000 f915 	bl	800d6f0 <__retarget_lock_acquire_recursive>
 800d4c6:	4628      	mov	r0, r5
 800d4c8:	4621      	mov	r1, r4
 800d4ca:	f7ff ff59 	bl	800d380 <__sflush_r>
 800d4ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d4d0:	07da      	lsls	r2, r3, #31
 800d4d2:	4605      	mov	r5, r0
 800d4d4:	d4e0      	bmi.n	800d498 <_fflush_r+0xc>
 800d4d6:	89a3      	ldrh	r3, [r4, #12]
 800d4d8:	059b      	lsls	r3, r3, #22
 800d4da:	d4dd      	bmi.n	800d498 <_fflush_r+0xc>
 800d4dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4de:	f000 f908 	bl	800d6f2 <__retarget_lock_release_recursive>
 800d4e2:	e7d9      	b.n	800d498 <_fflush_r+0xc>
 800d4e4:	4b05      	ldr	r3, [pc, #20]	; (800d4fc <_fflush_r+0x70>)
 800d4e6:	429c      	cmp	r4, r3
 800d4e8:	d101      	bne.n	800d4ee <_fflush_r+0x62>
 800d4ea:	68ac      	ldr	r4, [r5, #8]
 800d4ec:	e7df      	b.n	800d4ae <_fflush_r+0x22>
 800d4ee:	4b04      	ldr	r3, [pc, #16]	; (800d500 <_fflush_r+0x74>)
 800d4f0:	429c      	cmp	r4, r3
 800d4f2:	bf08      	it	eq
 800d4f4:	68ec      	ldreq	r4, [r5, #12]
 800d4f6:	e7da      	b.n	800d4ae <_fflush_r+0x22>
 800d4f8:	0801683c 	.word	0x0801683c
 800d4fc:	0801685c 	.word	0x0801685c
 800d500:	0801681c 	.word	0x0801681c

0800d504 <std>:
 800d504:	2300      	movs	r3, #0
 800d506:	b510      	push	{r4, lr}
 800d508:	4604      	mov	r4, r0
 800d50a:	e9c0 3300 	strd	r3, r3, [r0]
 800d50e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d512:	6083      	str	r3, [r0, #8]
 800d514:	8181      	strh	r1, [r0, #12]
 800d516:	6643      	str	r3, [r0, #100]	; 0x64
 800d518:	81c2      	strh	r2, [r0, #14]
 800d51a:	6183      	str	r3, [r0, #24]
 800d51c:	4619      	mov	r1, r3
 800d51e:	2208      	movs	r2, #8
 800d520:	305c      	adds	r0, #92	; 0x5c
 800d522:	f7fd fba5 	bl	800ac70 <memset>
 800d526:	4b05      	ldr	r3, [pc, #20]	; (800d53c <std+0x38>)
 800d528:	6263      	str	r3, [r4, #36]	; 0x24
 800d52a:	4b05      	ldr	r3, [pc, #20]	; (800d540 <std+0x3c>)
 800d52c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d52e:	4b05      	ldr	r3, [pc, #20]	; (800d544 <std+0x40>)
 800d530:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d532:	4b05      	ldr	r3, [pc, #20]	; (800d548 <std+0x44>)
 800d534:	6224      	str	r4, [r4, #32]
 800d536:	6323      	str	r3, [r4, #48]	; 0x30
 800d538:	bd10      	pop	{r4, pc}
 800d53a:	bf00      	nop
 800d53c:	0800d855 	.word	0x0800d855
 800d540:	0800d877 	.word	0x0800d877
 800d544:	0800d8af 	.word	0x0800d8af
 800d548:	0800d8d3 	.word	0x0800d8d3

0800d54c <_cleanup_r>:
 800d54c:	4901      	ldr	r1, [pc, #4]	; (800d554 <_cleanup_r+0x8>)
 800d54e:	f000 b8af 	b.w	800d6b0 <_fwalk_reent>
 800d552:	bf00      	nop
 800d554:	0800d48d 	.word	0x0800d48d

0800d558 <__sfmoreglue>:
 800d558:	b570      	push	{r4, r5, r6, lr}
 800d55a:	1e4a      	subs	r2, r1, #1
 800d55c:	2568      	movs	r5, #104	; 0x68
 800d55e:	4355      	muls	r5, r2
 800d560:	460e      	mov	r6, r1
 800d562:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d566:	f7ff fa87 	bl	800ca78 <_malloc_r>
 800d56a:	4604      	mov	r4, r0
 800d56c:	b140      	cbz	r0, 800d580 <__sfmoreglue+0x28>
 800d56e:	2100      	movs	r1, #0
 800d570:	e9c0 1600 	strd	r1, r6, [r0]
 800d574:	300c      	adds	r0, #12
 800d576:	60a0      	str	r0, [r4, #8]
 800d578:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d57c:	f7fd fb78 	bl	800ac70 <memset>
 800d580:	4620      	mov	r0, r4
 800d582:	bd70      	pop	{r4, r5, r6, pc}

0800d584 <__sfp_lock_acquire>:
 800d584:	4801      	ldr	r0, [pc, #4]	; (800d58c <__sfp_lock_acquire+0x8>)
 800d586:	f000 b8b3 	b.w	800d6f0 <__retarget_lock_acquire_recursive>
 800d58a:	bf00      	nop
 800d58c:	20000634 	.word	0x20000634

0800d590 <__sfp_lock_release>:
 800d590:	4801      	ldr	r0, [pc, #4]	; (800d598 <__sfp_lock_release+0x8>)
 800d592:	f000 b8ae 	b.w	800d6f2 <__retarget_lock_release_recursive>
 800d596:	bf00      	nop
 800d598:	20000634 	.word	0x20000634

0800d59c <__sinit_lock_acquire>:
 800d59c:	4801      	ldr	r0, [pc, #4]	; (800d5a4 <__sinit_lock_acquire+0x8>)
 800d59e:	f000 b8a7 	b.w	800d6f0 <__retarget_lock_acquire_recursive>
 800d5a2:	bf00      	nop
 800d5a4:	2000062f 	.word	0x2000062f

0800d5a8 <__sinit_lock_release>:
 800d5a8:	4801      	ldr	r0, [pc, #4]	; (800d5b0 <__sinit_lock_release+0x8>)
 800d5aa:	f000 b8a2 	b.w	800d6f2 <__retarget_lock_release_recursive>
 800d5ae:	bf00      	nop
 800d5b0:	2000062f 	.word	0x2000062f

0800d5b4 <__sinit>:
 800d5b4:	b510      	push	{r4, lr}
 800d5b6:	4604      	mov	r4, r0
 800d5b8:	f7ff fff0 	bl	800d59c <__sinit_lock_acquire>
 800d5bc:	69a3      	ldr	r3, [r4, #24]
 800d5be:	b11b      	cbz	r3, 800d5c8 <__sinit+0x14>
 800d5c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5c4:	f7ff bff0 	b.w	800d5a8 <__sinit_lock_release>
 800d5c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d5cc:	6523      	str	r3, [r4, #80]	; 0x50
 800d5ce:	4b13      	ldr	r3, [pc, #76]	; (800d61c <__sinit+0x68>)
 800d5d0:	4a13      	ldr	r2, [pc, #76]	; (800d620 <__sinit+0x6c>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800d5d6:	42a3      	cmp	r3, r4
 800d5d8:	bf04      	itt	eq
 800d5da:	2301      	moveq	r3, #1
 800d5dc:	61a3      	streq	r3, [r4, #24]
 800d5de:	4620      	mov	r0, r4
 800d5e0:	f000 f820 	bl	800d624 <__sfp>
 800d5e4:	6060      	str	r0, [r4, #4]
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	f000 f81c 	bl	800d624 <__sfp>
 800d5ec:	60a0      	str	r0, [r4, #8]
 800d5ee:	4620      	mov	r0, r4
 800d5f0:	f000 f818 	bl	800d624 <__sfp>
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	60e0      	str	r0, [r4, #12]
 800d5f8:	2104      	movs	r1, #4
 800d5fa:	6860      	ldr	r0, [r4, #4]
 800d5fc:	f7ff ff82 	bl	800d504 <std>
 800d600:	68a0      	ldr	r0, [r4, #8]
 800d602:	2201      	movs	r2, #1
 800d604:	2109      	movs	r1, #9
 800d606:	f7ff ff7d 	bl	800d504 <std>
 800d60a:	68e0      	ldr	r0, [r4, #12]
 800d60c:	2202      	movs	r2, #2
 800d60e:	2112      	movs	r1, #18
 800d610:	f7ff ff78 	bl	800d504 <std>
 800d614:	2301      	movs	r3, #1
 800d616:	61a3      	str	r3, [r4, #24]
 800d618:	e7d2      	b.n	800d5c0 <__sinit+0xc>
 800d61a:	bf00      	nop
 800d61c:	0801649c 	.word	0x0801649c
 800d620:	0800d54d 	.word	0x0800d54d

0800d624 <__sfp>:
 800d624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d626:	4607      	mov	r7, r0
 800d628:	f7ff ffac 	bl	800d584 <__sfp_lock_acquire>
 800d62c:	4b1e      	ldr	r3, [pc, #120]	; (800d6a8 <__sfp+0x84>)
 800d62e:	681e      	ldr	r6, [r3, #0]
 800d630:	69b3      	ldr	r3, [r6, #24]
 800d632:	b913      	cbnz	r3, 800d63a <__sfp+0x16>
 800d634:	4630      	mov	r0, r6
 800d636:	f7ff ffbd 	bl	800d5b4 <__sinit>
 800d63a:	3648      	adds	r6, #72	; 0x48
 800d63c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d640:	3b01      	subs	r3, #1
 800d642:	d503      	bpl.n	800d64c <__sfp+0x28>
 800d644:	6833      	ldr	r3, [r6, #0]
 800d646:	b30b      	cbz	r3, 800d68c <__sfp+0x68>
 800d648:	6836      	ldr	r6, [r6, #0]
 800d64a:	e7f7      	b.n	800d63c <__sfp+0x18>
 800d64c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d650:	b9d5      	cbnz	r5, 800d688 <__sfp+0x64>
 800d652:	4b16      	ldr	r3, [pc, #88]	; (800d6ac <__sfp+0x88>)
 800d654:	60e3      	str	r3, [r4, #12]
 800d656:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d65a:	6665      	str	r5, [r4, #100]	; 0x64
 800d65c:	f000 f847 	bl	800d6ee <__retarget_lock_init_recursive>
 800d660:	f7ff ff96 	bl	800d590 <__sfp_lock_release>
 800d664:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d668:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d66c:	6025      	str	r5, [r4, #0]
 800d66e:	61a5      	str	r5, [r4, #24]
 800d670:	2208      	movs	r2, #8
 800d672:	4629      	mov	r1, r5
 800d674:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d678:	f7fd fafa 	bl	800ac70 <memset>
 800d67c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d680:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d684:	4620      	mov	r0, r4
 800d686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d688:	3468      	adds	r4, #104	; 0x68
 800d68a:	e7d9      	b.n	800d640 <__sfp+0x1c>
 800d68c:	2104      	movs	r1, #4
 800d68e:	4638      	mov	r0, r7
 800d690:	f7ff ff62 	bl	800d558 <__sfmoreglue>
 800d694:	4604      	mov	r4, r0
 800d696:	6030      	str	r0, [r6, #0]
 800d698:	2800      	cmp	r0, #0
 800d69a:	d1d5      	bne.n	800d648 <__sfp+0x24>
 800d69c:	f7ff ff78 	bl	800d590 <__sfp_lock_release>
 800d6a0:	230c      	movs	r3, #12
 800d6a2:	603b      	str	r3, [r7, #0]
 800d6a4:	e7ee      	b.n	800d684 <__sfp+0x60>
 800d6a6:	bf00      	nop
 800d6a8:	0801649c 	.word	0x0801649c
 800d6ac:	ffff0001 	.word	0xffff0001

0800d6b0 <_fwalk_reent>:
 800d6b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6b4:	4606      	mov	r6, r0
 800d6b6:	4688      	mov	r8, r1
 800d6b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d6bc:	2700      	movs	r7, #0
 800d6be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d6c2:	f1b9 0901 	subs.w	r9, r9, #1
 800d6c6:	d505      	bpl.n	800d6d4 <_fwalk_reent+0x24>
 800d6c8:	6824      	ldr	r4, [r4, #0]
 800d6ca:	2c00      	cmp	r4, #0
 800d6cc:	d1f7      	bne.n	800d6be <_fwalk_reent+0xe>
 800d6ce:	4638      	mov	r0, r7
 800d6d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6d4:	89ab      	ldrh	r3, [r5, #12]
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d907      	bls.n	800d6ea <_fwalk_reent+0x3a>
 800d6da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d6de:	3301      	adds	r3, #1
 800d6e0:	d003      	beq.n	800d6ea <_fwalk_reent+0x3a>
 800d6e2:	4629      	mov	r1, r5
 800d6e4:	4630      	mov	r0, r6
 800d6e6:	47c0      	blx	r8
 800d6e8:	4307      	orrs	r7, r0
 800d6ea:	3568      	adds	r5, #104	; 0x68
 800d6ec:	e7e9      	b.n	800d6c2 <_fwalk_reent+0x12>

0800d6ee <__retarget_lock_init_recursive>:
 800d6ee:	4770      	bx	lr

0800d6f0 <__retarget_lock_acquire_recursive>:
 800d6f0:	4770      	bx	lr

0800d6f2 <__retarget_lock_release_recursive>:
 800d6f2:	4770      	bx	lr

0800d6f4 <__swhatbuf_r>:
 800d6f4:	b570      	push	{r4, r5, r6, lr}
 800d6f6:	460e      	mov	r6, r1
 800d6f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6fc:	2900      	cmp	r1, #0
 800d6fe:	b096      	sub	sp, #88	; 0x58
 800d700:	4614      	mov	r4, r2
 800d702:	461d      	mov	r5, r3
 800d704:	da07      	bge.n	800d716 <__swhatbuf_r+0x22>
 800d706:	2300      	movs	r3, #0
 800d708:	602b      	str	r3, [r5, #0]
 800d70a:	89b3      	ldrh	r3, [r6, #12]
 800d70c:	061a      	lsls	r2, r3, #24
 800d70e:	d410      	bmi.n	800d732 <__swhatbuf_r+0x3e>
 800d710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d714:	e00e      	b.n	800d734 <__swhatbuf_r+0x40>
 800d716:	466a      	mov	r2, sp
 800d718:	f000 f902 	bl	800d920 <_fstat_r>
 800d71c:	2800      	cmp	r0, #0
 800d71e:	dbf2      	blt.n	800d706 <__swhatbuf_r+0x12>
 800d720:	9a01      	ldr	r2, [sp, #4]
 800d722:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d726:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d72a:	425a      	negs	r2, r3
 800d72c:	415a      	adcs	r2, r3
 800d72e:	602a      	str	r2, [r5, #0]
 800d730:	e7ee      	b.n	800d710 <__swhatbuf_r+0x1c>
 800d732:	2340      	movs	r3, #64	; 0x40
 800d734:	2000      	movs	r0, #0
 800d736:	6023      	str	r3, [r4, #0]
 800d738:	b016      	add	sp, #88	; 0x58
 800d73a:	bd70      	pop	{r4, r5, r6, pc}

0800d73c <__smakebuf_r>:
 800d73c:	898b      	ldrh	r3, [r1, #12]
 800d73e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d740:	079d      	lsls	r5, r3, #30
 800d742:	4606      	mov	r6, r0
 800d744:	460c      	mov	r4, r1
 800d746:	d507      	bpl.n	800d758 <__smakebuf_r+0x1c>
 800d748:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d74c:	6023      	str	r3, [r4, #0]
 800d74e:	6123      	str	r3, [r4, #16]
 800d750:	2301      	movs	r3, #1
 800d752:	6163      	str	r3, [r4, #20]
 800d754:	b002      	add	sp, #8
 800d756:	bd70      	pop	{r4, r5, r6, pc}
 800d758:	ab01      	add	r3, sp, #4
 800d75a:	466a      	mov	r2, sp
 800d75c:	f7ff ffca 	bl	800d6f4 <__swhatbuf_r>
 800d760:	9900      	ldr	r1, [sp, #0]
 800d762:	4605      	mov	r5, r0
 800d764:	4630      	mov	r0, r6
 800d766:	f7ff f987 	bl	800ca78 <_malloc_r>
 800d76a:	b948      	cbnz	r0, 800d780 <__smakebuf_r+0x44>
 800d76c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d770:	059a      	lsls	r2, r3, #22
 800d772:	d4ef      	bmi.n	800d754 <__smakebuf_r+0x18>
 800d774:	f023 0303 	bic.w	r3, r3, #3
 800d778:	f043 0302 	orr.w	r3, r3, #2
 800d77c:	81a3      	strh	r3, [r4, #12]
 800d77e:	e7e3      	b.n	800d748 <__smakebuf_r+0xc>
 800d780:	4b0d      	ldr	r3, [pc, #52]	; (800d7b8 <__smakebuf_r+0x7c>)
 800d782:	62b3      	str	r3, [r6, #40]	; 0x28
 800d784:	89a3      	ldrh	r3, [r4, #12]
 800d786:	6020      	str	r0, [r4, #0]
 800d788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d78c:	81a3      	strh	r3, [r4, #12]
 800d78e:	9b00      	ldr	r3, [sp, #0]
 800d790:	6163      	str	r3, [r4, #20]
 800d792:	9b01      	ldr	r3, [sp, #4]
 800d794:	6120      	str	r0, [r4, #16]
 800d796:	b15b      	cbz	r3, 800d7b0 <__smakebuf_r+0x74>
 800d798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d79c:	4630      	mov	r0, r6
 800d79e:	f000 f8d1 	bl	800d944 <_isatty_r>
 800d7a2:	b128      	cbz	r0, 800d7b0 <__smakebuf_r+0x74>
 800d7a4:	89a3      	ldrh	r3, [r4, #12]
 800d7a6:	f023 0303 	bic.w	r3, r3, #3
 800d7aa:	f043 0301 	orr.w	r3, r3, #1
 800d7ae:	81a3      	strh	r3, [r4, #12]
 800d7b0:	89a0      	ldrh	r0, [r4, #12]
 800d7b2:	4305      	orrs	r5, r0
 800d7b4:	81a5      	strh	r5, [r4, #12]
 800d7b6:	e7cd      	b.n	800d754 <__smakebuf_r+0x18>
 800d7b8:	0800d54d 	.word	0x0800d54d

0800d7bc <_malloc_usable_size_r>:
 800d7bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7c0:	1f18      	subs	r0, r3, #4
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	bfbc      	itt	lt
 800d7c6:	580b      	ldrlt	r3, [r1, r0]
 800d7c8:	18c0      	addlt	r0, r0, r3
 800d7ca:	4770      	bx	lr

0800d7cc <_raise_r>:
 800d7cc:	291f      	cmp	r1, #31
 800d7ce:	b538      	push	{r3, r4, r5, lr}
 800d7d0:	4604      	mov	r4, r0
 800d7d2:	460d      	mov	r5, r1
 800d7d4:	d904      	bls.n	800d7e0 <_raise_r+0x14>
 800d7d6:	2316      	movs	r3, #22
 800d7d8:	6003      	str	r3, [r0, #0]
 800d7da:	f04f 30ff 	mov.w	r0, #4294967295
 800d7de:	bd38      	pop	{r3, r4, r5, pc}
 800d7e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d7e2:	b112      	cbz	r2, 800d7ea <_raise_r+0x1e>
 800d7e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d7e8:	b94b      	cbnz	r3, 800d7fe <_raise_r+0x32>
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	f000 f830 	bl	800d850 <_getpid_r>
 800d7f0:	462a      	mov	r2, r5
 800d7f2:	4601      	mov	r1, r0
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7fa:	f000 b817 	b.w	800d82c <_kill_r>
 800d7fe:	2b01      	cmp	r3, #1
 800d800:	d00a      	beq.n	800d818 <_raise_r+0x4c>
 800d802:	1c59      	adds	r1, r3, #1
 800d804:	d103      	bne.n	800d80e <_raise_r+0x42>
 800d806:	2316      	movs	r3, #22
 800d808:	6003      	str	r3, [r0, #0]
 800d80a:	2001      	movs	r0, #1
 800d80c:	e7e7      	b.n	800d7de <_raise_r+0x12>
 800d80e:	2400      	movs	r4, #0
 800d810:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d814:	4628      	mov	r0, r5
 800d816:	4798      	blx	r3
 800d818:	2000      	movs	r0, #0
 800d81a:	e7e0      	b.n	800d7de <_raise_r+0x12>

0800d81c <raise>:
 800d81c:	4b02      	ldr	r3, [pc, #8]	; (800d828 <raise+0xc>)
 800d81e:	4601      	mov	r1, r0
 800d820:	6818      	ldr	r0, [r3, #0]
 800d822:	f7ff bfd3 	b.w	800d7cc <_raise_r>
 800d826:	bf00      	nop
 800d828:	20000010 	.word	0x20000010

0800d82c <_kill_r>:
 800d82c:	b538      	push	{r3, r4, r5, lr}
 800d82e:	4d07      	ldr	r5, [pc, #28]	; (800d84c <_kill_r+0x20>)
 800d830:	2300      	movs	r3, #0
 800d832:	4604      	mov	r4, r0
 800d834:	4608      	mov	r0, r1
 800d836:	4611      	mov	r1, r2
 800d838:	602b      	str	r3, [r5, #0]
 800d83a:	f7f6 f9af 	bl	8003b9c <_kill>
 800d83e:	1c43      	adds	r3, r0, #1
 800d840:	d102      	bne.n	800d848 <_kill_r+0x1c>
 800d842:	682b      	ldr	r3, [r5, #0]
 800d844:	b103      	cbz	r3, 800d848 <_kill_r+0x1c>
 800d846:	6023      	str	r3, [r4, #0]
 800d848:	bd38      	pop	{r3, r4, r5, pc}
 800d84a:	bf00      	nop
 800d84c:	20000628 	.word	0x20000628

0800d850 <_getpid_r>:
 800d850:	f7f6 b99c 	b.w	8003b8c <_getpid>

0800d854 <__sread>:
 800d854:	b510      	push	{r4, lr}
 800d856:	460c      	mov	r4, r1
 800d858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d85c:	f000 f894 	bl	800d988 <_read_r>
 800d860:	2800      	cmp	r0, #0
 800d862:	bfab      	itete	ge
 800d864:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d866:	89a3      	ldrhlt	r3, [r4, #12]
 800d868:	181b      	addge	r3, r3, r0
 800d86a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d86e:	bfac      	ite	ge
 800d870:	6563      	strge	r3, [r4, #84]	; 0x54
 800d872:	81a3      	strhlt	r3, [r4, #12]
 800d874:	bd10      	pop	{r4, pc}

0800d876 <__swrite>:
 800d876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d87a:	461f      	mov	r7, r3
 800d87c:	898b      	ldrh	r3, [r1, #12]
 800d87e:	05db      	lsls	r3, r3, #23
 800d880:	4605      	mov	r5, r0
 800d882:	460c      	mov	r4, r1
 800d884:	4616      	mov	r6, r2
 800d886:	d505      	bpl.n	800d894 <__swrite+0x1e>
 800d888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d88c:	2302      	movs	r3, #2
 800d88e:	2200      	movs	r2, #0
 800d890:	f000 f868 	bl	800d964 <_lseek_r>
 800d894:	89a3      	ldrh	r3, [r4, #12]
 800d896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d89a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d89e:	81a3      	strh	r3, [r4, #12]
 800d8a0:	4632      	mov	r2, r6
 800d8a2:	463b      	mov	r3, r7
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8aa:	f000 b817 	b.w	800d8dc <_write_r>

0800d8ae <__sseek>:
 800d8ae:	b510      	push	{r4, lr}
 800d8b0:	460c      	mov	r4, r1
 800d8b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8b6:	f000 f855 	bl	800d964 <_lseek_r>
 800d8ba:	1c43      	adds	r3, r0, #1
 800d8bc:	89a3      	ldrh	r3, [r4, #12]
 800d8be:	bf15      	itete	ne
 800d8c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800d8c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d8c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d8ca:	81a3      	strheq	r3, [r4, #12]
 800d8cc:	bf18      	it	ne
 800d8ce:	81a3      	strhne	r3, [r4, #12]
 800d8d0:	bd10      	pop	{r4, pc}

0800d8d2 <__sclose>:
 800d8d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8d6:	f000 b813 	b.w	800d900 <_close_r>
	...

0800d8dc <_write_r>:
 800d8dc:	b538      	push	{r3, r4, r5, lr}
 800d8de:	4d07      	ldr	r5, [pc, #28]	; (800d8fc <_write_r+0x20>)
 800d8e0:	4604      	mov	r4, r0
 800d8e2:	4608      	mov	r0, r1
 800d8e4:	4611      	mov	r1, r2
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	602a      	str	r2, [r5, #0]
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	f7f6 f98d 	bl	8003c0a <_write>
 800d8f0:	1c43      	adds	r3, r0, #1
 800d8f2:	d102      	bne.n	800d8fa <_write_r+0x1e>
 800d8f4:	682b      	ldr	r3, [r5, #0]
 800d8f6:	b103      	cbz	r3, 800d8fa <_write_r+0x1e>
 800d8f8:	6023      	str	r3, [r4, #0]
 800d8fa:	bd38      	pop	{r3, r4, r5, pc}
 800d8fc:	20000628 	.word	0x20000628

0800d900 <_close_r>:
 800d900:	b538      	push	{r3, r4, r5, lr}
 800d902:	4d06      	ldr	r5, [pc, #24]	; (800d91c <_close_r+0x1c>)
 800d904:	2300      	movs	r3, #0
 800d906:	4604      	mov	r4, r0
 800d908:	4608      	mov	r0, r1
 800d90a:	602b      	str	r3, [r5, #0]
 800d90c:	f7f6 f999 	bl	8003c42 <_close>
 800d910:	1c43      	adds	r3, r0, #1
 800d912:	d102      	bne.n	800d91a <_close_r+0x1a>
 800d914:	682b      	ldr	r3, [r5, #0]
 800d916:	b103      	cbz	r3, 800d91a <_close_r+0x1a>
 800d918:	6023      	str	r3, [r4, #0]
 800d91a:	bd38      	pop	{r3, r4, r5, pc}
 800d91c:	20000628 	.word	0x20000628

0800d920 <_fstat_r>:
 800d920:	b538      	push	{r3, r4, r5, lr}
 800d922:	4d07      	ldr	r5, [pc, #28]	; (800d940 <_fstat_r+0x20>)
 800d924:	2300      	movs	r3, #0
 800d926:	4604      	mov	r4, r0
 800d928:	4608      	mov	r0, r1
 800d92a:	4611      	mov	r1, r2
 800d92c:	602b      	str	r3, [r5, #0]
 800d92e:	f7f6 f994 	bl	8003c5a <_fstat>
 800d932:	1c43      	adds	r3, r0, #1
 800d934:	d102      	bne.n	800d93c <_fstat_r+0x1c>
 800d936:	682b      	ldr	r3, [r5, #0]
 800d938:	b103      	cbz	r3, 800d93c <_fstat_r+0x1c>
 800d93a:	6023      	str	r3, [r4, #0]
 800d93c:	bd38      	pop	{r3, r4, r5, pc}
 800d93e:	bf00      	nop
 800d940:	20000628 	.word	0x20000628

0800d944 <_isatty_r>:
 800d944:	b538      	push	{r3, r4, r5, lr}
 800d946:	4d06      	ldr	r5, [pc, #24]	; (800d960 <_isatty_r+0x1c>)
 800d948:	2300      	movs	r3, #0
 800d94a:	4604      	mov	r4, r0
 800d94c:	4608      	mov	r0, r1
 800d94e:	602b      	str	r3, [r5, #0]
 800d950:	f7f6 f993 	bl	8003c7a <_isatty>
 800d954:	1c43      	adds	r3, r0, #1
 800d956:	d102      	bne.n	800d95e <_isatty_r+0x1a>
 800d958:	682b      	ldr	r3, [r5, #0]
 800d95a:	b103      	cbz	r3, 800d95e <_isatty_r+0x1a>
 800d95c:	6023      	str	r3, [r4, #0]
 800d95e:	bd38      	pop	{r3, r4, r5, pc}
 800d960:	20000628 	.word	0x20000628

0800d964 <_lseek_r>:
 800d964:	b538      	push	{r3, r4, r5, lr}
 800d966:	4d07      	ldr	r5, [pc, #28]	; (800d984 <_lseek_r+0x20>)
 800d968:	4604      	mov	r4, r0
 800d96a:	4608      	mov	r0, r1
 800d96c:	4611      	mov	r1, r2
 800d96e:	2200      	movs	r2, #0
 800d970:	602a      	str	r2, [r5, #0]
 800d972:	461a      	mov	r2, r3
 800d974:	f7f6 f98c 	bl	8003c90 <_lseek>
 800d978:	1c43      	adds	r3, r0, #1
 800d97a:	d102      	bne.n	800d982 <_lseek_r+0x1e>
 800d97c:	682b      	ldr	r3, [r5, #0]
 800d97e:	b103      	cbz	r3, 800d982 <_lseek_r+0x1e>
 800d980:	6023      	str	r3, [r4, #0]
 800d982:	bd38      	pop	{r3, r4, r5, pc}
 800d984:	20000628 	.word	0x20000628

0800d988 <_read_r>:
 800d988:	b538      	push	{r3, r4, r5, lr}
 800d98a:	4d07      	ldr	r5, [pc, #28]	; (800d9a8 <_read_r+0x20>)
 800d98c:	4604      	mov	r4, r0
 800d98e:	4608      	mov	r0, r1
 800d990:	4611      	mov	r1, r2
 800d992:	2200      	movs	r2, #0
 800d994:	602a      	str	r2, [r5, #0]
 800d996:	461a      	mov	r2, r3
 800d998:	f7f6 f91a 	bl	8003bd0 <_read>
 800d99c:	1c43      	adds	r3, r0, #1
 800d99e:	d102      	bne.n	800d9a6 <_read_r+0x1e>
 800d9a0:	682b      	ldr	r3, [r5, #0]
 800d9a2:	b103      	cbz	r3, 800d9a6 <_read_r+0x1e>
 800d9a4:	6023      	str	r3, [r4, #0]
 800d9a6:	bd38      	pop	{r3, r4, r5, pc}
 800d9a8:	20000628 	.word	0x20000628

0800d9ac <_init>:
 800d9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ae:	bf00      	nop
 800d9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9b2:	bc08      	pop	{r3}
 800d9b4:	469e      	mov	lr, r3
 800d9b6:	4770      	bx	lr

0800d9b8 <_fini>:
 800d9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ba:	bf00      	nop
 800d9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9be:	bc08      	pop	{r3}
 800d9c0:	469e      	mov	lr, r3
 800d9c2:	4770      	bx	lr
